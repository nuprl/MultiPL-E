language: go_test.go
name: HumanEval_97_multiply
results:
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    \n \
    \   return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp5bmmi553_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp5bmmi553_test.go:43:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    \n \
    \   \n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpmtq24k4a_test.go:44: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpmtq24k4a_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpmtq24k4a_test.go:44: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpmtq24k4a_test.go:44:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpmtq24k4a_test.go:44: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    c := 0\n    for\
    \ i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n    }\n    for i := 0; i\
    \ < len(b); i++ {\n        c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqbncw35_test.go:19:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpeqbncw35_test.go:20:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpeqbncw35_test.go:22:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpeqbncw35_test.go:23:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    result := 0\n    \n    // Calculate the\
    \ unit digits of the two numbers.\n    unitA := a % 10\n    unitB := b % 10\n\
    \    \n    // If the two numbers have the same unit digits, \n    // then return\
    \ the product of the two numbers.\n    if unitA == unitB {\n        return a *\
    \ b\n    }\n    \n    // If the two numbers have different unit digits, \n   \
    \ // then return the product of the unit digits of both numbers.\n    if unitA\
    \ > unitB {\n        unitA -= 10\n    }\n    \n    // If the two numbers have\
    \ different unit digits, \n    // then return the product of the unit digits of\
    \ both numbers.\n    if unitA < unitB {\n        unitB -= 10\n    }\n    \n  \
    \  // Calculate the product of the unit digits of the two numbers.\n    result\
    \ *= unitA\n    result *= unitB\n    \n    // Return the product of the unit digits\
    \ of the two numbers.\n    return result\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9jqv4z25_test.go:69: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9jqv4z25_test.go:69:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9jqv4z25_test.go:69: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9jqv4z25_test.go:69:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9jqv4z25_test.go:69: expected '%!s(int=49)', got '%!s(int=459)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(str(a));\
    \ i++ {\n        c += int(str(a)[i]) * int(str(b)[i])\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1332dyxk_test.go:18:25: undefined: str

    /tmp/tmp1332dyxk_test.go:19:18: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c = a\n        d = b\n\
    \    case a > b:\n        c = b\n        d = a\n    default:\n        c = a\n\
    \        d = b\n    }\n    \n    switch {\n    case c < 10:\n        e = c\n \
    \       f = d\n    case c > 10:\n        e = d\n        f = c\n    default:\n\
    \        e = c\n        f = d\n    }\n    \n    switch {\n    case e < 10:\n \
    \       g = e\n        h = f \n    case e > 10:\n        g = f\n        h = e\n\
    \    default:\n        g = e\n        h = f\n    }\n    \n    switch {\n    case\
    \ g < 10:\n        i = g\n        j = h\n    case g > 10:\n        i = h\n   \
    \     j = g\n    default:\n        i = g\n        j = h\n    }\n    \n    switch\
    \ {\n    case i < 10:\n        k = i\n        l = j\n    case i > 10:\n      \
    \  k = j\n        l = i\n    default:\n        k = i\n        l = j\n    }\n \
    \   \n    switch {\n    case k < 10:\n        m = k\n        n = l\n    case k\
    \ > 10:\n        m = l\n        n = k\n    default:\n        m = k\n        n\
    \ = l\n    }\n    \n    switch {\n    case m < 10:\n        o = m\n        p =\
    \ n\n    case m > 10:\n        o = n\n        p = m\n    default:\n        o =\
    \ m\n        p = n\n    }\n    \n    switch {\n    case o < 10:\n        q = o\n\
    \        r = p\n    case o > 10:\n        q = p\n        r = o\n    default:\n\
    \        q = o\n        r = p\n    }\n    \n    switch {\n    case q < 10:\n \
    \       s = q\n        t = r\n    case q > 10:\n        s = r\n        t = q\n\
    \    default:\n        s = q\n        t = r\n    }\n    \n    switch {\n    case\
    \ s < 10:\n        u = s\n        v = t\n    case s > 10:\n        u = t\n   \
    \     v = s\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4lrf6dox_test.go:157:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074693
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    mult := 0\n    \n    // Iterate through\
    \ each digit in each number\n    for i := 0; i < len(a); i++ {\n        mult *=\
    \ 10\n        mult += a[i]\n    }\n    \n    for i := 0; i < len(b); i++ {\n \
    \       mult *= 10\n        mult += b[i]\n    }\n    \n    return mult\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjodz9pos_test.go:20:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpjodz9pos_test.go:22:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpjodz9pos_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpjodz9pos_test.go:27:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    if a > 0 && b > 0 {\n        mult += a%10\
    \ * b%10\n        \n        a /= 10\n        b /= 10\n    }\n    \n    if a >\
    \ 0 {\n        mult += a%10\n        a /= 10\n    }\n    \n    if b > 0 {\n  \
    \      mult += b%10\n        b /= 10\n    }\n    \n    return mult \n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpj0ih1i7w_test.go:63: expected '%!s(int=16)', got '%!s(int=11)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpj0ih1i7w_test.go:63:\
    \ expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpj0ih1i7w_test.go:63: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpj0ih1i7w_test.go:63:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpj0ih1i7w_test.go:63: expected '%!s(int=42)', got '%!s(int=15)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpj0ih1i7w_test.go:63:\
    \ expected '%!s(int=49)', got '%!s(int=12)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpj0ih1i7w_test.go:63: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    if a > b {\n        a, b = b, a\n    }\n\
    \    \n    switch {\n    case a == 0:\n        return b\n    case b == 0:\n  \
    \      return a\n    case a < 10:\n        mult += a\n    case b < 10:\n     \
    \   mult += b\n    case a < 100:\n        mult += a%10 * b%10\n    case b < 100:\n\
    \        mult += a%10 * b%10\n    case a < 1000:\n        mult += a%100 * b%100\n\
    \    case b < 1000:\n        mult += a%100 * b%100\n    case a < 10000:\n    \
    \    mult += a%1000 * b%1000\n    case b < 10000:\n        mult += a%1000 * b%1000\n\
    \    case a < 100000:\n        mult += a%10000 * b%10000\n    case b < 100000:\n\
    \        mult += a%10000 * b%10000\n    case a < 1000000:\n        mult += a%100000\
    \ * b%100000\n    case b < 1000000:\n        mult += a%100000 * b%100000\n   \
    \ case a < 10000000:\n        mult += a%1000000 * b%1000000\n    case b < 10000000:\n\
    \        mult += a%1000000 * b%1000000\n    case a < 100000000:\n        mult\
    \ += a%10000000 * b%10000000\n    case b < 100000000:\n        mult += a%10000000\
    \ * b%10000000\n    case a < 1000000000:\n        mult += a%100000000 * b%100000000\n\
    \    case b < 1000000000:\n        mult += a%100000000 * b%100000000\n    case\
    \ a < 10000000000:\n        mult += a%1000000000 * b%1000000000\n    case b <\
    \ 10000000000:\n        mult += a%1000000000 * b%1000000000\n    case a < 100000000000:\n\
    \        mult += a%10000000000 * b%10000000000\n    case b < 100000000000:\n \
    \       mult += a%10000000000 * b%10000000000\n    case a < 1000000000000:\n \
    \       mult += a%100000000000 * b%100000000000\n    case b < 1000000000000:\n\
    \        mult += a%100000000000 * b%100000000000\n    case a < 10000000000000:\n\
    \        mult += a%1000000000000 * b%1000000000000\n    case b < 100\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvf1cfvof_test.go:82:17: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074693
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += int(b[i] - '0')*int(a[i] - '0')\n    }\n    return c\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeua0rj_v_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpeua0rj_v_test.go:19:19: invalid operation: cannot index b (variable of
    type int)

    /tmp/tmpeua0rj_v_test.go:19:35: invalid operation: cannot index a (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return 0\n\
    \    }\n    \n    // Calculate the product of their unit digits.\n    product\
    \ := 0\n    \n    // Iterate through each digit in each number.\n    for i :=\
    \ 0; i < len(str(a)); i++ {\n        digit := int(a%10) * int(b%10)\n        product\
    \ += digit\n        a /= 10\n        b /= 10\n    }\n    \n    // Return the product\
    \ of the unit digits.\n    return product\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdr5fiu8x_test.go:25:25: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c = a\n        d = b\n\
    \    case a > b:\n        c = b\n        d = a\n    case a == b:\n        c =\
    \ a\n        d = a\n    }\n    \n    switch {\n    case c < 10:\n        e = c\n\
    \        f = d\n    case c > 10:\n        e = d\n        f = c\n    case c ==\
    \ 10:\n        e = d\n        f = c\n    }\n    \n    switch {\n    case e < 10:\n\
    \        g = e\n        h = f \n    case e > 10:\n        g = f\n        h = e\n\
    \    case e == 10:\n        g = f\n        h = e\n    }\n    \n    switch {\n\
    \    case g < 10:\n        i = g\n        j = h\n    case g > 10:\n        i =\
    \ h\n        j = g\n    case g == 10:\n        i = h\n        j = g\n    }\n \
    \   \n    switch {\n    case i < 10:\n        k = i\n        l = j\n    case i\
    \ > 10:\n        k = j\n        l = i\n    case i == 10:\n        k = j\n    \
    \    l = j\n    }\n    \n    switch {\n    case k < 10:\n        m = k\n     \
    \   n = l\n    case k > 10:\n        m = l\n        n = k\n    case k == 10:\n\
    \        m = l\n        n = l\n    }\n    \n    switch {\n    case m < 10:\n \
    \       o = m\n        p = n\n    case m > 10:\n        o = n\n        p = m\n\
    \    case m == 10:\n        o = n\n        p = n\n    }\n    \n    switch {\n\
    \    case o < 10:\n        q = o\n        r = p\n    case o > 10:\n        q =\
    \ p\n        r = o\n    case o == 10:\n        q = p\n        r = o\n    }\n \
    \   \n    switch {\n    case q < 10:\n        s = q\n        t = r\n    case q\
    \ > 10:\n        s = r\n        t = q\n    case q == 10:\n        s = r\n    \
    \    t = r\n    }\n    \n    switch {\n    case s < 10:\n        v = s\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphq19tf0h_test.go:153:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074693
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    if a > 0 && b >\
    \ 0 {\n        return a * b / 10\n    }\n    return 0\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp8hxa_vwn_test.go:44: expected '%!s(int=16)', got '%!s(int=6097)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp8hxa_vwn_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=53)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp8hxa_vwn_test.go:44: expected '%!s(int=0)', got '%!s(int=373902)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp8hxa_vwn_test.go:44:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp8hxa_vwn_test.go:44: expected '%!s(int=42)', got '%!s(int=509)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp8hxa_vwn_test.go:44:\
    \ expected '%!s(int=49)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    if a > 0 && b > 0 {\n        mult += a%10\
    \ * b%10\n        \n        if a > 9 && b > 9 {\n            mult += a%100 * b%100\n\
    \        }\n    }\n    \n    if a > 0 && b < 0 {\n        mult += a%10 * b\n \
    \   }\n    \n    if a < 0 && b > 0 {\n        mult += a * b%10\n    }\n    \n\
    \    if a < 0 && b < 0 {\n        mult += a * b\n    }\n    \n    return mult\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpsir71fg6_test.go:66: expected '%!s(int=16)', got '%!s(int=82)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpsir71fg6_test.go:66:\
    \ expected '%!s(int=72)', got '%!s(int=34)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpsir71fg6_test.go:66: expected '%!s(int=0)', got '%!s(int=20)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpsir71fg6_test.go:66:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpsir71fg6_test.go:66: expected '%!s(int=42)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpsir71fg6_test.go:66:\
    \ expected '%!s(int=49)', got '%!s(int=68)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := a * b\n    if c < 0 {\n        c *=\
    \ -1\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp7z_7ke_v_test.go:44: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp7z_7ke_v_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp7z_7ke_v_test.go:44: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp7z_7ke_v_test.go:44:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp7z_7ke_v_test.go:44: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp7z_7ke_v_test.go:44:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    mult\
    \ := 0\n    \n    // The first digit of both numbers is multiplied and added to\
    \ the result.\n    mult += a%10 * b%10\n    \n    // The second digit is multiplied\
    \ and added to the result.\n    mult += (a/10)%10 * (b/10)%10\n    \n    // The\
    \ third digit is multiplied and added to the result.\n    mult += (a/100)%10 *\
    \ (b/100)%10\n    \n    // The fourth digit is multiplied and added to the result.\n\
    \    mult += (a/1000)%10 * (b/1000)%10\n    \n    // The fifth digit is multiplied\
    \ and added to the result.\n    mult += (a/10000)%10 * (b/10000)%10\n    \n  \
    \  // The sixth digit is multiplied and added to the result.\n    mult += (a/100000)%10\
    \ * (b/100000)%10\n    \n    // The seventh digit is multiplied and added to the\
    \ result.\n    mult += (a/1000000)%10 * (b/1000000)%10\n    \n    // The eighth\
    \ digit is multiplied and added to the result.\n    mult += (a/10000000)%10 *\
    \ (b/10000000)%10\n    \n    // The ninth digit is multiplied and added to the\
    \ result.\n    mult += (a/100000000)%10 * (b/100000000)%10\n    \n    // The tenth\
    \ digit is multiplied and added to the result.\n    mult += (a/1000000000)%10\
    \ * (b/1000000000)%10\n    \n    // The eleventh digit is multiplied and added\
    \ to the result.\n    mult += (a/10000000000)%10 * (b/10000000000)%10\n    \n\
    \    // The twelfth digit is multiplied and added to the result.\n    mult +=\
    \ (a/100000000000)%10 * (b/100000000000)%10\n    \n    // The thirteenth digit\
    \ is multiplied and added to the result.\n    mult += (a/1000000000000)%10 * (b/1000000000000)%10\n\
    \    \n    // The fourteenth digit is multiplied and added to the result.\n  \
    \  mult += (a/10000000000000)%10 * (b/10000000000000)%10\n    \n    // The fifteenth\
    \ digit is multiplied and added to the result.\n    mult += (a/100000000000000)%10\
    \ * (b/100000000000000)%10\n\nfunc TestMultiply(t *testing.T) {\n  candidate :=\
    \ multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa9o5sq63_test.go:72:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074693
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpth8jtq11_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpth8jtq11_test.go:21:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:22:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpth8jtq11_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpth8jtq11_test.go:21:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:22:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b <\
    \ 0 {\n        return 0\n    }\n    if a > 0 && b > 0 {\n        return a * b\n\
    \    }\n    if a > 0 {\n        return a\n    }\n    if b > 0 {\n        return\
    \ b\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmphafnshg6_test.go:53: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmphafnshg6_test.go:53:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmphafnshg6_test.go:53: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmphafnshg6_test.go:53:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmphafnshg6_test.go:53: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmphafnshg6_test.go:53:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmphafnshg6_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c = a\n        d = b\n\
    \    case a > b:\n        c = b\n        d = a\n    default:\n        c = a\n\
    \        d = b\n    }\n    \n    switch {\n    case c < 10:\n        e = c\n \
    \       f = d\n    case c > 10:\n        e = d\n        f = c\n    default:\n\
    \        e = c\n        f = d\n    }\n    \n    switch {\n    case e < 10:\n \
    \       g = e\n        h = f \n    case e > 10:\n        g = f\n        h = e\n\
    \    default:\n        g = e\n        h = f \n    }\n    \n    switch {\n    case\
    \ g < 10:\n        i = g\n        j = h\n    case g > 10:\n        i = h\n   \
    \     j = g\n    default:\n        i = g\n        j = h\n    }\n    \n    switch\
    \ {\n    case i < 10:\n        k = i\n        l = j\n    case i > 10:\n      \
    \  k = j\n        l = i\n    default:\n        k = i\n        l = j\n    }\n \
    \   \n    switch {\n    case k < 10:\n        m = k\n        n = l\n    case k\
    \ > 10:\n        m = l\n        n = k\n    default:\n        m = k\n        n\
    \ = l\n    }\n    \n    switch {\n    case m < 10:\n        o = m\n        p =\
    \ n\n    case m > 10:\n        o = n\n        p = m\n    default:\n        o =\
    \ m\n        p = n\n    }\n    \n    switch {\n    case o < 10:\n        q = o\n\
    \        r = p\n    case o > 10:\n        q = p\n        r = o\n    default:\n\
    \        q = o\n        r = p\n    }\n    \n    switch {\n    case q < 10:\n \
    \       s = q\n        t = r\n    case q > 10:\n        s = r\n        t = q\n\
    \    default:\n        s = q\n        t = r\n    }\n    \n    switch {\n    case\
    \ s < 10:\n        u = s\n        v = t\n    case s > 10:\n        u = t\n   \
    \     v = s\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdpg52h0x_test.go:157:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074693
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        if a[i] > 9 {\n            c += int(a[i]) * int(b[i] - '0')\n   \
    \     } else {\n            c += int(a[i]) * int(b[i])\n        }\n    }\n   \
    \ return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6t9604z3_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp6t9604z3_test.go:19:13: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp6t9604z3_test.go:20:23: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp6t9604z3_test.go:20:35: invalid operation: cannot index b (variable of
    type int)

    /tmp/tmp6t9604z3_test.go:22:23: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp6t9604z3_test.go:22:35: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    mult := 0\n    \n    for i := 0; i < 10;\
    \ i++ {\n        mult += a%10 * b%10\n        a = a/10\n        b = b/10\n   \
    \ }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpei8pr_gd_test.go:48: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpei8pr_gd_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpei8pr_gd_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpei8pr_gd_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpei8pr_gd_test.go:48: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpei8pr_gd_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074695
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < 10; i++ {\n\
    \        c += a%10 * b%10\n        a /= 10\n        b /= 10\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpm7i6ff81_test.go:46: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpm7i6ff81_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpm7i6ff81_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpm7i6ff81_test.go:46:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpm7i6ff81_test.go:46: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpm7i6ff81_test.go:46:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074695
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    \n \
    \   return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp5bmmi553_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp5bmmi553_test.go:43:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    for i := 0; i < len(str(a)); i++ {\n  \
    \      mult *= 10\n        mult += int(a[i]) - '0'\n    }\n    \n    for i :=\
    \ 0; i < len(str(b)); i++ {\n        mult *= 10\n        mult += int(b[i]) - '0'\n\
    \    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp23vd7odx_test.go:23:25: undefined: str

    /tmp/tmp23vd7odx_test.go:25:22: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp23vd7odx_test.go:28:25: undefined: str

    /tmp/tmp23vd7odx_test.go:30:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074695
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c = a\n        d = b\n\
    \    case a > b:\n        c = b\n        d = a\n    case a == b:\n        c =\
    \ a\n        d = a\n    }\n    \n    switch {\n    case c < 10:\n        e = c\n\
    \        f = d\n    case c > 10:\n        e = d\n        f = c\n    case c ==\
    \ 10:\n        e = d\n        f = c\n    }\n    \n    switch {\n    case e < 10:\n\
    \        g = e\n        h = f \n    case e > 10:\n        g = f\n        h = e\n\
    \    case e == 10:\n        g = f\n        h = e\n    }\n    \n    switch {\n\
    \    case g < 10:\n        i = g\n        j = h\n    case g > 10:\n        i =\
    \ h\n        j = g\n    case g == 10:\n        i = h\n        j = g\n    }\n \
    \   \n    switch {\n    case i < 10:\n        k = i\n        l = j\n    case i\
    \ > 10:\n        k = j\n        l = i\n    case i == 10:\n        k = j\n    \
    \    l = i\n    }\n    \n    switch {\n    case k < 10:\n        m = k\n     \
    \   n = l\n    case k > 10:\n        m = l\n        n = k\n    case k == 10:\n\
    \        m = l\n        n = k\n    }\n    \n    switch {\n    case m < 10:\n \
    \       o = m\n        p = n\n    case m > 10:\n        o = n\n        p = m\n\
    \    case m == 10:\n        o = n\n        p = m\n    }\n    \n    switch {\n\
    \    case o < 10:\n        q = o\n        r = p\n    case o > 10:\n        q =\
    \ p\n        r = o\n    case o == 10:\n        q = p\n        r = o\n    }\n \
    \   \n    switch {\n    case q < 10:\n        s = q\n        t = r\n    case q\
    \ > 10:\n        s = r\n        t = q\n    case q == 10:\n        s = r\n    \
    \    t = q\n    }\n    \n    switch {\n    case s < 10:\n        v = s\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe37uj9fk_test.go:153:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n\
    \    if a < 0 {\n        a = -a\n        b = -b\n    }\n    c := a * b\n    if\
    \ c > 9 {\n        return c\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmplrsigrvp_test.go:51: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmplrsigrvp_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmplrsigrvp_test.go:51: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmplrsigrvp_test.go:51:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmplrsigrvp_test.go:51: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmplrsigrvp_test.go:51:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074695
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 0 && b > 0 {\n        return a * b\n    }\n    if a == 0 ||\
    \ b == 0 {\n        return 0\n    }\n    if a > 0 && b < 0 {\n        return multiply(a-1,\
    \ b) + multiply(a, b-1)\n    }\n    if a < 0 && b > 0 {\n        return multiply(a,\
    \ b-1) + multiply(a+1, b)\n    }\n    if a < 0 && b < 0 {\n        return multiply(a+1,\
    \ b) + multiply(a, b+1)\n    }\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwhwe6owe_test.go:35:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074696
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    mult := 0\n    \n\
    \    if a < 0 || b < 0 {\n        fmt.Println(\"Invalid input\")\n        return\
    \ -1\n    }\n    \n    if a > 0 && b > 0 {\n        mult += a%10 * b%10\n    \
    \    \n        if mult > 9 {\n            mult -= 10\n        }\n    }\n    \n\
    \    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpevrv95w6_test.go:56: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpevrv95w6_test.go:56:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpevrv95w6_test.go:56: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpevrv95w6_test.go:56:\
    \ expected '%!s(int=42)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpevrv95w6_test.go:56: expected '%!s(int=49)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074696
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    \n \
    \   return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp5bmmi553_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp5bmmi553_test.go:43:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpth8jtq11_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpth8jtq11_test.go:21:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:22:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := a; i >= 0; i-- {\n\
    \        c += int(b / 10)\n        b = b%10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp8jsz60jb_test.go:45: expected '%!s(int=16)', got '%!s(int=41)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp8jsz60jb_test.go:45:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp8jsz60jb_test.go:45: expected '%!s(int=0)', got '%!s(int=185)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp8jsz60jb_test.go:45:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp8jsz60jb_test.go:45: expected '%!s(int=42)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp8jsz60jb_test.go:45:\
    \ expected '%!s(int=49)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074696
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    c := 0\n    for\
    \ i := 0; i < b; i++ {\n        if a > 9 {\n            c += a%10 * 10\n     \
    \       a = a/10\n        } else {\n            c += a%10\n            a = a/10\n\
    \        }\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpygj7n8bj_test.go:51: expected '%!s(int=16)', got '%!s(int=121)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpygj7n8bj_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=91)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpygj7n8bj_test.go:51: expected '%!s(int=0)', got '%!s(int=22)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpygj7n8bj_test.go:51:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpygj7n8bj_test.go:51: expected '%!s(int=42)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpygj7n8bj_test.go:51:\
    \ expected '%!s(int=49)', got '%!s(int=71)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074696
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    result := 0\n    \n    if a > 0 && b >\
    \ 0 {\n        \n        // Get the first digit\n        firstDigit := a % 10\n\
    \        \n        // Get the second digit\n        secondDigit := b % 10\n  \
    \      \n        // Get the remainder of the division\n        remainder := a\
    \ / 10\n        \n        // Get the remainder of the division\n        remainder2\
    \ := b / 10\n        \n        // Get the product of the two digits\n        product\
    \ := firstDigit * secondDigit\n        \n        // Get the product of the two\
    \ digits\n        product2 := firstDigit * secondDigit\n        \n        // Get\
    \ the product of the two digits\n        product3 := firstDigit * secondDigit\n\
    \        \n        // Get the product of the two digits\n        product4 := firstDigit\
    \ * secondDigit\n        \n        // Get the product of the two digits\n    \
    \    product5 := firstDigit * secondDigit\n        \n        // Get the product\
    \ of the two digits\n        product6 := firstDigit * secondDigit\n        \n\
    \        // Get the product of the two digits\n        product7 := firstDigit\
    \ * secondDigit\n        \n        // Get the product of the two digits\n    \
    \    product8 := firstDigit * secondDigit\n        \n        // Get the product\
    \ of the two digits\n        product9 := firstDigit * secondDigit\n        \n\
    \        // Get the product of the two digits\n        product10 := firstDigit\
    \ * secondDigit\n        \n        // Get the product of the two digits\n    \
    \    product11 := firstDigit * secondDigit\n        \n        // Get the product\
    \ of the two digits\n        product12 := firstDigit * secondDigit\n        \n\
    \        // Get the product of the two digits\n        product13 := firstDigit\
    \ * secondDigit\n        \n        // Get the product of the two digits\n    \
    \    product14 := firstDigit * secondDigit\n        \n        // Get the product\
    \ of the two digits\n        product15 := firstDigit * secondDigit\n        \n\
    \        // Get the product of the two digits\n        product16 := firstDigit\
    \ * secondDigit\n        \n        // Get the product of the two digits\n    \
    \    product17 := firstDigit * secondDigit\n        \n        // Get the product\
    \ of the two digits\n        product18 := firstDigit * secondDigit\n        \n\
    \        // Get the product of the two digits\n        product19 := firstDigit\
    \ * secondDigit\n        \n        // Get the product of the two digits\n    \
    \    product20 := firstDigit * secondDigit\n        \n        // Get the product\
    \ of the two digits\n        product21 := firstDigit * secondDigit\n        \n\
    \        // Get the product of the two digits\n        product\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphtiqtift_test.go:98:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074695
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    c := 0\n    d\
    \ := a\n    e := b\n    f := a\n    g := b\n    h := a\n    i := b\n    j := a\n\
    \    k := b\n    l := a\n    m := b\n    n := a\n    o := b\n    p := a\n    q\
    \ := b\n    r := a\n    s := b\n    t := a\n    u := b\n    v := a\n    w := b\n\
    \    x := a\n    y := b\n    z := a\n    \n    switch {\n    case a < b:\n   \
    \     c = a\n        d = b\n        e = b - a\n        f = a\n        g = b\n\
    \        h = a - b\n        i = b - a\n        j = b - a\n        k = b - a\n\
    \        l = b - a\n        m = b - a\n        n = b - a\n        o = b - a\n\
    \        p = b - a\n        q = b - a\n        r = b - a\n        s = b - a\n\
    \        t = b - a\n        u = b - a\n        v = b - a\n        w = b - a\n\
    \        x = b - a\n        y = b - a\n        z = b - a\n    case a > b:\n  \
    \      c = b\n        d = a\n        e = a - b\n        f = b\n        g = a -\
    \ b\n        h = a - b\n        i = b - a + 1\n        j = b - a + 1\n       \
    \ k = b - a + 1\n        l = b - a + 1\n        m = b - a + 1\n        n = b -\
    \ a + 1\n        o = b - a + 1\n        p = b - a + 1\n        q = b - a + 1\n\
    \        r = b - a + 1\n        s = b - a + 1\n        t = b - a + 1\n       \
    \ u = b - a + 1\n        v = b - a + 1\n        w = b - a + 1\n        x = b -\
    \ a + 1\n        y = b - a + 1\n        z = b - a + 1\n    }\n    \n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpten7q0cn_test.go:24:5: d declared but not used

    /tmp/tmpten7q0cn_test.go:25:5: e declared but not used

    /tmp/tmpten7q0cn_test.go:26:5: f declared but not used

    /tmp/tmpten7q0cn_test.go:27:5: g declared but not used

    /tmp/tmpten7q0cn_test.go:28:5: h declared but not used

    /tmp/tmpten7q0cn_test.go:29:5: i declared but not used

    /tmp/tmpten7q0cn_test.go:30:5: j declared but not used

    /tmp/tmpten7q0cn_test.go:31:5: k declared but not used

    /tmp/tmpten7q0cn_test.go:32:5: l declared but not used

    /tmp/tmpten7q0cn_test.go:33:5: m declared but not used

    /tmp/tmpten7q0cn_test.go:33:5: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074696
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    mult := 0\n    if\
    \ a > 0 && b > 0 {\n        mult += a % 10 * b / 10\n    }\n    if a > 0 && b\
    \ < 0 {\n        mult += a % 10 * b / 10\n    }\n    if a < 0 && b > 0 {\n   \
    \     mult += a % 10 * b / 10\n    }\n    if a < 0 && b < 0 {\n        mult +=\
    \ a % 10 * b / 10\n    }\n    return mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp20zmq_5y_test.go:54: expected '%!s(int=16)', got '%!s(int=329)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp20zmq_5y_test.go:54:\
    \ expected '%!s(int=72)', got '%!s(int=25)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp20zmq_5y_test.go:54: expected '%!s(int=20)', got '%!s(int=-6)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp20zmq_5y_test.go:54:\
    \ expected '%!s(int=42)', got '%!s(int=40)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp20zmq_5y_test.go:54: expected '%!s(int=49)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074696
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c = a\n        d = b\n\
    \    case a > b:\n        c = b\n        d = a\n    default:\n        c = a\n\
    \        d = b\n    }\n    \n    switch {\n    case c < 10:\n        e = c\n \
    \       f = d\n    case c > 10:\n        e = d\n        f = c\n    default:\n\
    \        e = c\n        f = d\n    }\n    \n    switch {\n    case e < 10:\n \
    \       g = e\n        h = f\n    case e > 10:\n        g = f\n        h = e\n\
    \    default:\n        g = e\n        h = f\n    }\n    \n    switch {\n    case\
    \ g < 10:\n        i = g\n        j = h\n    case g > 10:\n        i = h\n   \
    \     j = g\n    default:\n        i = g\n        j = h\n    }\n    \n    switch\
    \ {\n    case i < 10:\n        k = i\n        l = j\n    case i > 10:\n      \
    \  k = j\n        l = i\n    default:\n        k = i\n        l = j\n    }\n \
    \   \n    switch {\n    case k < 10:\n        m = k\n        n = l\n    case k\
    \ > 10:\n        m = l\n        n = k\n    default:\n        m = k\n        n\
    \ = l\n    }\n    \n    switch {\n    case m < 10:\n        o = m\n        p =\
    \ n\n    case m > 10:\n        o = n\n        p = m\n    default:\n        o =\
    \ m\n        p = n\n    }\n    \n    switch {\n    case o < 10:\n        q = o\n\
    \        r = p\n    case o > 10:\n        q = p\n        r = o\n    default:\n\
    \        q = o\n        r = p\n    }\n    \n    switch {\n    case q < 10:\n \
    \       s = q\n        t = r\n    case q > 10:\n        s = r\n        t = q\n\
    \    default:\n        s = q\n        t = r\n    }\n    \n    switch {\n    case\
    \ s < 10:\n        u = s\n        v = t\n    case s > 10:\n        u = t\n   \
    \     v = \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnq9aeoqh_test.go:157:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074695
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a > 0 && b > 0:\n        c = a / b\n\
    \        d += a % b\n    case a > 0 && b < 0:\n        c = a / -b\n        d +=\
    \ a % -b\n    case a < 0 && b > 0:\n        c = a / b\n        d += a % b\n  \
    \  case a < 0 && b < 0:\n        c = a / -b\n        d += a % -b\n    case a >\
    \ 0 && b == 0:\n        c = a / b\n        d += a % b\n    case a < 0 && b ==\
    \ 0:\n        c = a / -b\n        d += a % -b\n    case a == 0 && b > 0:\n   \
    \     c = a / b\n        d += a % b\n    case a == 0 && b < 0:\n        c = a\
    \ / -b\n        d += a % -b\n    case a == 0 && b == 0:\n        c = a / b\n \
    \       d += a % b\n    case a > 0 && b > 0:\n        c = a / b\n        e +=\
    \ a % b\n    case a > 0 && b < 0:\n        c = a / -b\n        e += a % -b\n \
    \   case a < 0 && b > 0:\n        c = a / b\n        e += a % b\n    case a <\
    \ 0 && b < 0:\n        c = a / -b\n        e += a % -b\n    case a > 0 && b ==\
    \ 0:\n        c = a / b\n        e += a % b\n    case a < 0 && b == 0:\n     \
    \   c = a / -b\n        e += a % -b\n    case a == 0 && b > 0:\n        c = a\
    \ / b\n        e += a % b\n    case a == 0 && b < 0:\n        c = a / -b\n   \
    \     e += a % -b\n    case a == 0 && b == 0:\n        c = a / b\n        e +=\
    \ a % b\n    case a > 0 && b > 0:\n        c = a / b\n        f += a % b\n   \
    \ case a > 0 && b < 0:\n        c = a / -b\n        f += a % -b\n    case a <\
    \ 0 && b > 0:\n        c = a / b\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph9_jbuv8_test.go:106:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074696
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n\
    \    return multiply(b, a%b)\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmptkjlne1x_test.go:43: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmptkjlne1x_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmptkjlne1x_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmptkjlne1x_test.go:43:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmptkjlne1x_test.go:43: expected '%!s(int=42)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmptkjlne1x_test.go:43:\
    \ expected '%!s(int=49)', got '%!s(int=1)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmptkjlne1x_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074697
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw_63co1q_test.go:43: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw_63co1q_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpw_63co1q_test.go:43: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpw_63co1q_test.go:43:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpw_63co1q_test.go:43: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074697
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(str(a));\
    \ i++ {\n        c += int(str(a)[i]) * int(str(b)[i])\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1332dyxk_test.go:18:25: undefined: str

    /tmp/tmp1332dyxk_test.go:19:18: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    mult\
    \ := 0\n    \n    if a > b {\n        a, b = b, a\n    }\n    \n    a /= 10\n\
    \    b /= 10\n    \n    for i := 0; i < a; i++ {\n        mult *= 10\n    }\n\
    \    \n    for i := 0; i < b; i++ {\n        mult += i\n    }\n    \n    return\
    \ mult % 10\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmphb7hcxvd_test.go:65: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmphb7hcxvd_test.go:65:\
    \ expected '%!s(int=72)', got '%!s(int=1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmphb7hcxvd_test.go:65: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmphb7hcxvd_test.go:65:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmphb7hcxvd_test.go:65: expected '%!s(int=42)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmphb7hcxvd_test.go:65:\
    \ expected '%!s(int=49)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074697
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    \n \
    \   return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp5bmmi553_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp5bmmi553_test.go:43:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n   \
    \     b = -b\n    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    if b\
    \ > 9 {\n        b = b - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n\
    \    }\n    if b > 9 {\n        b = b - 10\n    }\n    \n    if a > 9 {\n    \
    \    a = a - 10\n    }\n    if b > 9 {\n        b = b - 10\n    }\n    \n    if\
    \ a > 9 {\n        a = a - 10\n    }\n    if b > 9 {\n        b = b - 10\n   \
    \ }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    if b > 9 {\n       \
    \ b = b - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    if b\
    \ > 9 {\n        b = b - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n\
    \    }\n    if b > 9 {\n        b = b - 10\n    }\n    \n    if a > 9 {\n    \
    \    a = a - 10\n    }\n    if b > 9 {\n        b = b - 10\n    }\n    \n    if\
    \ a > 9 {\n        a = a - 10\n    }\n    if b > 9 {\n        b = b - 10\n   \
    \ }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    if b > 9 {\n       \
    \ b = b - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    if b\
    \ > 9 {\n        b = b - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n\
    \    }\n    if b > 9 {\n        b = b - 10\n    }\n    \n    if a > 9 {\n    \
    \    a = a - 10\n    }\n    if b > 9 {\n        b = b - 10\n    }\n    \n    if\
    \ a > 9 {\n        a = a - 10\n    }\n    if b > 9 {\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7_abu3jo_test.go:144:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074696
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpth8jtq11_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpth8jtq11_test.go:21:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:22:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := a * b\n    d := c / 10\n    e := c\
    \ % 10\n    return d*10 + e\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpbtwniudu_test.go:43: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpbtwniudu_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpbtwniudu_test.go:43: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpbtwniudu_test.go:43:\
    \ expected '%!s(int=20)', got '%!s(int=-210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpbtwniudu_test.go:43: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpbtwniudu_test.go:43:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074697
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return 0\n    }\n    \n    mult := 0\n    \n    for\
    \ i := 0; i < len(a); i++ {\n        mult *= 10\n        mult += a[i]\n    }\n\
    \    \n    for i := 0; i < len(b); i++ {\n        mult *= 10\n        mult +=\
    \ b[i]\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n\
    \  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp35nte492_test.go:24:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp35nte492_test.go:26:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp35nte492_test.go:29:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp35nte492_test.go:31:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074696
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    product := 0\n    \n    if a > 0 && b > 0 {\n        product\
    \ = a / b\n    }\n    \n    if a > 0 && b < 0 {\n        product = product * -1\n\
    \    }\n    \n    if a < 0 && b > 0 {\n        product = product * -1\n    }\n\
    \    \n    if a < 0 && b < 0 {\n        product = product * -1\n    }\n    \n\
    \    return product\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpvoteno1z_test.go:62: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpvoteno1z_test.go:62:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpvoteno1z_test.go:62: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpvoteno1z_test.go:62:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpvoteno1z_test.go:62: expected '%!s(int=42)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpvoteno1z_test.go:62:\
    \ expected '%!s(int=49)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074697
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    result := 0\n    \n    // Calculate the\
    \ unit digit of the product of their digits.\n    unit := a / 10\n    \n    //\
    \ Calculate the remainder of the product of their digits.\n    remainder := a\
    \ % 10\n    \n    // Calculate the unit digit of the product of their digits.\n\
    \    unit2 := b / 10\n    \n    // Calculate the remainder of the product of their\
    \ digits.\n    remainder2 := b % 10\n    \n    // Calculate the product of their\
    \ unit digits.\n    product = unit * unit2\n    \n    // Calculate the product\
    \ of their remainder digits.\n    product2 = product * remainder\n    \n    //\
    \ Calculate the product of their remainder digits.\n    product3 = product2 *\
    \ remainder2\n    \n    // Return the product of their unit digits.\n    return\
    \ product3\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmposogxa37_test.go:17:5: result declared but not used

    /tmp/tmposogxa37_test.go:32:5: undefined: product

    /tmp/tmposogxa37_test.go:35:5: undefined: product2

    /tmp/tmposogxa37_test.go:35:16: undefined: product

    /tmp/tmposogxa37_test.go:38:5: undefined: product3

    /tmp/tmposogxa37_test.go:38:16: undefined: product2

    /tmp/tmposogxa37_test.go:41:12: undefined: product3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074696
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return 0\n    }\n    c := 0\n    d := 0\n    if a >\
    \ 0 {\n        c = a / 10\n        d = a % 10\n    }\n    if b > 0 {\n       \
    \ c = b / 10\n        d = b % 10\n    }\n    return c * 10 + d\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpzs8z8b4y_test.go:54: expected '%!s(int=16)', got '%!s(int=412)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpzs8z8b4y_test.go:54:\
    \ expected '%!s(int=72)', got '%!s(int=28)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpzs8z8b4y_test.go:54: expected '%!s(int=0)', got '%!s(int=1851)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpzs8z8b4y_test.go:54:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpzs8z8b4y_test.go:54: expected '%!s(int=42)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpzs8z8b4y_test.go:54:\
    \ expected '%!s(int=49)', got '%!s(int=27)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpzs8z8b4y_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074697
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(str(a));\
    \ i++ {\n        c += int(str(a)[i]) * int(str(b)[i])\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1332dyxk_test.go:18:25: undefined: str

    /tmp/tmp1332dyxk_test.go:19:18: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    mult := 0\n    mult += a%10 * b%10\n  \
    \  mult += a%10 * b%10\n    mult += a%10 * b%10\n    mult += a%10 * b%10\n   \
    \ mult += a%10 * b%10\n    mult += a%10 * b%10\n    mult += a%10 * b%10\n    mult\
    \ += a%10 * b%10\n    mult += a%10 * b%10\n    mult += a%10 * b%10\n    mult +=\
    \ a%10 * b%10\n    mult += a%10 * b%10\n    mult += a%10 * b%10\n    mult += a%10\
    \ * b%10\n    mult += a%10 * b%10\n    mult += a%10 * b%10\n    mult += a%10 *\
    \ b%10\n    mult += a%10 * b%10\n    mult += a%10 * b%10\n    mult += a%10 * b%10\n\
    \    mult += a%10 * b%10\n    mult += a%10 * b%10\n    mult += a%10 * b%10\n \
    \   mult += a%10 * b%10\n    mult += a%10 * b%10\n    mult += a%10 * b%10\n  \
    \  mult += a%10 * b%10\n    mult += a%10 * b%10\n    mult += a%10 * b%10\n   \
    \ mult += a%10 * b%10\n    mult += a%10 * b%10\n    mult += a%10 * b%10\n    mult\
    \ += a%10 * b%10\n    mult += a%10 * b%10\n    mult += a%10 * b%10\n    mult +=\
    \ a%10 * b%10\n    mult += a%10 * b%10\n    mult += a%10 * b%10\n    mult += a%10\
    \ * b%10\n    mult += a%10 * b%10\n    mult += a%10 * b%10\n    mult += a%10 *\
    \ b%10\n    mult += a%10 * b%10\n    mult += a%10 * b%10\n    mult += a%10 * b%10\n\
    \    mult += a%10 * b%10\n\nfunc TestMultiply(t *testing.T) {\n  candidate :=\
    \ multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxn7hc7x__test.go:65:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074696
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    mult := 0\n    \n    // Multiply each digit\
    \ of A by each digit of B\n    for i := 0; i < len(a); i++ {\n        mult *=\
    \ 10\n        mult += a[i]\n    }\n    \n    for i := 0; i < len(b); i++ {\n \
    \       mult *= 10\n        mult += b[i]\n    }\n    \n    return mult\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmponutsz7f_test.go:20:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmponutsz7f_test.go:22:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmponutsz7f_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmponutsz7f_test.go:27:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074697
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    \n \
    \   return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp5bmmi553_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp5bmmi553_test.go:43:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := a * b\n    d := c % 10\n    c /= 10\n\
    \    e := c * b\n    f := e % 10\n    e /= 10\n    g := e * b\n    h := g % 10\n\
    \    g /= 10\n    i := g * b\n    j := i % 10\n    i /= 10\n    k := i * b\n \
    \   l := k\n    return l\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp28sqmr21_test.go:18:5: d declared but not used

    /tmp/tmp28sqmr21_test.go:21:5: f declared but not used

    /tmp/tmp28sqmr21_test.go:24:5: h declared but not used

    /tmp/tmp28sqmr21_test.go:27:5: j declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074697
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n\
    \    return multiply(a, b/10)*10 + a%10\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmper_yq9zl_test.go:43: expected '%!s(int=16)', got '%!s(int=148888)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmper_yq9zl_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=1999)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmper_yq9zl_test.go:43: expected '%!s(int=0)', got '%!s(int=20200000)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmper_yq9zl_test.go:43:\
    \ expected '%!s(int=20)', got '%!s(int=1444)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmper_yq9zl_test.go:43: expected '%!s(int=42)', got '%!s(int=7666)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmper_yq9zl_test.go:43:\
    \ expected '%!s(int=49)', got '%!s(int=1777)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074698
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    \n \
    \   \n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpmtq24k4a_test.go:44: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpmtq24k4a_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpmtq24k4a_test.go:44: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpmtq24k4a_test.go:44:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpmtq24k4a_test.go:44: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    result := 0\n    \n    if a > 0 && b >\
    \ 0 {\n        result := a % 10 * b % 10\n    }\n    \n    return result\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkvh5nxcb_test.go:20:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074697
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n\
    \    return multiply(b, a%b)\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmptkjlne1x_test.go:43: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmptkjlne1x_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmptkjlne1x_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmptkjlne1x_test.go:43:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmptkjlne1x_test.go:43: expected '%!s(int=42)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmptkjlne1x_test.go:43:\
    \ expected '%!s(int=49)', got '%!s(int=1)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmptkjlne1x_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074697
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n\
    \    c := a\n    for i := 0; i < b; i++ {\n        c *= 10\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpuei7eam1_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpuei7eam1_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=-7151947981074202624)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpuei7eam1_test.go:47: expected '%!s(int=20)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpuei7eam1_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpuei7eam1_test.go:47: expected '%!s(int=49)', got '%!s(int=-7144815624298954752)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074698
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n\
    \    return multiply(a, b/10)*10 + a%10\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmper_yq9zl_test.go:43: expected '%!s(int=16)', got '%!s(int=148888)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmper_yq9zl_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=1999)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmper_yq9zl_test.go:43: expected '%!s(int=0)', got '%!s(int=20200000)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmper_yq9zl_test.go:43:\
    \ expected '%!s(int=20)', got '%!s(int=1444)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmper_yq9zl_test.go:43: expected '%!s(int=42)', got '%!s(int=7666)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmper_yq9zl_test.go:43:\
    \ expected '%!s(int=49)', got '%!s(int=1777)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074698
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n   \
    \     b = -b\n    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    if b\
    \ > 9 {\n        b = b - 10\n    }\n    \n    if a > 0 {\n        c = a % 10\n\
    \    }\n    if b > 0 {\n        d = b % 10\n    }\n    if c > 0 {\n        e =\
    \ c % 10\n    }\n    if d > 0 {\n        f = d % 10\n    }\n    if e > 0 {\n \
    \       g = e % 10\n    }\n    if f > 0 {\n        h = f % 10\n    }\n    if g\
    \ > 0 {\n        i = g % 10\n    }\n    if h > 0 {\n        j = h % 10\n    }\n\
    \    if i > 0 {\n        k = i % 10\n    }\n    if j > 0 {\n        l = j % 10\n\
    \    }\n    if k > 0 {\n        m = k % 10\n    }\n    if l > 0 {\n        n =\
    \ l % 10\n    }\n    if m > 0 {\n        o = m % 10\n    }\n    if n > 0 {\n \
    \       p = n % 10\n    }\n    if o > 0 {\n        q = o % 10\n    }\n    if p\
    \ > 0 {\n        r = p % 10\n    }\n    if q > 0 {\n        s = q % 10\n    }\n\
    \    if r > 0 {\n        t = r % 10\n    }\n    if s > 0 {\n        u = s % 10\n\
    \    }\n    if t > 0 {\n        v = t % 10\n    }\n    if u > 0 {\n        w =\
    \ u % 10\n    }\n    if v > 0 {\n        x = v % 10\n    }\n    if w > 0 {\n \
    \       y = w % 10\n    }\n    if x > 0 {\n        z = x % 10\n    }\n    \n \
    \   switch {\n    case a == 0:\n        return b\n    case b == 0:\n        return\
    \ a\n    case c == 0:\n        return d * 10 + e\n    case d == 0:\n        return\
    \ f * 10 + g\n    case e == 0:\n        return h * 10 + i\n    case \nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvs_f7wgx_test.go:141:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074697
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpth8jtq11_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpth8jtq11_test.go:21:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:22:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n\
    \    return multiply(a, b / 10)*10 + a % 10\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpjor7_80e_test.go:43: expected '%!s(int=16)', got '%!s(int=148888)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpjor7_80e_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=1999)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpjor7_80e_test.go:43: expected '%!s(int=0)', got '%!s(int=20200000)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpjor7_80e_test.go:43:\
    \ expected '%!s(int=20)', got '%!s(int=1444)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpjor7_80e_test.go:43: expected '%!s(int=42)', got '%!s(int=7666)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpjor7_80e_test.go:43:\
    \ expected '%!s(int=49)', got '%!s(int=1777)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074698
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        if a[i] > 0 {\n            c += a[i] - b[i]\n        }\n    }\n \
    \   return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpau74fj83_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpau74fj83_test.go:19:13: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpau74fj83_test.go:20:19: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpau74fj83_test.go:20:26: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074698
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    if a > 0 && b > 0 {\n        mult += a\
    \ % 10 * b / 10\n    }\n    \n    if a > 0 && b < 0 {\n        mult += a % 10\
    \ * b / 10\n    }\n    \n    if a < 0 && b > 0 {\n        mult += a % 10 * b /\
    \ 10\n    }\n    \n    if a < 0 && b < 0 {\n        mult += a % 10 * b / 10\n\
    \    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp5zz6qgz6_test.go:62: expected '%!s(int=16)', got '%!s(int=329)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp5zz6qgz6_test.go:62:\
    \ expected '%!s(int=72)', got '%!s(int=25)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp5zz6qgz6_test.go:62: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp5zz6qgz6_test.go:62:\
    \ expected '%!s(int=42)', got '%!s(int=40)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp5zz6qgz6_test.go:62: expected '%!s(int=49)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074698
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    c := 0\n    d :=\
    \ 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n\
    \    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q\
    \ := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n\
    \    x := 0\n    y := 0\n    z := 0\n    \n    switch {\n    case a < b:\n   \
    \     c += a\n        d += b\n    case a > b:\n        c += b\n        d += a\n\
    \    }\n    \n    switch {\n    case a < b:\n        e += a\n        f += b\n\
    \    case a > b:\n        e += b\n        f += a\n    }\n    \n    switch {\n\
    \    case a < b:\n        g += a\n        h += b\n    case a > b:\n        g +=\
    \ b\n        h += a\n    }\n    \n    switch {\n    case a < b:\n        i +=\
    \ a\n        j += b\n    case a > b:\n        i += b\n        j += a\n    }\n\
    \    \n    switch {\n    case a < b:\n        k += a\n        l += b\n    case\
    \ a > b:\n        k += b\n        l += a\n    }\n    \n    switch {\n    case\
    \ a < b:\n        m += a\n        n += b\n    case a > b:\n        m += b\n  \
    \      n += a\n    }\n    \n    switch {\n    case a < b:\n        o += a\n  \
    \      p += b\n    case a > b:\n        o += b\n        p += a\n    }\n    \n\
    \    switch {\n    case a < b:\n        q += a\n        r += b\n    case a > b:\n\
    \        q += b\n        r += a\n    }\n    \n    switch {\n    case a < b:\n\
    \        s += a\n        t += b\n    case a > b:\n        s += b\n        t +=\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        u += a\n        v +=\
    \ b\n    case a > b:\n        u += b\n        v += a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        w += a\n        x += b\n    case a > b:\n      \
    \  w \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcdhlvcs7_test.go:139:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074697
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    result := 0\n    \n    if a < 0 || b <\
    \ 0 {\n        fmt.Println(\"Invalid input\")\n        return 0\n    }\n    \n\
    \    if a > 0 && b > 0 {\n        \n        if a > b {\n            \n       \
    \     a -= b\n            \n        }\n        \n        \n        for i := 0;\
    \ i < a; i++ {\n            result *= 10\n        }\n        \n        \n    \
    \    for i := a; i < b; i++ {\n            result *= 10\n            result +=\
    \ 1\n        }\n        \n    }\n    \n    return result\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpx3sqoql6_test.go:68: expected '%!s(int=16)', got '%!s(int=8198552921648689607)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpx3sqoql6_test.go:68:\
    \ expected '%!s(int=72)', got '%!s(int=111111111)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpx3sqoql6_test.go:68: expected '%!s(int=0)', got '%!s(int=8198552921648689607)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpx3sqoql6_test.go:68:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpx3sqoql6_test.go:68: expected '%!s(int=42)', got '%!s(int=3875097279373013447)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpx3sqoql6_test.go:68:\
    \ expected '%!s(int=49)', got '%!s(int=1111111111)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074698
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := a * b\n    if c > 0 {\n        return\
    \ c\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9n1d0cmm_test.go:44: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9n1d0cmm_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp9n1d0cmm_test.go:44: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp9n1d0cmm_test.go:44:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp9n1d0cmm_test.go:44: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp9n1d0cmm_test.go:44:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074699
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    \n \
    \   return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp5bmmi553_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp5bmmi553_test.go:43:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    if a > 0 && b > 0 {\n        mult += a%10\
    \ * b%10\n        \n        if a > 9 && b > 9 {\n            mult += a%100 * b%100\n\
    \            \n            if a > 99 && b > 99 {\n                mult += a%1000\
    \ * b%1000\n            }\n        }\n    }\n    \n    return mult\n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp844rw570_test.go:58: expected '%!s(int=16)', got '%!s(int=1058)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp844rw570_test.go:58:\
    \ expected '%!s(int=72)', got '%!s(int=34)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp844rw570_test.go:58: expected '%!s(int=0)', got '%!s(int=40)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp844rw570_test.go:58:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp844rw570_test.go:58: expected '%!s(int=42)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp844rw570_test.go:58:\
    \ expected '%!s(int=49)', got '%!s(int=68)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074699
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 0 && b > 0 {\n        return a * b\n    }\n    if a == 0 ||\
    \ b == 0 {\n        return 0\n    }\n    if a > 0 && b < 0 {\n        return multiply(a-1,\
    \ b) + multiply(a, b-1)\n    }\n    if a < 0 && b > 0 {\n        return multiply(a,\
    \ b-1) + multiply(a+1, b)\n    }\n    return -1\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmppkxffn9__test.go:55: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmppkxffn9__test.go:55:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmppkxffn9__test.go:55: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmppkxffn9__test.go:55:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmppkxffn9__test.go:55: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmppkxffn9__test.go:55:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074699
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c += a\n        d +=\
    \ b\n    case a > b:\n        c += b\n        d += a\n    case a == 0:\n     \
    \   c += b\n        d += b\n    case b == 0:\n        c += a\n        d += a\n\
    \    }\n    \n    switch {\n    case c < 10:\n        c += 10\n    case c > 9:\n\
    \        c -= 10\n    case c == 10:\n        c += 10\n    case c == 100:\n   \
    \     c -= 10\n    case c == 1000:\n        c += 10\n    case c == 10000:\n  \
    \      c -= 10\n    case c == 100000:\n        c += 10\n    case c == 1000000:\n\
    \        c -= 10\n    case c == 10000000:\n        c += 10\n    case c == 100000000:\n\
    \        c -= 10\n    case c == 1000000000:\n        c += 10\n    case c == 10000000000:\n\
    \        c -= 10\n    case c == 100000000000:\n        c += 10\n    case c ==\
    \ 1000000000000:\n        c -= 10\n    case c == 10000000000000:\n        c +=\
    \ 10\n    case c == 100000000000000:\n        c -= 10\n    case c == 1000000000000000:\n\
    \        c += 10\n    case c == 10000000000000000:\n        c -= 10\n    case\
    \ c == 100000000000000000:\n        c += 10\n    case c == 1000000000000000000:\n\
    \        c -= 10\n    case c == 10000000000000000000:\n        c += 10\n    case\
    \ c == 100000000000000000000: \n        c -= 10\n    case c == 1000000000000000000000:\n\
    \        c += 10\n    case c == 10000000000000000000000:\n        c -= 10\n  \
    \  case c == 100000000000000000000000:\n        c += 10\n    case c == 1000000000000000000000000:\n\
    \        c -= 10\n    case c == 10000000000000000000000000:\n        c += 10\n\
    \    case c == 100000000000000000000000000:\n        c -= 10\n    case c == 1000000000000000000000000000:\n\
    \        c += 10\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7whi65vj_test.go:116:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074698
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 0 && b > 0 {\n        return a * b\n    }\n    if a > 0 {\n\
    \        return a\n    }\n    if b > 0 {\n        return b\n    }\n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpzo6oug0q_test.go:52: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpzo6oug0q_test.go:52:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpzo6oug0q_test.go:52: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpzo6oug0q_test.go:52:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpzo6oug0q_test.go:52: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpzo6oug0q_test.go:52:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpzo6oug0q_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074699
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 0 && b > 0 {\n        return a * b\n    }\n    if a > 0 &&\
    \ b < 0 {\n        return a * (-1 * b)\n    }\n    if a < 0 && b > 0 {\n     \
    \   return -1 * a * b\n    }\n    if a < 0 && b < 0 {\n        return -1 * (-1\
    \ * a)\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpk6pzkuuq_test.go:55: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpk6pzkuuq_test.go:55:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpk6pzkuuq_test.go:55: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpk6pzkuuq_test.go:55:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpk6pzkuuq_test.go:55: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpk6pzkuuq_test.go:55:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074699
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        if a[i] > 0 {\n            c += b[i] * a[i]\n        }\n    }\n \
    \   return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc7wgvx3w_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpc7wgvx3w_test.go:19:13: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpc7wgvx3w_test.go:20:19: invalid operation: cannot index b (variable of
    type int)

    /tmp/tmpc7wgvx3w_test.go:20:26: invalid operation: cannot index a (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074698
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    if a < 0 ||\
    \ b < 0 {\n        return 0\n    }\n    \n    mult := 0\n    \n    if a > 0 &&\
    \ b > 0 {\n        mult += a%10 * b%10\n    }\n    \n    if a > 0 && b < 0 {\n\
    \        mult += a%10 * b%10\n    }\n    \n    if a < 0 && b > 0 {\n        mult\
    \ += a%10 * b%10\n    }\n    \n    if a < 0 && b < 0 {\n        mult += a%10 *\
    \ b%10\n    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n\
    \  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmppi9p3f1x_test.go:63: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmppi9p3f1x_test.go:63:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmppi9p3f1x_test.go:63: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmppi9p3f1x_test.go:63:\
    \ expected '%!s(int=42)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmppi9p3f1x_test.go:63: expected '%!s(int=49)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074699
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c = a\n        d = b\n\
    \    case a > b:\n        c = b\n        d = a\n    default:\n        c = a\n\
    \        d = b\n    }\n    \n    switch {\n    case c < 10:\n        e = c\n \
    \       f = d\n    case c > 10:\n        e = d\n        f = c\n    default:\n\
    \        e = c\n        f = d\n    }\n    \n    switch {\n    case e < 10:\n \
    \       g = e\n        h = f \n    case e > 10:\n        g = f\n        h = e\n\
    \    default:\n        g = e\n        h = f\n    }\n    \n    switch {\n    case\
    \ g < 10:\n        i = g\n        j = h\n    case g > 10:\n        i = h\n   \
    \     j = g\n    default:\n        i = g\n        j = h\n    }\n    \n    switch\
    \ {\n    case i < 10:\n        k = i\n        l = j\n    case i > 10:\n      \
    \  k = j\n        l = i\n    default:\n        k = i\n        l = j\n    }\n \
    \   \n    switch {\n    case k < 10:\n        m = k\n        n = l\n    case k\
    \ > 10:\n        m = l\n        n = k\n    default:\n        m = k\n        n\
    \ = l\n    }\n    \n    switch {\n    case m < 10:\n        o = m\n        p =\
    \ n\n    case m > 10:\n        o = n\n        p = m\n    default:\n        o =\
    \ m\n        p = n\n    }\n    \n    switch {\n    case o < 10:\n        q = o\n\
    \        r = p\n    case o > 10:\n        q = p\n        r = o\n    default:\n\
    \        q = o\n        r = p\n    }\n    \n    switch {\n    case q < 10:\n \
    \       s = q\n        t = r\n    case q > 10:\n        s = r\n        t = q\n\
    \    default:\n        s = q\n        t = r\n    }\n    \n    switch {\n    case\
    \ s < 10:\n        u = s\n        v = t\n    case s > 10:\n        u = t\n   \
    \     v = s\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoxmxl5ex_test.go:158:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074698
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpth8jtq11_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpth8jtq11_test.go:21:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:22:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpth8jtq11_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpth8jtq11_test.go:21:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:22:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    mult := 0\n    for\
    \ i := 0; i < len(a); i++ {\n        mult *= 10\n        mult += a[i]\n    }\n\
    \    for i := 0; i < len(b); i++ {\n        mult *= 10\n        mult += b[i]\n\
    \    }\n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate :=\
    \ multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzn0fdvh_test.go:19:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpvzn0fdvh_test.go:21:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpvzn0fdvh_test.go:23:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpvzn0fdvh_test.go:25:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074699
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    mult := 0\n    \n    // Loop through each\
    \ digit of the two numbers and multiply them together\n    for i := 0; i < len(str(a));\
    \ i++ {\n        mult *= 10\n        mult += int(str(a)[i]) - '0'\n    }\n   \
    \ \n    // Loop through each digit of the second number and multiply them together\n\
    \    for i := 0; i < len(str(b)); i++ {\n        mult *= 10\n        mult += int(str(b)[i])\
    \ - '0'\n    }\n    \n    // Return the product of the two numbers\n    return\
    \ mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppz6luk9x_test.go:20:25: undefined: str

    /tmp/tmppz6luk9x_test.go:22:21: undefined: str

    /tmp/tmppz6luk9x_test.go:26:25: undefined: str

    /tmp/tmppz6luk9x_test.go:28:21: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074699
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(str(a));\
    \ i++ {\n        c += int(str(a)[i]) * int(str(b)[i])\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1332dyxk_test.go:18:25: undefined: str

    /tmp/tmp1332dyxk_test.go:19:18: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    product := 0\n    \n    if a > 0 && b > 0 {\n        product\
    \ += a % 10 * b / 10\n    }\n    \n    if a > 0 && b < 0 {\n        product +=\
    \ a % 10 * b / 10\n    }\n    \n    if a < 0 && b > 0 {\n        product += a\
    \ % 10 * b / 10\n    }\n    \n    if a < 0 && b < 0 {\n        product += a %\
    \ 10 * b / 10\n    }\n    \n    return product\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4xceki55_test.go:62: expected '%!s(int=16)', got '%!s(int=329)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4xceki55_test.go:62:\
    \ expected '%!s(int=72)', got '%!s(int=25)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4xceki55_test.go:62: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4xceki55_test.go:62:\
    \ expected '%!s(int=42)', got '%!s(int=40)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4xceki55_test.go:62: expected '%!s(int=49)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074699
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpth8jtq11_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpth8jtq11_test.go:21:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:22:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    mult\
    \ := 0\n    \n    if a > b {\n        a, b = b, a\n    }\n    \n    for i := 0;\
    \ i < b; i++ {\n        mult *= 10\n        mult += a%10\n        a /= 10\n  \
    \  }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpmvm9e59v_test.go:60: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpmvm9e59v_test.go:60:\
    \ expected '%!s(int=72)', got '%!s(int=8871122557722427392)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpmvm9e59v_test.go:60: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpmvm9e59v_test.go:60:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpmvm9e59v_test.go:60: expected '%!s(int=49)', got '%!s(int=2273292021261139968)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074699
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := a * b\n    if c < 0 {\n        c *=\
    \ -1\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp7z_7ke_v_test.go:44: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp7z_7ke_v_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp7z_7ke_v_test.go:44: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp7z_7ke_v_test.go:44:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp7z_7ke_v_test.go:44: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp7z_7ke_v_test.go:44:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n\
    \    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n\
    \    c := a * b\n    if c < 0 {\n        c = -c\n    }\n    return c\n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9qcraahs_test.go:53: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9qcraahs_test.go:53:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp9qcraahs_test.go:53: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp9qcraahs_test.go:53:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp9qcraahs_test.go:53: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp9qcraahs_test.go:53:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074699
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    result := 0\n    \n    // Calculate the\
    \ unit digit of the product of their unit digits.\n    for i := 0; i < len(a);\
    \ i++ {\n        result *= 10\n        result += a[i]\n    }\n    \n    for i\
    \ := 0; i < len(b); i++ {\n        result *= 10\n        result += b[i]\n    }\n\
    \    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2sb7p047_test.go:20:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp2sb7p047_test.go:22:20: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp2sb7p047_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp2sb7p047_test.go:27:20: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074699
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < 10; i++ {\n\
    \        c += a%10 * b%10\n        a /= 10\n        b /= 10\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpm7i6ff81_test.go:46: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpm7i6ff81_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpm7i6ff81_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpm7i6ff81_test.go:46:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpm7i6ff81_test.go:46: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpm7i6ff81_test.go:46:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074695
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := a; i >= 0; i-- {\n\
    \        c += int(b / 10)\n        b = b % 10\n    }\n    return c\n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmptlhaua1k_test.go:45: expected '%!s(int=16)', got '%!s(int=41)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmptlhaua1k_test.go:45:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmptlhaua1k_test.go:45: expected '%!s(int=0)', got '%!s(int=185)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmptlhaua1k_test.go:45:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmptlhaua1k_test.go:45: expected '%!s(int=42)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmptlhaua1k_test.go:45:\
    \ expected '%!s(int=49)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074700
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(str(a));\
    \ i++ {\n        c += int(str(a)[i]) * int(str(b)[i])\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1332dyxk_test.go:18:25: undefined: str

    /tmp/tmp1332dyxk_test.go:19:18: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n\
    \    return multiply(a, b%10) * 10 + b / 10\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170398\
    \ stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f353?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.multiply(0x94?,\
    \ 0x2?)\n\t/tmp/tmp4p65j7pe_test.go:16 +0x85 fp=0xc0201703a8 sp=0xc0201703a0 pc=0x4ef6e5\n\
    command-line-arguments_test.multiply(0x0?, 0x0?)\n\t/tmp/tmp4p65j7pe_test.go:20\
    \ +0x5e fp=0xc0201703d0 sp=0xc0201703a8 pc=0x4ef6be\ncommand-line-arguments_test.multiply(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4p65j7pe_test.go:20 +0x5e fp=0xc0201703f8 sp=0xc0201703d0 pc=0x4ef6be\n\
    command-line-arguments_test.multiply(0x0?, 0x0?)\n\t/tmp/tmp4p65j7pe_test.go:20\
    \ +0x5e fp=0xc020170420 sp=0xc0201703f8 pc=0x4ef6be\ncommand-line-arguments_test.multiply(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4p65j7pe_test.go:20 +0x5e fp=0xc020170448 sp=0xc020170420 pc=0x4ef6be\n\
    command-line-arguments_test.multiply(0x0?, 0x0?)\n\t/tmp/tmp4p65j7pe_test.go:20\
    \ +0x5e fp=0xc020170470 sp=0xc020170448 pc=0x4ef6be\ncommand-line-arguments_test.multiply(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4p65j7pe_test.go:20 +0x5e fp=0xc020170498 sp=0xc020170470 pc=0x4ef6be\n\
    command-line-arguments_test.multiply(0x0?, 0x0?)\n\t/tmp/tmp4p65j7pe_test.go:20\
    \ +0x5e fp=0xc0201704c0 sp=0xc020170498 pc=0x4ef6be\ncommand-line-arguments_test.multiply(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4p65j7pe_test.go:20 +0x5e fp=0xc0201704e8 sp=0xc0201704c0 pc=0x4ef6be\n\
    command-line-arguments_test.multiply(0x0?, 0x0?)\n\t/tmp/tmp4p65j7pe_test.go:20\
    \ +0x5e fp=0xc020170510 sp=0xc0201704e8 pc=0x4ef6be\ncommand-line-arguments_test.multiply(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4p65j7pe_test.go:20 +0x5e fp=0xc020170538 sp=0xc020170510 pc=0x4ef6be\n\
    command-line-arguments_test.multiply(0x0?, 0x0?)\n\t/tmp/tmp4p65j7pe_test.go:20\
    \ +0x5e fp=0xc020170560 sp=0xc020170538 pc=0x4ef6be\ncommand-line-arguments_test.multiply(0x"
  timestamp: 1660074701
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c = a\n        d = b\n\
    \    case a > b:\n        c = b\n        d = a\n    default:\n        c = a\n\
    \        d = b\n    }\n    \n    switch {\n    case c < 10:\n        e = c\n \
    \       f = d\n    case c > 10:\n        e = d\n        f = c\n    default:\n\
    \        e = c\n        f = d\n    }\n    \n    switch {\n    case e < 10:\n \
    \       g = e\n        h = f \n    case e > 10:\n        g = f\n        h = e\n\
    \    default:\n        g = e\n        h = f\n    }\n    \n    switch {\n    case\
    \ g < 10:\n        i = g\n        j = h\n    case g > 10:\n        i = h\n   \
    \     j = g\n    default:\n        i = g\n        j = h\n    }\n    \n    switch\
    \ {\n    case i < 10:\n        k = i\n        l = j\n    case i > 10:\n      \
    \  k = j\n        l = i\n    default:\n        k = i\n        l = j\n    }\n \
    \   \n    switch {\n    case k < 10:\n        m = k\n        n = l\n    case k\
    \ > 10:\n        m = l\n        n = k\n    default:\n        m = k\n        n\
    \ = l\n    }\n    \n    switch {\n    case m < 10:\n        o = m\n        p =\
    \ n\n    case m > 10:\n        o = n\n        p = m\n    default:\n        o =\
    \ m\n        p = n\n    }\n    \n    switch {\n    case o < 10:\n        q = o\n\
    \        r = p\n    case o > 10:\n        q = p\n        r = o\n    default:\n\
    \        q = o\n        r = p\n    }\n    \n    switch {\n    case q < 10:\n \
    \       s = q\n        t = r\n    case q > 10:\n        s = r\n        t = q\n\
    \    default:\n        s = q\n        t = r\n    }\n    \n    switch {\n    case\
    \ s < 10:\n        u = s\n        v = t\n    case s > 10:\n        u = t\n   \
    \     v = s\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoxmxl5ex_test.go:158:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074698
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c += a\n        d +=\
    \ b\n    case a > b:\n        c += b\n        d += a\n    case a == b:\n     \
    \   c += a\n        d += a\n    }\n    \n    switch {\n    case c < 10:\n    \
    \    e += c\n        f += d\n    case c > 10:\n        e += d\n        f += c\n\
    \    case c == 10:\n        e += c\n        f += c\n    }\n    \n    switch {\n\
    \    case e < 10:\n        g += e\n        h += f\n    case e > 10:\n        g\
    \ += f\n        h += e\n    case e == 10:\n        g += e\n        h += e\n  \
    \  }\n    \n    switch {\n    case g < 10:\n        i += g\n        j += h\n \
    \   case g > 10:\n        i += h\n        j += g\n    case g == 10:\n        i\
    \ += g\n        j += g\n    }\n    \n    switch {\n    case i < 10:\n        k\
    \ += i\n        l += j\n    case i > 10:\n        k += j\n        l += i\n   \
    \ case i == 10:\n        k += i\n        l += i\n    }\n    \n    switch {\n \
    \   case k < 10:\n        m += k\n        n += l\n    case k > 10:\n        m\
    \ += l\n        n += k\n    case k == 10:\n        m += k\n        n += k\n  \
    \  }\n    \n    switch {\n    case m < 10:\n        o += m\n        p += n\n \
    \   case m > 10:\n        o += n\n        p += m\n    case m == 10:\n        o\
    \ += m\n        p += m\n    }\n    \n    switch {\n    case o < 10:\n        q\
    \ += o\n        r += p\n    case o > 10:\n        q += p\n        r += o\n   \
    \ case o == 10:\n        q += o\n        r += \nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_mmlzfph_test.go:136:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074699
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(str(a));\
    \ i++ {\n        c += int(str(a)[i]) * int(str(b)[i])\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1332dyxk_test.go:18:25: undefined: str

    /tmp/tmp1332dyxk_test.go:19:18: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c = a\n        d = b\n\
    \    case a > b:\n        c = b\n        d = a\n    case a == b:\n        c =\
    \ a\n        d = a\n    }\n    \n    switch {\n    case a < b:\n        e = a\n\
    \        f = b\n    case a > b:\n        e = b\n        f = a\n    case a == b:\n\
    \        e = a\n        f = a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      g = a\n        h = b\n    case a > b:\n        g = b\n        h = a\n \
    \   case a == b:\n        g = a\n        h = a\n    }\n    \n    switch {\n  \
    \  case a < b:\n        i = a\n        j = b\n    case a > b:\n        i = b\n\
    \        j = a\n    case a == b:\n        i = a\n        j = a\n    }\n    \n\
    \    switch {\n    case a < b:\n        k = a\n        l = b\n    case a > b:\n\
    \        k = b\n        l = a\n    case a == b:\n        k = a\n        l = a\n\
    \    }\n    \n    switch {\n    case a < b:\n        m = a\n        n = b\n  \
    \  case a > b:\n        m = b\n        n = a\n    case a == b:\n        m = a\n\
    \        n = a\n    }\n    \n    switch {\n    case a < b:\n        o = a\n  \
    \      p = b\n    case a > b:\n        o = b\n        p = a\n    case a == b:\n\
    \        o = a\n        p = a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      q = a\n        r = b\n    case a > b:\n        q = b\n        r = a\n \
    \   case a == b:\n        q = a\n        r = a\n    }\n    \n    switch {\n  \
    \  case a < b:\n        s = a\n        t = b\n    case a > b:\n        s = b\n\
    \        t = a\n    case a == b:\n        s = a\n        t = a\n    }\n    \n\
    \    switch {\n    case a < b:\n        u = a\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppsqy2c0o_test.go:154:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074699
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(str(a));\
    \ i++ {\n        c += int(str(a)[i]) * int(str(b)[i])\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1332dyxk_test.go:18:25: undefined: str

    /tmp/tmp1332dyxk_test.go:19:18: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c, d = a, b\n    case\
    \ a > b:\n        c, d = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      e, f = a, b\n    case a > b:\n        e, f = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        g, h = a, b\n    case a > b:\n        g, h = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        i, j = a, b\n    case\
    \ a > b:\n        i, j = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      k, l = a, b\n    case a > b:\n        k, l = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        m, n = a, b\n    case a > b:\n        m, n = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        o, p = a, b\n    case\
    \ a > b:\n        o, p = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      q, r = a, b\n    case a > b:\n        q, r = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        s, t = a, b\n    case a > b:\n        s, t = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        u, v = a, b\n    case\
    \ a > b:\n        u, v = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      w, x = a, b\n    case a > b:\n        w, x = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        y, z = a, b\n    case a > b:\n        y, z = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        a, b = b, a\n    case\
    \ a > b:\n        a, b = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      a, b = \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_lp053_j_test.go:136:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074699
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // \nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7eojj800_test.go:164:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074699
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if b == 0 {\n        return 0\n    }\n\
    \    c := a\n    for i := 0; i < b; i++ {\n        c *= 10\n        if c > 9 {\n\
    \            c -= 9\n        }\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp5uvlormb_test.go:50: expected '%!s(int=16)', got '%!s(int=4616023172317385405)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp5uvlormb_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=6816808172241103869)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp5uvlormb_test.go:50: expected '%!s(int=0)', got '%!s(int=-7458794204636873846)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp5uvlormb_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp5uvlormb_test.go:50: expected '%!s(int=42)', got '%!s(int=6577009812063866549)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp5uvlormb_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=-213916786863559508)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074700
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n   \
    \     b = -b\n    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    if b\
    \ > 9 {\n        b = b - 10\n    }\n    \n    if a > 0 {\n        c = a / 10\n\
    \    }\n    if b > 0 {\n        d = b / 10\n    }\n    if c > 0 {\n        e =\
    \ c % 10\n    }\n    if d > 0 {\n        f = d % 10\n    }\n    if e > 0 {\n \
    \       g = e % 10\n    }\n    if f > 0 {\n        h = f % 10\n    }\n    if g\
    \ > 0 {\n        i = g % 10\n    }\n    if h > 0 {\n        j = h % 10\n    }\n\
    \    if i > 0 {\n        k = i % 10\n    }\n    if j > 0 {\n        l = j % 10\n\
    \    }\n    if k > 0 {\n        m = k % 10\n    }\n    if l > 0 {\n        n =\
    \ l % 10\n    }\n    if m > 0 {\n        o = m % 10\n    }\n    if n > 0 {\n \
    \       p = n % 10\n    }\n    if o > 0 {\n        q = o % 10\n    }\n    if p\
    \ > 0 {\n        r = p % 10\n    }\n    if q > 0 {\n        s = q % 10\n    }\n\
    \    if r > 0 {\n        t = r % 10\n    }\n    if s > 0 {\n        u = s % 10\n\
    \    }\n    if t > 0 {\n        v = t % 10\n    }\n    if u > 0 {\n        w =\
    \ u % 10\n    }\n    if v > 0 {\n        x = v % 10\n    }\n    if w > 0 {\n \
    \       y = w % 10\n    }\n    if x > 0 {\n        z = x % 10\n    }\n    \n \
    \   if z > 0 {\n        return z * 10 + y * 10 + x * 10 + o * 10 + p * 10 + q\
    \ * 10 + r * 10 + s * 10 + t * 10 + u * 10 + v * 10 + w * 10 + \nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_32iyv8k_test.go:131:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074699
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c = a\n        d = b\n\
    \    case a > b:\n        c = b\n        d = a\n    default:\n        c = a\n\
    \        d = b\n    }\n    \n    switch {\n    case c < 10:\n        e = c\n \
    \       f = d\n    case c > 10:\n        e = d\n        f = c\n    default:\n\
    \        e = c\n        f = d\n    }\n    \n    switch {\n    case e < 10:\n \
    \       g = e\n        h = f\n    case e > 10:\n        g = f\n        h = e\n\
    \    default:\n        g = e\n        h = f\n    }\n    \n    switch {\n    case\
    \ g < 10:\n        i = g\n        j = h\n    case g > 10:\n        i = h\n   \
    \     j = g\n    default:\n        i = g\n        j = h\n    }\n    \n    switch\
    \ {\n    case i < 10:\n        k = i\n        l = j\n    case i > 10:\n      \
    \  k = j\n        l = i\n    default:\n        k = i\n        l = j\n    }\n \
    \   \n    switch {\n    case k < 10:\n        m = k\n        n = l\n    case k\
    \ > 10:\n        m = l\n        n = k\n    default:\n        m = k\n        n\
    \ = l\n    }\n    \n    switch {\n    case m < 10:\n        o = m\n        p =\
    \ n\n    case m > 10:\n        o = n\n        p = m\n    default:\n        o =\
    \ m\n        p = n\n    }\n    \n    switch {\n    case o < 10:\n        q = o\n\
    \        r = p\n    case o > 10:\n        q = p\n        r = o\n    default:\n\
    \        q = o\n        r = p\n    }\n    \n    switch {\n    case q < 10:\n \
    \       s = q\n        t = r\n    case q > 10:\n        s = r\n        t = q\n\
    \    default:\n        s = q\n        t = r\n    }\n    \n    switch {\n    case\
    \ s < 10:\n        u = s\n        v = t\n    case s > 10:\n        u = t\n   \
    \     v = s\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp65uxcxwt_test.go:157:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074699
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n   \
    \     b = -b\n    }\n    \n    if b > 9 {\n        b = b - 10\n    }\n    \n \
    \   if a > 9 {\n        a = a - 10\n    }\n    \n    if a > 9 {\n        a = a\
    \ - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    \n    if a\
    \ > 9 {\n        a = a - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n\
    \    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    \n    if a > 9 {\n\
    \        a = a - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n\
    \    \n    if a > 9 {\n        a = a - 10\n    }\n    \n    if a > 9 {\n     \
    \   a = a - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    \n\
    \    if a > 9 {\n        a = a - 10\n    }\n    \n    if a > 9 {\n        a =\
    \ a - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    \n    if\
    \ a > 9 {\n        a = a - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n\
    \    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    \n    if a > 9 {\n\
    \        a = a - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n\
    \    \n    if a > 9 {\n        a = a - 10\n    }\n    \n    if a > 9 {\n     \
    \   a = a - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    \n\
    \    if a > 9 {\n        a = a - 10\n    }\n    \n    if a > 9 {\n        a =\
    \ a - 10\n    }\n    \n    if a > 9 {\n        a = a - 10\n    }\n    \n    if\
    \ a > \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphi1f3ezz_test.go:154:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    mult := 0\n    \n\
    \    if a > 0 && b > 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    if\
    \ a > 0 && b < 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    if a < 0\
    \ && b > 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    if a < 0 && b\
    \ < 0 {\n        mult += a % 10 * b / 10\n    }\n    \n    return mult\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpk2y94m9d_test.go:59: expected '%!s(int=16)', got '%!s(int=329)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpk2y94m9d_test.go:59:\
    \ expected '%!s(int=72)', got '%!s(int=25)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpk2y94m9d_test.go:59: expected '%!s(int=20)', got '%!s(int=-6)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpk2y94m9d_test.go:59:\
    \ expected '%!s(int=42)', got '%!s(int=40)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpk2y94m9d_test.go:59: expected '%!s(int=49)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := a * b\n    if c < 0 {\n        c *=\
    \ -1\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp7z_7ke_v_test.go:44: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp7z_7ke_v_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp7z_7ke_v_test.go:44: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp7z_7ke_v_test.go:44:\
    \ expected '%!s(int=20)', got '%!s(int=210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp7z_7ke_v_test.go:44: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp7z_7ke_v_test.go:44:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c = a\n        d = b\n\
    \    case a > b:\n        c = b\n        d = a\n    case a == b:\n        c =\
    \ a\n        d = a\n    }\n    \n    switch {\n    case c < 10:\n        e = c\n\
    \        f = d\n    case c > 10:\n        e = d\n        f = c\n    case c ==\
    \ 10:\n        e = d\n        f = c\n    }\n    \n    switch {\n    case e < 10:\n\
    \        g = e\n        h = f \n    case e > 10:\n        g = f\n        h = e\n\
    \    case e == 10:\n        g = f\n        h = e\n    }\n    \n    switch {\n\
    \    case g < 10:\n        i = g\n        j = h\n    case g > 10:\n        i =\
    \ h\n        j = g\n    case g == 10:\n        i = h\n        j = g\n    }\n \
    \   \n    switch {\n    case i < 10:\n        k = i\n        l = j\n    case i\
    \ > 10:\n        k = j\n        l = i\n    case i == 10:\n        k = j\n    \
    \    l = i\n    }\n    \n    switch {\n    case k < 10:\n        m = k\n     \
    \   n = l\n    case k > 10:\n        m = l\n        n = k\n    case k == 10:\n\
    \        m = l\n        n = k\n    }\n    \n    switch {\n    case m < 10:\n \
    \       o = m\n        p = n\n    case m > 10:\n        o = n\n        p = m\n\
    \    case m == 10:\n        o = n\n        p = m\n    }\n    \n    switch {\n\
    \    case o < 10:\n        q = o\n        r = p\n    case o > 10:\n        q =\
    \ p\n        r = o\n    case o == 10:\n        q = p\n        r = o\n    }\n \
    \   \n    switch {\n    case q < 10:\n        s = q\n        t = r\n    case q\
    \ > 10:\n        s = r\n        t = q\n    case q == 10:\n        s = r\n    \
    \    t = q\n    }\n    \n    switch {\n    case s < 10:\n        v = s\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe37uj9fk_test.go:153:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return 0\n    }\n    \n    mult := 0\n    \n    if a\
    \ > 0 && b > 0 {\n        mult += a%10 * b%10\n        \n        if mult > 9 {\n\
    \            mult -= 10\n        }\n    }\n    \n    if a > 0 {\n        mult\
    \ += a%10\n    }\n    \n    if b > 0 {\n        mult += b%10\n    }\n    \n  \
    \  return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__1\
    \ (0.00s)\n        tmpo900bfpi_test.go:63: expected '%!s(int=72)', got '%!s(int=19)'\n\
    \    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpo900bfpi_test.go:63:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpo900bfpi_test.go:63: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpo900bfpi_test.go:63:\
    \ expected '%!s(int=42)', got '%!s(int=15)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpo900bfpi_test.go:63: expected '%!s(int=49)', got '%!s(int=23)'\n\
    \    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmpo900bfpi_test.go:63:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    mult := 0\n    \n    // Loop through the\
    \ digits of both numbers and multiply them\n    for i := 0; i < len(a); i++ {\n\
    \        mult *= 10\n        mult += a[i]\n    }\n    \n    for i := 0; i < len(b);\
    \ i++ {\n        mult *= 10\n        mult += b[i]\n    }\n    \n    return mult\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbp_s4nns_test.go:20:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpbp_s4nns_test.go:22:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpbp_s4nns_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpbp_s4nns_test.go:27:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    if a > 0 && b > 0 {\n        if a > b {\n            return\
    \ multiply(a-b, b)\n        }\n        return multiply(a, b-a)\n    }\n    \n\
    \    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    if a > 0 && b >\
    \ 0 {\n        return multiply(a-b, b)\n    }\n    \n    if a > 0 {\n        return\
    \ multiply(a, b)\n    }\n    \n    return multiply(b, a)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9vae9fms_test.go:63: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9vae9fms_test.go:63:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9vae9fms_test.go:63: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9vae9fms_test.go:63:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9vae9fms_test.go:63: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := a * b\n    if c > 0 {\n        return\
    \ c\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9n1d0cmm_test.go:44: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9n1d0cmm_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp9n1d0cmm_test.go:44: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp9n1d0cmm_test.go:44:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp9n1d0cmm_test.go:44: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp9n1d0cmm_test.go:44:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074699
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c = a\n        d = b\n\
    \    case a > b:\n        c = b\n        d = a\n    case a == b:\n        c =\
    \ a\n        d = a\n    }\n    \n    switch {\n    case c < 10:\n        e = c\n\
    \        f = d\n    case c > 10:\n        e = d\n        f = c\n    case c ==\
    \ 10:\n        e = d\n        f = c\n    }\n    \n    switch {\n    case e < 10:\n\
    \        g = e\n        h = f \n    case e > 10:\n        g = f\n        h = e\n\
    \    case e == 10:\n        g = f\n        h = e\n    }\n    \n    switch {\n\
    \    case g < 10:\n        i = g\n        j = h\n    case g > 10:\n        i =\
    \ h\n        j = g\n    case g == 10:\n        i = h\n        j = g\n    }\n \
    \   \n    switch {\n    case i < 10:\n        k = i\n        l = j\n    case i\
    \ > 10:\n        k = j\n        l = i\n    case i == 10:\n        k = j\n    \
    \    l = i\n    }\n    \n    switch {\n    case k < 10:\n        m = k\n     \
    \   n = l\n    case k > 10:\n        m = l\n        n = k\n    case k == 10:\n\
    \        m = l\n        n = k\n    }\n    \n    switch {\n    case m < 10:\n \
    \       o = m\n        p = n\n    case m > 10:\n        o = n\n        p = m\n\
    \    case m == 10:\n        o = n\n        p = m\n    }\n    \n    switch {\n\
    \    case o < 10:\n        q = o\n        r = p\n    case o > 10:\n        q =\
    \ p\n        r = o\n    case o == 10:\n        q = p\n        r = o\n    }\n \
    \   \n    switch {\n    case q < 10:\n        s = q\n        t = r\n    case q\
    \ > 10:\n        s = r\n        t = q\n    case q == 10:\n        s = r\n    \
    \    t = q\n    }\n    \n    switch {\n    case s < 10:\n        v = s\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe37uj9fk_test.go:153:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n\
    \    return multiply(b, a%b)\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmptkjlne1x_test.go:43: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmptkjlne1x_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmptkjlne1x_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmptkjlne1x_test.go:43:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmptkjlne1x_test.go:43: expected '%!s(int=42)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmptkjlne1x_test.go:43:\
    \ expected '%!s(int=49)', got '%!s(int=1)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmptkjlne1x_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074697
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    mult := 0\n    \n    for i := 0; i < len(a);\
    \ i++ {\n        mult *= 10\n        mult += a[i]\n    }\n    \n    for i := 0;\
    \ i < len(b); i++ {\n        mult *= 10\n        mult += b[i]\n    }\n    \n \
    \   return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_hh50lqv_test.go:19:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_hh50lqv_test.go:21:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_hh50lqv_test.go:24:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp_hh50lqv_test.go:26:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    \n \
    \   return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp5bmmi553_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp5bmmi553_test.go:43:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    mult := 0\n\
    \    \n    for i := 0; i < len(str(a)); i++ {\n        mult *= 10\n        mult\
    \ += int(a[i]) - '0'\n    }\n    \n    for i := 0; i < len(str(b)); i++ {\n  \
    \      mult *= 10\n        mult += int(b[i]) - '0'\n    }\n    \n    return mult\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2n3wyefy_test.go:20:25: undefined: str

    /tmp/tmp2n3wyefy_test.go:22:22: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp2n3wyefy_test.go:25:25: undefined: str

    /tmp/tmp2n3wyefy_test.go:27:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // \nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7eojj800_test.go:164:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074699
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    mult := 0\n    if a > 0 && b > 0 {\n  \
    \      mult += a % 10 * b / 10\n        a = a / 10\n        b = b / 10\n    }\n\
    \    if a > 0 {\n        mult += a\n    }\n    if b > 0 {\n        mult += b\n\
    \    }\n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate :=\
    \ multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmptqy6t0vs_test.go:52: expected '%!s(int=16)', got '%!s(int=384)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmptqy6t0vs_test.go:52:\
    \ expected '%!s(int=72)', got '%!s(int=28)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmptqy6t0vs_test.go:52: expected '%!s(int=0)', got '%!s(int=387)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmptqy6t0vs_test.go:52:\
    \ expected '%!s(int=20)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmptqy6t0vs_test.go:52: expected '%!s(int=42)', got '%!s(int=53)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmptqy6t0vs_test.go:52:\
    \ expected '%!s(int=49)', got '%!s(int=21)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmptqy6t0vs_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    result := 0\n    \n    if a < 0 || b <\
    \ 0 {\n        fmt.Println(\"Invalid input\")\n        return -1\n    }\n    \n\
    \    if a < 10 {\n        result = result + a\n    }\n    \n    if b < 10 {\n\
    \        result = result + b\n    }\n    \n    if a > 9 && b > 9 {\n        result\
    \ = result + a*b\n    }\n    \n    if a > 9 {\n        result = result + a%10*10\
    \ + a%10\n    }\n    \n    if b > 9 {\n        result = result + b%10*10 + b%10\n\
    \    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp32l3qxgr_test.go:67: expected '%!s(int=16)', got '%!s(int=61086)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp32l3qxgr_test.go:67:\
    \ expected '%!s(int=72)', got '%!s(int=719)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp32l3qxgr_test.go:67: expected '%!s(int=0)', got '%!s(int=3739031)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp32l3qxgr_test.go:67:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp32l3qxgr_test.go:67: expected '%!s(int=42)', got '%!s(int=5235)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp32l3qxgr_test.go:67:\
    \ expected '%!s(int=49)', got '%!s(int=613)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmp32l3qxgr_test.go:67: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    \n \
    \   \n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpmtq24k4a_test.go:44: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpmtq24k4a_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpmtq24k4a_test.go:44: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpmtq24k4a_test.go:44:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpmtq24k4a_test.go:44: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n\
    \    c := a\n    for i := 1; i <= b; i++ {\n        c *= 10\n        if c > 9\
    \ {\n            c -= 9\n        }\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp2jr6z324_test.go:50: expected '%!s(int=16)', got '%!s(int=4616023172317385405)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp2jr6z324_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=6816808172241103869)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp2jr6z324_test.go:50: expected '%!s(int=0)', got '%!s(int=-7458794204636873846)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp2jr6z324_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp2jr6z324_test.go:50: expected '%!s(int=42)', got '%!s(int=6577009812063866549)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp2jr6z324_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=-213916786863559508)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return 0\n    }\n    c := 0\n    for i := 0; i < len(a);\
    \ i++ {\n        c += int(b[i]) * int(a[i])\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyy_j2tow_test.go:22:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpyy_j2tow_test.go:23:19: invalid operation: cannot index b (variable of
    type int)

    /tmp/tmpyy_j2tow_test.go:23:31: invalid operation: cannot index a (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(str(a));\
    \ i++ {\n        c += int(str(a)[i]) * int(str(b)[i])\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1332dyxk_test.go:18:25: undefined: str

    /tmp/tmp1332dyxk_test.go:19:18: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    if a > 0 && b >\
    \ 0 {\n        c = a / b\n        d = a % b\n    }\n    if a > 0 {\n        c\
    \ = a / b\n    }\n    if b > 0 {\n        d = b\n    }\n    return c * d\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpd33ou_7i_test.go:52: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpd33ou_7i_test.go:52:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpd33ou_7i_test.go:52: expected '%!s(int=0)', got '%!s(int=1851)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpd33ou_7i_test.go:52:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpd33ou_7i_test.go:52: expected '%!s(int=42)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpd33ou_7i_test.go:52:\
    \ expected '%!s(int=49)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := a * b\n    d := c % 10\n    c /= 10\n\
    \    e := c * b\n    f := e % 10\n    e /= 10\n    g := e * b\n    h := f * b\n\
    \    i := g * b\n    j := h * b\n    k := i * b\n    l := j * b\n    m := k *\
    \ b\n    n := l * b\n    o := m * b\n    p := n * b\n    return o + p\n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpijgaa9h0_test.go:18:5: d declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a > b:\n        c = a\n        d = b\n\
    \    case a < b:\n        c = b\n        d = a\n    case a == b:\n        c =\
    \ a\n        d = a\n    }\n    \n    switch {\n    case c >= 10:\n        e =\
    \ c % 10\n        c /= 10\n    case c >= 1:\n        e = c\n        c /= 10\n\
    \    }\n    \n    switch {\n    case d >= 10:\n        f = d % 10\n        d /=\
    \ 10\n    case d >= 1:\n        f = d\n        d /= 10\n    }\n    \n    switch\
    \ {\n    case e >= 10:\n        g = e % 10\n        e /= 10\n    case e >= 1:\n\
    \        g = e\n        e /= 10\n    }\n    \n    switch {\n    case f >= 10:\n\
    \        h = f % 10\n        f /= 10\n    case f >= 1:\n        h = f\n      \
    \  f /= 10\n    }\n    \n    switch {\n    case g >= 10:\n        i = g % 10\n\
    \        g /= 10\n    case g >= 1:\n        i = g\n        g /= 10\n    }\n  \
    \  \n    switch {\n    case h >= 10:\n        j = h % 10\n        h /= 10\n  \
    \  case h >= 1:\n        j = h\n        h /= 10\n    }\n    \n    switch {\n \
    \   case i >= 10:\n        k = i % 10\n        i /= 10\n    case i >= 1:\n   \
    \     k = i\n        i /= 10\n    }\n    \n    switch {\n    case j >= 10:\n \
    \       l = j % 10\n        j /= 10\n    case j >= 1:\n        l = j\n       \
    \ j /= 10\n    }\n    \n    switch {\n    case k >= 10:\n        m = k % 10\n\
    \        k /= 10\n    case k >= 1:\n        m = k\n        k /= 10\n    }\n  \
    \  \n    switch {\n    case l >= 10:\n        n = l % 10\n        l /= 10\n  \
    \  case l \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf6gzoy6m_test.go:139:12: expected '':'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074700
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    if a > 0 && b > 0 {\n        mult += a%10\
    \ * b%10\n    }\n    \n    if a > 0 && b < 0 {\n        mult += a%10 * b\n   \
    \ }\n    \n    if a < 0 && b > 0 {\n        mult += a * b%10\n    }\n    \n  \
    \  if a < 0 && b < 0 {\n        mult += a * b\n    }\n    \n    return mult\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpnz011qiw_test.go:62: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpnz011qiw_test.go:62:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpnz011qiw_test.go:62: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpnz011qiw_test.go:62:\
    \ expected '%!s(int=42)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpnz011qiw_test.go:62: expected '%!s(int=49)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c, d = a, b\n    case\
    \ a > b:\n        c, d = b, a\n    }\n    \n    switch {\n    case c < 10:\n \
    \       e, f = c, d\n    case c > 10:\n        e, f = d, c\n    }\n    \n    switch\
    \ {\n    case e < 10:\n        g, h = e, f\n    case e > 10:\n        g, h = f,\
    \ e\n    }\n    \n    switch {\n    case g < 10:\n        i, j = g, h\n    case\
    \ g > 10:\n        i, j = h, g\n    }\n    \n    switch {\n    case i < 10:\n\
    \        k, l = i, j\n    case i > 10:\n        k, l = j, i\n    }\n    \n   \
    \ switch {\n    case k < 10:\n        m, n = k, l\n    case k > 10:\n        m,\
    \ n = l, k\n    }\n    \n    switch {\n    case m < 10:\n        o, p = m, n\n\
    \    case m > 10:\n        o, p = n, m\n    }\n    \n    switch {\n    case o\
    \ < 10:\n        q, r = o, p\n    case o > 10:\n        q, r = p, o\n    }\n \
    \   \n    switch {\n    case q < 10:\n        s, t = q, r\n    case q > 10:\n\
    \        s, t = r, q\n    }\n    \n    switch {\n    case s < 10:\n        u,\
    \ v = s, t\n    case s > 10:\n        u, v = t, s\n    }\n    \n    switch {\n\
    \    case u < 10:\n        w, x = u, v\n    case u > 10:\n        w, x = v, u\n\
    \    }\n    \n    switch {\n    case w < 10:\n        y, z = w, x\n    case w\
    \ > 10:\n        y, z = x, w\n    }\n    \n    switch {\n    case y < 10:\n  \
    \      y, z = y, z\n    case y > 10:\n        y, z = z, y\n    }\n    \n    switch\
    \ {\n    case z < 10:\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5s2zt9og_test.go:135:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    \n \
    \   return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp5bmmi553_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp5bmmi553_test.go:43:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp5bmmi553_test.go:43: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpth8jtq11_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpth8jtq11_test.go:21:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpth8jtq11_test.go:22:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    for i := 0; i < 10; i++ {\n        mult\
    \ += a%10 * b%10\n        a = a/10\n        b = b/10\n    }\n    \n    return\
    \ mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp_d72texs_test.go:52: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp_d72texs_test.go:52:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp_d72texs_test.go:52: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp_d72texs_test.go:52:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp_d72texs_test.go:52: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp_d72texs_test.go:52:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074701
- exit_code: null
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    c := 0\n    d\
    \ := a\n    e := b\n    f := 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n\
    \    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q\
    \ := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n\
    \    x := 0\n    y := 0\n    z := 0\n    \n    for {\n        c += d\n       \
    \ d /= 10\n        e += e\n        e /= 10\n        f += f\n        f /= 10\n\
    \        g += g\n        g /= 10\n        h += h\n        h /= 10\n        i +=\
    \ i\n        i /= 10\n        j += j\n        j /= 10\n        k += k\n      \
    \  k /= 10\n        l += l\n        l /= 10\n        m += m\n        m /= 10\n\
    \        n += n\n        n /= 10\n        o += o\n        o /= 10\n        p +=\
    \ p\n        p /= 10\n        q += q\n        q /= 10\n        r += r\n      \
    \  r /= 10\n        s += s\n        s /= 10\n        t += t\n        t /= 10\n\
    \        u += u\n        u /= 10\n        v += v\n        v /= 10\n        w +=\
    \ w\n        w /= 10\n        x += x\n        x /= 10\n        y += y\n      \
    \  y /= 10\n        z += z\n        z /= 10\n    }\n    \n    return c * e * f\
    \ * g * h * i * j * k * l * m * n * o * p * q * r * s * t * u * v * w * x\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074715
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c, d = a, b\n    case\
    \ a > b:\n        c, d = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      e, f = a, b\n    case a > b:\n        e, f = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        g, h = a, b\n    case a > b:\n        g, h = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        i, j = a, b\n    case\
    \ a > b:\n        i, j = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      k, l = a, b\n    case a > b:\n        k, l = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        m, n = a, b\n    case a > b:\n        m, n = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        o, p = a, b\n    case\
    \ a > b:\n        o, p = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      q, r = a, b\n    case a > b:\n        q, r = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        s, t = a, b\n    case a > b:\n        s, t = b,\
    \ a\n    }\n    \n    switch {\n    case a < b:\n        u, v = a, b\n    case\
    \ a > b:\n        u, v = b, a\n    }\n    \n    switch {\n    case a < b:\n  \
    \      w, x = a, b\n    case a > b:\n        w, x = b, a\n    }\n    \n    switch\
    \ {\n    case a < b:\n        y, z = a, b\n    case a > b:\n        y, z = b,\
    \ a\n    }\n    \n    return c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6_ods5f6_test.go:127:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4fhmhfvl_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp4fhmhfvl_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    result := 0\n    \n    // Iterate through\
    \ each digit of the two numbers\n    for i := 0; i < len(str(a)); i++ {\n    \
    \    // Get the current digit of a\n        c := a%10\n        // Get the current\
    \ digit of b\n        d := b%10\n        // Add the current digit of b to the\
    \ current digit of a\n        result += c*d\n        // Divide both numbers by\
    \ 10\n        a = a/10\n        b = b/10\n    }\n    \n    return result\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjplapbbn_test.go:20:25: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // \nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7eojj800_test.go:164:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074699
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    // return\
    \ 0\n    \n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate :=\
    \ multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpnj25xlxp_test.go:44: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpnj25xlxp_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpnj25xlxp_test.go:44: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpnj25xlxp_test.go:44:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpnj25xlxp_test.go:44: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpzos7p535_test.go:42:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpzos7p535_test.go:42: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c = a\n        d = b\n\
    \    case a > b:\n        c = b\n        d = a\n    default:\n        c = a\n\
    \        d = b\n    }\n    \n    switch {\n    case c < 10:\n        e = c\n \
    \       f = d\n    case c > 10:\n        e = d\n        f = c\n    default:\n\
    \        e = c\n        f = d\n    }\n    \n    switch {\n    case e < 10:\n \
    \       g = e\n        h = f\n    case e > 10:\n        g = f\n        h = e\n\
    \    default:\n        g = e\n        h = f\n    }\n    \n    switch {\n    case\
    \ g < 10:\n        i = g\n        j = h\n    case g > 10:\n        i = h\n   \
    \     j = g\n    default:\n        i = g\n        j = h\n    }\n    \n    switch\
    \ {\n    case i < 10:\n        k = i\n        l = j\n    case i > 10:\n      \
    \  k = j\n        l = i\n    default:\n        k = i\n        l = j\n    }\n \
    \   \n    switch {\n    case k < 10:\n        m = k\n        n = l\n    case k\
    \ > 10:\n        m = l\n        n = k\n    default:\n        m = k\n        n\
    \ = l\n    }\n    \n    switch {\n    case m < 10:\n        o = m\n        p =\
    \ n\n    case m > 10:\n        o = n\n        p = m\n    default:\n        o =\
    \ m\n        p = n\n    }\n    \n    switch {\n    case o < 10:\n        q = o\n\
    \        r = p\n    case o > 10:\n        q = p\n        r = o\n    default:\n\
    \        q = o\n        r = p\n    }\n    \n    switch {\n    case q < 10:\n \
    \       s = q\n        t = r\n    case q > 10:\n        s = r\n        t = q\n\
    \    default:\n        s = q\n        t = r\n    }\n    \n    switch {\n    case\
    \ s < 10:\n        u = s\n        v = t\n    case s > 10:\n        u = t\n   \
    \     v = s\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp65uxcxwt_test.go:157:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074699
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := a * b\n    if c > 1000 {\n       \
    \ return c\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpmshe8ez4_test.go:44: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpmshe8ez4_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpmshe8ez4_test.go:44: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpmshe8ez4_test.go:44:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpmshe8ez4_test.go:44: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpmshe8ez4_test.go:44:\
    \ expected '%!s(int=49)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074701
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(str(a));\
    \ i++ {\n        c += int(str(a)[i]) * int(str(b)[i])\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1332dyxk_test.go:18:25: undefined: str

    /tmp/tmp1332dyxk_test.go:19:18: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n\
    \    c := a\n    d := b\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n    i\
    \ := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o := 0\n\
    \    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n    v\
    \ := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    // Calculate\
    \ the unit digits of a\n    for i := 0; i < len(a); i++ {\n        if a[i] < 10\
    \ {\n            a := a[i:]\n            break\n        }\n    }\n    \n    //\
    \ Calculate the unit digits of b\n    for j := 0; j < len(b); j++ {\n        if\
    \ b[j] < 10 {\n            b := b[j:]\n            break\n        }\n    }\n \
    \   \n    // Calculate the unit digits of c\n    for k := 0; k < len(c); k++ {\n\
    \        if c[k] < 10 {\n            c := c[k:]\n            break\n        }\n\
    \    }\n    \n    // Calculate the unit digits of d\n    for l := 0; l < len(d);\
    \ l++ {\n        if d[l] < 10 {\n            d := d[l:]\n            break\n \
    \       }\n    }\n    \n    // Calculate the unit digits of e\n    for m := 0;\
    \ m < len(e); m++ {\n        if e[m] < 10 {\n            e := e[m:]\n        \
    \    break\n        }\n    }\n    \n    // Calculate the unit digits of f\n  \
    \  for n := 0; n < len(f); n++ {\n        if f[n] < 10 {\n            f := f[n:]\n\
    \            break\n        }\n    }\n    \n    // Calculate the unit digits of\
    \ g\n    for o := 0; o < len(g); o++ {\n        if g[o] < 10 {\n            g\
    \ := g[o:]\n            break\n        }\n    }\n    \n    // Calculate the unit\
    \ digits of h\n    for p := 0; p < len(h); p++ {\n        if h[p] < 10 {\n   \
    \         h := h[p:]\n            break\n        }\n    }\n    \n    // Calculate\
    \ the unit digits of i\n    for q := 0; q < len(i); q++ {\n        if i[q] < 10\
    \ {\n            i := i[q:]\n            break\n        }\n    }\n    \n    //\
    \ Calculate the unit digits of j\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3sj65hw7_test.go:118:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n\
    \    c := a\n    for i := 0; i < b; i++ {\n        c *= 10\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpuei7eam1_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpuei7eam1_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=-7151947981074202624)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpuei7eam1_test.go:47: expected '%!s(int=20)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpuei7eam1_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpuei7eam1_test.go:47: expected '%!s(int=49)', got '%!s(int=-7144815624298954752)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074698
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n77unp6_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_n77unp6_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_n77unp6_test.go:19:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074694
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    if a < 10 {\n        return a * b\n    }\n    \n    if b < 10\
    \ {\n        return a * b\n    }\n    \n    if a < 100 {\n        return a * b\n\
    \    }\n    \n    if b < 100 {\n        return a * b\n    }\n    \n    if a <\
    \ 1000 {\n        return a * b\n    }\n    \n    if b < 1000 {\n        return\
    \ a * b\n    }\n    \n    if a < 10000 {\n        return a * b\n    }\n    \n\
    \    if b < 10000 {\n        return a * b\n    }\n    \n    if a < 100000 {\n\
    \        return a * b\n    }\n    \n    if b < 100000 {\n        return a * b\n\
    \    }\n    \n    if a < 1000000 {\n        return a * b\n    }\n    \n    if\
    \ b < 1000000 {\n        return a * b\n    }\n    \n    if a < 10000000 {\n  \
    \      return a * b\n    }\n    \n    if b < 10000000 {\n        return a * b\n\
    \    }\n    \n    if a < 100000000 {\n        return a * b\n    }\n    \n    if\
    \ b < 100000000 {\n        return a * b\n    }\n    \n    if a < 1000000000 {\n\
    \        return a * b\n    }\n    \n    if b < 1000000000 {\n        return a\
    \ * b\n    }\n    \n    if a < 10000000000 {\n        return a * b\n    }\n  \
    \  \n    if b < 10000000000 {\n        return a * b\n    }\n    \n    if a < 100000000000\
    \ {\n        return a * b\n    }\n    \n    if b < 100000000000 {\n        return\
    \ a * b\n    }\n    \n    if a < 1000000000000 {\n        return a * b\n    }\n\
    \    \n    if b < 1000000000000 {\n        return a * b\n    }\n    \n    if a\
    \ < 10000000000000 {\n        return a * b\n    }\n    \n    if b < 10000000000000\
    \ {\n        return a * b\n    }\n    \n    if a < 100000000000000 {\n       \
    \ return a * b\n    }\n    \n    if b < 100000000000000 {\n        return a *\
    \ b\n    }\n    \n    if a < 1000000000000000 {\n        return a * b\n    }\n\
    \    \n    if b < 1000000000000000 {\n        return a * b\n    }\n    \n    if\
    \ a < 10000000000000000 {\n        return a * b\n    }\n    \n    if b < 10000000000000000\
    \ {\n        return a * b\n    }\n    \n    if a < 100000000000000000 {\n    \
    \    return a * b\n    }\n    \n    if b < 10000000000\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk_0nd9bg_test.go:154:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074701
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    result := 0\n    \n    if a < 0 || b <\
    \ 0 {\n        fmt.Println(\"Invalid input\")\n        return -1\n    }\n\n  \
    \  if a < 10 {\n        result = result + a\n    }\n    \n    if b < 10 {\n  \
    \      result = result + b\n    }\n    \n    if a > 9 && b > 9 {\n        result\
    \ = result + (a%10) * (b%10)\n    }\n    \n    if a > 9 {\n        result = result\
    \ + a%10\n    }\n    \n    if b > 9 {\n        result = result + b%10\n    }\n\
    \    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpi9qinb0a_test.go:67: expected '%!s(int=16)', got '%!s(int=26)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpi9qinb0a_test.go:67:\
    \ expected '%!s(int=72)', got '%!s(int=89)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpi9qinb0a_test.go:67: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpi9qinb0a_test.go:67:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpi9qinb0a_test.go:67: expected '%!s(int=42)', got '%!s(int=55)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpi9qinb0a_test.go:67:\
    \ expected '%!s(int=49)', got '%!s(int=63)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpi9qinb0a_test.go:67: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074702
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n\
    \    c := a\n    for i := 0; i < b; i++ {\n        c *= 10\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpuei7eam1_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpuei7eam1_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=-7151947981074202624)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpuei7eam1_test.go:47: expected '%!s(int=20)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpuei7eam1_test.go:47:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpuei7eam1_test.go:47: expected '%!s(int=49)', got '%!s(int=-7144815624298954752)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074698
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    c := 0\n    d := 0\n    e := 0\n    f :=\
    \ 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n\
    \    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    \n    switch {\n    case a < b:\n        c = a\n        d = b\n\
    \    case a > b:\n        c = b\n        d = a\n    case a == b:\n        c =\
    \ a\n        d = a\n    }\n    \n    switch {\n    case c < 10:\n        e = c\n\
    \        f = d\n    case c > 10:\n        e = d\n        f = c\n    case c ==\
    \ 10:\n        e = d\n        f = c\n    }\n    \n    switch {\n    case e < 10:\n\
    \        g = e\n        h = f \n    case e > 10:\n        g = f\n        h = e\n\
    \    case e == 10:\n        g = f\n        h = e\n    }\n    \n    switch {\n\
    \    case g < 10:\n        i = g\n        j = h\n    case g > 10:\n        i =\
    \ h\n        j = g\n    case g == 10:\n        i = h\n        j = g\n    }\n \
    \   \n    switch {\n    case i < 10:\n        k = i\n        l = j\n    case i\
    \ > 10:\n        k = j\n        l = i\n    case i == 10:\n        k = j\n    \
    \    l = i\n    }\n    \n    switch {\n    case k < 10:\n        m = k\n     \
    \   n = l\n    case k > 10:\n        m = l\n        n = k\n    case k == 10:\n\
    \        m = l\n        n = k\n    }\n    \n    switch {\n    case m < 10:\n \
    \       o = m\n        p = n\n    case m > 10:\n        o = n\n        p = m\n\
    \    case m == 10:\n        o = n\n        p = m\n    }\n    \n    switch {\n\
    \    case o < 10:\n        q = o\n        r = p\n    case o > 10:\n        q =\
    \ p\n        r = o\n    case o == 10:\n        q = p\n        r = o\n    }\n \
    \   \n    switch {\n    case q < 10:\n        s = q\n        t = r\n    case q\
    \ > 10:\n        s = r\n        t = q\n    case q == 10:\n        s = r\n    \
    \    t = q\n    }\n    \n    switch {\n    case s < 10:\n        v = s\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe37uj9fk_test.go:153:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074694
