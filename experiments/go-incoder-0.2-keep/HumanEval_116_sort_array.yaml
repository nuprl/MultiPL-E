name: HumanEval_116_sort_array
language: go_test.go
prompt: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // In this Kata, you have to sort an array of non-negative integers according to\n\
  // number of ones in their binary representation in ascending order.\n// For similar\
  \ number of ones, sort based on decimal value.\n// It must be implemented like this:\n\
  // >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3,\
  \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1,\
  \ 2, 3, 4]\nfunc sort_array(arr []int) []int {\n"
tests: "func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2,\
  \ 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
  \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
  \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
  \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
  \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
  \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
  \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
  \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    result := make([]int, len(arr))\n    result := sort_array_test(arr,\
    \ result)\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        onesCount := 0\n        for _, v := range arr[i:]\
    \ {\n            if v == 1 {\n                onesCount++\n            }\n   \
    \     }\n        if onesCount > 0 {\n            return onesCount < len(arr)\n\
    \        }\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n", "  \
    \  result := make([]int, len(arr))\n    result := sort_array_test(arr, result)\n\
    \    return result\n}\n", "    // Your code here\n    sort.Slice(arr, 0, len(arr),\
    \ func(i, j int) bool {\n        onesCount := 0\n        for k := 0; k < len(arr);\
    \ k++ {\n            if arr[k]&(1<<uint(k)) == 0 {\n                onesCount++\n\
    \            }\n        }\n        if onesCount > 0 {\n            return onesCount\
    \ > arr[j]&(1<<uint(j)) == onesCount\n        }\n        return arr[j]&(1<<uint(j))\
    \ == arr[i]&(1<<uint(i)) == onesCount\n    })\n    return arr\n}\n", "    // Your\
    \ code here\n    sort.Slice(arr, func(i, j int) bool {\n        onesCount := 0\n\
    \        for k := 0; k < len(arr); k++ {\n            if arr[k] == 1 {\n     \
    \           onesCount++\n            }\n        }\n        if onesCount > 0 {\n\
    \            return onesCount > arr[j].(float64) - arr[i].(float64)\n        }\
    \ else {\n            return arr[j].(float64) - arr[i].(float64)\n        }\n\
    \    })\n    return arr\n}\n", "    var result []int\n    for _, v := range arr\
    \ {\n        result := append(result, v)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    // Your code here\n    sort.Ints(arr)\n    return\
    \ arr\n}\n", "    result := make([]int, len(arr))\n    count := make([]int, len(arr))\n\
    \    for i := range arr {\n        count[i] = 0\n    }\n    for _, v := range\
    \ arr {\n        count[v]++\n    }\n    for i := range arr {\n        result[i]\
    \ = arr[i]\n    }\n    for i := range count {\n        if count[i] == 0 {\n  \
    \          continue\n        }\n        j := i\n        for k := i - 1; k >= 0;\
    \ k-- {\n            if count[k] == 0 {\n                break\n            }\n\
    \            if count[k] > count[j] {\n                j := k\n            }\n\
    \        }\n        for k := i + 1; k < len(arr); k++ {\n            if count[k]\
    \ == 0 {\n                break\n            }\n            if count[k] > count[j]\
    \ {\n                j := k\n            }\n        }\n        if j != i {\n \
    \           tmp := result[i]\n            result[i] = result[j]\n            result[j]\
    \ = tmp\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n", "    // Write your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        ones, _ := strconv.Atoi(arr[i].String())\n  \
    \      ones2, _ := strconv.Atoi(arr[j].String())\n        if ones < ones2 {\n\
    \            return true\n        }\n        return false\n    })\n    return\
    \ arr\n}\n", "    result := make([]int, len(arr))\n    count := make([]int, len(arr))\n\
    \    for i := range arr {\n        count[i] = 0\n    }\n    for _, v := range\
    \ arr {\n        count[v]++\n    }\n    for i := range count {\n        result[i]\
    \ = arr[i]\n    }\n    for i := range count {\n        if count[i] > 1 {\n   \
    \         j := i\n            for k := i + 1; k < len(count); k++ {\n        \
    \        if count[k] == 1 {\n                    result[j] = result[k]\n     \
    \               j++\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i, j int) bool\
    \ {\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    return arr\n}\n", "    result := make([]int, len(arr))\n    result := sort_array_test(arr,\
    \ result)\n    return result\n}\n", "    result := make([]int, len(arr))\n   \
    \ for i := 0; i < len(arr); i++ {\n        oneCount := 0\n        for j := 0;\
    \ j < len(arr); j++ {\n            if arr[j] == 1 {\n                oneCount++\n\
    \            }\n        }\n        if oneCount > 0 {\n            result[i] =\
    \ oneCount\n        } else {\n            result[i] = arr[i]\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(arr))\n    for i := range\
    \ arr {\n        count := 0\n        for j := range arr {\n            if arr[j]\
    \ == i {\n                count++\n            }\n        }\n        if count\
    \ == 1 {\n            result[i] = i\n        } else {\n            result [i]\
    \ = count\n        }\n    }\n    return result\n}\n", "    // Write your code\
    \ here\n    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] < arr[j]\n\
    \    })\n    return arr\n}\n", "    result := make([]int, len(arr))\n    count\
    \ := make([]int, len(arr))\n    for i := range arr {\n        count[arr[i]]++\n\
    \    }\n    for i := range count {\n        result[count[i]-1] = i\n    }\n  \
    \  for i := range result {\n        result[i] = arr[result[i]]\n    }\n    return\
    \ result\n}\n", "    var result []int\n    result := make([]int, len(arr))\n \
    \   for i := 0; i < len(arr); i++ {\n        oneCount := 0\n        oneIndex :=\
    \ -1\n        for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n\
    \                oneCount++\n                if oneIndex == -1 {\n           \
    \         oneIndex = j\n                }\n            }\n        }\n        if\
    \ oneCount > 1 {\n            tmp := arr[oneIndex]\n            arr[oneIndex]\
    \ = arr[i]\n            arr[i] = tmp\n        }\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        result[i] = arr[i]\n    }\n    return result\n}\n", "    // Your\
    \ code here\n    sort.Ints(arr)\n    return arr\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
