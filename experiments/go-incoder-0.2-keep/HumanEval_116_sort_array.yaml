name: HumanEval_116_sort_array
language: go_test.go
prompt: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // In this Kata, you have to sort an array of non-negative integers according to\n\
  // number of ones in their binary representation in ascending order.\n// For similar\
  \ number of ones, sort based on decimal value.\n// It must be implemented like this:\n\
  // >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3,\
  \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1,\
  \ 2, 3, 4]\nfunc sort_array(arr []int) []int {\n"
tests: "func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2,\
  \ 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
  \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
  \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
  \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
  \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
  \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
  \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
  \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    result := make([]int, len(arr))\n    result := sort_array_test(arr,\
    \ result)\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        onesCount := 0\n        for _, v := range arr[i:]\
    \ {\n            if v == 1 {\n                onesCount++\n            }\n   \
    \     }\n        if onesCount > 0 {\n            return onesCount < len(arr)\n\
    \        }\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n", "  \
    \  result := make([]int, len(arr))\n    result := sort_array_test(arr, result)\n\
    \    return result\n}\n", "    // Your code here\n    sort.Slice(arr, 0, len(arr),\
    \ func(i, j int) bool {\n        onesCount := 0\n        for k := 0; k < len(arr);\
    \ k++ {\n            if arr[k]&(1<<uint(k)) == 0 {\n                onesCount++\n\
    \            }\n        }\n        if onesCount > 0 {\n            return onesCount\
    \ > arr[j]&(1<<uint(j)) == onesCount\n        }\n        return arr[j]&(1<<uint(j))\
    \ == arr[i]&(1<<uint(i)) == onesCount\n    })\n    return arr\n}\n", "    // Your\
    \ code here\n    sort.Slice(arr, func(i, j int) bool {\n        onesCount := 0\n\
    \        for k := 0; k < len(arr); k++ {\n            if arr[k] == 1 {\n     \
    \           onesCount++\n            }\n        }\n        if onesCount > 0 {\n\
    \            return onesCount > arr[j].(float64) - arr[i].(float64)\n        }\
    \ else {\n            return arr[j].(float64) - arr[i].(float64)\n        }\n\
    \    })\n    return arr\n}\n", "    var result []int\n    for _, v := range arr\
    \ {\n        result := append(result, v)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    // Your code here\n    sort.Ints(arr)\n    return\
    \ arr\n}\n", "    result := make([]int, len(arr))\n    count := make([]int, len(arr))\n\
    \    for i := range arr {\n        count[i] = 0\n    }\n    for _, v := range\
    \ arr {\n        count[v]++\n    }\n    for i := range arr {\n        result[i]\
    \ = arr[i]\n    }\n    for i := range count {\n        if count[i] == 0 {\n  \
    \          continue\n        }\n        j := i\n        for k := i - 1; k >= 0;\
    \ k-- {\n            if count[k] == 0 {\n                break\n            }\n\
    \            if count[k] > count[j] {\n                j := k\n            }\n\
    \        }\n        for k := i + 1; k < len(arr); k++ {\n            if count[k]\
    \ == 0 {\n                break\n            }\n            if count[k] > count[j]\
    \ {\n                j := k\n            }\n        }\n        if j != i {\n \
    \           tmp := result[i]\n            result[i] = result[j]\n            result[j]\
    \ = tmp\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n", "    // Write your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        ones, _ := strconv.Atoi(arr[i].String())\n  \
    \      ones2, _ := strconv.Atoi(arr[j].String())\n        if ones < ones2 {\n\
    \            return true\n        }\n        return false\n    })\n    return\
    \ arr\n}\n", "    result := make([]int, len(arr))\n    count := make([]int, len(arr))\n\
    \    for i := range arr {\n        count[i] = 0\n    }\n    for _, v := range\
    \ arr {\n        count[v]++\n    }\n    for i := range count {\n        result[i]\
    \ = arr[i]\n    }\n    for i := range count {\n        if count[i] > 1 {\n   \
    \         j := i\n            for k := i + 1; k < len(count); k++ {\n        \
    \        if count[k] == 1 {\n                    result[j] = result[k]\n     \
    \               j++\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i, j int) bool\
    \ {\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    return arr\n}\n", "    result := make([]int, len(arr))\n    result := sort_array_test(arr,\
    \ result)\n    return result\n}\n", "    result := make([]int, len(arr))\n   \
    \ for i := 0; i < len(arr); i++ {\n        oneCount := 0\n        for j := 0;\
    \ j < len(arr); j++ {\n            if arr[j] == 1 {\n                oneCount++\n\
    \            }\n        }\n        if oneCount > 0 {\n            result[i] =\
    \ oneCount\n        } else {\n            result[i] = arr[i]\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(arr))\n    for i := range\
    \ arr {\n        count := 0\n        for j := range arr {\n            if arr[j]\
    \ == i {\n                count++\n            }\n        }\n        if count\
    \ == 1 {\n            result[i] = i\n        } else {\n            result [i]\
    \ = count\n        }\n    }\n    return result\n}\n", "    // Write your code\
    \ here\n    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] < arr[j]\n\
    \    })\n    return arr\n}\n", "    result := make([]int, len(arr))\n    count\
    \ := make([]int, len(arr))\n    for i := range arr {\n        count[arr[i]]++\n\
    \    }\n    for i := range count {\n        result[count[i]-1] = i\n    }\n  \
    \  for i := range result {\n        result[i] = arr[result[i]]\n    }\n    return\
    \ result\n}\n", "    var result []int\n    result := make([]int, len(arr))\n \
    \   for i := 0; i < len(arr); i++ {\n        oneCount := 0\n        oneIndex :=\
    \ -1\n        for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n\
    \                oneCount++\n                if oneIndex == -1 {\n           \
    \         oneIndex = j\n                }\n            }\n        }\n        if\
    \ oneCount > 1 {\n            tmp := arr[oneIndex]\n            arr[oneIndex]\
    \ = arr[i]\n            arr[i] = tmp\n        }\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        result[i] = arr[i]\n    }\n    return result\n}\n", "    // Your\
    \ code here\n    sort.Ints(arr)\n    return arr\n}\n", "    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n",
  "    result := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n    \
    \    oneCount := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ == 1 {\n                oneCount++\n            }\n        }\n        if oneCount\
    \ > 0 {\n            result[i] = oneCount\n        } else {\n            result[i]\
    \ = arr[i]\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n", "    var result []int\n    var count int\n  \
    \  for _, v := range arr {\n        if v == 0 {\n            count++\n       \
    \ } else {\n            if count == 0 {\n                result = append(result,\
    \ v)\n            } else {\n                count -= 1\n                result\
    \ = append(result, v)\n            }\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    result := make([]int, len(arr))\n    for i := 0; i <\
    \ len(arr); i++ {\n        oneCount := 0\n        for j := 0; j < len(arr); j++\
    \ {\n            if arr[j] == 1 {\n                oneCount++\n            }\n\
    \        }\n        if oneCount > 0 {\n            result[i] = oneCount\n    \
    \    } else {\n            result[i] = arr[i]\n        }\n    }\n    return result\n\
    }\n", "    // Your code here\n    sort.Slice(arr, func(i, j int) bool {\n    \
    \    oneCount := 0\n        for k := 0; k < len(arr); k++ {\n            if arr[k]\
    \ == 1 {\n                oneCount++\n            }\n        }\n        if oneCount\
    \ > 0 {\n            return true\n        }\n        if oneCount == 0 {\n    \
    \        return false\n        }\n        return arr[j] > arr[i]\n    })\n   \
    \ return arr\n}\n", "    result := make([]int, len(arr))\n    count := make(map[int]int,\
    \ len(arr))\n    for i := range arr {\n        count[arr[i]]++\n    }\n    for\
    \ i := range arr {\n        if count[arr[i]] == 1 {\n            result[i] = arr[i]\n\
    \        } else {\n            result[i] = count[arr[i]]\n        }\n    }\n \
    \   return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n  \
    \  return arr\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return\
    \ arr\n}\n", "    // Your code here\n    sort.Ints(arr)\n    return arr\n}\n",
  "    // Your code here\n    sort.Ints(arr)\n    return arr\n}\n", "    // Write\
    \ your code here\n    sort.Ints(arr)\n    return arr\n}\n", "    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        if count[i] == 0 {\n            continue\n\
    \        }\n        j := i\n        for j--; j >= 0 && count[j] == 0; j-- {\n\
    \        }\n        if j == -1 {\n            break\n        }\n        result[i]\
    \ = arr[j]\n    }\n    return result\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make(map[int]int)\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for _, v := range arr {\n        if count[v] == 1 {\n            result[count[v]]\
    \ = v\n            count[v]--\n        }\n    }\n    for _, v := range arr {\n\
    \        if count[v] == 0 {\n            result[count[v]] = v\n            count[v]--\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(arr))\n\
    \    for i := 0; i < len(arr); i++ {\n        oneCount := 0\n        for j :=\
    \ 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n                oneCount++\n\
    \            }\n        }\n        if oneCount > 0 {\n            result[i] =\
    \ oneCount\n        } else {\n            result[i] = arr[i]\n        }\n    }\n\
    \    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n \
    \   return arr\n}\n", "    // Write your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        ones, _ := strconv.Atoi(arr[i])\n        ones2, _ :=\
    \ strconv.Atoi(arr[j])\n        if ones > ones2 {\n            return true\n \
    \       }\n        if ones < ones2 {\n            return false\n        }\n  \
    \      return arr[i] < arr[j]\n    })\n    return arr\n}\n", "    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(arr))\n    count\
    \ := make(map[int]int)\n    for i := 0; i < len(arr); i++ {\n        count[arr[i]]++\n\
    \    }\n    for i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        for j := 0; j < count[arr[i]]; j++\
    \ {\n            tmp := arr[i]\n            arr[i] = arr[j]\n            arr[j]\
    \ = tmp\n        }\n    }\n    return result\n}\n", "    // Your code here\n \
    \   sort.Slice(arr, func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint32(arr[i])\
    \ >> 32\n        zerosCount := binary.BigEndian.Uint32(arr[j]) >> 32\n       \
    \ if onesCount > zerosCount {\n            return true\n        }\n        if\
    \ onesCount < zerosCount {\n            return false\n        }\n        return\
    \ arr[i] < arr[j]\n    })\n    return arr\n}\n", "    // Your code here\n    sort.Ints(arr)\n\
    \    return arr\n}\n", "    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    for i := range arr {\n        count[i] = 0\n    }\n    for _,\
    \ i := range arr {\n        count[count_bits(i)] += 1\n    }\n    for i := range\
    \ count {\n        result[count[i]] = i\n    }\n    return result\n}\n", "   \
    \ // Your code here\n    sort.Ints(arr)\n    return arr\n}\n", "    var result\
    \ []int\n    var count int\n    for _, v := range arr {\n        if v == 0 {\n\
    \            count++\n        } else {\n            count = 0\n        }\n   \
    \     result = append(result, v)\n        if count == 1 {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n        count\
    \ := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[j] == i {\n\
    \                count++\n            }\n        }\n        result[i] = count\n\
    \    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n",
  "    var result []int\n    for _, v := range arr {\n        result := append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    // Your code\
    \ here\n    sort.Slice(arr, func(i, j int) bool {\n        ones, _ := strconv.Atoi(arr[i])\n\
    \        ones2, _ := strconv.Atoi(arr[j])\n        if ones == ones2 {\n      \
    \      return arr[i] < arr[j]\n        }\n        return ones < ones2\n    })\n\
    \    return arr\n}\n", "    result := make([]int, len(arr))\n    result := sort_array_test(arr,\
    \ result)\n    return result\n}\n", "    var result []int\n    for _, v := range\
    \ arr {\n        result := append(result, v)\n    }\n    sort.Ints(result)\n \
    \   return result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i, j\
    \ int) bool {\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n", " \
    \   var result []int\n    var count int\n    for _, v := range arr {\n       \
    \ count += v\n    }\n    for _, v := range arr {\n        if v > 0 {\n       \
    \     result += append(result, v)\n        }\n    }\n    for _, v := range arr\
    \ {\n        if v > 0 {\n            result += append(result, count-v)\n     \
    \   }\n    }\n    return result\n}\n", "    var result []int\n    var count int\n\
    \    for _, v := range arr {\n        if v == 0 {\n            count++\n     \
    \   } else {\n            count = 0\n        }\n        result = append(result,\
    \ v)\n    }\n    for i := 0; i < len(result); i++ {\n        if count == 0 {\n\
    \            result[i], result[i+1] = result[i+1], result[i]\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    count := make(map[int]int)\n\
    \    for _, v := range arr {\n        count[v]++\n    }\n    for _, v := range\
    \ arr {\n        if count[v] == 1 {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range arr {\n        if count[v] > 1 {\n  \
    \          count[v]--\n            result = append(result, v)\n        }\n   \
    \ }\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr,func(i,\
    \ j int) bool {\n        return arr[i]%2 == arr[j]%2\n    })\n    return arr\n\
    }\n", "    var result []int\n    for _, v := range arr {\n        result := append(result,\
    \ v)\n    }\n    sort.Slice(result, func(i, j int) bool {\n        onesCount :=\
    \ binary.BigEndian.Uint32(result[i*4]) >> 3\n        decCount := result[i*4] -\
    \ onesCount*10\n        onesCount -= decCount\n        decCount /= 10\n      \
    \  return onesCount > decCount\n    })\n    return result\n}\n", "    // Write\
    \ your code here\n    sort.Ints(arr)\n    return arr\n}\n", "    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i, v := range arr {\n\
    \        count[v]++\n    }\n    for i := 0; i < len(arr); i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := 0; i < len(arr); i++ {\n        if count[arr[i]]\
    \ == 1 {\n            result[i] = arr[i]\n        }\n    }\n    return result\n\
    }\n", "    // Your code here\n    sort.Slice(arr, func(i, j int) bool {\n    \
    \    onesCount := binary.BigEndian.Uint64(arr[i]) >> 63\n        zerosCount :=\
    \ binary.BigEndian.Uint64(arr[j]) >> 63\n        if onesCount > zerosCount {\n\
    \            return true\n        }\n        if onesCount < zerosCount {\n   \
    \         return false\n        }\n        return arr[i] < arr[j]\n    })\n  \
    \  return arr\n}\n", "    result := make([]int, len(arr))\n    count := make(map[int]int,\
    \ len(arr))\n    for _, v := range arr {\n        count[v]++\n    }\n    for _,\
    \ v := range arr {\n        if count[v] == 1 {\n            result[count[v]] =\
    \ v\n            count[v]--\n        }\n    }\n    for _, v := range arr {\n \
    \       if count[v] == 0 {\n            result[count[v]] = v\n            count[v]--\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make([]int, len(arr))\n    for i := range arr {\n        count[arr[i]]++\n\
    \    }\n    for i := range count {\n        result[count[i]-1] = i\n    }\n  \
    \  for i := range result {\n        result[i] = arr[result[i]]\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    for i := range arr {\n        count[i] = 0\n    }\n    for _,\
    \ v := range arr {\n        count[v]++\n    }\n    for i := range count {\n  \
    \      result[i] = arr[i]\n    }\n    for i := range count {\n        if count[i]\
    \ == 0 {\n            continue\n        }\n        j := i\n        for {\n   \
    \         j := j - 1\n            if count[j] == 0 {\n                break\n\
    \            }\n            count[j]--\n            tmp := result[j]\n       \
    \     result[j] = result[i]\n            result[i] = tmp\n        }\n    }\n \
    \   return result\n}\n", "    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    i := 0\n    for _, v := range arr {\n        count[v]++\n   \
    \ }\n    for _, v := range arr {\n        if count[v] == 1 {\n            result[i]\
    \ = v\n            i++\n        }\n    }\n    for _, v := range arr {\n      \
    \  if count[v] > 1 {\n            count[v] -= 1\n            i -= 1\n        }\n\
    \    }\n    for _, v := range arr {\n        if count[v] == 0 {\n            result[i]\
    \ = v\n            i++\n        }\n    }\n    return result\n}\n", "    // Your\
    \ code here\n    result := make([]int, len(arr))\n    count := make([]int, len(arr))\n\
    \    for i := 0; i < len(arr); i++ {\n        count[arr[i]]++\n    }\n    for\
    \ i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n    for i :=\
    \ 0; i < len(arr); i++ {\n        if count[arr[i]] == 1 {\n            result[i]\
    \ = arr[i]\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if\
    \ count[arr[i]] > 1 {\n            result[i] = arr[i]\n        }\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i, j int) bool\
    \ {\n        oneCount := 0\n        for k := 0; k < len(arr); k++ {\n        \
    \    if arr[k] == 1 {\n                oneCount++\n            }\n        }\n\
    \        if oneCount > j-i {\n            return true\n        }\n        return\
    \ false\n    })\n    return arr\n}\n", "    result := make([]int, len(arr))\n\
    \    result := sort_array_test(arr, result)\n    return result\n}\n", "    //\
    \ Your code here\n    sort.Ints(arr)\n    return arr\n}\n", "    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n",
  "    // Write your code here\n    sort.Slice(arr, func(i, j int) bool {\n      \
    \  oneCount := 0\n        for k := 0; k < len(arr); k++ {\n            if arr[k]&(1<<uint(k))\
    \ == 0 {\n                oneCount++\n            }\n        }\n        if oneCount\
    \ > 0 {\n            return true\n        }\n        if oneCount == 0 {\n    \
    \        return false\n        }\n        return arr[j] < arr[i]\n    })\n   \
    \ return arr\n}\n", "    result := make([]int, len(arr))\n    count := make(map[int]int,\
    \ len(arr))\n    for i := range arr {\n        count[arr[i]]++\n    }\n    for\
    \ i := range arr {\n        result[count[arr[i]]] = arr[i]\n        count[arr[i]]++\n\
    \    }\n    return result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n",
  "    // Your code here\n    sort.Ints(arr)\n    return arr\n}\n", "    var result\
    \ []int\n    for _, v := range arr {\n        result := append(result, v)\n  \
    \  }\n    sort.Slice(result, func(i, j int) bool {\n        onesCount := binary.BigEndian.Uint32(result[i*4])\
    \ >> 3\n        zerosCount := binary.BigEndian.Uint32(result[i*4+1]) >> 3\n  \
    \      if onesCount > zerosCount {\n            return true\n        }\n     \
    \   if onesCount < zerosCount {\n            return false\n        }\n       \
    \ return result[j*4] > result[j*4+1]\n    })\n    return result\n}\n", "    //\
    \ Your code here\n    sort.Ints(arr)\n    return arr\n}\n", "    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n",
  "    // Your code here\n    sort.Ints(arr)\n    return arr\n}\n", "    result :=\
    \ make([]int, len(arr))\n    count := make([]int, len(arr))\n    for i := 0; i\
    \ < len(arr); i++ {\n        count[i] = 0\n    }\n    for _, v := range arr {\n\
    \        count[v]++\n    }\n    for i := 0; i < len(arr); i++ {\n        if count[i]\
    \ == 0 {\n            continue\n        }\n        j := i\n        for k := 0;\
    \ k < count[i]; k++ {\n            j := j + 1\n            if count[j] == 0 {\n\
    \                break\n            }\n        }\n        result[i] = arr[j]\n\
    \        count[i] = count[j] - 1\n    }\n    return result\n}\n", "    // Your\
    \ code here\n    sort.Ints(arr)\n    return arr\n}\n", "    // Your code here\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return arr\n}\n", "    //\
    \ Your code here\n    sort.Slice(arr, func(i, j int) bool {\n        onesCount\
    \ := binary.BigEndian.Uint64(arr[i]) >> 63\n        zerosCount := binary.BigEndian.Uint64(arr[j])\
    \ >> 63\n        if onesCount > zerosCount {\n            return true\n      \
    \  }\n        if onesCount < zerosCount {\n            return false\n        }\n\
    \        return arr[i] < arr[j]\n    })\n    return arr\n}\n", "    result :=\
    \ make([]int, len(arr))\n    count := make(map[int]int)\n    for _, v := range\
    \ arr {\n        count[v]++\n    }\n    for _, v := range arr {\n        if count[v]\
    \ == 1 {\n            result[count[v]] = v\n            count[v]++\n        }\n\
    \    }\n    for _, v := range arr {\n        if count[v] == 1 {\n            result[count[v]]\
    \ = v\n            count[v]++\n        }\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n    \
    \    count := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ == i {\n                count++\n            }\n        }\n        result[i]\
    \ = count\n    }\n    sort.Ints(result)\n    return result\n}\n", "    // Your\
    \ code here\n    sort.Ints(arr)\n    return arr\n}\n", "    result := make([]int,\
    \ len(arr))\n    for i := range arr {\n        ones, count := countOnes(arr[i])\n\
    \        result[i] = arr[i]\n        if count > 0 {\n            result[i] = arr[i]\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n   \
    \     count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n \
    \   }\n    for i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if count[i] > 1 {\n            result[i],\
    \ result[i+1] = result[i+1], result[i]\n        }\n    }\n    return result\n\
    }\n", "    // Your code here\n    sort.Ints(arr)\n    return arr\n}\n", "    //\
    \ Your code here\n    sort.Slice(arr, func(i, j int) bool {\n        onesCount\
    \ := 0\n        for k := 0; k < len(arr); k++ {\n            if arr[k]&(1<<uint(k))\
    \ == 0 {\n                onesCount++\n            }\n        }\n        if onesCount\
    \ > 0 {\n            return onesCount > arr[j]&(1<<uint(j))\n        }\n     \
    \   return arr[j] > arr[i]\n    })\n    return arr\n}\n", "    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i, v := range arr {\n\
    \        count[v]++\n    }\n    for i := range count {\n        result[i] = i\n\
    \    }\n    for i := range count {\n        count[i] = 0\n    }\n    for i :=\
    \ range result {\n        count[result[i]]++\n    }\n    for i := range count\
    \ {\n        result[i] = result[i] + count[i]\n    }\n    return result\n}\n",
  "    // Your code here\n    sort.Slice(arr, func(i, j int) bool {\n        oneCount\
    \ := 0\n        for k := 0; k < len(arr); k++ {\n            if arr[k] == 1 {\n\
    \                oneCount++\n            }\n        }\n        if oneCount > 0\
    \ {\n            return oneCount < len(arr)\n        }\n        return arr[i]\
    \ < arr[j]\n    })\n    return arr\n}\n", "    result := make([]int, len(arr))\n\
    \    result := sort_array_test(arr, result)\n    return result\n}\n", "    var\
    \ result []int\n    var count int\n    for _, v := range arr {\n        count\
    \ += v\n    }\n    for _, v := range arr {\n        if v == 0 {\n            continue\n\
    \        }\n        if count > 0 {\n            count -= v\n        } else {\n\
    \            count = v\n        }\n        result = append(result, v)\n    }\n\
    \    return result\n}\n", "    // Write your code here\n    sort.Ints(arr)\n \
    \   return arr\n}\n", "    // Your code here\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    return arr\n}\n", "    result := make([]int, len(arr))\n    result := sort_array_test(arr,\
    \ result)\n    return result\n}\n", "    result := make([]int, len(arr))\n   \
    \ result := sort_array_test(arr, result)\n    return result\n}\n", "    result\
    \ := make([]int, len(arr))\n    result := sort_array_test(arr, result)\n    return\
    \ result\n}\n", "    result := make([]int, len(arr))\n    count := make(map[int]int)\n\
    \    for _, v := range arr {\n        count[v]++\n    }\n    for _, v := range\
    \ arr {\n        result[count[v]-1] = v\n        count[v]--\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(arr))\n    result := sort_array_test(arr,\
    \ result)\n    return result\n}\n", "    // Your code here\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    return arr\n}\n", "    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    for i, v := range arr {\n        count[v]++\n    }\n    for i\
    \ := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n    for i := 0;\
    \ i < len(arr); i++ {\n        if count[arr[i]] == 1 {\n            result[i]\
    \ = arr[i]\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        result[i] = arr[i]\n    }\n    for\
    \ i := range count {\n        if count[i] == 0 {\n            continue\n     \
    \   }\n        j := i\n        for k := i - 1; k >= 0; k-- {\n            if count[k]\
    \ > count[j] {\n                result[k] = arr[j]\n                count[k]--\n\
    \                count[j]++\n                j = k\n            }\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(arr))\n    for\
    \ i := range arr {\n        count := 0\n        for j := range arr {\n       \
    \     if arr[j] == i {\n                count++\n            }\n        }\n  \
    \      if count == 1 {\n            result[i] = i\n        } else {\n        \
    \    decimalValue := count * 10\n            decimalValue += arr[i]\n        \
    \    result[i] = decimalValue\n        }\n    }\n    return result\n}\n", "  \
    \  // Your code here\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return\
    \ arr\n}\n", "    var result []int\n    result := make([]int, len(arr))\n    for\
    \ i := 0; i < len(arr); i++ {\n        oneCount := 0\n        oneIndex := -1\n\
    \        for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n     \
    \           oneCount++\n                if oneIndex == -1 {\n                \
    \    oneIndex = j\n                }\n            }\n        }\n        if oneCount\
    \ > 1 {\n            oneIndex := oneIndex + 1\n        }\n        result[i] =\
    \ arr[i]\n    }\n    for i := 0; i < len(arr); i++ {\n        oneCount := 0\n\
    \        oneIndex := -1\n        for j := 0; j < len(arr); j++ {\n           \
    \ if arr[j] == 1 {\n                oneCount++\n                if oneIndex ==\
    \ -1 {\n                    oneIndex = j\n                }\n            }\n \
    \       }\n        if oneCount > 1 {\n            oneIndex := oneIndex + 1\n \
    \       }\n        result[i] = arr[i]\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(arr))\n    count := make([]int, len(arr))\n    for i := range\
    \ arr {\n        count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        result[i] = arr[i]\n    }\n    for\
    \ i := range count {\n        if count[i] == 0 {\n            continue\n     \
    \   }\n        j := i\n        for j--; j >= 0 && count[j] == 0; j-- {\n     \
    \   }\n        if j == -1 {\n            break\n        }\n        result[i] =\
    \ arr[j]\n    }\n    return result\n}\n", "    // Write your code here\n    sort.Ints(arr)\n\
    \    return arr\n}\n", "    // Your code here\n    sort.Slice(arr,func(i, j int)\
    \ bool {\n        onesCount := binary.BigEndian.Uint32(arr[i]) >> 32\n       \
    \ zerosCount := binary.BigEndian.Uint32(arr[j]) >> 32\n        if onesCount <\
    \ zerosCount {\n            return true\n        }\n        if onesCount > zerosCount\
    \ {\n            return false\n        }\n        return arr[i] < arr[j]\n   \
    \ })\n    return arr\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        oneCount := 0\n        for k := 0; k < len(arr); k++\
    \ {\n            if arr[k] == 1 {\n                oneCount++\n            }\n\
    \        }\n        if oneCount > 0 {\n            return true\n        }\n  \
    \      if oneCount == 0 {\n            return false\n        }\n        return\
    \ arr[j] < arr[i]\n    })\n    return arr\n}\n", "    // Your code here\n    sort.Slice(arr,\
    \ 0, len(arr), func(i, j int) bool {\n        onesCount := 0\n        for k :=\
    \ 0; k < len(arr); k++ {\n            if arr[k]&1 == 1 {\n                onesCount++\n\
    \            }\n        }\n        if onesCount > 0 {\n            return onesCount\
    \ < len(arr)\n        }\n        return arr[i] < arr[j]\n    })\n    return arr\n\
    }\n", "    result := make([]int, len(arr))\n    for i := 0; i < len(arr); i++\
    \ {\n        count := 0\n        for j := 0; j < len(arr); j++ {\n           \
    \ if arr[j] == i {\n                count++\n            }\n        }\n      \
    \  if count > 0 {\n            result[i] = count\n        } else {\n         \
    \   result[i] = arr[i]\n        }\n    }\n    return result\n}\n", "    // Your\
    \ code here\n    sort.Ints(arr)\n    return arr\n}\n", "    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make([]int, len(arr))\n    for i, v := range arr {\n        count[v]++\n\
    \    }\n    for i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if count[arr[i]] == 1 {\n      \
    \      j := i\n            for ; j < len(arr) && count[arr[j]] > 0; j++ {\n  \
    \              count[arr[j]] -= 1\n            }\n            result[i] = arr[j]\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make([]int, len(arr))\n    for i := range arr {\n        count[i]\
    \ = 0\n    }\n    for _, v := range arr {\n        count[v]++\n    }\n    for\
    \ i := range count {\n        result[i] = arr[i]\n    }\n    for i := range count\
    \ {\n        if count[i] == 0 {\n            continue\n        }\n        j :=\
    \ i\n        for j--; j >= 0 && count[j] == 0; j-- {\n        }\n        if j\
    \ == -1 {\n            break\n        }\n        result[i] = arr[j]\n    }\n \
    \   return result\n}\n", "    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    for i := range arr {\n        count[i] = 0\n    }\n    for _,\
    \ v := range arr {\n        count[v]++\n    }\n    for i := range count {\n  \
    \      result[i] = arr[i]\n    }\n    for i := range count {\n        if count[i]\
    \ > 1 {\n            j := i\n            for k := i - 1; k >= 0; k-- {\n     \
    \           if count[k] == count[j] {\n                    result[k] = arr[j]\n\
    \                    count[k]--\n                    j--\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[i] = 0\n    }\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for i := range count {\n        result[i] = 0\n    }\n    for i :=\
    \ range count {\n        if count[i] > 0 {\n            result[i] = i\n      \
    \  }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result {\n        if count[result[i]] == 0 {\n\
    \            result[i] = -1\n        }\n    }\n    for i := range result {\n \
    \       if count[result[i]] > 0 {\n            result[i] = result[i]\n       \
    \ }\n    }\n    for i := range result ", "    // Your code here\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        onesCount := 0\n        for k := 0; k < len(arr);\
    \ k++ {\n            if arr[k] == 1 {\n                onesCount++\n         \
    \   }\n        }\n        if onesCount > 0 {\n            return onesCount > arr[j].(float64)\
    \ - arr[i].(float64)\n        } else {\n            return arr[j].(float64) -\
    \ arr[i].(float64)\n        }\n    })\n    return arr\n}\n", "    // Your code\
    \ here\n    sort.Ints(arr)\n    return arr\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make(map[int]int, len(arr))\n    for i := range arr {\n        count[arr[i]]++\n\
    \    }\n    for i := range arr {\n        if count[arr[i]] == 1 {\n          \
    \  result[i] = arr[i]\n        } else {\n            result[i] = count[arr[i]]\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make([]int, len(arr))\n    for i, v := range arr {\n        count[v]++\n\
    \    }\n    for _, v := range arr {\n        result[count[v]-1] = v\n        count[v]--\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(arr))\n    count\
    \ := make([]int, len(arr))\n    for i := range arr {\n        count[i] = 0\n \
    \   }\n    for _, v := range arr {\n        count[v]++\n    }\n    for i := range\
    \ count {\n        result[i] = arr[i]\n    }\n    for i := range count {\n   \
    \     if count[i] > 1 {\n            result[i] = result[i] + result[i]\n     \
    \   }\n    }\n    return result\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make(map[int]int)\n    for _, v := range arr {\n        count[v]++\n\
    \    }\n    for _, v := range arr {\n        result[count[v]-1] = v\n        count[v]--\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(arr))\n    count\
    \ := make([]int, len(arr))\n    for i := range arr {\n        count[i] = 0\n \
    \   }\n    for _, v := range arr {\n        count[v]++\n    }\n    for i := range\
    \ count {\n        result[i] = arr[i]\n    }\n    for i := range count {\n   \
    \     if count[i] == 0 {\n            continue\n        }\n        j := i\n  \
    \      for {\n            j += 1\n            if count[j] == 0 {\n           \
    \     break\n            }\n            if count[j] < count[i] {\n           \
    \     result[i], result[j] = result[j], result[i]\n            }\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        oneCount := 0\n    \
    \    for j := 0; j < len(arr); j++ {\n            if arr[j] == 1 {\n         \
    \       oneCount++\n            }\n        }\n        if oneCount > 0 {\n    \
    \        oneCount -= 1\n        }\n        result[i] = oneCount\n    }\n    for\
    \ i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n     \
    \       if result[j] > result[i] {\n                tmp := result[j]\n       \
    \         result[j] = result[i]\n                result[i] = tmp\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(arr))\n\
    \    result := sort_array_test(arr, result)\n    return result\n}\n", "    //\
    \ Write your code here\n    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        count[arr[i]]++\n  \
    \  }\n    for i := 0; i < len(arr); i++ {\n        result[i] = arr[i]\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if count[arr[i]] == 1 {\n      \
    \      result[i] = arr[i]\n        }\n    }\n    for i := 0; i < len(arr); i++\
    \ {\n        if count[arr[i]] > 1 {\n            result[i] = arr[i]\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(arr))\n    count\
    \ := make(map[int]int)\n    for _, v := range arr {\n        count[v]++\n    }\n\
    \    for _, v := range arr {\n        if count[v] == 1 {\n            result[count[v]]\
    \ = v\n        }\n    }\n    return result\n}\n", "    // Your code here\n   \
    \ sort.Slice(arr, func(i, j int) bool {\n        if arr[i] == 1 {\n          \
    \  return true\n        }\n        if arr[j] == 1 {\n            return false\n\
    \        }\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n", "  \
    \  var result []int\n    for _, v := range arr {\n        result := make([]int,\
    \ len(arr))\n        for i := range arr {\n            if arr[i] == 1 {\n    \
    \            result[i] = v\n            }\n        }\n        sort.Ints(result)\n\
    \        result = append(result, v)\n    }\n    return result\n}\n", "    // Your\
    \ code here\n    sort.Slice(arr, func(i, j int) bool {\n        oneCount := 0\n\
    \        for k := 0; k < len(arr); k++ {\n            if arr[k]&(1<<uint(k)) ==\
    \ 0 {\n                oneCount++\n            }\n        }\n        if oneCount\
    \ > len(arr)/2 {\n            return true\n        }\n        return false\n \
    \   })\n    return arr\n}\n", "    // Your code here\n    sort.Ints(arr)\n   \
    \ return arr\n}\n", "    // Write your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        ones, _ := strconv.Atoi(arr[i])\n        others, _ :=\
    \ strconv.Atoi(arr[j])\n        return ones < others\n    })\n    return arr\n\
    }\n", "    result := make([]int, len(arr))\n    count := make([]int, len(arr))\n\
    \    for i := 0; i < len(arr); i++ {\n        count[i] = 0\n        for j := 0;\
    \ j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                count[i]++\n\
    \            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n      \
    \  result[i] = arr[i]\n    }\n    for i := 0; i < len(arr); i++ {\n        if\
    \ count[i] > 1 {\n            result[i] = count[i]\n        }\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    return arr\n}\n", "    // Your code here\n    sort.Slice(arr, func(i, j int)\
    \ bool {\n        onesCount := 0\n        for k := 0; k < len(arr); k++ {\n  \
    \          if arr[k] == 1 {\n                onesCount++\n            }\n    \
    \    }\n        if onesCount > 0 {\n            return onesCount > arr[j].(bool)\n\
    \        } else {\n            return arr[j].(bool) < arr[i].(bool)\n        }\n\
    \    })\n    return arr\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        if arr[i] == 1 {\n            return true\n        }\n\
    \        if arr[j] == 1 {\n            return false\n        }\n        return\
    \ arr[i]-arr[j] <= 0\n    })\n    return arr\n}\n", "    var result []int\n  \
    \  for _, v := range arr {\n        result := append(result, v)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    var result []int\n    var count int\n    for _,\
    \ v := range arr {\n        if v == 0 {\n            count++\n        } else {\n\
    \            count = 0\n        }\n        result = append(result, v)\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if count == 0 {\n            result\
    \ = append(result, arr[i])\n        }\n        if count == 1 {\n            if\
    \ arr[i] > 0 {\n                result = append(result, arr[i]-1)\n          \
    \  }\n        }\n        if count > 1 {\n            if arr[i] > 0 {\n       \
    \         result = append(result, arr[i]-2)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    // Your code here\n    sort.Slice(arr, func(i,\
    \ j int) bool {\n        if arr[i] == 1 {\n            return true\n        }\n\
    \        if arr[j] == 1 {\n            return false\n        }\n        return\
    \ arr[i] < arr[j]\n    })\n    return arr\n}\n", "    // Your code here\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    return arr\n}\n", "    var result []int\n    var count int\n    for _, v\
    \ := range arr {\n        if v == 0 {\n            count++\n        } else {\n\
    \            count = 0\n        }\n        result = append(result, v)\n    }\n\
    \    if count == 0 {\n        return arr\n    }\n    for _, v := range arr {\n\
    \        if v == 0 {\n            continue\n        }\n        if count > 0 {\n\
    \            if result[len(result)-1] < v {\n                result = append(result,\
    \ v)\n            }\n        } else {\n            if v < result[len(result)-1]\
    \ {\n                result = append(result, v)\n            }\n        }\n  \
    \  }\n    return result\n}\n", "    // Your code here\n    result := make([]int,\
    \ len(arr))\n    count := make(map[int]int)\n    for _, v := range arr {\n   \
    \     count[v]++\n    }\n    for _, v := range arr {\n        if count[v] == 1\
    \ {\n            result[count[v]] = v\n        }\n    }\n    for _, v := range\
    \ arr {\n        if count[v] == 1 {\n            result[count[v]] = v\n      \
    \  }\n    }\n    return result\n}\n", "    result := make([]int, len(arr))\n \
    \   result := sort_array_test(arr, result)\n    return result\n}\n", "    result\
    \ := make([]int, len(arr))\n    result := sort_array_test(arr, result)\n    return\
    \ result\n}\n", "    // Write your code here\n    sort.Slice(arr, func(i, j int)\
    \ bool {\n        oneCount := 0\n        for k := 0; k < len(arr); k++ {\n   \
    \         if arr[k] == 1 {\n                oneCount++\n            }\n      \
    \  }\n        if oneCount > 0 {\n            return true\n        }\n        if\
    \ oneCount == 0 {\n            return false\n        }\n        return arr[j]\
    \ < arr[i]\n    })\n    return arr\n}\n", "    var result []int\n    for _, v\
    \ := range arr {\n        result := append(result, v)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(arr))\n    result :=\
    \ sort_array_test(arr, result)\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        ones, count := count_ones(arr[i])\n\
    \        result[i] = arr[i]\n        if count > 1 {\n            decimal, err\
    \ := decimal(arr[i])\n            if err != nil {\n                panic(err)\n\
    \            }\n            decimal = decimal * 10 + ones\n            result[i]\
    \ = decimal\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    result := sort_array_test(arr, result)\n    return result\n}\n",
  "    result := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n    \
    \    oneCount := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ == 1 {\n                oneCount++\n            }\n        }\n        if oneCount\
    \ > 0 {\n            result[i] = oneCount\n        } else {\n            result[i]\
    \ = arr[i]\n        }\n    }\n    return result\n}\n", "    // Your code here\n\
    \    sort.Ints(arr)\n    return arr\n}\n", "    result := make([]int, len(arr))\n\
    \    count := make(map[int]int, len(arr))\n    for _, v := range arr {\n     \
    \   count[v]++\n    }\n    for _, v := range arr {\n        if count[v] == 1 {\n\
    \            result[count[v]] = v\n        }\n    }\n    for _, v := range arr\
    \ {\n        count[v]--\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(arr))\n    count\
    \ := make(map[int]int)\n    for _, v := range arr {\n        count[v]++\n    }\n\
    \    for _, v := range arr {\n        if count[v] == 1 {\n            result[count[v]]\
    \ = v\n        } else {\n            count[v]--\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(arr))\n    count := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        count[i] = 0\n    }\n\
    \    for _, v := range arr {\n        count[v]++\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        result[i] = arr[i]\n    }\n    for i := 0; i < len(arr); i++\
    \ {\n        if count[i] > 1 {\n            j := i\n            for k := 0; k\
    \ < count[i]; k++ {\n                j--\n                result[j+1] = result[j]\n\
    \            }\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(arr))\n    count := make([]int, len(arr))\n    for i := range arr {\n  \
    \      count[arr[i]]++\n    }\n    for i := range count {\n        result[count[i]-1]\
    \ = i\n    }\n    for i := range result {\n        result[i] = arr[result[i]]\n\
    \    }\n    return result\n}\n", "    var result []int\n    var count int\n  \
    \  for _, v := range arr {\n        if v == 0 {\n            count++\n       \
    \ } else {\n            count = 0\n        }\n        result = append(result,\
    \ v)\n        if count == 1 {\n            result = append(result, 0)\n      \
    \  }\n    }\n    return sort_array_test(result)\n}\n", "    var result []int\n\
    \    var count int\n    for _, v := range arr {\n        if v == 0 {\n       \
    \     count++\n        } else {\n            count = 0\n        }\n        result\
    \ = append(result, v)\n    }\n    if count > 0 {\n        result = append(result,\
    \ count)\n    }\n    sort.Ints(result)\n    return result\n}\n", "    var result\
    \ []int\n    var count int\n    for _, v := range arr {\n        count += v\n\
    \    }\n    for _, v := range arr {\n        if v > 0 {\n            count -=\
    \ v\n        } else {\n            result += v\n        }\n    }\n    for _, v\
    \ := range arr {\n        if v > 0 {\n            result += v\n        }\n   \
    \ }\n    for _, v := range arr {\n        if v > 0 {\n            count += v\n\
    \        }\n    }\n    for _, v := range arr {\n        if v > 0 {\n         \
    \   count -= v\n        }\n    }\n    for _, v := range arr {\n        if v >\
    \ 0 {\n            result += v\n        }\n    }\n    for _, v := range arr {\n\
    \        if v > 0 {\n            count += v\n        }\n    }\n    for _, v :=\
    \ range arr {\n        if v > 0 {\n            count -= v\n        }\n    }\n\
    \    for _, v := range arr {\n        if v > 0 {\n            result += v\n  \
    \      }\n    }\n    for _, v := range arr {\n        if v > 0 {\n           \
    \ count += v\n        }\n    }\n    for _, v := range arr {\n        if v > 0\
    \ {\n            count -= v\n        }\n    }\n    for _, v := range arr {\n \
    \       if v > 0 {\n            result += v\n        }\n    }\n    for _, v :=\
    \ range arr {\n        if v > 0 {\n            count += v\n        }\n    }\n\
    \    for _, v := range arr {\n        if v > 0 {\n            count -= v\n   \
    \     }\n    }\n    for _, v := range arr {\n        if v > 0 {\n            result\
    \ += v\n        }\n    }\n    for _, v := range arr {\n        if v > 0 {\n  \
    \          count += v\n        }\n    }\n    for _, v := range arr {\n       \
    \ if v > 0 {\n            count -= v\n        }\n    }\n    for _, v := range\
    \ arr {\n        if v > 0 {\n            result += v\n        }\n    }\n    for\
    \ _, v := range arr {\n        if v > 0 {\n            count += v\n        }\n\
    \    }\n    for _, v := range arr {\n        if v > 0 {\n            count -=\
    \ v\n        }\n    }\n    for _, v := range arr {\n        if v > 0 {\n     \
    \       result += v\n        }\n    }\n    for _, v := range arr {\n        if\
    \ v > 0 {\n            count += v\n        }\n    }\n    for _, v := range arr\
    \ {\n        if v > 0 {\n            count -= v\n        }\n    }\n    for _,\
    \ v := range ", "    var result []int\n    var count int\n    for _, v := range\
    \ arr {\n        count += int(v)\n    }\n    for _, v := range arr {\n       \
    \ if int(v) == count {\n            result = append(result, v)\n        }\n  \
    \  }\n    for _, v := range arr {\n        if int(v) != count {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
