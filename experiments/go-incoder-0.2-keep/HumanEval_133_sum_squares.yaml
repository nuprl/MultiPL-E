name: HumanEval_133_sum_squares
language: go_test.go
prompt: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // You are given a list of numbers.\n// You need to return the sum of squared numbers\
  \ in the given list,\n// round each element in the list to the upper int(Ceiling)\
  \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
  \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be\
  \ 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
  \ the output should be 6\nfunc sum_squares(lst []float64) int {\n"
tests: "func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
  \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
  \ candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4,\
  \ 4.2, 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
  \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
  \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
  \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n   \
  \  { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n \
  \    { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
  \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
  \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var sum int = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v\
    \ * v))\n    }\n    return sum\n}\n", "    var sum int = 0\n    for _, v := range\
    \ lst {\n        sum += int(math.Ceil(v*v))\n    }\n    return sum\n}\n", "  \
    \  var sum int = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n\
    \    }\n    return sum\n}\n", "    var sum int = 0\n    for _, v := range lst\
    \ {\n        sum += int(math.Ceil(v * v))\n    }\n    return sum\n}\n", "    var\
    \ sum int = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v * v))\n\
    \    }\n    return sum\n}\n", "    sum := 0\n    for _, v := range lst {\n   \
    \     sum += v * v\n    }\n    return int(math.Ceil(sum))\n}\n", "    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n", "    sum := 0\n    for _, v := range lst {\n        sum += v * v\n    }\n\
    \    return int(math.Ceil(sum))\n}\n", "    sum := 0\n    for _, v := range lst\
    \ {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n}\n", "    sum\
    \ := 0\n    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n", "    sum := 0\n    for _, v := range lst {\n        sum += v * v\n    }\n\
    \    return int(math.Ceil(sum))\n}\n", "    sum := 0\n    for _, v := range lst\
    \ {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n}\n", "    sum\
    \ := 0\n    for _, v := range lst {\n        sum += v*v\n    }\n    return int(math.Ceil(sum))\n\
    }\n", "    var sum int = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v\
    \ * v))\n    }\n    return sum\n}\n", "    var sum int = 0\n    for _, v := range\
    \ lst {\n        sum += int(math.Ceil(v*v))\n    }\n    return sum\n}\n", "  \
    \  var sum int = 0\n    for _, v := range lst {\n        sum += int(math.Ceil(v*v))\n\
    \    }\n    return sum\n}\n", "    sum := 0\n    for _, v := range lst {\n   \
    \     sum += v*v\n    }\n    return int(math.Ceil(sum))\n}\n", "    sum := 0\n\
    \    for _, v := range lst {\n        sum += v * v\n    }\n    return int(math.Ceil(sum))\n\
    }\n", "    sum := 0\n    for _, v := range lst {\n        sum += v * v\n    }\n\
    \    return int(math.Ceil(sum))\n}\n", "    var sum int = 0\n    for _, v := range\
    \ lst {\n        sum += int(math.Ceil(v*v))\n    }\n    return sum\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
