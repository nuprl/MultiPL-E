language: go_test.go
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return lst[0] < lst[0]\n\
    \    }\n    if lst[0] != lst[len(lst)-1] {\n        return false\n    }\n    for\
    \ i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmp_in8yg_5_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmp_in8yg_5_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmp_in8yg_5_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmp_in8yg_5_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__7\
    \ (0.00s)\n        tmp_in8yg_5_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp_in8yg_5_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp_in8yg_5_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    lastNum := lst[0]\n    for _, num := range lst[1:]\
    \ {\n        if num > lastNum {\n            return false\n        }\n       \
    \ lastNum = num\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmprblng13e_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmprblng13e_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmprblng13e_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmprblng13e_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmprblng13e_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmprblng13e_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmprblng13e_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for {\n     \
    \   if i == j {\n            break\n        }\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpmwocoo9u_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpmwocoo9u_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpmwocoo9u_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpmwocoo9u_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpmwocoo9u_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for {\n     \
    \   if i == j {\n            break\n        }\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        if lst[i] < lst[j] {\n         \
    \   i++\n            j--\n        } else {\n            i++\n            j--\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpgz_q9bh1_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpgz_q9bh1_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpgz_q9bh1_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpgz_q9bh1_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpgz_q9bh1_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    prev := lst[0]\n    for _, val := range lst[1:]\
    \ {\n        if val > prev {\n            return false\n        }\n        prev\
    \ = val\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpbz_cagpo_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpbz_cagpo_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpbz_cagpo_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmpbz_cagpo_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpbz_cagpo_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpbz_cagpo_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for i < j {\n\
    \        if lst[i] > lst[j] {\n            return false\n        }\n        i++\n\
    \        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpydbcm44y_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpydbcm44y_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpydbcm44y_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpydbcm44y_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst[1:] {\n        if v > last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpbyfejefl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpbyfejefl_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpbyfejefl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpbyfejefl_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpbyfejefl_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpbyfejefl_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpbyfejefl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    i := 0\n    j := len(lst) - 1\n    for i < j {\n\
    \        if lst[i] > lst[j] {\n            return false\n        }\n        i++\n\
    \        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpswpzmolw_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpswpzmolw_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpswpzmolw_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpswpzmolw_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpswpzmolw_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, val := range lst {\n\
    \        if val > last {\n            return false\n        }\n        last =\
    \ val\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v > last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpre9nepgw_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpre9nepgw_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpre9nepgw_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpre9nepgw_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpre9nepgw_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpre9nepgw_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpre9nepgw_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp7xitcx2b_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpamuq2v7c_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpamuq2v7c_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpamuq2v7c_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpamuq2v7c_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpamuq2v7c_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    for {\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        if i == j {\n            break\n\
    \        }\n        if lst[i] != lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v < last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp26jac922_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp7xitcx2b_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp7xitcx2b_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    i := 0\n    j := len(lst) - 1\n    k := 0\n   \
    \ for {\n        if i == j {\n            break\n        }\n        if lst[i]\
    \ > lst[j] {\n            return false\n        }\n        if lst[i] < lst[j]\
    \ {\n            i++\n            j--\n        } else {\n            i++\n   \
    \         j--\n            k++\n        }\n    }\n    return k == len(lst)\n}\n\
    \nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpw_nir8h5_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpw_nir8h5_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpw_nir8h5_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpw_nir8h5_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpw_nir8h5_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpw_nir8h5_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpw_nir8h5_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpw_nir8h5_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, val := range lst[1:]\
    \ {\n        if val > last {\n            return false\n        }\n        last\
    \ = val\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp__9rlzmy_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp__9rlzmy_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp__9rlzmy_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmp__9rlzmy_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp__9rlzmy_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp__9rlzmy_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v > last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpjauhpb5n_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpjauhpb5n_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpjauhpb5n_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmpjauhpb5n_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpjauhpb5n_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpjauhpb5n_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    prev := lst[0]\n    for _, val := range lst {\n\
    \        if val > prev {\n            return false\n        }\n        prev =\
    \ val\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3qhphn1g_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3qhphn1g_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3qhphn1g_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmp3qhphn1g_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp3qhphn1g_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp3qhphn1g_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpqquksh80_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpqquksh80_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    for {\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        if i == j {\n            break\n\
    \        }\n        if lst[i] != lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v > last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpre9nepgw_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpre9nepgw_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpre9nepgw_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpre9nepgw_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpre9nepgw_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpre9nepgw_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpre9nepgw_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp7xitcx2b_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpamuq2v7c_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpamuq2v7c_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpamuq2v7c_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpamuq2v7c_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpamuq2v7c_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for {\n     \
    \   if i == j {\n            break\n        }\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpmwocoo9u_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpmwocoo9u_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpmwocoo9u_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpmwocoo9u_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpmwocoo9u_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return lst[0] < lst[0]\n\
    \    }\n    i := 0\n    j := len(lst) - 1\n    found := false\n    for i < j {\n\
    \        if lst[i] < lst[j] {\n            found = true\n            break\n \
    \       }\n        if lst[i] > lst[j] {\n            found = false\n         \
    \   break\n        }\n        i++\n        j--\n    }\n    return found\n}\n\n\
    func TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpr219y7vj_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__2 (0.00s)\n        tmpr219y7vj_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpr219y7vj_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpr219y7vj_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpr219y7vj_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpr219y7vj_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    prev := lst[0]\n    for _, v := range lst[1:] {\n\
    \        if v < prev {\n            return false\n        }\n        prev = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpuo49f1iy_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpuo49f1iy_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, val := range lst {\n\
    \        if val > last {\n            return false\n        }\n        last =\
    \ val\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return lst[0] > 0\n\
    \    }\n    last := lst[0]\n    for _, v := range lst[1:] {\n        if v > last\
    \ {\n            return false\n        }\n        last = v\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpe59xsw2m_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpe59xsw2m_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpe59xsw2m_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmpe59xsw2m_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpe59xsw2m_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpe59xsw2m_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return lst[0] < lst[1]\n\
    \    }\n    i := 0\n    j := len(lst) - 1\n    k := 0\n    for {\n        if i\
    \ == j {\n            break\n        }\n        if lst[i] > lst[j] {\n       \
    \     return false\n        }\n        if lst[i] < lst[j] {\n            i++\n\
    \            j--\n        } else {\n            i++\n            k++\n       \
    \ }\n    }\n    return k == len(lst)\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_sorted(...)\n\t/tmp/tmpn3ay6n82_test.go:25\n\
    command-line-arguments_test.TestIs_Sorted(0x0?)\n\t/tmp/tmpn3ay6n82_test.go:55\
    \ +0x1b\ntesting.tRunner(0xc000198ea0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return lst[0] < lst[1]\n\
    \    }\n    i := 0\n    j := len(lst) - 1\n    for {\n        if lst[i] > lst[j]\
    \ {\n            return false\n        }\n        if i == j {\n            break\n\
    \        }\n        if lst[i] != lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_sorted(...)\n\t/tmp/tmpo46tzk6k_test.go:25\n\
    command-line-arguments_test.TestIs_Sorted(0x0?)\n\t/tmp/tmpo46tzk6k_test.go:52\
    \ +0x1b\ntesting.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v < last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpsqrf4svi_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpsqrf4svi_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[len(lst)-1] {\n        return false\n    }\n    for i :=\
    \ 1; i < len(lst); i++ {\n        if lst[i] > lst[i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpontae7xj_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpontae7xj_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpontae7xj_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpontae7xj_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpontae7xj_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpontae7xj_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v < last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpsqrf4svi_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpsqrf4svi_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp7xitcx2b_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v < last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp26jac922_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpqquksh80_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpqquksh80_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    i := 0\n    j := len(lst) - 1\n    for i < j {\n\
    \        if lst[i] > lst[j] {\n            return false\n        }\n        i++\n\
    \        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpswpzmolw_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpswpzmolw_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpswpzmolw_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpswpzmolw_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpswpzmolw_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpamuq2v7c_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpamuq2v7c_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpamuq2v7c_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpamuq2v7c_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpamuq2v7c_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 2
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    k := 0\n    for {\n        if lst[i] >\
    \ lst[j] {\n            return false\n        }\n        if i == j {\n       \
    \     break\n        }\n        if lst[i] < lst[j] {\n            i++\n      \
    \      j--\n            continue\n        }\n        if lst[i] > lst[j] {\n  \
    \          i++\n        } else {\n            j--\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpipsp93sn_test.go:29:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075126
- exit_code: 2
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if len(lst) == 2 {\n        return lst[0] < lst[1]\n    }\n    last, ok :=\
    \ lst[len(lst)-1]\n    for i := len(lst)-2; i >= 0; i-- {\n        if lst[i] >\
    \ last {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe3nygyq8_test.go:30:17: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp7xitcx2b_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last, i := lst[0], 0\n    for _, j := range lst\
    \ {\n        if j > last {\n            return false\n        }\n        if j\
    \ == last {\n            i++\n        }\n        last = j\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpabkkap8d_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpabkkap8d_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpabkkap8d_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmpabkkap8d_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpabkkap8d_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpabkkap8d_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpqquksh80_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpqquksh80_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    k := 0\n    for {\n        if lst[i] >\
    \ lst[j] {\n            return false\n        }\n        if i == j {\n       \
    \     break\n        }\n        if lst[i] > lst[j] {\n            i++\n      \
    \      j = k\n        } else {\n            j--\n            k++\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp29tn6lnd_test.go:73: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmp29tn6lnd_test.go:73:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp29tn6lnd_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp29tn6lnd_test.go:73:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp29tn6lnd_test.go:73: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    prev := lst[0]\n    for _, v := range lst {\n  \
    \      if v < prev {\n            return false\n        }\n        prev = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp_7d4l2by_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp_7d4l2by_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    for {\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        if i == j {\n            break\n\
    \        }\n        if lst[i] != lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, val := range lst {\n\
    \        if val > last {\n            return false\n        }\n        last =\
    \ val\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, val := range lst[1:] {\n        if val > last\
    \ {\n            return false\n        }\n        last = val\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp1obu2rtv_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp1obu2rtv_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp1obu2rtv_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp1obu2rtv_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp1obu2rtv_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp1obu2rtv_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp1obu2rtv_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    for {\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        if i == j {\n            break\n\
    \        }\n        if lst[i] < lst[j] {\n            i++\n            j--\n \
    \       } else {\n            i++\n            j--\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp42p2ts9r_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp42p2ts9r_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmp42p2ts9r_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp42p2ts9r_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp42p2ts9r_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp42p2ts9r_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    i := 0\n    j := len(lst) - 1\n    for i < j {\n\
    \        if lst[i] > lst[j] {\n            return false\n        }\n        i++\n\
    \        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpswpzmolw_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpswpzmolw_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpswpzmolw_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpswpzmolw_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpswpzmolw_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    i := 0\n    j := len(lst) - 1\n    for {\n    \
    \    if i == j {\n            break\n        }\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpxmjma53e_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpxmjma53e_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpxmjma53e_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpxmjma53e_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpxmjma53e_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpxmjma53e_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    i := 0\n    j := len(lst) - 1\n    count := 0\n\
    \    for {\n        if i == j {\n            break\n        }\n        if lst[i]\
    \ > lst[j] {\n            count++\n        }\n        if count > 1 {\n       \
    \     return false\n        }\n        i++\n        j--\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp4dw4_4lc_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp4dw4_4lc_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmp4dw4_4lc_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmp4dw4_4lc_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp4dw4_4lc_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp4dw4_4lc_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for {\n     \
    \   if i == j {\n            break\n        }\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpmwocoo9u_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpmwocoo9u_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpmwocoo9u_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpmwocoo9u_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpmwocoo9u_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst {\n        if v > last {\n    \
    \        return false\n        }\n        last = v\n    }\n    return true\n}\n\
    \nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpw1xqbg0s_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpw1xqbg0s_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpw1xqbg0s_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpw1xqbg0s_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpw1xqbg0s_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpw1xqbg0s_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpw1xqbg0s_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return lst[0] == lst[0]\n\
    \    }\n    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpx8dm4ktt_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpx8dm4ktt_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpx8dm4ktt_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpx8dm4ktt_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpx8dm4ktt_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp7xitcx2b_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v < last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp26jac922_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v < last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp26jac922_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, val := range lst {\n\
    \        if val > last {\n            return false\n        }\n        last =\
    \ val\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp5dkmch4n_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp5dkmch4n_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp5dkmch4n_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmp5dkmch4n_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp5dkmch4n_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp5dkmch4n_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    i := 0\n    j := len(lst) - 1\n    for i < j {\n\
    \        if lst[i] > lst[j] {\n            return false\n        }\n        i++\n\
    \        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpswpzmolw_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpswpzmolw_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpswpzmolw_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpswpzmolw_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpswpzmolw_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, val := range lst {\n\
    \        if val > last {\n            return false\n        }\n        last =\
    \ val\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp7xitcx2b_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpamuq2v7c_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpamuq2v7c_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpamuq2v7c_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpamuq2v7c_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpamuq2v7c_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    for {\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        if i == j {\n            break\n\
    \        }\n        if lst[i] != lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    for {\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        if i == j {\n            break\n\
    \        }\n        if lst[i] != lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return lst[0] < lst[0]\n\
    \    }\n    i := 0\n    j := len(lst) - 1\n    found := false\n    for i < j {\n\
    \        if lst[i] > lst[j] {\n            return false\n        }\n        if\
    \ lst[i] == lst[j] {\n            i++\n            j--\n            continue\n\
    \        }\n        if lst[i] < lst[j] {\n            found = true\n         \
    \   break\n        }\n    }\n    return found\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpr4mqipir_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__2 (0.00s)\n        tmpr4mqipir_test.go:72:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpr4mqipir_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpr4mqipir_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpr4mqipir_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpr4mqipir_test.go:72:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst {\n        if v < last {\n    \
    \        return false\n        }\n        last = v\n    }\n    return true\n}\n\
    \nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpxg3iplh6_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpxg3iplh6_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    for {\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        if i == j {\n            break\n\
    \        }\n        if lst[i] != lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpamuq2v7c_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpamuq2v7c_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpamuq2v7c_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpamuq2v7c_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpamuq2v7c_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last, i := lst[0], 1\n    for _, v := range lst[1:]\
    \ {\n        if v != last {\n            return false\n        }\n        i++\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp5wm05_9u_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp5wm05_9u_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp5wm05_9u_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp5wm05_9u_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp5wm05_9u_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp5wm05_9u_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    i := 0\n    j := len(lst) - 1\n    for i < j {\n\
    \        if lst[i] > lst[j] {\n            return false\n        }\n        i++\n\
    \        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpswpzmolw_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpswpzmolw_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpswpzmolw_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpswpzmolw_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpswpzmolw_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if len(lst) == 2 {\n        return lst[0] < lst[1]\n    }\n    i := 0\n \
    \   j := len(lst)-1\n    for {\n        if i == j {\n            break\n     \
    \   }\n        if lst[i] > lst[j] {\n            return false\n        }\n   \
    \     if lst[i] < lst[j] {\n            i++\n            j--\n        } else {\n\
    \            i++\n            j--\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmppws6voxs_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmppws6voxs_test.go:75:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmppws6voxs_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmppws6voxs_test.go:75:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmppws6voxs_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075127
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    k := 0\n    for {\n        if i == j {\n\
    \            break\n        }\n        if lst[i] > lst[j] {\n            return\
    \ false\n        }\n        if lst[i] < lst[j] {\n            k = i\n        }\n\
    \        i++\n        j--\n    }\n    return k == i\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpoh9_2a44_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpoh9_2a44_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpoh9_2a44_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpoh9_2a44_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpoh9_2a44_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpoh9_2a44_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075127
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return lst[0] < lst[0]\n\
    \    }\n    i := 0\n    j := len(lst) - 1\n    for {\n        if i == j {\n  \
    \          break\n        }\n        if lst[i] > lst[j] {\n            return\
    \ false\n        }\n        if lst[i] < lst[j] {\n            return true\n  \
    \      }\n        i++\n        j--\n    }\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmp520fdb5j_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__2 (0.00s)\n        tmp520fdb5j_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmp520fdb5j_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmp520fdb5j_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp520fdb5j_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp520fdb5j_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp7xitcx2b_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for i < j {\n\
    \        if lst[i] > lst[j] {\n            return false\n        }\n        i++\n\
    \        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpydbcm44y_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpydbcm44y_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpydbcm44y_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpydbcm44y_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v < last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp26jac922_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpqquksh80_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpqquksh80_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v > last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpre9nepgw_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpre9nepgw_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpre9nepgw_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpre9nepgw_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpre9nepgw_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpre9nepgw_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpre9nepgw_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    i := 0\n    j := len(lst) - 1\n    for {\n    \
    \    if i == j {\n            break\n        }\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpxmjma53e_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpxmjma53e_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpxmjma53e_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpxmjma53e_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpxmjma53e_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpxmjma53e_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    prev := lst[0]\n    for _, v := range lst[1:] {\n\
    \        if v < prev {\n            return false\n        }\n        prev = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpuo49f1iy_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpuo49f1iy_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return lst[0] < lst[1]\n\
    \    }\n    i := 0\n    j := len(lst) - 1\n    found := false\n    for i < j {\n\
    \        if lst[i] > lst[j] {\n            found = true\n            break\n \
    \       }\n        if lst[i] == lst[j] {\n            i++\n            j--\n \
    \       } else {\n            i++\n        }\n    }\n    return !found\n}\n\n\
    func TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_sorted(...)\n\t/tmp/tmp1iaurw7i_test.go:25\n\
    command-line-arguments_test.TestIs_Sorted(0x0?)\n\t/tmp/tmp1iaurw7i_test.go:52\
    \ +0x1b\ntesting.tRunner(0xc00019b1e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[len(lst)-1] {\n        return false\n    }\n    return is_sorted(lst[1:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp2kn1erzo_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp2kn1erzo_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp2kn1erzo_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp2kn1erzo_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp2kn1erzo_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp2kn1erzo_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    k := 0\n    for {\n        if i == j {\n\
    \            break\n        }\n        if lst[i] > lst[j] {\n            return\
    \ false\n        }\n        if lst[i] < lst[j] {\n            i++\n          \
    \  j--\n        } else {\n            i++\n            j--\n            k++\n\
    \        }\n    }\n    return k == len(lst)\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpko94cfhb_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpko94cfhb_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpko94cfhb_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpko94cfhb_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpko94cfhb_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpko94cfhb_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    k := 0\n    for {\n        if i == j {\n\
    \            break\n        }\n        if lst[i] > lst[j] {\n            return\
    \ false\n        }\n        if lst[i] < lst[j] {\n            return true\n  \
    \      }\n        if lst[i] == lst[j] {\n            i++\n            j--\n  \
    \          k++\n        }\n    }\n    return k == len(lst)\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp_h1uurhu_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmp_h1uurhu_test.go:74:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp_h1uurhu_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp_h1uurhu_test.go:74:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp_h1uurhu_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    k := 0\n    for {\n        if lst[i] >\
    \ lst[j] {\n            return false\n        }\n        if i == j {\n       \
    \     break\n        }\n        if lst[i] < lst[j] {\n            i++\n      \
    \      j--\n        } else {\n            i++\n            j--\n            k++\n\
    \        }\n    }\n    return k == len(lst)\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpsumutojl_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpsumutojl_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpsumutojl_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpsumutojl_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpsumutojl_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpsumutojl_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for {\n     \
    \   if i == j {\n            break\n        }\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmptyl7dxbn_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmptyl7dxbn_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmptyl7dxbn_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmptyl7dxbn_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmptyl7dxbn_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    found := false\n    for i < j {\n    \
    \    if lst[i] > lst[j] {\n            return false\n        }\n        if lst[i]\
    \ == lst[j] {\n            found = true\n        }\n        if found {\n     \
    \       i++\n            j--\n        }\n    }\n    return found\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075141
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v < last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpsqrf4svi_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpsqrf4svi_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 2
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    last, ok := lst[len(lst)-1]\n    for _, v := range\
    \ lst[:len(lst)-1] {\n        if v != last {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzy83mja6_test.go:24:17: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst {\n        if v < last {\n    \
    \        return false\n        }\n        last = v\n    }\n    return true\n}\n\
    \nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpi7aa6zwn_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpi7aa6zwn_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpi7aa6zwn_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpqquksh80_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpqquksh80_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    for {\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        if i == j {\n            break\n\
    \        }\n        if lst[i] != lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v > last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpre9nepgw_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpre9nepgw_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpre9nepgw_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpre9nepgw_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpre9nepgw_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpre9nepgw_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpre9nepgw_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    i := 0\n    j := len(lst) - 1\n    found := false\n\
    \    for i < j {\n        if lst[i] > lst[j] {\n            found = true\n   \
    \         break\n        }\n        if lst[i] < lst[j] {\n            found =\
    \ false\n            break\n        }\n        i++\n        j--\n    }\n    return\
    \ found\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpwtjeu45m_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpwtjeu45m_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpwtjeu45m_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmpwtjeu45m_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpwtjeu45m_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpwtjeu45m_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    k := 0\n    for {\n        if lst[i] >\
    \ lst[j] {\n            return false\n        }\n        if i == j {\n       \
    \     break\n        }\n        if lst[i] != lst[j] {\n            return false\n\
    \        }\n        i++\n        j--\n        k++\n    }\n    return true\n}\n\
    \nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpc_0p9agv_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpc_0p9agv_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpc_0p9agv_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpc_0p9agv_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpc_0p9agv_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpc_0p9agv_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return lst[0] < lst[1]\n\
    \    }\n    i := 0\n    j := len(lst) - 1\n    for {\n        if i == j {\n  \
    \          break\n        }\n        if lst[i] > lst[j] {\n            return\
    \ false\n        }\n        if lst[i] < lst[j] {\n            i++\n          \
    \  j--\n        } else {\n            i++\n            j--\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_sorted(...)\n\t/tmp/tmptqlmucoi_test.go:25\n\
    command-line-arguments_test.TestIs_Sorted(0x0?)\n\t/tmp/tmptqlmucoi_test.go:54\
    \ +0x1b\ntesting.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp7xitcx2b_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp7xitcx2b_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpqquksh80_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpqquksh80_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    k := 0\n    for {\n        if lst[i] >\
    \ lst[j] {\n            return false\n        }\n        if i == j {\n       \
    \     break\n        }\n        if lst[i] != lst[j] {\n            return false\n\
    \        }\n        i++\n        j--\n        k++\n    }\n    return true\n}\n\
    \nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpc_0p9agv_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpc_0p9agv_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpc_0p9agv_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpc_0p9agv_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpc_0p9agv_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpc_0p9agv_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    found := false\n    for i < j {\n    \
    \    if lst[i] > lst[j] {\n            return false\n        }\n        if lst[i]\
    \ == lst[j] {\n            found = true\n        }\n        if found {\n     \
    \       i++\n            j--\n        }\n    }\n    return found\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075141
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst {\n        if v != last {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpfb1cg4_z_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpfb1cg4_z_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpfb1cg4_z_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpfb1cg4_z_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpfb1cg4_z_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpfb1cg4_z_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    last, i := lst[0], 0\n    for _, j := range lst\
    \ {\n        if j > last {\n            return false\n        }\n        if j\
    \ == last {\n            i++\n        }\n        last = j\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpxc4m91lg_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpxc4m91lg_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpxc4m91lg_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmpxc4m91lg_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpxc4m91lg_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpxc4m91lg_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, val := range lst[1:]\
    \ {\n        if val > last {\n            return false\n        }\n        last\
    \ = val\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp__9rlzmy_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp__9rlzmy_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp__9rlzmy_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmp__9rlzmy_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp__9rlzmy_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp__9rlzmy_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    for {\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        if i == j {\n            break\n\
    \        }\n        if lst[i] != lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst[1:] {\n\
    \        if v > last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpgqc0l02r_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpgqc0l02r_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpgqc0l02r_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmpgqc0l02r_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpgqc0l02r_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpgqc0l02r_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v < last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp26jac922_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    k := 0\n    for {\n        if i == j {\n\
    \            break\n        }\n        if lst[i] > lst[j] {\n            return\
    \ false\n        }\n        if lst[i] < lst[j] {\n            i++\n          \
    \  j--\n        } else {\n            i++\n            j--\n            k++\n\
    \        }\n    }\n    return k == len(lst)\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp4tgux0n6_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp4tgux0n6_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp4tgux0n6_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp4tgux0n6_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp4tgux0n6_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v < last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp26jac922_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpqquksh80_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpqquksh80_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for {\n     \
    \   if i == j {\n            break\n        }\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        if lst[i] < lst[j] {\n         \
    \   i++\n            j--\n        } else {\n            i++\n            j--\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpgz_q9bh1_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpgz_q9bh1_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpgz_q9bh1_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpgz_q9bh1_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpgz_q9bh1_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    k := 0\n    for {\n        if i == j {\n\
    \            break\n        }\n        if lst[i] > lst[j] {\n            return\
    \ false\n        }\n        if lst[i] < lst[j] {\n            i++\n          \
    \  j--\n        } else {\n            i++\n            j--\n            k++\n\
    \        }\n    }\n    return k == len(lst)\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpko94cfhb_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpko94cfhb_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpko94cfhb_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpko94cfhb_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpko94cfhb_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpko94cfhb_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, val := range lst {\n\
    \        if val > last {\n            return false\n        }\n        last =\
    \ val\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst[1:] {\n        if v > last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpbyfejefl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpbyfejefl_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpbyfejefl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpbyfejefl_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpbyfejefl_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpbyfejefl_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpbyfejefl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpnyfnfhqs_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpnyfnfhqs_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for {\n     \
    \   if i == j {\n            break\n        }\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpmwocoo9u_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpmwocoo9u_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpmwocoo9u_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpmwocoo9u_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpmwocoo9u_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v < last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp26jac922_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    found := false\n    for i < j {\n    \
    \    if lst[i] > lst[j] {\n            found = true\n            break\n     \
    \   }\n        if lst[i] < lst[j] {\n            found = false\n            break\n\
    \        }\n        i++\n        j--\n    }\n    return found\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnm_53f32_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnm_53f32_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnm_53f32_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpnm_53f32_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpnm_53f32_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpnm_53f32_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpnm_53f32_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, val := range lst {\n\
    \        if val > last {\n            return false\n        }\n        last =\
    \ val\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpk0sea9yj_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpk0sea9yj_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpk0sea9yj_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmpk0sea9yj_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpk0sea9yj_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpk0sea9yj_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    i := 0\n    j := len(lst) - 1\n    for {\n    \
    \    if i == j {\n            break\n        }\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpxmjma53e_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpxmjma53e_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpxmjma53e_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpxmjma53e_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpxmjma53e_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpxmjma53e_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last, i := lst[0], 0\n    for _, v := range lst\
    \ {\n        if v != last {\n            return false\n        }\n        last\
    \ = v\n        i++\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpt22gxfaa_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpt22gxfaa_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpt22gxfaa_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpt22gxfaa_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpt22gxfaa_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpt22gxfaa_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst[1:] {\n        if v > last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpbyfejefl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpbyfejefl_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpbyfejefl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpbyfejefl_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpbyfejefl_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpbyfejefl_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpbyfejefl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, val := range lst {\n\
    \        if val > last {\n            return false\n        }\n        last =\
    \ val\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp1nhu5gpv_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp1nhu5gpv_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last, i := lst[0], 0\n    for _, val := range lst[1:]\
    \ {\n        if val > last {\n            return false\n        }\n        if\
    \ val == last {\n            i++\n        }\n        last = val\n    }\n    return\
    \ i == len(lst)\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpjk_po7oq_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpjk_po7oq_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpjk_po7oq_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpjk_po7oq_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpjk_po7oq_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpjk_po7oq_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpjk_po7oq_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpjk_po7oq_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpqquksh80_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpqquksh80_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpqquksh80_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    for {\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        if i == j {\n            break\n\
    \        }\n        if lst[i] != lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 2
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last, ok := lst[len(lst)-1]\n    if !ok {\n   \
    \     return false\n    }\n    for _, v := range lst[:len(lst)-1] {\n        if\
    \ v != last {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenaq9n2g_test.go:24:17: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075128
- exit_code: 2
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last, ok := lst[len(lst)-1]\n    for _, v := range lst[:len(lst)-1] {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4b75m0fk_test.go:27:17: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075128
- exit_code: 2
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last, ok := lst[len(lst)-1]\n    if !ok {\n   \
    \     return false\n    }\n    for _, v := range lst[:len(lst)-1] {\n        if\
    \ v != last {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenaq9n2g_test.go:24:17: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for i < j {\n\
    \        if lst[i] > lst[j] {\n            return false\n        }\n        i++\n\
    \        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpydbcm44y_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpydbcm44y_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpydbcm44y_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpydbcm44y_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst[1:] {\n        if v > last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpbyfejefl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpbyfejefl_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpbyfejefl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpbyfejefl_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpbyfejefl_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpbyfejefl_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpbyfejefl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    for {\n        if i == j {\n         \
    \   break\n        }\n        if lst[i] > lst[j] {\n            return false\n\
    \        }\n        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpu022oeag_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpu022oeag_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpu022oeag_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpu022oeag_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpu022oeag_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpu022oeag_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075129
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    i := 0\n    j := len(lst) - 1\n    found := false\n\
    \    for i < j {\n        if lst[i] > lst[j] {\n            found = true\n   \
    \         break\n        }\n        if lst[i] == lst[j] {\n            i++\n \
    \           j--\n            continue\n        }\n        if lst[i] < lst[j] {\n\
    \            found = false\n            break\n        }\n    }\n    return found\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3erhdoy9_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3erhdoy9_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3erhdoy9_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmp3erhdoy9_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp3erhdoy9_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp3erhdoy9_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075129
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[len(lst)-1] {\n        return false\n    }\n    return is_sorted(lst[1:len(lst)])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzjo95gwm_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzjo95gwm_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzjo95gwm_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpzjo95gwm_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpzjo95gwm_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpzjo95gwm_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075129
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpinddbvss_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpinddbvss_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    for {\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        if i == j {\n            break\n\
    \        }\n        if lst[i] != lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    for {\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        if i == j {\n            break\n\
    \        }\n        if lst[i] != lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v < last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp26jac922_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for {\n     \
    \   if i == j {\n            break\n        }\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpmwocoo9u_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpmwocoo9u_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpmwocoo9u_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpmwocoo9u_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpmwocoo9u_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 2
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    k := 0\n    for {\n        if i == j {\n\
    \            break\n        }\n        if lst[i] > lst[j] {\n            return\
    \ false\n        }\n        if lst[i] < lst[j] {\n            i++\n          \
    \  j--\n            continue\n        }\n        if lst[i] == lst[j] {\n     \
    \       i++\n            j--\n            continue\n        }\n        if lst[i]\
    \ > lst[j] {\n            i++\n        } else {\n            j--\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8l1supfl_test.go:29:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075129
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    k := 0\n    for {\n        if lst[i] >\
    \ lst[j] {\n            return false\n        }\n        if i == j {\n       \
    \     break\n        }\n        if lst[i] != lst[j] {\n            return false\n\
    \        }\n        i++\n        j--\n        k++\n    }\n    return true\n}\n\
    \nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpc_0p9agv_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpc_0p9agv_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpc_0p9agv_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpc_0p9agv_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpc_0p9agv_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpc_0p9agv_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075128
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    i := 0\n    j := len(lst) - 1\n    found := false\n\
    \    for i < j {\n        if lst[i] > lst[j] {\n            found = true\n   \
    \         break\n        }\n        if lst[i] < lst[j] {\n            found =\
    \ false\n            break\n        }\n        i++\n        j--\n    }\n    return\
    \ found\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpt6r7pg40_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpt6r7pg40_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpt6r7pg40_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpt6r7pg40_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__7\
    \ (0.00s)\n        tmpt6r7pg40_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmpt6r7pg40_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpt6r7pg40_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpt6r7pg40_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075129
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpm2x08yt7_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpm2x08yt7_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) <= 1 {\n   \
    \     return true\n    }\n    last := lst[0]\n    for _, v := range lst {\n  \
    \      if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpnn0qwuky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpnn0qwuky_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    last := lst[0]\n    for _, v := range lst {\n \
    \       if v < last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp26jac922_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp26jac922_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    last := lst[0]\n    for _, v := range lst[1:] {\n        if v < last {\n\
    \            return false\n        }\n        last = v\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi2lie703_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi2lie703_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075129
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    for {\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        if i == j {\n            break\n\
    \        }\n        if lst[i] < lst[j] {\n            i++\n            j--\n \
    \       } else {\n            i++\n            j--\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp42p2ts9r_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp42p2ts9r_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmp42p2ts9r_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp42p2ts9r_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp42p2ts9r_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp42p2ts9r_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    i := 0\n    j := len(lst) - 1\n    for {\n        if lst[i] > lst[j] {\n\
    \            return false\n        }\n        if i == j {\n            break\n\
    \        }\n        if lst[i] != lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp9wn9ntj5_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp9wn9ntj5_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunc is_sorted(lst []int) bool {\n    if len(lst) == 0 {\n   \
    \     return false\n    }\n    if len(lst) == 1 {\n        return true\n    }\n\
    \    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[2:])\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp_z20as4f_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp_z20as4f_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075126
