language: go_test.go
name: HumanEval_106_f
results:
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = i + f(n - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa89w13ph_test.go:19:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmpa89w13ph_test.go:21:25: invalid operation: i + f(n - 1) (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := range result {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = 1 + f(n - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf3xsqk2z_test.go:19:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmpf3xsqk2z_test.go:21:25: cannot convert 1 (untyped int constant) to []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp809_d5lg_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=5) %!s(int=4)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp809_d5lg_test.go:43: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=5) %!s(int=4) %!s(int=9) %!s(int=6)]'\n\
    \    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp809_d5lg_test.go:43: expected\
    \ '[%!s(int=1)]', got '[%!s(int=0)]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp809_d5lg_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = i + f(n - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa89w13ph_test.go:19:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmpa89w13ph_test.go:21:25: invalid operation: i + f(n - 1) (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := range result {\n        if i%2\
    \ == 0 {\n            result[i] = 1\n        } else {\n            result[i] =\
    \ result[i-1] * i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpurh3nyp1_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpurh3nyp1_test.go:43: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpurh3nyp1_test.go:43: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = i + f(n - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa89w13ph_test.go:19:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmpa89w13ph_test.go:21:25: invalid operation: i + f(n - 1) (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    factorial := make([]int, n)\n    factorial[0] = 1\n    for i := 1; i\
    \ < n; i++ {\n        if i%2 == 0 {\n            factorial[i] = factorial[i-1]\
    \ * i\n        } else {\n            factorial[i] = factorial[i-1] + i\n     \
    \   }\n    }\n    return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpyhtey7qa_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpyhtey7qa_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpyhtey7qa_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = i + f(n - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa89w13ph_test.go:19:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmpa89w13ph_test.go:21:25: invalid operation: i + f(n - 1) (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp9cysd_b1_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp9cysd_b1_test.go:34 +0x118\n\
    testing.tRunner(0xc00012e4e0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = i + f(n - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa89w13ph_test.go:19:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmpa89w13ph_test.go:21:25: invalid operation: i + f(n - 1) (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = i + f(n - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphfjsp227_test.go:19:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmphfjsp227_test.go:21:25: invalid operation: i + f(n - 1) (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    factorial := 1\n    result := make([]int, n)\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            factorial *= i\n        } else {\n\
    \            factorial += i\n        }\n        result[i-1] = factorial\n    }\n\
    \    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmptad3zm64_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmptad3zm64_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)\
    \ %!s(int=205)]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmptad3zm64_test.go:45:\
    \ expected '[%!s(int=1)]', got '[%!s(int=2)]'\n    --- FAIL: TestF/test_num__3\
    \ (0.00s)\n        tmptad3zm64_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp9cysd_b1_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp9cysd_b1_test.go:34 +0x118\n\
    testing.tRunner(0xc00012e4e0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = i + f(n - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphfjsp227_test.go:19:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmphfjsp227_test.go:21:25: invalid operation: i + f(n - 1) (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := range result {\n        result[i]\
    \ = 1\n    }\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n         \
    \   result[i] = result[i] * i\n        } else {\n            result[i] = result[i]\
    \ + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpcuqq9qf4_test.go:24\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpcuqq9qf4_test.go:37 +0x152\n\
    testing.tRunner(0xc000103520, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = 1 + f(n - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9xr0lbko_test.go:19:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmp9xr0lbko_test.go:21:25: cannot convert 1 (untyped int constant) to []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := range result {\n        result[i]\
    \ = i\n    }\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n         \
    \   result[i] = result[i] * i\n        } else {\n            result[i] = result[i]\
    \ + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpzrw6r8wi_test.go:24\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpzrw6r8wi_test.go:37 +0x13f\n\
    testing.tRunner(0xc0000be680, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * i\n        } else {\n            result[i]\
    \ = i + result[i-1]\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000102000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000102000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwrenkadb_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwrenkadb_test.go:34 +0x118\n\
    testing.tRunner(0xc00009ba00, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = 1 + f(n - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9xr0lbko_test.go:19:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmp9xr0lbko_test.go:21:25: cannot convert 1 (untyped int constant) to []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp9cysd_b1_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp9cysd_b1_test.go:34 +0x118\n\
    testing.tRunner(0xc00012e4e0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := range result {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(i / 2)\n        } else {\n           \
    \ result[i] = i + f(i - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprgnc59g__test.go:19:25: invalid operation: i * f(i / 2) (mismatched types
    int and []int)

    /tmp/tmprgnc59g__test.go:21:25: invalid operation: i + f(i - 1) (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    factorial := make([]int, n)\n    factorial[0] = 1\n    for i := 1; i\
    \ < n; i++ {\n        if i%2 == 0 {\n            factorial[i] = factorial[i-1]\
    \ * i\n        } else {\n            factorial[i] = factorial[i-1] + i\n     \
    \   }\n    }\n    return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpyhtey7qa_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpyhtey7qa_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpyhtey7qa_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = sum(range(1, i+1))\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphdnxozqu_test.go:21:29: expected operand, found ''range''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * i\n        } else {\n            result[i]\
    \ = i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpljjg9ki0_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpljjg9ki0_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = i + f(n - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa89w13ph_test.go:19:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmpa89w13ph_test.go:21:25: invalid operation: i + f(n - 1) (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = i + f(n - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa89w13ph_test.go:19:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmpa89w13ph_test.go:21:25: invalid operation: i + f(n - 1) (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * i\n        } else {\n            result[i]\
    \ = i + result[i-1]\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000102000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000102000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwrenkadb_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwrenkadb_test.go:34 +0x118\n\
    testing.tRunner(0xc00009ba00, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * i\n        } else {\n            result[i]\
    \ = i + result[i-1]\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000102000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000102000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwrenkadb_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwrenkadb_test.go:34 +0x118\n\
    testing.tRunner(0xc00009ba00, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := range result {\n        result[i]\
    \ = 1\n    }\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n         \
    \   result[i] = result[i] * i\n        } else {\n            result[i] = result[i]\
    \ + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512740, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512740,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwv7vzso4_test.go:24\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwv7vzso4_test.go:37 +0x525\n\
    testing.tRunner(0xc00009b520, 0x528058)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    factorial := 1\n    result := make([]int, n)\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            factorial *= i\n        } else {\n\
    \            factorial += i\n        }\n        result[i-1] = factorial\n    }\n\
    \    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmptad3zm64_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmptad3zm64_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)\
    \ %!s(int=205)]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmptad3zm64_test.go:45:\
    \ expected '[%!s(int=1)]', got '[%!s(int=2)]'\n    --- FAIL: TestF/test_num__3\
    \ (0.00s)\n        tmptad3zm64_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = i + f(n - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa89w13ph_test.go:19:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmpa89w13ph_test.go:21:25: invalid operation: i + f(n - 1) (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    factorial := make([]int, n)\n    factorial[0] = 1\n    for i := 1; i\
    \ < n; i++ {\n        if i%2 == 0 {\n            factorial[i] = factorial[i-1]\
    \ * i\n        } else {\n            factorial[i] = factorial[i-1] + i\n     \
    \   }\n    }\n    return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpyhtey7qa_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpyhtey7qa_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpyhtey7qa_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    factorials := make([]int, n)\n    factorials[0] = 1\n    for i := 1;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            factorials[i] = factorials[i-1]\
    \ * i\n        } else {\n            factorials[i] = factorials[i-1] + i\n   \
    \     }\n    }\n    return factorials\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpi4x3jder_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpi4x3jder_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpi4x3jder_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := range result {\n        result[i]\
    \ = 1\n    }\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n         \
    \   result[i] = result[i] * i\n        } else {\n            result[i] = result[i]\
    \ + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpcuqq9qf4_test.go:24\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpcuqq9qf4_test.go:37 +0x152\n\
    testing.tRunner(0xc000103520, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := range result {\n        result[i]\
    \ = i\n    }\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n         \
    \   result[i] = result[i] * i\n        } else {\n            result[i] = result[i]\
    \ + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpzrw6r8wi_test.go:24\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpzrw6r8wi_test.go:37 +0x13f\n\
    testing.tRunner(0xc0000be680, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    factorial := make([]int, n+1)\n    factorial[1] = 1\n    for i := 2;\
    \ i <= n; i++ {\n        factorial[i] = factorial[i-1] * i\n    }\n    return\
    \ factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmput4uq11c_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=120)]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmput4uq11c_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=120) %!s(int=720) %!s(int=5040)]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n\
    \        tmput4uq11c_test.go:40: expected '[%!s(int=1)]', got '[%!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmput4uq11c_test.go:40: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = i + f(n - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphfjsp227_test.go:19:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmphfjsp227_test.go:21:25: invalid operation: i + f(n - 1) (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * factorial(i)\n        } else {\n       \
    \     result[i] = factorial(i)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpne__z1yf_test.go:19:29: undefined: factorial

    /tmp/tmpne__z1yf_test.go:21:25: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(i + 1)\n        } else {\n           \
    \ result[i] = f(i + 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4vgwf6uc_test.go:19:25: invalid operation: i * f(i + 1) (mismatched types
    int and []int)

    /tmp/tmp4vgwf6uc_test.go:21:25: cannot use f(i + 1) (value of type []int) as type
    int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    factorial := make([]int, n)\n    factorial[0] = 1\n    for i := 1; i\
    \ < n; i++ {\n        if i%2 == 0 {\n            factorial[i] = factorial[i-1]\
    \ * i\n        } else {\n            factorial[i] = factorial[i-1] + i\n     \
    \   }\n    }\n    return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpyhtey7qa_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpyhtey7qa_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpyhtey7qa_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * i\n        } else {\n            result[i]\
    \ = i + result[i-1]\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000102000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000102000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwrenkadb_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwrenkadb_test.go:34 +0x118\n\
    testing.tRunner(0xc00009ba00, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    factorial := make([]int, n)\n    factorial[0] = 1\n    for i := 1; i\
    \ < n; i++ {\n        if i%2 == 0 {\n            factorial[i] = factorial[i-1]\
    \ * i\n        } else {\n            factorial[i] = factorial[i-1] + i\n     \
    \   }\n    }\n    return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpyhtey7qa_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpyhtey7qa_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpyhtey7qa_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := range result {\n        if i%2\
    \ == 0 {\n            result[i] = 1\n        } else {\n            result[i] =\
    \ result[i-1] * i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpurh3nyp1_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpurh3nyp1_test.go:43: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpurh3nyp1_test.go:43: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    factorial := 1\n    result := make([]int, n)\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpx3huzxp4_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpx3huzxp4_test.go:36 +0x118\n\
    testing.tRunner(0xc0000be4e0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp9cysd_b1_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp9cysd_b1_test.go:34 +0x118\n\
    testing.tRunner(0xc00012e4e0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = sum(range(1, i+1))\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphdnxozqu_test.go:21:29: expected operand, found ''range''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := range result {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = 1 + f(n - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf3xsqk2z_test.go:19:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmpf3xsqk2z_test.go:21:25: cannot convert 1 (untyped int constant) to []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := range result {\n        if i%2\
    \ == 0 {\n            result[i] = 1\n        } else {\n            result[i] =\
    \ result[i-1] * i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpurh3nyp1_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpurh3nyp1_test.go:43: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpurh3nyp1_test.go:43: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    factorial := 1\n    result := make([]int, n)\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            factorial *= i\n        } else {\n\
    \            factorial += i\n        }\n        result[i-1] = factorial\n    }\n\
    \    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmptad3zm64_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmptad3zm64_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)\
    \ %!s(int=205)]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmptad3zm64_test.go:45:\
    \ expected '[%!s(int=1)]', got '[%!s(int=2)]'\n    --- FAIL: TestF/test_num__3\
    \ (0.00s)\n        tmptad3zm64_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp9cysd_b1_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp9cysd_b1_test.go:34 +0x118\n\
    testing.tRunner(0xc00012e4e0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * i\n        } else {\n            result[i]\
    \ = i + result[i-1]\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000102000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000102000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwrenkadb_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwrenkadb_test.go:34 +0x118\n\
    testing.tRunner(0xc00009ba00, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := range result {\n        result[i]\
    \ = 1\n    }\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n         \
    \   result[i] = result[i] * i\n        } else {\n            result[i] = result[i]\
    \ + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpcuqq9qf4_test.go:24\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpcuqq9qf4_test.go:37 +0x152\n\
    testing.tRunner(0xc000103520, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := range result {\n        result[i]\
    \ = i\n    }\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n         \
    \   result[i] = result[i] * i\n        } else {\n            result[i] = result[i]\
    \ + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpzrw6r8wi_test.go:24\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpzrw6r8wi_test.go:37 +0x13f\n\
    testing.tRunner(0xc0000be680, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp9cysd_b1_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp9cysd_b1_test.go:34 +0x118\n\
    testing.tRunner(0xc00012e4e0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = sum(range(1, i+1))\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprg1vo7yf_test.go:21:29: expected operand, found ''range''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    factorial := 1\n    result := make([]int, n)\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            factorial *= i\n        } else {\n\
    \            factorial += i\n        }\n        result[i-1] = factorial\n    }\n\
    \    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmptad3zm64_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmptad3zm64_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)\
    \ %!s(int=205)]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmptad3zm64_test.go:45:\
    \ expected '[%!s(int=1)]', got '[%!s(int=2)]'\n    --- FAIL: TestF/test_num__3\
    \ (0.00s)\n        tmptad3zm64_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := range result {\n        if i%2\
    \ == 0 {\n            result[i] = 1\n        } else {\n            result[i] =\
    \ i * f(n - 1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi24r38zh_test.go:21:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + factorial\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmplm_ch_0j_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmplm_ch_0j_test.go:36 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := range result {\n        result[i]\
    \ = i\n    }\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n         \
    \   result[i] = result[i] * i\n        } else {\n            result[i] = result[i]\
    \ + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpzrw6r8wi_test.go:24\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpzrw6r8wi_test.go:37 +0x13f\n\
    testing.tRunner(0xc0000be680, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n           \
    \ result[i] = result[i-1] + f(n - 1)\n        }\n    }\n    return result\n}\n\
    \nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyj7koo8b_test.go:19:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmpyj7koo8b_test.go:21:25: invalid operation: result[i - 1] + f(n - 1) (mismatched
    types int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n        } else\
    \ {\n            result[i] = result[i-1] + i\n        }\n        factorial *=\
    \ i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp0_gsobj0_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp0_gsobj0_test.go:36 +0x118\n\
    testing.tRunner(0xc000103380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i * result[i-1]\n        } else {\n        \
    \    result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpl_l9yrhj_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpl_l9yrhj_test.go:34 +0x115\n\
    testing.tRunner(0xc0001321a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            result[i] = i\n        } else {\n            result[i] =\
    \ result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpvxezgm2v_test.go:21\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpvxezgm2v_test.go:34 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075230
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunc f(n int) []int\
    \ {\n    result := make([]int, n)\n    for i := range result {\n        result[i]\
    \ = i\n    }\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n         \
    \   result[i] = result[i] * i\n        } else {\n            result[i] = result[i]\
    \ + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpzrw6r8wi_test.go:24\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpzrw6r8wi_test.go:37 +0x13f\n\
    testing.tRunner(0xc0000be680, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075230
