language: go_test.go
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        primes[i] = i\n    }\n    \n    for i := 2; i < a; i++ {\n      \
    \  for j := 2; j < i; j++ {\n            if primes[j] == i {\n               \
    \ primes[j] = -1\n            }\n        }\n    }\n    \n    for i := 0; i < 100;\
    \ i++ {\n        if primes[i] == -1 {\n            return false\n        }\n \
    \   }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmp7zbbssnh_test.go:27\
    \ +0xfd\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmp7zbbssnh_test.go:53\
    \ +0xa7\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 116\n    primes[31] = 120\n    primes[32]\
    \ = 124\n    primes[33] = 127\n    primes[34] = 130\n    primes[35] = 133\n  \
    \  primes[36] = 137\n    primes[37] = 139\n    primes[38] = 142\n    primes[39]\
    \ = 145\n    primes[40] = 147\n    primes[41] = 151\n    primes[42] = 157\n  \
    \  primes[43] = 162\n    primes[44] = 165\n    primes[45] = 168\n    primes[46]\
    \ = 173\n    primes[47] = 179\n    primes[48] = 181\n    primes[49] = 186\n  \
    \  primes[50] = 191\n    primes[51] = 196\n    primes[52] = 199\n    primes[53]\
    \ = 202\n    primes[54] = 205\n    primes[55] = 208\n    primes[56] = 212\n  \
    \  primes[57] = 215\n    primes[58] = 217\n    primes[59] = 223\n    primes[60]\
    \ = 226\n    primes[61] = 230\n    primes[62] = 233\n    primes[63] = 238\n  \
    \  primes[64] = 241\n    primes[65] = 246\n    primes[66] = 252\n    primes[67]\
    \ = 255\n    primes[68] = 258\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbdtl7uvf_test.go:90:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmptatyw424_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmptatyw424_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    c := a\n    d := a\n    e :=\
    \ a\n    f := a\n    g := a\n    h := a\n    i := a\n    j := a\n    k := a\n\
    \    l := a\n    m := a\n    n := a\n    o := a\n    p := a\n    q := a\n    r\
    \ := a\n    s := a\n    t := a\n    u := a\n    v := a\n    w := a\n    x := a\n\
    \    y := a\n    z := a\n\n    for {\n        if b%2 == 0 {\n            if c%2\
    \ == 0 {\n                if d%2 == 0 {\n                    if e%2 == 0 {\n \
    \                       if f%2 == 0 {\n                            if g%2 == 0\
    \ {\n                                if h%2 == 0 {\n                         \
    \           if i%2 == 0 {\n                                        if j%2 == 0\
    \ {\n                                            if k%2 == 0 {\n             \
    \                                   if l%2 == 0 {\n                          \
    \                          if m%2 == 0 {\n                                   \
    \                     if n%2 == 0 {\n                                        \
    \                    if o%2 == 0 {\n                                         \
    \                       if p%2 == 0 {\n                                      \
    \                              if q%2 == 0 {\n                               \
    \                                         if r%2 == 0 {\n                    \
    \                                                        if s%2 == 0 {\n     \
    \                                                                           if\
    \ t%2 == 0 {\n                                                               \
    \                     if u%2 == 0 {\n                                        \
    \                                                if v%2 == 0 {\n             \
    \                                                                            \
    \   if w%2 == 0 {\n                                                          \
    \                                      if x%2 == 0 {\n                       \
    \                                                                            \
    \ if y%2 == 0 {\n                                                            \
    \                                            if z%2 == 0 {\n                 \
    \                                                                            \
    \               return true\n                                                \
    \                                                        } else {\n          \
    \                                                                            \
    \                      return false\n                                        \
    \                                                                }\n         \
    \                                                                            \
    \               } else {\n                                                   \
    \                                                     return false\n         \
    \                                                                            \
    \               }\n                                                          \
    \                                      } else {\n                            \
    \                                                                        return\
    \ false\n                                                                    \
    \                            }\n                                             \
    \                                               } else {\n                   \
    \                                                                            \
    \ return false\n                                                             \
    \                               }\n                                          \
    \                                              } else {\n                    \
    \                                                                        return\
    \ false\n                                                                    \
    \                    }\n                                                     \
    \                               } else {\n                                   \
    \                                                     return false\n         \
    \                                                                           }\n\
    \                                                                            \
    \    } else {\n                                                              \
    \                      return false\n                                        \
    \                                        }\n                                 \
    \                                           } else {\n                       \
    \                                                         return false\n     \
    \                                                                       }\n  \
    \                                                                      } else\
    \ {\n                                                                        \
    \    return false\n                                                          \
    \              }\n                                                           \
    \         } else {\n                                                         \
    \               return false\n                                               \
    \                     }\n                                                    \
    \            } else {\n                                                      \
    \              return false\n                                                \
    \                }\n                                                         \
    \   } else {\n                                                               \
    \ return false\n                                                            }\n\
    \                                                        } else {\n          \
    \                                                  return false\n            \
    \                                            }\n                             \
    \                       } else {\n                                           \
    \             return false\n                                                 \
    \   }\n                                                } else {\n            \
    \                                        return false\n                      \
    \                          }\n                                            } else\
    \ {\n                                                return false\n          \
    \                                  }\n                                       \
    \ } else {\n                                            return false\n       \
    \                                 }\n                                    } else\
    \ {\n                                        return false\n                  \
    \                  }\n                                } else {\n             \
    \                       return false\n                                \nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj0c3kr4f_test.go:125:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 31\n    primes[12] = 31\n    primes[13]\
    \ = 31\n    primes[14] = 31\n    primes[15] = 31\n    primes[16] = 31\n    primes[17]\
    \ = 31\n    primes[18] = 31\n    primes[19] = 31\n    primes[20] = 31\n    primes[21]\
    \ = 31\n    primes[22] = 31\n    primes[23] = 31\n    primes[24] = 31\n    primes[25]\
    \ = 31\n    primes[26] = 31\n    primes[27] = 31\n    primes[28] = 31\n    primes[29]\
    \ = 31\n    primes[30] = 31\n    primes[31] = 31\n    primes[32] = 31\n    primes[33]\
    \ = 31\n    primes[34] = 31\n    primes[35] = 31\n    primes[36] = 31\n    primes[37]\
    \ = 31\n    primes[38] = 31\n    primes[39] = 31\n    primes[40] = 31\n    primes[41]\
    \ = 31\n    primes[42] = 31\n    primes[43] = 31\n    primes[44] = 31\n    primes[45]\
    \ = 31\n    primes[46] = 31\n    primes[47] = 31\n    primes[48] = 31\n    primes[49]\
    \ = 31\n    primes[50] = 31\n    primes[51] = 31\n    primes[52] = 31\n    primes[53]\
    \ = 31\n    primes[54] = 31\n    primes[55] = 31\n    primes[56] = 31\n    primes[57]\
    \ = 31\n    primes[58] = 31\n    primes[59] = 31\n    primes[60] = 31\n    primes[61]\
    \ = 31\n    primes[62] = 31\n    primes[63\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw1ji2gj__test.go:83:14: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for i := 2; i < 100; i++ {\n\
    \        if b%i == 0 {\n            b = b / i\n            if b == 1 {\n     \
    \           return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp5o8z2eop_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp5o8z2eop_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmp5o8z2eop_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for i := 2; i < 100; i++ {\n\
    \        if b%i == 0 {\n            b = b / i\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp20wzor6t_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp20wzor6t_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp20wzor6t_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp20wzor6t_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp20wzor6t_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmptatyw424_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmptatyw424_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_k0itz7i_test.go:270:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 127\n    primes[31] = 131\n    primes[32]\
    \ = 137\n    primes[33] = 139\n    primes[34] = 149\n    primes[35] = 151\n  \
    \  primes[36] = 157\n    primes[37] = 163\n    primes[38] = 167\n    primes[39]\
    \ = 173\n    primes[40] = 179\n    primes[41] = 181\n    primes[42] = 191\n  \
    \  primes[43] = 193\n    primes[44] = 197 \n    primes[45] = 199\n    primes[46]\
    \ = 211\n    primes[47] = 223\n    primes[48] = 227\n    primes[49] = 229\n  \
    \  primes[50] = 231\n    primes[51] = 233\n    primes[52] = 239\n    primes[53]\
    \ = 241\n    primes[54] = 247\n    primes[55] = 251\n    primes[56] = 257\n  \
    \  primes[57] = 263\n    primes[58] = 269\n    primes[59] = 271\n    primes[60]\
    \ = 277\n    primes[61] = 281\n    primes[62] = 283\n    primes[63] = 293\n  \
    \  primes[64] = 307\n    primes[65] = 311\n    primes[66] = 313\n    primes[67]\
    \ = 317\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps624gz9n_test.go:88:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    \n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpknyjocvd_test.go:270:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    c := a\n    d := a\n    e :=\
    \ a\n    f := a\n    g := a\n    h := a\n    i := a\n    j := a\n    k := a\n\
    \    l := a\n    m := a\n    n := a\n    o := a\n    p := a\n    q := a\n    r\
    \ := a\n    s := a\n    t := a\n    u := a\n    v := a\n    w := a\n    x := a\n\
    \    y := a\n    z := a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmix524v4_test.go:234:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if a % prime[i] == 0 {\n            return false\n        }\n   \
    \ }\n    \n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n         \
    \   return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmpkdwo2tbp_test.go:22\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc0001a01a0?)\n\t/tmp/tmpkdwo2tbp_test.go:47\
    \ +0x739\ntesting.tRunner(0xc0001a01a0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for {\n        if b%2 == 0\
    \ {\n            if b%3 == 0 {\n                if b%5 == 0 {\n              \
    \      return true\n                }\n            }\n        }\n        b /=\
    \ 2\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpzw62pmv1_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpzw62pmv1_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpzw62pmv1_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpzw62pmv1_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpzw62pmv1_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    \n    for i := 0; i < 100; i++ {\n        if a % primes[i] == 0 {\n\
    \            return false\n        }\n    }\n    \n    for i := 2; i < 100; i++\
    \ {\n        if a % i == 0 {\n            return false\n        }\n    }\n   \
    \ \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmpy0xsxptm_test.go:25\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc0001a01a0?)\n\t/tmp/tmpy0xsxptm_test.go:50\
    \ +0x739\ntesting.tRunner(0xc0001a01a0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    \n    for i := 3; i < 100; i++ {\n        if a % primes[i]\
    \ == 0 {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmpnhic42r2_test.go:25\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc000103380?)\n\t/tmp/tmpnhic42r2_test.go:44\
    \ +0x71e\ntesting.tRunner(0xc000103380, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    prime[0] = true\n    prime[1] =\
    \ true\n    prime[2] = true\n    prime[3] = true\n    prime[4] = true\n    prime[5]\
    \ = true\n    prime[6] = true\n    prime[7] = true\n    prime[8] = true\n    prime[9]\
    \ = true\n    prime[10] = true\n    prime[11] = true\n    prime[12] = true\n \
    \   prime[13] = true\n    prime[14] = true\n    prime[15] = true\n    prime[16]\
    \ = true\n    prime[17] = true\n    prime[18] = true\n    prime[19] = true\n \
    \   prime[20] = true\n    prime[21] = true\n    prime[22] = true\n    prime[23]\
    \ = true\n    prime[24] = true\n    prime[25] = true\n    prime[26] = true\n \
    \   prime[27] = true\n    prime[28] = true\n    prime[29] = true\n    prime[30]\
    \ = true\n    prime[31] = true\n    prime[32] = true\n    prime[33] = true\n \
    \   prime[34] = true\n    prime[35] = true\n    prime[36] = true\n    prime[37]\
    \ = true\n    prime[38] = true\n    prime[39] = true\n    prime[40] = true\n \
    \   prime[41] = true\n    prime[42] = true\n    prime[43] = true\n    prime[44]\
    \ = true\n    prime[45] = true\n    prime[46] = true\n    prime[47] = true\n \
    \   prime[48] = true\n    prime[49] = true\n    prime[50] = true\n    prime[51]\
    \ = true\n    prime[52] = true\n    prime[53] = true\n    prime[54] = true\n \
    \   prime[55] = true\n    prime[56] = true\n    prime[57] = true\n    prime[58]\
    \ = true\n    prime[59] = true\n    prime[60] = true\n    prime[61] = true\n \
    \   prime[62] = true\n    prime[63] = true\n    prime[64] = true\n    prime[65]\
    \ = true\n    prime[66] = true\n    prime[67] = true\n    prime[68] = true\n \
    \   prime[69] = true\n    prime[70] = true\n    prime[71] = true\n    prime[72]\
    \ = true\n    prime[73] = true\nfunc TestIs_Multiply_Prime(t *testing.T) {\n \
    \ candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp44md41bc_test.go:94:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n          \
    \  return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpq5by16s__test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpq5by16s__test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpq5by16s__test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpq5by16s__test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpq5by16s__test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    // Find all prime numbers less than a\n    primes := make([]int,\
    \ 0, 100)\n    for i := 2; i < a; i++ {\n        if primes[i] != 0 {\n       \
    \     continue\n        }\n        \n        // Check if i is prime\n        if\
    \ i%2 == 0 {\n            continue\n        }\n        \n        for j := 3; j\
    \ < i; j++ {\n            if i%j == 0 {\n                break\n            }\n\
    \        }\n        \n        if j > i {\n            primes = append(primes,\
    \ i)\n        }\n    }\n    \n    // Check if a is multiple of any prime number\n\
    \    for _, prime := range primes {\n        if a%prime == 0 {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvos00ecj_test.go:37:12: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    prime[0] = true\n    prime[1] =\
    \ true\n    prime[2] = true\n    prime[3] = true\n    prime[4] = true\n    prime[5]\
    \ = true\n    prime[6] = true\n    prime[7] = true\n    prime[8] = true\n    prime[9]\
    \ = true\n    prime[10] = true\n    prime[11] = true\n    prime[12] = true\n \
    \   prime[13] = true\n    prime[14] = true\n    prime[15] = true\n    prime[16]\
    \ = true\n    prime[17] = true\n    prime[18] = true\n    prime[19] = true\n \
    \   prime[20] = true\n    prime[21] = true\n    prime[22] = true\n    prime[23]\
    \ = true\n    prime[24] = true\n    prime[25] = true\n    prime[26] = true\n \
    \   prime[27] = true\n    prime[28] = true\n    prime[29] = true\n    prime[30]\
    \ = true\n    prime[31] = true\n    prime[32] = true\n    prime[33] = true\n \
    \   prime[34] = true\n    prime[35] = true\n    prime[36] = true\n    prime[37]\
    \ = true\n    prime[38] = true\n    prime[39] = true\n    prime[40] = true\n \
    \   prime[41] = true\n    prime[42] = true\n    prime[43] = true\n    prime[44]\
    \ = true\n    prime[45] = true\n    prime[46] = true\n    prime[47] = true\n \
    \   prime[48] = true\n    prime[49] = true\n    prime[50] = true\n    prime[51]\
    \ = true\n    prime[52] = true\n    prime[53] = true\n    prime[54] = true\n \
    \   prime[55] = true\n    prime[56] = true\n    prime[57] = true\n    prime[58]\
    \ = true\n    prime[59] = true\n    prime[60] = true\n    prime[61] = true\n \
    \   prime[62] = true\n    prime[63] = true\n    prime[64] = true\n    prime[65]\
    \ = true\n    prime[66] = true\n    prime[67] = true\n    prime[68] = true\n \
    \   prime[69] = true\n    prime[70] = true\n    prime[71] = true\n    prime[72]\
    \ = true\n    prime[73] = true\nfunc TestIs_Multiply_Prime(t *testing.T) {\n \
    \ candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp44md41bc_test.go:94:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    prime[0] = true\n    prime[1] =\
    \ true\n    prime[2] = true\n    prime[3] = true\n    prime[4] = true\n    prime[5]\
    \ = true\n    prime[6] = true\n    prime[7] = true\n    prime[8] = true\n    prime[9]\
    \ = true\n    prime[10] = true\n    prime[11] = true\n    prime[12] = true\n \
    \   prime[13] = true\n    prime[14] = true\n    prime[15] = true\n    prime[16]\
    \ = true\n    prime[17] = true\n    prime[18] = true\n    prime[19] = true\n \
    \   prime[20] = true\n    prime[21] = true\n    prime[22] = true\n    prime[23]\
    \ = true\n    prime[24] = true\n    prime[25] = true\n    prime[26] = true\n \
    \   prime[27] = true\n    prime[28] = true\n    prime[29] = true\n    prime[30]\
    \ = true\n    prime[31] = true\n    prime[32] = true\n    prime[33] = true\n \
    \   prime[34] = true\n    prime[35] = true\n    prime[36] = true\n    prime[37]\
    \ = true\n    prime[38] = true\n    prime[39] = true\n    prime[40] = true\n \
    \   prime[41] = true\n    prime[42] = true\n    prime[43] = true\n    prime[44]\
    \ = true\n    prime[45] = true\n    prime[46] = true\n    prime[47] = true\n \
    \   prime[48] = true\n    prime[49] = true\n    prime[50] = true\n    prime[51]\
    \ = true\n    prime[52] = true\n    prime[53] = true\n    prime[54] = true\n \
    \   prime[55] = true\n    prime[56] = true\n    prime[57] = true\n    prime[58]\
    \ = true\n    prime[59] = true\n    prime[60] = true\n    prime[61] = true\n \
    \   prime[62] = true\n    prime[63] = true\n    prime[64] = true\n    prime[65]\
    \ = true\n    prime[66] = true\n    prime[67] = true\n    prime[68] = true\n \
    \   prime[69] = true\n    prime[70] = true\n    prime[71] = true\n    prime[72]\
    \ = true\n    prime[73] = true\nfunc TestIs_Multiply_Prime(t *testing.T) {\n \
    \ candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp44md41bc_test.go:94:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if primes[i] == 0 {\n            continue\n        }\n        \n\
    \        for j := 2; j < i; j++ {\n            if i*j > a {\n                break\n\
    \            }\n            if primes[i*j] == 0 {\n                primes[i*j]\
    \ = i\n            }\n        }\n    }\n    \n    for i := 0; i < 100; i++ {\n\
    \        if primes[i] == 0 {\n            return false\n        }\n    }\n   \
    \ \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpq_fkudxy_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpq_fkudxy_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpq_fkudxy_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpq_fkudxy_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpq_fkudxy_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if prime[i] == 0 {\n            prime[i] = 1\n        }\n    }\n\
    \    \n    for i := 0; i < a; i++ {\n        prime[(i * 3) % 100] = 1\n    }\n\
    \    \n    for i := 0; i < 100; i++ {\n        if prime[i] != 1 {\n          \
    \  return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp_c0ll_2k_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp_c0ll_2k_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp_c0ll_2k_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp_c0ll_2k_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp_c0ll_2k_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n\n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] = 3\n\
    \    primes[2] = 5\n\n    for i := 3; i < 100; i++ {\n        if primes[i]*primes[i]\
    \ > a {\n            return false\n        }\n    }\n\n    return true\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp86es6uy6_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp86es6uy6_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp86es6uy6_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp86es6uy6_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp86es6uy6_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        primes[i] = i\n    }\n    \n    for i := 2; i < a; i++ {\n      \
    \  for j := 2; j < i; j++ {\n            if primes[j] == i {\n               \
    \ primes[j] = -1\n            }\n        }\n    }\n    \n    for i := 0; i < 100;\
    \ i++ {\n        if primes[i] == -1 {\n            return false\n        }\n \
    \   }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmp7zbbssnh_test.go:27\
    \ +0xfd\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmp7zbbssnh_test.go:53\
    \ +0xa7\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    // Find all prime numbers less than a\n    primes := make([]int,\
    \ 0, 100)\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n           \
    \ primes = append(primes, i)\n        }\n    }\n    \n    // If there are 3 or\
    \ more prime numbers less than a, then return true\n    if len(primes) >= 3 {\n\
    \        return true\n    }\n    \n    // If there are 2 or more prime numbers\
    \ less than a, then return false\n    if len(primes) >= 2 {\n        return false\n\
    \    }\n    \n    // If there are 1 or no prime numbers less than a, then return\
    \ false\n    if len(primes) == 1 {\n        return false\n    }\n    \n    //\
    \ If there are 0 or 1 prime numbers less than a, then return false\n    if len(primes)\
    \ == 0 {\n        return false\n    }\n    \n    // If there are more than 2 prime\
    \ numbers less than a, then return false\n    if len(primes) > 2 {\n        return\
    \ false\n    }\n    \n    // If there are more than 3 prime numbers less than\
    \ a, then return false\n    if len(primes) > 3 {\n        return false\n    }\n\
    \    \n    // If there are more than 4 prime numbers less than a, then return\
    \ false\n    if len(primes) > 4 {\n        return false\n    }\n    \n    // If\
    \ there are more than 5 prime numbers less than a, then return false\n    if len(primes)\
    \ > 5 {\n        return false\n    }\n    \n    // If there are more than 6 prime\
    \ numbers less than a, then return false\n    if len(primes) > 6 {\n        return\
    \ false\n    }\n    \n    // If there are more than 7 prime numbers less than\
    \ a, then return false\n    if len(primes) > 7 {\n        return false\n    }\n\
    \    \n    // If there are more than 8 prime numbers less than a, then return\
    \ false\n    if len(primes) > 8 {\n        return false\n    }\n    \n    // If\
    \ there are more than 9 prime numbers less than a, then return false\n    if len(primes)\
    \ > 9 {\n        return false\n    }\n    \n    // If there are more than 10 prime\
    \ numbers less than a, then return false\n    if len(primes) > 10 {\n        return\
    \ false\n    }\n    \n    // If there are more than 11 prime numbers less than\
    \ a, then return false\n    if len(primes) > 11 {\n        return false\n    }\n\
    \    \n    // If there are more than 12 prime numbers less than a, then return\
    \ false\n    if len(primes) > 12 {\n        return false\n    }\n    \n    //\
    \ If there are more than 13 prime numbers less than a, then return false\n   \
    \ if len(primes) > 13 {\n        return false\n    }\n    \n    // If there are\
    \ more than 14 prime numbers less than a, then return false\n    if len(primes)\
    \ > 14 {\n        return false\n    }\n    \n    // If there are more than 15\
    \ prime numbers less than a, then return false\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp895xnfo9_test.go:114:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if primes[i] == 0 {\n            primes[i] = 1\n        }\n    }\n\
    \    \n    for i := 2; i < a; i++ {\n        if primes[i] == 0 {\n           \
    \ for j := i + i; j < a; j += i {\n                primes[j] = 1\n           \
    \ }\n        }\n    }\n    \n    for i := 2; i < a; i++ {\n        if primes[i]\
    \ == 1 {\n            return true\n        }\n    }\n    \n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpnd7ta5fo_test.go:28\
    \ +0x149\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpnd7ta5fo_test.go:55\
    \ +0xa7\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 116\n    primes[31] = 120\n    primes[32]\
    \ = 124\n    primes[33] = 127\n    primes[34] = 130\n    primes[35] = 133\n  \
    \  primes[36] = 137\n    primes[37] = 139\n    primes[38] = 142\n    primes[39]\
    \ = 147\n    primes[40] = 151\n    primes[41] = 154\n    primes[42] = 157\n  \
    \  primes[43] = 162\n    primes[44] = 165\n    primes[45] = 168\n    primes[46]\
    \ = 173\n    primes[47] = 179\n    primes[48] = 181\n    primes[49] = 186\n  \
    \  primes[50] = 191\n    primes[51] = 194\n    primes[52] = 197\n    primes[53]\
    \ = 200\n    primes[54] = 205\n    primes[55] = 209\n    primes[56] = 212\n  \
    \  primes[57] = 215\n    primes[58] = 217\n    primes[59] = 222\n    primes[60]\
    \ = 226\n    primes[61] = 230\n    primes[62] = 233\n    primes[63] = 238\n  \
    \  primes[64] = 241\n    primes[65] = 244\n    primes[66] = 247\n    primes[67]\
    \ = 250\n    primes[68] = 253\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp04ayhsop_test.go:90:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if primes[i] == 0 {\n            primes[i] = 1\n        }\n    }\n\
    \    \n    for i := 2; i < a; i++ {\n        if primes[i] != 0 {\n           \
    \ for j := i*i; j < a; j += i {\n                primes[j] = 1\n            }\n\
    \        }\n    }\n    \n    for i := 0; i < 100; i++ {\n        if primes[i]\
    \ == 1 {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpazu83655_test.go:30\
    \ +0x11a\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpazu83655_test.go:55\
    \ +0xa7\ntesting.tRunner(0xc0001924e0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    if a < 100 {\n        return false\n\
    \    }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < len(primes);\
    \ i++ {\n        primes[i] = i\n    }\n    \n    for i := 2; i < a; i++ {\n  \
    \      for _, j := range primes {\n            if i*j > a {\n                break\n\
    \            }\n            if i*j == a {\n                primes[j] = i\n   \
    \         }\n        }\n    }\n    \n    for _, j := range primes {\n        if\
    \ j == 3 {\n            return true\n        }\n    }\n    \n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpf60cnae6_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpf60cnae6_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpf60cnae6_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 116\n    primes[31] = 120\n    primes[32]\
    \ = 124\n    primes[33] = 127\n    primes[34] = 130\n    primes[35] = 133\n  \
    \  primes[36] = 137\n    primes[37] = 139\n    primes[38] = 142\n    primes[39]\
    \ = 147\n    primes[40] = 151\n    primes[41] = 157\n    primes[42] = 163\n  \
    \  primes[43] = 167\n    primes[44] = 173\n    primes[45] = 179\n    primes[46]\
    \ = 181\n    primes[47] = 191\n    primes[48] = 193\n    primes[49] = 197\n  \
    \  primes[50] = 201\n    primes[51] = 207\n    primes[52] = 211\n    primes[53]\
    \ = 217\n    primes[54] = 223\n    primes[55] = 229\n    primes[56] = 233\n  \
    \  primes[57] = 301\n    primes[58] = 307\n    primes[59] = 313\n    primes[60]\
    \ = 319\n    primes[61] = 329\n    primes[62] = 333\n    primes[63] = 359\n  \
    \  primes[64] = 377\n    primes[65] = 381\n    primes[66] = 387\n    primes[67]\
    \ = 393\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6ynyc7xi_test.go:88:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if primes[i] == 0 {\n            continue\n        }\n        \n\
    \        for j := 0; j < i; j++ {\n            if primes[j] == 0 {\n         \
    \       continue\n            }\n            \n            if primes[i]*primes[j]\
    \ == a {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmplx_a8121_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmplx_a8121_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmplx_a8121_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmplx_a8121_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmplx_a8121_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if primes[i] == 0 {\n            continue\n        }\n        \n\
    \        for j := 2; j < i; j++ {\n            if i*j > a {\n                break\n\
    \            }\n            if primes[i*j] == 0 {\n                primes[i*j]\
    \ = i\n            }\n        }\n    }\n    \n    for i := 0; i < 100; i++ {\n\
    \        if primes[i] == 0 {\n            return false\n        }\n    }\n   \
    \ \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpq_fkudxy_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpq_fkudxy_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpq_fkudxy_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpq_fkudxy_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpq_fkudxy_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    \n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpwkqs_a06_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpwkqs_a06_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for i := 2; i < 100; i++ {\n\
    \        if b%i == 0 {\n            b = b / i\n            if b == 1 {\n     \
    \           return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp5o8z2eop_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp5o8z2eop_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmp5o8z2eop_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for i := 2; i < 100; i++ {\n\
    \        if b%i == 0 {\n            b = b / i\n            if b == 1 {\n     \
    \           return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp5o8z2eop_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp5o8z2eop_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmp5o8z2eop_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    c := a\n    d := a\n    e :=\
    \ a\n    f := a\n    g := a\n    h := a\n    i := a\n    j := a\n    k := a\n\
    \    l := a\n    m := a\n    n := a\n    o := a\n    p := a\n    q := a\n    r\
    \ := a\n    s := a\n    t := a\n    u := a\n    v := a\n    w := a\n    x := a\n\
    \    y := a\n    z := a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmix524v4_test.go:234:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    c := a\n    d := a\n    e :=\
    \ a\n    f := a\n    g := a\n    h := a\n    i := a\n    j := a\n    k := a\n\
    \    l := a\n    m := a\n    n := a\n    o := a\n    p := a\n    q := a\n    r\
    \ := a\n    s := a\n    t := a\n    u := a\n    v := a\n    w := a\n    x := a\n\
    \    y := a\n    z := a\n\n    for {\n        if b == 0 {\n            return\
    \ true\n        }\n        if b == 1 {\n            return false\n        }\n\
    \        if b == 2 {\n            return true\n        }\n        if b == 3 {\n\
    \            return true\n        }\n        if b == 4 {\n            return true\n\
    \        }\n        if b == 5 {\n            return true\n        }\n        if\
    \ b == 6 {\n            return true\n        }\n        if b == 7 {\n        \
    \    return true\n        }\n        if b == 8 {\n            return true\n  \
    \      }\n        if b == 9 {\n            return true\n        }\n        if\
    \ b == 10 {\n            return true\n        }\n        if b == 11 {\n      \
    \      return true\n        }\n        if b == 12 {\n            return true\n\
    \        }\n        if b == 13 {\n            return true\n        }\n       \
    \ if b == 14 {\n            return true\n        }\n        if b == 15 {\n   \
    \         return true\n        }\n        if b == 16 {\n            return true\n\
    \        }\n        if b == 17 {\n            return true\n        }\n       \
    \ if b == 18 {\n            return true\n        }\n        if b == 19 {\n   \
    \         return true\n        }\n        if b == 20 {\n            return true\n\
    \        }\n        if b == 21 {\n            return true\n        }\n       \
    \ if b == 22 {\n            return true\n        }\n        if b == 23 {\n   \
    \         return true\n        }\n        if b == 24 {\n            return true\n\
    \        }\n        if b == 25 {\n            return true\n        }\n       \
    \ if b == 26 {\n            return true\n        }\n        if b == 27 {\n   \
    \         return true\n        }\n        if b == 28 {\n            return true\n\
    \        }\n        if b == 29 {\n            return true\n        }\n       \
    \ if b == 30 {\n            return true\n        }\n        if b == 31 {\n   \
    \         return true\n        }\n        if b == 32 {\n            return true\n\
    \        }\n        if b == 33 {\n            return true\n        }\n       \
    \ if b == 34 {\n            return true\n        }\n        if b == 35 {\n   \
    \         return true\n        }\n        if b == 36 {\n            return true\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsycjt2x3_test.go:152:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   \n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpsmq5w5rf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpsmq5w5rf_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpsmq5w5rf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpsmq5w5rf_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpsmq5w5rf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if primes[i] == 0 {\n            primes[i] = 1\n        }\n    }\n\
    \    \n    for i := 2; i < a; i++ {\n        if primes[a-1] == 0 {\n         \
    \   return false\n        }\n        \n        for j := 2; j < i; j++ {\n    \
    \        if i*j == a {\n                primes[a-1]++\n                break\n\
    \            }\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [124] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [124] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmp2ucb5he7_test.go:28\
    \ +0x114\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmp2ucb5he7_test.go:54\
    \ +0xa7\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    \n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpwkqs_a06_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpwkqs_a06_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for {\n        if b%2 == 0\
    \ {\n            if b%3 == 0 {\n                if b%5 == 0 {\n              \
    \      if b%7 == 0 {\n                        return true\n                  \
    \  }\n                }\n            }\n        }\n        b /= 2\n    }\n   \
    \ return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp5jdlvj1y_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp5jdlvj1y_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp5jdlvj1y_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp5jdlvj1y_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp5jdlvj1y_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        prime[i] = i\n    }\n    \n    for i := 2; i < a; i++ {\n       \
    \ if prime[a-i] == 0 {\n            return false\n        }\n    }\n    \n   \
    \ return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [123] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [123] with length 100\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmpral32fqy_test.go:26\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc0001031e0?)\n\t/tmp/tmpral32fqy_test.go:45\
    \ +0x639\ntesting.tRunner(0xc0001031e0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        primes[i] = i\n    }\n    \n    for i := 2; i < a; i++ {\n      \
    \  for j := 2; j < i; j++ {\n            if primes[j] == i {\n               \
    \ primes[j] = -1\n            }\n        }\n    }\n    \n    for i := 0; i < 100;\
    \ i++ {\n        if primes[i] == -1 {\n            return false\n        }\n \
    \   }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmp7zbbssnh_test.go:27\
    \ +0xfd\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmp7zbbssnh_test.go:53\
    \ +0xa7\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    \n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpwkqs_a06_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpwkqs_a06_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for i := 2; i < 100; i++ {\n\
    \        if b%i == 0 {\n            b = b / i\n            if b == 1 {\n     \
    \           return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp5o8z2eop_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp5o8z2eop_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmp5o8z2eop_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_ede_a_t_test.go:270:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < len(primes);\
    \ i++ {\n        primes[i] = i\n    }\n    \n    for i := 2; i < a; i++ {\n  \
    \      for j := 0; j < len(primes); j++ {\n            if i*primes[j] < a {\n\
    \                primes[j] = primes[j] + 1\n                break\n          \
    \  }\n        }\n    }\n    \n    for _, prime := range primes {\n        if prime\
    \ == 3 {\n            return true\n        }\n    }\n    \n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxlo0ziz9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxlo0ziz9_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpxlo0ziz9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpxlo0ziz9_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpxlo0ziz9_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    \n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpknyjocvd_test.go:270:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    // Write your code here\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpwzdyc_8i_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpwzdyc_8i_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpwzdyc_8i_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpwzdyc_8i_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpwzdyc_8i_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    // Write your code here\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpwzdyc_8i_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpwzdyc_8i_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpwzdyc_8i_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpwzdyc_8i_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpwzdyc_8i_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    prime[0] = true\n    prime[1] =\
    \ true\n    prime[2] = true\n    \n    for i := 3; i < 100; i++ {\n        if\
    \ prime[i] == true {\n            continue\n        }\n        \n        if a\
    \ % i == 0 {\n            return false\n        }\n        \n        for j :=\
    \ i * i; j < 100; j += i {\n            if j > a && a % j == 0 {\n           \
    \     return false\n            }\n        }\n    }\n    \n    return true\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpndsw1wvu_test.go:20:16: cannot use true (untyped bool constant) as int
    value in assignment

    /tmp/tmpndsw1wvu_test.go:21:16: cannot use true (untyped bool constant) as int
    value in assignment

    /tmp/tmpndsw1wvu_test.go:22:16: cannot use true (untyped bool constant) as int
    value in assignment

    /tmp/tmpndsw1wvu_test.go:25:24: invalid operation: prime[i] == true (mismatched
    types int and untyped bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    prime[0] = true\n    prime[1] =\
    \ true\n    prime[2] = true\n    prime[3] = true\n    prime[4] = true\n    prime[5]\
    \ = true\n    prime[6] = true\n    prime[7] = true\n    prime[8] = true\n    prime[9]\
    \ = true\n    prime[10] = true\n    prime[11] = true\n    prime[12] = true\n \
    \   prime[13] = true\n    prime[14] = true\n    prime[15] = true\n    prime[16]\
    \ = true\n    prime[17] = true\n    prime[18] = true\n    prime[19] = true\n \
    \   prime[20] = true\n    prime[21] = true\n    prime[22] = true\n    prime[23]\
    \ = true\n    prime[24] = true\n    prime[25] = true\n    prime[26] = true\n \
    \   prime[27] = true\n    prime[28] = true\n    prime[29] = true\n    prime[30]\
    \ = true\n    prime[31] = true\n    prime[32] = true\n    prime[33] = true\n \
    \   prime[34] = true\n    prime[35] = true\n    prime[36] = true\n    prime[37]\
    \ = true\n    prime[38] = true\n    prime[39] = true\n    prime[40] = true\n \
    \   prime[41] = true\n    prime[42] = true\n    prime[43] = true\n    prime[44]\
    \ = true\n    prime[45] = true\n    prime[46] = true\n    prime[47] = true\n \
    \   prime[48] = true\n    prime[49] = true\n    prime[50] = true\n    prime[51]\
    \ = true\n    prime[52] = true\n    prime[53] = true\n    prime[54] = true\n \
    \   prime[55] = true\n    prime[56] = true\n    prime[57] = true\n    prime[58]\
    \ = true\n    prime[59] = true\n    prime[60] = true\n    prime[61] = true\n \
    \   prime[62] = true\n    prime[63] = true\n    prime[64] = true\n    prime[65]\
    \ = true\n    prime[66] = true\n    prime[67] = true\n    prime[68] = true\n \
    \   prime[69] = true\n    prime[70] = true\n    prime[71] = true\n    prime[72]\
    \ = true\n    prime[73] = true\nfunc TestIs_Multiply_Prime(t *testing.T) {\n \
    \ candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp44md41bc_test.go:94:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 116\n    primes[31] = 121\n    primes[32]\
    \ = 123\n    primes[33] = 127\n    primes[34] = 131\n    primes[35] = 137\n  \
    \  primes[36] = 139\n    primes[37] = 142\n    primes[38] = 147\n    primes[39]\
    \ = 151\n    primes[40] = 157\n    primes[41] = 162\n    primes[42] = 163\n  \
    \  primes[43] = 167\n    primes[44] = 173\n    primes[45] = 179\n    primes[46]\
    \ = 181\n    primes[47] = 191\n    primes[48] = 193\n    primes[49] = 197\n  \
    \  primes[50] = 201\n    primes[51] = 207\n    primes[52] = 209\n    primes[53]\
    \ = 211\n    primes[54] = 215\n    primes[55] = 217\n    primes[56] = 223\n  \
    \  primes[57] = 227\n    primes[58] = 229\n    primes[59] = 233\n    primes[60]\
    \ = 237\n    primes[61] = 239\n    primes[62] = 241\n    primes[63] = 243\n  \
    \  primes[64] = 247\n    primes[65] = 251\n    primes[66] = 253\n    primes[67]\
    \ = 257\n    primes[\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt551qj4a_test.go:89:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    \n    for i := 3; i < 100; i++ {\n        if primes[i]*primes[i]\
    \ > a {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxfep_smt_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxfep_smt_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpxfep_smt_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpxfep_smt_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpxfep_smt_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    \n    for i := 3; i <= a; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i*j == a {\n                return true\n  \
    \          }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp8hv2wm2k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp8hv2wm2k_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp8hv2wm2k_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp8hv2wm2k_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp8hv2wm2k_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 116\n    primes[31] = 121\n    primes[32]\
    \ = 123\n    primes[33] = 127\n    primes[34] = 131\n    primes[35] = 137\n  \
    \  primes[36] = 139\n    primes[37] = 142\n    primes[38] = 147\n    primes[39]\
    \ = 151\n    primes[40] = 157\n    primes[41] = 163\n    primes[42] = 167\n  \
    \  primes[43] = 173\n    primes[44] = 179\n    primes[45] = 181\n    primes[46]\
    \ = 191\n    primes[47] = 193\n    primes[48] = 199\n    primes[49] = 209\n  \
    \  primes[50] = 223\n    primes[51] = 229\n    primes[52] = 233\n    primes[53]\
    \ = 239\n    primes[54] = 241\n    primes[55] = 243\n    primes[56] = 247\n  \
    \  primes[57] = 251\n    primes[58] = 257\n    primes[59] = 263\n    primes[60]\
    \ = 268\n    primes[61] = 285\n    primes[62] = 291\n    primes[63] = 297\n  \
    \  primes[64] = 303\n    primes[65] = 311\n    primes[66] = 317\n    primes[67]\
    \ = 32\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaceazxf__test.go:88:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   if a < 100 {\n        return false\n    }\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3bn1mj5q_test.go:268:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for i := 2; i < 100; i++ {\n\
    \        if b%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp6gj83e5u_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp6gj83e5u_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp6gj83e5u_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp6gj83e5u_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp6gj83e5u_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    for i := 2; i < a; i++ {\n      \
    \  if a % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpu717kpf8_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpu717kpf8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpu717kpf8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpu717kpf8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpu717kpf8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpu717kpf8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for i := 2; i < b; i++ {\n\
    \        if b%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp12601buh_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp12601buh_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmp12601buh_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp12601buh_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmp12601buh_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp12601buh_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if i%2 == 0 {\n            continue\n        }\n        \n      \
    \  primes[i] = i\n    }\n    \n    for i := 3; i <= a; i++ {\n        for j :=\
    \ 3; j < i; j++ {\n            if i*j == a {\n                return true\n  \
    \          }\n        }\n    }\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp43puspza_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp43puspza_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp43puspza_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp43puspza_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp43puspza_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmptatyw424_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmptatyw424_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 121\n    primes[31] = 123\n    primes[32]\
    \ = 127\n    primes[33] = 131\n    primes[34] = 137\n    primes[35] = 139\n  \
    \  primes[36] = 149\n    primes[37] = 151\n    primes[38] = 157\n    primes[39]\
    \ = 163\n    primes[40] = 173\n    primes[41] = 179\n    primes[42] = 181\n  \
    \  primes[43] = 191\n    primes[44] = 193\n    primes[45] = 197 \n    primes[46]\
    \ = 199\n    primes[47] = 211\n    primes[48] = 223\n    primes[49] = 229\n  \
    \  primes[50] = 241\n    primes[51] = 247\n    primes[52] = 251\n    primes[53]\
    \ = 257\n    primes[54] = 263\n    primes[55] = 269\n    primes[56] = 271\n  \
    \  primes[57] = 277\n    primes[58] = 283\n    primes[59] = 289\n    primes[60]\
    \ = 297\n    primes[61] = 301\n    primes[62] = 311\n    primes[63] = 313\n  \
    \  primes[64] = 317\n    primes[65] = 319\n    primes[66] = 323\n    primes[67]\
    \ = 3\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgwv14ppb_test.go:88:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 121\n    primes[31] = 127\n    primes[32]\
    \ = 131\n    primes[33] = 137\n    primes[34] = 139\n    primes[35] = 147\n  \
    \  primes[36] = 151\n    primes[37] = 157\n    primes[38] = 163\n    primes[39]\
    \ = 173\n    primes[40] = 179\n    primes[41] = 181\n    primes[42] = 191\n  \
    \  primes[43] = 193\n    primes[44] = 197 \n    primes[45] = 199 \n    primes[46]\
    \ = 203 \n    primes[47] = 209 \n    primes[48] = 211 \n    primes[49] = 223 \n\
    \    primes[50] = 229 \n    primes[51] = 233 \n    primes[52] = 239 \n    primes[53]\
    \ = 241 \n    primes[54] = 247 \n    primes[55] = 251 \n    primes[56] = 257 \n\
    \    primes[57] = 263 \n    primes[58] = 269 \n    primes[59] = 271 \n    primes[60]\
    \ = 277 \n    primes[61] = 289 \n    primes[62] = 293 \n    primes[63] = 297 \n\
    \    primes[64] = 301 \n    primes[65] = 303 \n    prime\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpebk4ru9o_test.go:87:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for i := 2; i < 100; i++ {\n\
    \        if b%i == 0 {\n            b = b / i\n            if b == 1 {\n     \
    \           return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp5o8z2eop_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp5o8z2eop_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmp5o8z2eop_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if primes[i] == 0 {\n            primes[i] = 1\n        }\n    }\n\
    \    \n    for i := 2; i < a; i++ {\n        if primes[i] != 0 {\n           \
    \ for j := i * i; j < a; j += i {\n                primes[j] = 1\n           \
    \ }\n        }\n    }\n    \n    for i := 0; i < 100; i++ {\n        if primes[i]\
    \ == 1 {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpnn5das0j_test.go:30\
    \ +0x11a\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpnn5das0j_test.go:55\
    \ +0xa7\ntesting.tRunner(0xc0001a01a0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073671
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        primes[i] = i\n    }\n    \n    for i := 2; i < a; i++ {\n      \
    \  for j := 2; j < i; j++ {\n            if primes[j] == i {\n               \
    \ primes[j] = -1\n            }\n        }\n    }\n    \n    for i := 0; i < 100;\
    \ i++ {\n        if primes[i] == -1 {\n            return false\n        }\n \
    \   }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmp7zbbssnh_test.go:27\
    \ +0xfd\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmp7zbbssnh_test.go:53\
    \ +0xa7\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if a % prime[i] == 0 {\n            return false\n        }\n   \
    \ }\n    \n    for i := 0; i < 100; i++ {\n        if a % prime[(i+1)%100] ==\
    \ 0 {\n            return false\n        }\n    }\n    \n    for i := 0; i < 100;\
    \ i++ {\n        if a % prime[(i+2)%100] == 0 {\n            return false\n  \
    \      }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpgvlofzit_test.go:22\
    \ +0x1d9\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpgvlofzit_test.go:53\
    \ +0xa7\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073671
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    if a < 100\
    \ {\n        return false\n    }\n    \n    primes := make([]int, 100)\n    primes[0]\
    \ = 2\n    primes[1] = 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4]\
    \ = 11\n    primes[5] = 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8]\
    \ = 23\n    primes[9] = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12]\
    \ = 41\n    primes[13] = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16]\
    \ = 59\n    primes[17] = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20]\
    \ = 73\n    primes[21] = 317\n    primes[22] = 359\n    primes[23] = 411\n   \
    \ primes[24] = 419\n    primes[25] = 431\n    primes[26] = 439\n    primes[27]\
    \ = 443\n    primes[28] = 449\n    primes[29] = 457\n    primes[30] = 479\n  \
    \  primes[31] = 489\n    primes[32] = 493\n    primes[33] = 499\n    primes[34]\
    \ = 503\n    primes[35] = 509\n    primes[36] = 521\n    primes[37] = 523\n  \
    \  primes[38] = 541\n    primes[39] = 547\n    primes[40] = 553\n    primes[41]\
    \ = 569\n    primes[42] = 571\n    primes[43] = 577\n    primes[44] = 587\n  \
    \  primes[45] = 593\n    primes[46] = 599\n    primes[47] = 601\n    primes[48]\
    \ = 607\n    primes[49] = 613\n    primes[50] = 617\n    primes[51] = 619\n  \
    \  primes[52] = 631\n    primes[53] = 641\n    primes[54] = 647\n    primes[55]\
    \ = 653\n    primes[56] = 659\n    primes[57] = 661\n    primes[58] = 673\n  \
    \  primes[59] = 677\n    primes[60] = 683\n    primes[61] = 691\n    primes[62]\
    \ = 701\n    primes[63] = 709\n    primes[64] = 719\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp363vpkuo_test.go:87:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if i%2 == 0 {\n            prime[i] = 0\n        } else {\n     \
    \       prime[i] = 1\n        }\n    }\n    \n    for i := 3; i < a; i+=2 {\n\
    \        if prime[i] == 0 {\n            return false\n        }\n    }\n    \n\
    \    for i := a; i < 100; i+=2 {\n        if prime[i] == 1 {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [101] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [101] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpgpv_i3r2_test.go:30\
    \ +0x118\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpgpv_i3r2_test.go:55\
    \ +0xa7\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073671
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 37\n    primes[14] = 43\n    primes[15] = 47\n    primes[16] = 53\n    primes[17]\
    \ = 59\n    primes[18] = 61\n    primes[19] = 67\n    primes[20] = 71\n    primes[21]\
    \ = 73\n    primes[22] = 79\n    primes[23] = 83\n    primes[24] = 89\n    primes[25]\
    \ = 97\n    primes[26] = 101\n    primes[27] = 103\n    primes[28] = 107\n   \
    \ primes[29] = 109\n    primes[30] = 110\n    primes[31] = 111\n    primes[32]\
    \ = 113\n    primes[33] = 115\n    primes[34] = 117\n    primes[35] = 119\n  \
    \  primes[36] = 121\n    primes[37] = 123\n    primes[38] = 127\n    primes[39]\
    \ = 129\n    primes[40] = 131\n    primes[41] = 137\n    primes[42] = 139\n  \
    \  primes[43] = 149\n    primes[44] = 151\n    primes[45] = 157\n    primes[46]\
    \ = 163\n    primes[47] = 179\n    primes[48] = 181\n    primes[49] = 191\n  \
    \  primes[50] = 193\n    primes[51] = 193\n    primes[52] = 193\n    primes[53]\
    \ = 193\n    primes[54] = 193\n    primes[55] = 193\n    primes[56] = 193\n  \
    \  primes[57] = 193\n    primes[58] = 193\n    primes[59] = 193\n    primes[60]\
    \ = 193\n    primes[61] = 193\n    primes[62] = 193\n    primes[63] = 193\n  \
    \  primes[64] = 193\n    primes[65] = 193\n    primes[66] = 193\n    prime\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmj6bs89d_test.go:88:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 121\n    primes[31] = 127\n    primes[32]\
    \ = 131\n    primes[33] = 137\n    primes[34] = 139\n    primes[35] = 149\n  \
    \  primes[36] = 151\n    primes[37] = 157\n    primes[38] = 163\n    primes[39]\
    \ = 173\n    primes[40] = 179\n    primes[41] = 181\n    primes[42] = 191\n  \
    \  primes[43] = 193\n    primes[44] = 197 \n    primes[45] = 199\n    primes[46]\
    \ = 211\n    primes[47] = 223\n    primes[48] = 229\n    primes[49] = 233\n  \
    \  primes[50] = 241\n    primes[51] = 247\n    primes[52] = 251\n    primes[53]\
    \ = 257\n    primes[54] = 263\n    primes[55] = 269\n    primes[56] = 271\n  \
    \  primes[57] = 277\n    primes[58] = 281\n    primes[59] = 283\n    primes[60]\
    \ = 293\n    primes[61] = 307\n    primes[62] = 311\n    primes[63] = 317\n  \
    \  primes[64] = 323\n    primes[65] = 329\n    primes[66] = 331\n    primes[67\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2klhgfru_test.go:87:14: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    \n    for i := 2; i < a; i++ {\n        if primes[i]*primes[i] > a\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpmconlaph_test.go:32\
    \ +0x119\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpmconlaph_test.go:54\
    \ +0x10d\ntesting.tRunner(0xc0001a01a0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073671
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if i%2 == 0 {\n            prime[i] = 2\n        } else {\n     \
    \       prime[i] = 1\n        }\n    }\n    \n    for i := 3; i < a; i++ {\n \
    \       if prime[(i-1)%3] == 0 {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpajjwen7m_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpajjwen7m_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpajjwen7m_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpajjwen7m_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpajjwen7m_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073671
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 116\n    primes[31] = 120\n    primes[32]\
    \ = 124\n    primes[33] = 127\n    primes[34] = 130\n    primes[35] = 133\n  \
    \  primes[36] = 137\n    primes[37] = 139\n    primes[38] = 142\n    primes[39]\
    \ = 145\n    primes[40] = 147\n    primes[41] = 149\n    primes[42] = 152\n  \
    \  primes[43] = 155\n    primes[44] = 157\n    primes[45] = 159\n    primes[46]\
    \ = 162\n    primes[47] = 165\n    primes[48] = 167\n    primes[49] = 169\n  \
    \  primes[50] = 173\n    primes[51] = 177\n    primes[52] = 181\n    primes[53]\
    \ = 191\n    primes[54] = 193\n    primes[55] = 197\n    primes[56] = 199\n  \
    \  primes[57] = 201\n    primes[58] = 205\n    primes[59] = 209\n    primes[60]\
    \ = 213\n    primes[61] = 217\n    primes[62] = 223\n    primes[63] = 227\n  \
    \  primes[64] = 229\n    primes[65] = 233\n    primes[66] = 239\n    primes[67]\
    \ = 241\n    primes[68] = 243\n    \nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzldzy4z__test.go:90:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 116\n    primes[31] = 120\n    primes[32]\
    \ = 124\n    primes[33] = 127\n    primes[34] = 130\n    primes[35] = 133\n  \
    \  primes[36] = 137\n    primes[37] = 139\n    primes[38] = 142\n    primes[39]\
    \ = 145\n    primes[40] = 147\n    primes[41] = 149\n    primes[42] = 152\n  \
    \  primes[43] = 155\n    primes[44] = 157\n    primes[45] = 159\n    primes[46]\
    \ = 162\n    primes[47] = 165\n    primes[48] = 168\n    primes[49] = 171\n  \
    \  primes[50] = 173\n    primes[51] = 177\n    primes[52] = 179\n    primes[53]\
    \ = 181\n    primes[54] = 183\n    primes[55] = 186\n    primes[56] = 189\n  \
    \  primes[57] = 191\n    primes[58] = 193\n    primes[59] = 196\n    primes[60]\
    \ = 198\n    primes[61] = 199\n    primes[62] = 202\n    primes[63] = 205\n  \
    \  primes[64] = 208\n    primes[65] = 211\n    primes[66] = 213\n    primes[67]\
    \ = 216\n    primes[68] = 219\n    \nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0u4ss6ul_test.go:90:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073671
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    \n    for i := 3; i < 100; i++ {\n        if primes[i]\
    \ != 0 {\n            for j := 2; j < i; j++ {\n                if primes[i]%primes[j]\
    \ == 0 {\n                    return false\n                }\n            }\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpupy6b4c9_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpupy6b4c9_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpupy6b4c9_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpupy6b4c9_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpupy6b4c9_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   \n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpsmq5w5rf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpsmq5w5rf_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpsmq5w5rf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpsmq5w5rf_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpsmq5w5rf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    \n    for i := 3; i < 100; i++ {\n        if primes[i]*primes[i]\
    \ > a {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxfep_smt_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxfep_smt_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpxfep_smt_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpxfep_smt_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpxfep_smt_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmptatyw424_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmptatyw424_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    prime[0] = true\n    prime[1] =\
    \ true\n    prime[2] = true\n    prime[3] = true\n    prime[4] = true\n    prime[5]\
    \ = true\n    prime[6] = true\n    prime[7] = true\n    prime[8] = true\n    prime[9]\
    \ = true\n    prime[10] = true\n    prime[11] = true\n    prime[12] = true\n \
    \   prime[13] = true\n    prime[14] = true\n    prime[15] = true\n    prime[16]\
    \ = true\n    prime[17] = true\n    prime[18] = true\n    prime[19] = true\n \
    \   prime[20] = true\n    prime[21] = true\n    prime[22] = true\n    prime[23]\
    \ = true\n    prime[24] = true\n    prime[25] = true\n    prime[26] = true\n \
    \   prime[27] = true\n    prime[28] = true\n    prime[29] = true\n    prime[30]\
    \ = true\n    prime[31] = true\n    prime[32] = true\n    prime[33] = true\n \
    \   prime[34] = true\n    prime[35] = true\n    prime[36] = true\n    prime[37]\
    \ = true\n    prime[38] = true\n    prime[39] = true\n    prime[40] = true\n \
    \   prime[41] = true\n    prime[42] = true\n    prime[43] = true\n    prime[44]\
    \ = true\n    prime[45] = true\n    prime[46] = true\n    prime[47] = true\n \
    \   prime[48] = true\n    prime[49] = true\n    prime[50] = true\n    prime[51]\
    \ = true\n    prime[52] = true\n    prime[53] = true\n    prime[54] = true\n \
    \   prime[55] = true\n    prime[56] = true\n    prime[57] = true\n    prime[58]\
    \ = true\n    prime[59] = true\n    prime[60] = true\n    prime[61] = true\n \
    \   prime[62] = true\n    prime[63] = true\n    prime[64] = true\n    prime[65]\
    \ = true\n    prime[66] = true\n    prime[67] = true\n    prime[68] = true\n \
    \   prime[69] = true\n    prime[70] = true\n    prime[71] = true\n    prime[72]\
    \ = true\n    prime[73] = true\nfunc TestIs_Multiply_Prime(t *testing.T) {\n \
    \ candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp44md41bc_test.go:94:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 31\n    primes[12] = 31\n    primes[13]\
    \ = 31\n    primes[14] = 31\n    primes[15] = 31\n    primes[16] = 31\n    primes[17]\
    \ = 31\n    primes[18] = 31\n    primes[19] = 31\n    primes[20] = 31\n    primes[21]\
    \ = 31\n    primes[22] = 31\n    primes[23] = 31\n    primes[24] = 31\n    primes[25]\
    \ = 31\n    primes[26] = 31\n    primes[27] = 31\n    primes[28] = 31\n    primes[29]\
    \ = 31\n    primes[30] = 31\n    primes[31] = 31\n    primes[32] = 31\n    primes[33]\
    \ = 31\n    primes[34] = 31\n    primes[35] = 31\n    primes[36] = 31\n    primes[37]\
    \ = 31\n    primes[38] = 31\n    primes[39] = 31\n    primes[40] = 31\n    primes[41]\
    \ = 31\n    primes[42] = 31\n    primes[43] = 31\n    primes[44] = 31\n    primes[45]\
    \ = 31\n    primes[46] = 31\n    primes[47] = 31\n    primes[48] = 31\n    primes[49]\
    \ = 31\n    primes[50] = 31\n    primes[51] = 31\n    primes[52] = 31\n    primes[53]\
    \ = 31\n    primes[54] = 31\n    primes[55] = 31\n    primes[56] = 31\n    primes[57]\
    \ = 31\n    primes[58] = 31\n    primes[59] = 31\n    primes[60] = 31\n    primes[61]\
    \ = 31\n    primes[62] = 31\n    primes[63\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw1ji2gj__test.go:83:14: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4_sffk8l_test.go:272:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073671
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    c := a\n    d := a\n    e :=\
    \ a\n    f := a\n    g := a\n    h := a\n    i := a\n    j := a\n    k := a\n\
    \    l := a\n    m := a\n    n := a\n    o := a\n    p := a\n    q := a\n    r\
    \ := a\n    s := a\n    t := a\n    u := a\n    v := a\n    w := a\n    x := a\n\
    \    y := a\n    z := a\n    \n    for {\n        if b == 0 {\n            return\
    \ false\n        }\n        if b == 1 {\n            return true\n        }\n\
    \        if b == 2 {\n            return true\n        }\n        if b == 3 {\n\
    \            return true\n        }\n        if b == 4 {\n            return true\n\
    \        }\n        if b == 5 {\n            return true\n        }\n        if\
    \ b == 6 {\n            return true\n        }\n        if b == 7 {\n        \
    \    return true\n        }\n        if b == 8 {\n            return true\n  \
    \      }\n        if b == 9 {\n            return true\n        }\n        if\
    \ b == 10 {\n            return true\n        }\n        if b == 11 {\n      \
    \      return true\n        }\n        if b == 12 {\n            return true\n\
    \        }\n        if b == 13 {\n            return true\n        }\n       \
    \ if b == 14 {\n            return true\n        }\n        if b == 15 {\n   \
    \         return true\n        }\n        if b == 16 {\n            return true\n\
    \        }\n        if b == 17 {\n            return true\n        }\n       \
    \ if b == 18 {\n            return true\n        }\n        if b == 19 {\n   \
    \         return true\n        }\n        if b == 20 {\n            return true\n\
    \        }\n        if b == 21 {\n            return true\n        }\n       \
    \ if b == 22 {\n            return true\n        }\n        if b == 23 {\n   \
    \         return true\n        }\n        if b == 24 {\n            return true\n\
    \        }\n        if b == 25 {\n            return true\n        }\n       \
    \ if b == 26 {\n            return true\n        }\n        if b == 27 {\n   \
    \         return true\n        }\n        if b == 28 {\n            return true\n\
    \        }\n        if b == 29 {\n            return true\n        }\n       \
    \ if b == 30 {\n            return true\n        }\n        if b == 31 {\n   \
    \         return true\n        }\n        if b == 32 {\n            return true\n\
    \        }\n        if b == 33 {\n            return true\n        }\n       \
    \ if b == 34 {\n            return true\n        }\n        if b == 35 {\n   \
    \         return true\n        }\n        if b == 36 {\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplspk4ykc_test.go:152:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073671
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n\n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] = 3\n\
    \    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] = 13\n\
    \    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9] = 29\n\
    \n    for i := 2; i < a; i++ {\n        if primes[i]*primes[i] > a {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmplpna78i8_test.go:32\
    \ +0x119\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmplpna78i8_test.go:54\
    \ +0x10d\ntesting.tRunner(0xc000103380, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n          \
    \  return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpq5by16s__test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpq5by16s__test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpq5by16s__test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpq5by16s__test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpq5by16s__test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < len(primes);\
    \ i++ {\n        if primes[i] == 0 {\n            continue\n        }\n      \
    \  \n        for j := i + 1; j < len(primes); j++ {\n            if primes[j]\
    \ == 0 {\n                continue\n            }\n            \n            if\
    \ primes[i]*primes[j] == a {\n                return true\n            }\n   \
    \     }\n    }\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp9dhx081__test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp9dhx081__test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp9dhx081__test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp9dhx081__test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp9dhx081__test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 116\n    primes[31] = 120\n    primes[32]\
    \ = 124\n    primes[33] = 127\n    primes[34] = 130\n    primes[35] = 133\n  \
    \  primes[36] = 137\n    primes[37] = 139\n    primes[38] = 142\n    primes[39]\
    \ = 145\n    primes[40] = 147\n    primes[41] = 149\n    primes[42] = 152\n  \
    \  primes[43] = 155\n    primes[44] = 157\n    primes[45] = 159\n    primes[46]\
    \ = 162\n    primes[47] = 165\n    primes[48] = 167\n    primes[49] = 169\n  \
    \  primes[50] = 172\n    primes[51] = 175\n    primes[52] = 177\n    primes[53]\
    \ = 179\n    primes[54] = 181\n    primes[55] = 183\n    primes[56] = 186\n  \
    \  primes[57] = 189\n    primes[58] = 192\n    primes[59] = 195\n    primes[60]\
    \ = 197\n    primes[61] = 200\n    primes[62] = 202\n    primes[63] = 205\n  \
    \  primes[64] = 208\n    primes[65] = 211\n    primes[66] = 213\n    primes[67]\
    \ = 216\n    primes[68] = 219\n    primes[69] = \nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphp3n_7bk_test.go:90:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073671
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    for i := 2; i < a; i++ {\n      \
    \  if a % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpu717kpf8_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpu717kpf8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpu717kpf8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpu717kpf8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpu717kpf8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpu717kpf8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    \n    for i := 3; i < 100; i++ {\n        if a % primes[i]\
    \ == 0 {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmpnhic42r2_test.go:25\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc000103380?)\n\t/tmp/tmpnhic42r2_test.go:44\
    \ +0x71e\ntesting.tRunner(0xc000103380, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    c := a\n    d := a\n    e :=\
    \ a\n    f := a\n    g := a\n    h := a\n    i := a\n    j := a\n    k := a\n\
    \    l := a\n    m := a\n    n := a\n    o := a\n    p := a\n    q := a\n    r\
    \ := a\n    s := a\n    t := a\n    u := a\n    v := a\n    w := a\n    x := a\n\
    \    y := a\n    z := a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmix524v4_test.go:234:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if a % prime[i] == 0 {\n            return false\n        }\n   \
    \ }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmpgmsqwgh8_test.go:22\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc000198ea0?)\n\t/tmp/tmpgmsqwgh8_test.go:41\
    \ +0x65e\ntesting.tRunner(0xc000198ea0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 7\n    primes[22] = 79\n    primes[23] = 83\n    primes[24] = 89\n    primes[25]\
    \ = 97\n    primes[26] = 101\n    primes[27] = 103\n    primes[28] = 107\n   \
    \ primes[29] = 109\n    primes[30] = 110\n    primes[31] = 111\n    primes[32]\
    \ = 113\n    primes[33] = 115\n    primes[34] = 117\n    primes[35] = 119\n  \
    \  primes[36] = 121\n    primes[37] = 123\n    primes[38] = 127\n    primes[39]\
    \ = 129\n    primes[40] = 131\n    primes[41] = 137\n    primes[42] = 139\n  \
    \  primes[43] = 149\n    primes[44] = 151\n    primes[45] = 157\n    primes[46]\
    \ = 163\n    primes[47] = 173\n    primes[48] = 179\n    primes[49] = 181\n  \
    \  primes[50] = 191\n    primes[51] = 193\n    primes[52] = 193\n    primes[53]\
    \ = 193\n    primes[54] = 193\n    primes[55] = 193\n    primes[56] = 193\n  \
    \  primes[57] = 193\n    primes[58] = 193\n    primes[59] = 193\n    primes[60]\
    \ = 193\n    primes[61] = 193\n    primes[62] = 193\n    primes[63] = 193\n  \
    \  primes[64] = 193\n    primes[65] = 193\n    primes[66] = 193\n    primes[\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2y_j0i6t_test.go:88:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073671
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   if a < 100 {\n        return false\n    }\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3bn1mj5q_test.go:268:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4_sffk8l_test.go:272:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073671
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 37\n    primes[14] = 49\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 116\n    primes[31] = 121\n    primes[32]\
    \ = 123\n    primes[33] = 127\n    primes[34] = 131\n    primes[35] = 137\n  \
    \  primes[36] = 139\n    primes[37] = 142\n    primes[38] = 147\n    primes[39]\
    \ = 151\n    primes[40] = 157\n    primes[41] = 163\n    primes[42] = 167\n  \
    \  primes[43] = 173\n    primes[44] = 179\n    primes[45] = 181\n    primes[46]\
    \ = 191\n    primes[47] = 193\n    primes[48] = 197\n    primes[49] = 199\n  \
    \  primes[50] = 201\n    primes[51] = 203\n    primes[52] = 205\n    primes[53]\
    \ = 209\n    primes[54] = 212\n    primes[55] = 215\n    primes[56] = 217\n  \
    \  primes[57] = 223\n    primes[58] = 227\n    primes[59] = 229\n    primes[60]\
    \ = 231\n    primes[61] = 233\n    primes[62] = 239\n    primes[63] = 241\n  \
    \  primes[64] = 243\n    primes[65] = 247\n    primes[66] = 251\n    primes[67]\
    \ = 253\n    prime\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgb8rheoa_test.go:89:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073671
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_ede_a_t_test.go:270:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n          \
    \  return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpq5by16s__test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpq5by16s__test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpq5by16s__test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpq5by16s__test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpq5by16s__test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if primes[i] == 0 {\n            primes[i] = 1\n        }\n    }\n\
    \    \n    for i := 2; i < a; i++ {\n        if primes[i] != 0 {\n           \
    \ for j := i * i; j < a; j += i {\n                primes[j] = 1\n           \
    \ }\n        }\n    }\n    \n    for i := 0; i < 100; i++ {\n        if primes[i]\
    \ == 1 {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpnn5das0j_test.go:30\
    \ +0x11a\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpnn5das0j_test.go:55\
    \ +0xa7\ntesting.tRunner(0xc0001a01a0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073671
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for i := 2; i < 100; i++ {\n\
    \        if b%i == 0 {\n            b = b / i\n        }\n    }\n    return b\
    \ == 1\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp493fvzcc_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp493fvzcc_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmp493fvzcc_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   if a < 100 {\n        return false\n    }\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3bn1mj5q_test.go:268:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_k0itz7i_test.go:270:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    // Write your code here\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpwzdyc_8i_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpwzdyc_8i_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpwzdyc_8i_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpwzdyc_8i_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpwzdyc_8i_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    \n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpwkqs_a06_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpwkqs_a06_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    \n    for i := 0; i < 100; i++ {\n        if primes[i] == 0 {\n  \
    \          primes[i] = 1\n        }\n    }\n    \n    for i := 2; i < a; i++ {\n\
    \        for j := 2; j < i; j++ {\n            if i*j == a {\n               \
    \ primes[i*j] = primes[i*j] + 1\n            }\n        }\n    }\n    \n    for\
    \ i := 0; i < 100; i++ {\n        if primes[i] == 3 {\n            return true\n\
    \        }\n    }\n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [125] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [125] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpfmkd1chi_test.go:33\
    \ +0xff\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpfmkd1chi_test.go:58\
    \ +0xa7\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    \n    for i := 3; i < 100; i++ {\n        if primes[i]*primes[i]\
    \ > a {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxfep_smt_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxfep_smt_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpxfep_smt_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpxfep_smt_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpxfep_smt_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    \n    for i := 0; i < 100; i++ {\n        if primes[i] == 0 {\n  \
    \          primes[i] = 1\n        }\n    }\n    \n    for i := 0; i < a; i++ {\n\
    \        \n        for j := 0; j < 100; j++ {\n            \n            if primes[j]\
    \ == 0 {\n                \n                for k := j + 1; k < 100; k++ {\n \
    \                   \n                    if primes[k] == 0 {\n              \
    \          \n                        if i*j == i*k {\n                       \
    \     primes[j] = 1\n                            primes[k] = 1\n             \
    \           }\n                    }\n                }\n            }\n     \
    \   }\n    }\n    \n    for i := 0; i < 100; i++ {\n        if primes[i] == 1\
    \ {\n            return true\n        }\n    }\n    \n    return false\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpsezg8nmn_test.go:81: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpsezg8nmn_test.go:81:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpsezg8nmn_test.go:81: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpsezg8nmn_test.go:81:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpsezg8nmn_test.go:81: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for i := 2; i < 100; i++ {\n\
    \        if b%i == 0 {\n            b = b / i\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp20wzor6t_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp20wzor6t_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp20wzor6t_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp20wzor6t_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp20wzor6t_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for i := 2; i < 100; i++ {\n\
    \        if b%i == 0 {\n            b = b / i\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp20wzor6t_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp20wzor6t_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp20wzor6t_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp20wzor6t_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp20wzor6t_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        prime[i] = i\n    }\n    \n    for i := 2; i < a; i++ {\n       \
    \ for j := 0; j < i; j++ {\n            if prime[j] == 0 {\n                break\n\
    \            }\n            if prime[j] > i {\n                break\n       \
    \     }\n            prime[j] = 0\n        }\n    }\n    \n    for i := 0; i <\
    \ 100; i++ {\n        if prime[i] != 0 {\n            return false\n        }\n\
    \    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpdr6r_f8n_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpdr6r_f8n_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpdr6r_f8n_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpdr6r_f8n_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpdr6r_f8n_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    // The prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n    primes := []int{2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n    \n    // The first prime number is 2\n    primes[0] = 2\n\
    \    \n    // The next prime number is 3\n    primes[1] = 3\n    \n    // The\
    \ next prime number is 5\n    primes[2] = 5\n    \n    // The next prime number\
    \ is 7\n    primes[3] = 7\n    \n    // The next prime number is 11\n    primes[4]\
    \ = 11\n    \n    // The next prime number is 13\n    primes[5] = 13\n    \n \
    \   // The next prime number is 17\n    primes[6] = 17\n    \n    // The next\
    \ prime number is 19\n    primes[7] = 19\n    \n    // The next prime number is\
    \ 23\n    primes[8] = 23\n    \n    // The next prime number is 29\n    primes[9]\
    \ = 29\n    \n    // The next prime number is 31\n    primes[10] = 31\n    \n\
    \    // The next prime number is 37\n    primes[11] = 37\n    \n    // The next\
    \ prime number is 41\n    primes[12] = 41\n    \n    // The next prime number\
    \ is 43\n    primes[13] = 43\n    \n    // The next prime number is 47\n    primes[14]\
    \ = 47\n    \n    // The next prime number is 53\n    primes[15] = 53\n    \n\
    \    // The next prime number is 59\n    primes[16] = 59\n    \n    // The next\
    \ prime number is 61\n    primes[17] = 61\n    \n    // The next prime number\
    \ is 67\n    primes[18] = 67\n    \n    // The next prime number is 71\n    primes[19]\
    \ = 71\n    \n    // The next prime number is 73\n    primes[20] = 73\n    \n\
    \    // The next prime number is 79\n    primes[21] = 79\n    \n    // The next\
    \ prime number is 83\n    primes[22] = 83\n    \n    // The next prime number\
    \ is 89\n    primes[23] = 89\n    \n    // The next prime number is 97\n    primes[24]\
    \ = 97\n    \n    // The next prime number is 101\n    primes[25] = 101\n    \n\
    \    // The next prime number is 103\n    \nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeyibs4_h_test.go:102:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073671
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if primes[i] == 0 {\n            primes[i] = 1\n        }\n    }\n\
    \    \n    for i := 0; i < 100; i++ {\n        if a % primes[i] == 0 {\n     \
    \       return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpck1gk9u6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpck1gk9u6_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpck1gk9u6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpck1gk9u6_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpck1gk9u6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < len(primes);\
    \ i++ {\n        primes[i] = i\n    }\n    \n    for i := 2; i < a; i++ {\n  \
    \      for j := 0; j < len(primes); j++ {\n            if i*primes[j] < a {\n\
    \                primes[j] = primes[j] + 1\n                break\n          \
    \  }\n        }\n    }\n    \n    for i := 0; i < len(primes); i++ {\n       \
    \ if primes[i] == 3 {\n            return true\n        }\n    }\n    \n    return\
    \ false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpdc508iis_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpdc508iis_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpdc508iis_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpdc508iis_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpdc508iis_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n\n    // The first prime number is 2\n    p := 2\n\n    // The second prime\
    \ number is 3\n    q := 3\n\n    // The third prime number is 5\n    r := 5\n\n\
    \    // The fourth prime number is 7\n    s := 7\n\n    // The fifth prime number\
    \ is 11\n    t := 11\n\n    // The sixth prime number is 13\n    u := 13\n\n \
    \   // The seventh prime number is 17\n    v := 17\n\n    // The eighth prime\
    \ number is 19\n    w := 19\n\n    // The ninth prime number is 23\n    x := 23\n\
    \n    // The tenth prime number is 29\n    y := 29\n\n    // The eleventh prime\
    \ number is 31\n    z := 31\n\n    // The twelfth prime number is 37\n    0 :=\
    \ 37\n\n    // The first prime number is 2\n    p := 2\n\n    // The second prime\
    \ number is 3\n    q := 3\n\n    // The third prime number is 5\n    r := 5\n\n\
    \    // The fourth prime number is 7\n    s := 7\n\n    // The fifth prime number\
    \ is 11\n    t := 11\n\n    // The sixth prime number is 13\n    u := 13\n\n \
    \   // The seventh prime number is 17\n    v := 17\n\n    // The eighth prime\
    \ number is 19\n    w := 19\n\n    // The ninth prime number is 23\n    x := 23\n\
    \n    // The tenth prime number is 29\n    y := 29\n\n    // The eleventh prime\
    \ number is 31\n    z := 31\n\n    // The twelfth prime number is 37\n    0 :=\
    \ 37\n\n    // The first prime number is 2\n    p := 2\n\n    // The second prime\
    \ number is 3\n    q := 3\n\n    // The third prime number is 5\n    r := 5\n\n\
    \    // The fourth prime number is 7\n    s := 7\n\n    // The fifth prime number\
    \ is 11\n    t := 11\n\n    // The sixth prime number is 13\n    u := 13\n\n \
    \   // The seventh prime number is 17\n    v := 17\n\n    // The eighth prime\
    \ number is 19\n    w := 19\n\n    // The ninth prime number is 23\n    x := 23\n\
    \n    // The tenth prime number is 29\n    y := 29\n\n    // The eleventh prime\
    \ number is 31\n    z := 31\n\n    // The twelfth prime number is 37\n    0 :=\
    \ 37\n\n    // The first prime number is 2\n    p := 2\n\n    // The second prime\
    \ number is 3\n    q := 3\n\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp39od9jyp_test.go:53:5: expected identifier on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    \n    if a < 100 {\n        return\
    \ false\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_0yfw40k_test.go:269:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < len(primes);\
    \ i++ {\n        if primes[i] == 0 {\n            continue\n        }\n      \
    \  \n        for j := i + 1; j < len(primes); j++ {\n            if primes[i]*primes[j]\
    \ == a {\n                return true\n            }\n        }\n    }\n    \n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpyh1_ec84_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpyh1_ec84_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpyh1_ec84_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpyh1_ec84_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpyh1_ec84_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for i := 2; i < b; i++ {\n\
    \        if b%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp12601buh_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp12601buh_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmp12601buh_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp12601buh_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmp12601buh_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp12601buh_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    prime[0] = true\n    prime[1] =\
    \ true\n    prime[2] = true\n    prime[3] = true\n    prime[4] = true\n    prime[5]\
    \ = true\n    prime[6] = true\n    prime[7] = true\n    prime[8] = true\n    prime[9]\
    \ = true\n    prime[10] = true\n    prime[11] = true\n    prime[12] = true\n \
    \   prime[13] = true\n    prime[14] = true\n    prime[15] = true\n    prime[16]\
    \ = true\n    prime[17] = true\n    prime[18] = true\n    prime[19] = true\n \
    \   prime[20] = true\n    prime[21] = true\n    prime[22] = true\n    prime[23]\
    \ = true\n    prime[24] = true\n    prime[25] = true\n    prime[26] = true\n \
    \   prime[27] = true\n    prime[28] = true\n    prime[29] = true\n    prime[30]\
    \ = true\n    prime[31] = true\n    prime[32] = true\n    prime[33] = true\n \
    \   prime[34] = true\n    prime[35] = true\n    prime[36] = true\n    prime[37]\
    \ = true\n    prime[38] = true\n    prime[39] = true\n    prime[40] = true\n \
    \   prime[41] = true\n    prime[42] = true\n    prime[43] = true\n    prime[44]\
    \ = true\n    prime[45] = true\n    prime[46] = true\n    prime[47] = true\n \
    \   prime[48] = true\n    prime[49] = true\n    prime[50] = true\n    prime[51]\
    \ = true\n    prime[52] = true\n    prime[53] = true\n    prime[54] = true\n \
    \   prime[55] = true\n    prime[56] = true\n    prime[57] = true\n    prime[58]\
    \ = true\n    prime[59] = true\n    prime[60] = true\n    prime[61] = true\n \
    \   prime[62] = true\n    prime[63] = true\n    prime[64] = true\n    prime[65]\
    \ = true\n    prime[66] = true\n    prime[67] = true\n    prime[68] = true\n \
    \   prime[69] = true\n    prime[70] = true\n    prime[71] = true\n    prime[72]\
    \ = true\n    prime[73] = true\nfunc TestIs_Multiply_Prime(t *testing.T) {\n \
    \ candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp44md41bc_test.go:94:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073666
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmptatyw424_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmptatyw424_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    if a < 100\
    \ {\n        return false\n    }\n    \n    primes := make([]int, 100)\n    \n\
    \    for i := 0; i < len(primes); i++ {\n        if a % primes[i] == 0 {\n   \
    \         return false\n        }\n    }\n    \n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            return false\n        }\n    }\n    \n \
    \   return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmpzmlgrfqv_test.go:23\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc00019b040?)\n\t/tmp/tmpzmlgrfqv_test.go:48\
    \ +0x739\ntesting.tRunner(0xc00019b040, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        primes[i] = i\n    }\n    \n    for i := 2; i < a; i++ {\n      \
    \  for j := 0; j < i; j++ {\n            if primes[j] == i {\n               \
    \ primes[j] = 0\n            }\n        }\n    }\n    \n    for i := 0; i < 100;\
    \ i++ {\n        if primes[i] == 0 {\n            return false\n        }\n  \
    \  }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpqrayqw6g_test.go:27\
    \ +0xfd\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpqrayqw6g_test.go:53\
    \ +0xa7\ntesting.tRunner(0xc0001a01a0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    // find first prime number less than a\n    var first_prime int\n\
    \    for i := 2; i <= a; i++ {\n        if isprime(i) {\n            first_prime\
    \ = i\n            break\n        }\n    }\n    \n    // find second prime number\
    \ less than a\n    var second_prime int\n    for i := first_prime + 1; i <= a;\
    \ i++ {\n        if isprime(i) {\n            second_prime = i\n            break\n\
    \        }\n    }\n    \n    // find third prime number less than a\n    var third_prime\
    \ int\n    for i := second_prime + 1; i <= a; i++ {\n        if isprime(i) {\n\
    \            third_prime = i\n            break\n        }\n    }\n    \n    //\
    \ check if a is multiple of 3 prime numbers\n    if first_prime == second_prime\
    \ && first_prime == third_prime {\n        return true\n    }\n    \n    return\
    \ false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu6cldpaw_test.go:22:12: undefined: isprime

    /tmp/tmpu6cldpaw_test.go:31:12: undefined: isprime

    /tmp/tmpu6cldpaw_test.go:40:12: undefined: isprime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    \n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpwkqs_a06_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpwkqs_a06_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    c := a\n    d := a\n    e :=\
    \ a\n    f := a\n    g := a\n    h := a\n    i := a\n    j := a\n    k := a\n\
    \    l := a\n    m := a\n    n := a\n    o := a\n    p := a\n    q := a\n    r\
    \ := a\n    s := a\n    t := a\n    u := a\n    v := a\n    w := a\n    x := a\n\
    \    y := a\n    z := a\n    \n    \n    for {\n        if b%2 == 0 {\n      \
    \      b /= 2\n            continue\n        }\n        if c%2 == 0 {\n      \
    \      c /= 2\n            continue\n        }\n        if d%2 == 0 {\n      \
    \      d /= 2\n            continue\n        }\n        if e%2 == 0 {\n      \
    \      e /= 2\n            continue\n        }\n        if f%2 == 0 {\n      \
    \      f /= 2\n            continue\n        }\n        if g%2 == 0 {\n      \
    \      g /= 2\n            continue\n        }\n        if h%2 == 0 {\n      \
    \      h /= 2\n            continue\n        }\n        if i%2 == 0 {\n      \
    \      i /= 2\n            continue\n        }\n        if j%2 == 0 {\n      \
    \      j /= 2\n            continue\n        }\n        if k%2 == 0 {\n      \
    \      k /= 2\n            continue\n        }\n        if l%2 == 0 {\n      \
    \      l /= 2\n            continue\n        }\n        if m%2 == 0 {\n      \
    \      m /= 2\n            continue\n        }\n        if n%2 == 0 {\n      \
    \      n /= 2\n            continue\n        }\n        if o%2 == 0 {\n      \
    \      o /= 2\n            continue\n        }\n        if p%2 == 0 {\n      \
    \      p /= 2\n            continue\n        }\n        if q%2 == 0 {\n      \
    \      q /= 2\n            continue\n        }\n        if r%2 == 0 {\n      \
    \      r /= 2\n            continue\n        }\n        if s%2 == 0 {\n      \
    \      s /= 2\n            continue\n        }\n        if t%2 == 0 {\n      \
    \      t /= 2\n            continue\n        }\n        if u%2 == 0 {\n      \
    \      u /= 2\n            continue\n        }\n        if v%2 == 0 {\n      \
    \      v /= 2\n            continue\n        }\n        if w%2 == 0 {\n      \
    \      w /= 2\n            continue\n        }\n        if x%2 == 0 {\n      \
    \      x /= 2\n            continue\n        }\n        if y%2 == 0 {\n      \
    \      y /= 2\n            continue\n        }\n        if z%2 == 0 {\n      \
    \      z /= 2\n            continue\n        }\n        \n        break\n    }\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf04spzbe_test.go:146:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   if a%2 == 0 || a%3 == 0 || a%5 == 0 {\n        return false\n    }\n    \n\
    \    for i := 5; i*i <= a; i+=6 {\n        if a%i == 0 || a%(i+2) == 0 || a%(i+3)\
    \ == 0 {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpj4k8z6g1_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpj4k8z6g1_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpj4k8z6g1_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpj4k8z6g1_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpj4k8z6g1_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if primes[i] == 0 {\n            continue\n        }\n        \n\
    \        for j := i * i; j < 100; j += i {\n            if j > 100 {\n       \
    \         break\n            }\n            \n            if primes[j] == 0 {\n\
    \                continue\n            }\n            \n            if a % primes[j]\
    \ == 0 {\n                return false\n            }\n        }\n    }\n    \n\
    \    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpna3mp26a_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpna3mp26a_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpna3mp26a_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpna3mp26a_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpna3mp26a_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   if a < 100 {\n        return false\n    }\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3bn1mj5q_test.go:268:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if i%2 == 0 {\n            prime[i] = true\n        } else {\n  \
    \          prime[i] = false\n        }\n    }\n    \n    for i := 0; i < a; i++\
    \ {\n        if prime[a%10] == true {\n            return false\n        }\n \
    \   }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsikbd5vz_test.go:23:24: cannot use true (untyped bool constant) as int
    value in assignment

    /tmp/tmpsikbd5vz_test.go:25:24: cannot use false (untyped bool constant) as int
    value in assignment

    /tmp/tmpsikbd5vz_test.go:30:27: invalid operation: prime[a % 10] == true (mismatched
    types int and untyped bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpxbqhyzx4_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpxbqhyzx4_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    // We know that all prime numbers are greater than 1\n    // and\
    \ less than 100\n    \n    // We know that all prime numbers are divisible by\
    \ 3\n    // and 5\n    \n    // We know that all prime numbers are divisible by\
    \ 7\n    // and 11\n    \n    // We know that all prime numbers are divisible\
    \ by 13\n    // and 17\n    \n    // We know that all prime numbers are divisible\
    \ by 19\n    // and 23\n    \n    // We know that all prime numbers are divisible\
    \ by 29\n    // and 31\n    \n    // We know that all prime numbers are divisible\
    \ by 37\n    // and 41\n    \n    // We know that all prime numbers are divisible\
    \ by 53\n    // and 61\n    \n    // We know that all prime numbers are divisible\
    \ by 67\n    // and 71\n    \n    // We know that all prime numbers are divisible\
    \ by 79\n    // and 83\n    \n    // We know that all prime numbers are divisible\
    \ by 89\n    // and 97\n    \n    // We know that all prime numbers are divisible\
    \ by 101\n    // and 103\n    \n    // We know that all prime numbers are divisible\
    \ by 107\n    // and 109\n    \n    // We know that all prime numbers are divisible\
    \ by 113\n    // and 117\n    \n    // We know that all prime numbers are divisible\
    \ by 127\n    // and 131\n    \n    // We know that all prime numbers are divisible\
    \ by 139\n    // and 147\n    \n    // We know that all prime numbers are divisible\
    \ by 151\n    // and 163\n    \n    // We know that all prime numbers are divisible\
    \ by 167\n    // and 173\n    \n    // We know that all prime numbers are divisible\
    \ by 181\n    // and 193\n    \n    // We know that all prime numbers are divisible\
    \ by 197 \n    // and 211\n    \n    // We know that all prime numbers are divisible\
    \ by 223\n    // and 227\n    \n    // We know that all prime numbers are divisible\
    \ by 257\n    // and 263\n    \n    // We know that all prime numbers are divisible\
    \ by 271\n    // and 277\n    \n    // We know that all prime numbers are divisible\
    \ by 283\n    // and 293\n    \n    // We know that all prime numbers are divisible\
    \ by 297\n    // and 303\n    \n    // We know that all prime numbers are divisible\
    \ by 311\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5bmgyjns_test.go:95:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    for i := 2; i < a; i++ {\n        if i%2 == 0 {\n            continue\n\
    \        }\n        \n        for j := 3; j < i; j++ {\n            if i%j ==\
    \ 0 {\n                break\n            }\n        }\n        \n        if j\
    \ > i {\n            return false\n        }\n    }\n    \n    return true\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7ex3888_test.go:30:12: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if primes[i] == 0 {\n            primes[i] = 1\n        }\n    }\n\
    \    \n    for i := 2; i < a; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i*j > a {\n                break\n            }\n            if primes[i*j]\
    \ == 0 {\n                primes[i*j] = 1\n            }\n        }\n    }\n \
    \   \n    for i := 0; i < 100; i++ {\n        if primes[i] == 1 {\n          \
    \  return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [110] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [110] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpty84f6ue_test.go:32\
    \ +0x11d\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpty84f6ue_test.go:58\
    \ +0xa7\ntesting.tRunner(0xc0001a01a0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    // a is divisible by 2 \n    if a % 2 == 0 {\n        return false\n\
    \    }\n    \n    // a is divisible by 3 \n    if a % 3 == 0 {\n        return\
    \ false\n    }\n    \n    // a is divisible by 5 \n    if a % 5 == 0 {\n     \
    \   return false\n    }\n    \n    // a is divisible by 7\n    if a % 7 == 0 {\n\
    \        return false\n    }\n    \n    // a is divisible by 11\n    if a % 11\
    \ == 0 {\n        return false\n    }\n    \n    // a is divisible by 13\n   \
    \ if a % 13 == 0 {\n        return false\n    }\n    \n    // a is divisible by\
    \ 17\n    if a % 17 == 0 {\n        return false\n    }\n    \n    // a is divisible\
    \ by 19\n    if a % 19 == 0 {\n        return false\n    }\n    \n    // a is\
    \ divisible by 23\n    if a % 23 == 0 {\n        return false\n    }\n    \n \
    \   // a is divisible by 29\n    if a % 29 == 0 {\n        return false\n    }\n\
    \    \n    // a is divisible by 31\n    if a % 31 == 0 {\n        return false\n\
    \    }\n    \n    // a is divisible by 37\n    if a % 37 == 0 {\n        return\
    \ false\n    }\n    \n    // a is divisible by 41\n    if a % 41 == 0 {\n    \
    \    return false\n    }\n    \n    // a is divisible by 43\n    if a % 43 ==\
    \ 0 {\n        return false\n    }\n    \n    // a is divisible by 47\n    if\
    \ a % 47 == 0 {\n        return false\n    }\n    \n    // a is divisible by 53\n\
    \    if a % 53 == 0 {\n        return false\n    }\n    \n    // a is divisible\
    \ by 59\n    if a % 59 == 0 {\n        return false\n    }\n    \n    // a is\
    \ divisible by 61\n    if a % 61 == 0 {\n        return false\n    }\n    \n \
    \   // a is divisible by 67\n    if a % 67 == 0 {\n        return false\n    }\n\
    \    \n    // a is divisible by 71\n    if a % 71 == 0 {\n        return false\n\
    \    }\n    \n    // a is divisible by 73\n    if a % 73 == 0 {\n        return\
    \ false\n    }\n    \n    // a is divisible by 79\n    if a % 79 == 0 {\n    \
    \    return false\n    }\n    \n    // a is divisible by 83\n    if a % 83 ==\
    \ 0 {\n        return false\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcy3lr2ky_test.go:132:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    // Find all prime numbers less than or equal to a\n    primes\
    \ := make([]int, 0, 100)\n    for i := 2; i < a; i++ {\n        if a % i == 0\
    \ {\n            primes = append(primes, i)\n        }\n    }\n    \n    // Check\
    \ if a is a multiple of any prime number\n    for _, prime := range primes {\n\
    \        if a % prime == 0 {\n            return false\n        }\n    }\n   \
    \ \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp5uxqv4ar_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp5uxqv4ar_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp5uxqv4ar_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp5uxqv4ar_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp5uxqv4ar_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if primes[i] == 0 {\n            primes[i] = 1\n        }\n    }\n\
    \    \n    for i := 2; i < a; i++ {\n        if primes[i] != 0 {\n           \
    \ for j := i * i; j < a; j += i {\n                primes[j] = 1\n           \
    \ }\n        }\n    }\n    \n    for i := 0; i < 100; i++ {\n        if primes[i]\
    \ == 1 {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpnn5das0j_test.go:30\
    \ +0x11a\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpnn5das0j_test.go:55\
    \ +0xa7\ntesting.tRunner(0xc0001a01a0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073671
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmptatyw424_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmptatyw424_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   \n    \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpsmq5w5rf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpsmq5w5rf_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpsmq5w5rf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpsmq5w5rf_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpsmq5w5rf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n\n    // We know that all prime numbers are greater than 1\n    // and less\
    \ than 100\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n          \
    \  return false\n        }\n    }\n\n    // We know that all prime numbers are\
    \ greater than 1\n    // and less than 100\n    for i := 2; i < a; i++ {\n   \
    \     if a % i == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp50712rz__test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp50712rz__test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp50712rz__test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp50712rz__test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp50712rz__test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n\n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] = 3\n\
    \    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] = 13\n\
    \    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9] = 29\n\
    \n    for i := 2; i < a; i++ {\n        for _, p := range primes {\n         \
    \   if a % p == 0 {\n                return false\n            }\n        }\n\
    \    }\n\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n \
    \ candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpe5y9lv50_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpe5y9lv50_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpe5y9lv50_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpe5y9lv50_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpe5y9lv50_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    // write your code here\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpw4ljafwv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpw4ljafwv_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpw4ljafwv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpw4ljafwv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpw4ljafwv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmptatyw424_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmptatyw424_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    c := a\n    d := a\n    e :=\
    \ a\n    f := a\n    g := a\n    h := a\n    i := a\n    j := a\n    k := a\n\
    \    l := a\n    m := a\n    n := a\n    o := a\n    p := a\n    q := a\n    r\
    \ := a\n    s := a\n    t := a\n    u := a\n    v := a\n    w := a\n    x := a\n\
    \    y := a\n    z := a\n\n    for {\n        if b == c {\n            return\
    \ true\n        }\n        if b == d {\n            return false\n        }\n\
    \        if b == e {\n            return false\n        }\n        if b == f {\n\
    \            return false\n        }\n        if b == g {\n            return\
    \ false\n        }\n        if b == h {\n            return false\n        }\n\
    \        if b == i {\n            return false\n        }\n        if b == j {\n\
    \            return false\n        }\n        if b == k {\n            return\
    \ false\n        }\n        if b == l {\n            return false\n        }\n\
    \        if b == m {\n            return false\n        }\n        if b == n {\n\
    \            return false\n        }\n        if b == o {\n            return\
    \ false\n        }\n        if b == p {\n            return false\n        }\n\
    \        if b == q {\n            return false\n        }\n        if b == r {\n\
    \            return false\n        }\n        if b == s {\n            return\
    \ false\n        }\n        if b == t {\n            return false\n        }\n\
    \        if b == u {\n            return false\n        }\n        if b == v {\n\
    \            return false\n        }\n        if b == w {\n            return\
    \ false\n        }\n        if b == x {\n            return false\n        }\n\
    \        if b == y {\n            return false\n        }\n        if b == z {\n\
    \            return false\n        }\n        if c == d {\n            return\
    \ false\n        }\n        if c == e {\n            return false\n        }\n\
    \        if c == f {\n            return false\n        }\n        if c == g {\n\
    \            return false\n        }\n        if c == h {\n            return\
    \ false\n        }\n        if c == i {\n            return false\n        }\n\
    \        if c == j {\n            return false\n        }\n        if c == k {\n\
    \            return false\n        }\n        if c == l {\n            return\
    \ false\n        }\n        if c == m {\n            return false\n        }\n\
    \        if c == n {\n            return false\n        }\n        if c == o {\n\
    \            return false\n        }\n        if c == p {\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkqgo3wbe_test.go:152:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if a % primes[i] == 0 {\n            return false\n        }\n  \
    \  }\n    \n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n        \
    \    return false\n        }\n    }\n    \n    for i := 3; i < 100; i++ {\n  \
    \      if a % i == 0 {\n            return false\n        }\n    }\n    \n   \
    \ return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate :=\
    \ is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmphjc2vyou_test.go:22\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc00019e1a0?)\n\t/tmp/tmphjc2vyou_test.go:53\
    \ +0x81e\ntesting.tRunner(0xc00019e1a0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   \n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmptatyw424_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmptatyw424_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmptatyw424_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if a % primes[i] == 0 {\n            return false\n        }\n  \
    \  }\n    \n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n        \
    \    return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038c0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(...)\n\t/tmp/tmp0pl69jq6_test.go:22\n\
    command-line-arguments_test.TestIs_Multiply_Prime(0xc000199040?)\n\t/tmp/tmp0pl69jq6_test.go:47\
    \ +0x739\ntesting.tRunner(0xc000199040, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    for i := 2; i < a; i++ {\n      \
    \  if a % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpu717kpf8_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpu717kpf8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpu717kpf8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpu717kpf8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpu717kpf8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpu717kpf8_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if primes[i] == 0 {\n            primes[i] = 1\n        }\n    }\n\
    \    \n    for i := 2; i < a; i++ {\n        if primes[i] != 0 {\n           \
    \ for j := i * i; j < a; j += i {\n                primes[j] = 1\n           \
    \ }\n        }\n    }\n    \n    for i := 0; i < 100; i++ {\n        if primes[i]\
    \ == 1 {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpnn5das0j_test.go:30\
    \ +0x11a\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpnn5das0j_test.go:55\
    \ +0xa7\ntesting.tRunner(0xc0001a01a0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073671
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if primes[i] == 0 {\n            primes[i] = 1\n        }\n    }\n\
    \    \n    for i := 2; i < a; i++ {\n        if primes[i] == 0 {\n           \
    \ return false\n        }\n    }\n    \n    for i := 2; i < a; i++ {\n       \
    \ for j := i + 1; j < a; j++ {\n            if primes[j] == 0 {\n            \
    \    return false\n            }\n        }\n    }\n    \n    return true\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmpo6th3m7n_test.go:28\
    \ +0x127\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmpo6th3m7n_test.go:55\
    \ +0xa7\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 121\n    primes[31] = 123\n    primes[32]\
    \ = 127\n    primes[33] = 131\n    primes[34] = 137\n    primes[35] = 139\n  \
    \  primes[36] = 149\n    primes[37] = 151\n    primes[38] = 157\n    primes[39]\
    \ = 163\n    primes[40] = 173\n    primes[41] = 179\n    primes[42] = 181\n  \
    \  primes[43] = 191\n    primes[44] = 193\n    primes[45] = 197 \n    primes[46]\
    \ = 199\n    primes[47] = 211\n    primes[48] = 223\n    primes[49] = 229\n  \
    \  primes[50] = 241\n    primes[51] = 247\n    primes[52] = 251\n    primes[53]\
    \ = 257\n    primes[54] = 263\n    primes[55] = 269\n    primes[56] = 271\n  \
    \  primes[57] = 277\n    primes[58] = 283\n    primes[59] = 289\n    primes[60]\
    \ = 293\n    primes[61] = 307\n    primes[62] = 311\n    primes[63] = 317\n  \
    \  primes[64] = 323\n    primes[65] = 329\n    primes[66] = 331\n    primes[67]\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpapksfnyv_test.go:88:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for {\n        if b%2 == 0\
    \ {\n            if b%3 == 0 {\n                if b%5 == 0 {\n              \
    \      return true\n                }\n            }\n        }\n        b /=\
    \ 2\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpzw62pmv1_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpzw62pmv1_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpzw62pmv1_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpzw62pmv1_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpzw62pmv1_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for i := 2; i < b; i++ {\n\
    \        if b%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp12601buh_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp12601buh_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmp12601buh_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp12601buh_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmp12601buh_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp12601buh_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        if primes[i] == 0 {\n            continue\n        }\n        \n\
    \        for j := 2; j < i; j++ {\n            if i*j > a {\n                break\n\
    \            }\n            if primes[i*j] == 0 {\n                primes[i*j]\
    \ = i\n            }\n        }\n    }\n    \n    for i := 0; i < 100; i++ {\n\
    \        if primes[i] == 0 {\n            return false\n        }\n    }\n   \
    \ \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpq_fkudxy_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpq_fkudxy_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpq_fkudxy_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpq_fkudxy_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpq_fkudxy_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for i := 2; i < 100; i++ {\n\
    \        if b%i == 0 {\n            b = b / i\n            if b == 1 {\n     \
    \           return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp5o8z2eop_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp5o8z2eop_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmp5o8z2eop_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 317\n    primes[22] = 359\n    primes[23] = 411\n    primes[24] = 429\n  \
    \  primes[25] = 431\n    primes[26] = 439\n    primes[27] = 443\n    primes[28]\
    \ = 449\n    primes[29] = 457\n    primes[30] = 479\n    primes[31] = 489\n  \
    \  primes[32] = 493\n    primes[33] = 499\n    primes[34] = 503\n    primes[35]\
    \ = 509\n    primes[36] = 521\n    primes[37] = 523\n    primes[38] = 541\n  \
    \  primes[39] = 547\n    primes[40] = 553\n    primes[41] = 569\n    primes[42]\
    \ = 571\n    primes[43] = 577\n    primes[44] = 587\n    primes[45] = 593\n  \
    \  primes[46] = 599\n    primes[47] = 601\n    primes[48] = 607\n    primes[49]\
    \ = 613\n    primes[50] = 617\n    primes[51] = 619\n    primes[52] = 631\n  \
    \  primes[53] = 641\n    primes[54] = 647\n    primes[55] = 653\n    primes[56]\
    \ = 659\n    primes[57] = 661\n    primes[58] = 673\n    primes[59] = 677\n  \
    \  primes[60] = 683\n    primes[61] = 691\n    primes[62] = 701\n    primes[63]\
    \ = 709\n    primes[64] = 719\n    primes[65] = \nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw0d2urkk_test.go:86:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for i := 2; i < 100; i++ {\n\
    \        if b%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp6gj83e5u_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp6gj83e5u_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp6gj83e5u_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp6gj83e5u_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp6gj83e5u_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    b := a\n    for i := 2; i < 100; i++ {\n\
    \        if b%i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp6gj83e5u_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp6gj83e5u_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp6gj83e5u_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp6gj83e5u_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp6gj83e5u_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    prime := make([]int, 100)\n    \n    for i := 0; i < 100; i++\
    \ {\n        prime[i] = i\n    }\n    \n    for i := 2; i < a; i++ {\n       \
    \ for j := 0; j < i; j++ {\n            if prime[j] == i {\n                prime[j]\
    \ = -1\n            }\n        }\n    }\n    \n    for i := 0; i < 100; i++ {\n\
    \        if prime[i] == -1 {\n            return false\n        }\n    }\n   \
    \ \n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\npanic: runtime error: index out\
    \ of range [100] with length 100 [recovered]\n\tpanic: runtime error: index out\
    \ of range [100] with length 100\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_multiply_prime(0x5?)\n\t/tmp/tmp4bwx8uev_test.go:27\
    \ +0xfd\ncommand-line-arguments_test.TestIs_Multiply_Prime(0x0?)\n\t/tmp/tmp4bwx8uev_test.go:53\
    \ +0xa7\ntesting.tRunner(0xc00019e1a0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpjir7syaq_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjir7syaq_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073667
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    \n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_ede_a_t_test.go:270:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    \n    \n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpwkqs_a06_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpwkqs_a06_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpwkqs_a06_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n  \
    \  }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1] =\
    \ 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5] =\
    \ 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 116\n    primes[31] = 120\n    primes[32]\
    \ = 124\n    primes[33] = 127\n    primes[34] = 130\n    primes[35] = 133\n  \
    \  primes[36] = 137\n    primes[37] = 139\n    primes[38] = 142\n    primes[39]\
    \ = 145\n    primes[40] = 147\n    primes[41] = 151\n    primes[42] = 157\n  \
    \  primes[43] = 162\n    primes[44] = 165\n    primes[45] = 168\n    primes[46]\
    \ = 173\n    primes[47] = 179\n    primes[48] = 181\n    primes[49] = 186\n  \
    \  primes[50] = 191\n    primes[51] = 196\n    primes[52] = 201\n    primes[53]\
    \ = 205\n    primes[54] = 209\n    primes[55] = 212\n    primes[56] = 216\n  \
    \  primes[57] = 220\n    primes[58] = 223\n    primes[59] = 227\n    primes[60]\
    \ = 229\n    primes[61] = 232\n    primes[62] = 236\n    primes[63] = 239\n  \
    \  primes[64] = 242\n    primes[65] = 245\n    primes[66] = 248\n    primes[67]\
    \ = 251\n    primes[68] = 256\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp28td25xa_test.go:90:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073673
