name: HumanEval_127_intersection
language: go_test.go
prompt: "package intersection_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // You are given two intervals,\n// where each interval is a pair of integers. For\
  \ example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
  \ which means that the interval (start, end)\n// includes both start and end.\n\
  // For each given interval, it is assumed that its start is less or equal its end.\n\
  // Your task is to determine whether the length of intersection of these two \n\
  // intervals is a prime number.\n// Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n//\
  \ If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
  \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output]\
  \ samples:\n// intersection((1, 2), (2, 3)) ==> \"NO\"\n// intersection((-1, 1),\
  \ (0, 4)) ==> \"NO\"\n// intersection((-3, -1), (-5, 5)) ==> \"YES\"\nfunc intersection(interval1\
  \ []interface{}, interval2 []interface{}) string {\n"
tests: "func TestIntersection(t *testing.T) {\n  candidate := intersection\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate([]interface{}{1, 2}, []interface{}{2, 3}),\
  \ expected: \"NO\" },\n     { actual: candidate([]interface{}{-1, 1}, []interface{}{0,\
  \ 4}), expected: \"NO\" },\n     { actual: candidate([]interface{}{-3, -1}, []interface{}{-5,\
  \ 5}), expected: \"YES\" },\n     { actual: candidate([]interface{}{-2, 2}, []interface{}{-4,\
  \ 0}), expected: \"YES\" },\n     { actual: candidate([]interface{}{-11, 2}, []interface{}{-1,\
  \ -1}), expected: \"NO\" },\n     { actual: candidate([]interface{}{1, 2}, []interface{}{3,\
  \ 5}), expected: \"NO\" },\n     { actual: candidate([]interface{}{1, 2}, []interface{}{1,\
  \ 2}), expected: \"NO\" },\n     { actual: candidate([]interface{}{-2, -2}, []interface{}{-3,\
  \ -2}), expected: \"NO\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result string\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i].(float64) < interval2[i].(float64) {\n          \
    \  result = \"NO\"\n            break\n        }\n    }\n    \n    if result ==\
    \ \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i].(float64) >= interval2[i].(float64) {\n     \
    \       result = \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i].(float64) > interval2[i].(float64) {\n      \
    \      result = \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1 := make([]int,\
    \ len(interval1))\n    interval2 := make([]int, len(interval2))\n    \n    for\
    \ i, v := range interval1 {\n        interval1[i] = int(v.(float64))\n    }\n\
    \    for i, v := range interval2 {\n        interval2[i] = int(v.(float64))\n\
    \    }\n    \n    result := make([]int, len(interval1))\n    \n    for i, v :=\
    \ range interval1 {\n        for j, w := range interval2 {\n            if v >=\
    \ w {\n                result[i] = v\n                result[j] = w\n        \
    \        break\n            }\n        }\n    }\n    \n    length := len(result)\n\
    \    \n    if length == 0 {\n        return \"NO\"\n    }\n    \n    if length\
    \ == 1 {\n        if result[0] == result[1] {\n            return \"YES\"\n  \
    \      }\n        return \"NO\"\n    }\n    \n    if length == 2 && result[0]\
    \ == result[1] {\n        return \"YES\"\n    }\n    \n    if length == 2 && result[0]\
    \ != result[1] {\n        return \"NO\"\n    }\n    \n    if length == 3 && result[0]\
    \ == result[1] && result[2] == result[1] {\n        return \"YES\"\n    }\n  \
    \  \n    if length == 3 && result[0] != result[1] && result[2] != result[1] {\n\
    \        return \"NO\"\n    }\n    \n    if length == 4 && result[0] == result[1]\
    \ && result[2] == result[1] && result[3] == result[1] {\n        return \"YES\"\
    \n    }\n    \n    if length == 4 && result[0] != result[1] && result[2] != result[1]\
    \ && result[3] != result[1] {\n        return \"NO\"\n    }\n    \n    if length\
    \ == 5 && result[0] == result[1] && result[2] == result[1] && result[3] == result[1]\
    \ && result[4] == result[1] {\n        return \"YES\"\n    }\n    \n    if length\
    \ == 5 && result[0] != result[1] && result[2] != result[1] && result[3] != result[1]\
    \ && result[4] != result[1] {\n        return \"NO\"\n    }\n    \n    if length\
    \ == 6 && result[0] == result[1] && result[2] == result[1] && result[3] == result[1]\
    \ && result[4] == result[1] && result[5] == result[1] {\n        return \"YES\"\
    \n    }\n    \n    if length == 6 && result[0] != result[1] && result[2] != result[1]\
    \ && result[3] != result[1] && result[4] != result[1] && result[5] != result[1]\
    \ {\n        return \"NO\"\n    }\n    \n    if length == 7 && result[0] == result[1]\
    \ && result[2] == result[1] && result[3] == result[1] && result[4] == result[1]\
    \ && result[5] == result", "    if len(interval1) != len(interval2) {\n      \
    \  return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    intersection := interval1End\
    \ - interval1Start\n    \n    if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n        if intersection <= 0 {\n            return \"NO\"\
    \n        }\n        if intersection <= 1 {\n            return \"YES\"\n    \
    \    }\n        if intersection <= 2 {\n            return \"YES\"\n        }\n\
    \        if intersection <= 3 {\n            return \"YES\"\n        }\n     \
    \   if intersection <= 4 {\n            return \"YES\"\n        }\n        if\
    \ intersection <= 5 {\n            return \"YES\"\n        }\n        if intersection\
    \ <= 6 {\n            return \"YES\"\n        }\n        if intersection <= 7\
    \ {\n            return \"YES\"\n        }\n        if intersection <= 8 {\n \
    \           return \"YES\"\n        }\n        if intersection <= 9 {\n      \
    \      return \"YES\"\n        }\n        if intersection <= 10 {\n          \
    \  return \"YES\"\n        }\n        if intersection <= 11 {\n            return\
    \ \"YES\"\n        }\n        if intersection <= 12 {\n            return \"YES\"\
    \n        }\n        if intersection <= 13 {\n            return \"YES\"\n   \
    \     }\n        if intersection <= 14 {\n            return \"YES\"\n       \
    \ }\n        if intersection <= 15 {\n            return \"YES\"\n        }\n\
    \        if intersection <= 16 {\n            return \"YES\"\n        }\n    \
    \    if intersection <= 17 {\n            return \"YES\"\n        }\n        if\
    \ intersection <= 18 {\n            return \"YES\"\n        }\n        if intersection\
    \ <= 19 {\n            return \"YES\"\n        }\n        if intersection <= 20\
    \ {\n            return \"YES\"\n        }\n        if intersection <= 21 {\n\
    \            return \"YES\"\n        }\n        if intersection <= 22 {\n    \
    \        return \"YES\"\n        }\n        if intersection <= 23 {\n        \
    \    return \"YES\"\n        }\n        if intersection <= 24 {\n            return\
    \ \"YES\"\n        }\n        if intersection <= 25 {\n            return \"YES\"\
    \n        }\n        if intersection <= 26 {\n            return \"YES\"\n   \
    \     }\n        if intersection <= 27 {\n            return \"YES\"\n       \
    \ }\n        if intersection ", "    var a []int\n    var b []int\n    var c []int\n\
    \    var d []int\n    var e []int\n    var f []int\n    var g []int\n    var h\
    \ []int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m\
    \ int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n\
    \    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n \
    \   var x int\n    var y int\n    var z int\n    var a int\n    var b int\n  \
    \  var c int\n    var d int\n    var e int\n    var f int\n    var g int\n   \
    \ var h int\n    var i int\n    var j int\n    var k int\n    var l int\n    var\
    \ m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r\
    \ int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n\
    \    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n \
    \   var c int\n    var d int\n    var e int\n    var f int\n    var g int\n  \
    \  var h int\n    var i int\n    var j int\n    var k int\n    var l int\n   \
    \ var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var\
    \ r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w\
    \ int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n\
    \    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n \
    \   var h int\n    var i int\n    var j int\n    var k int\n    var l int\n  \
    \  var m int\n    var n int\n    var o int\n    var p int\n    var q int\n   \
    \ var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var\
    \ w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b\
    \ int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n\
    \    var h int\n    var i int\n    var j int\n    var k int\n    var l int\n \
    \   var m int\n    var n int\n    var o int\n    var p int\n    var q int\n  \
    \  var r int\n    var s int\n    var t int\n    var u int\n    var v int\n", " \
    \   var result string\n    \n    if len(interval1) != len(interval2) {\n     \
    \   return \"NO\"\n    }\n    \n    result := \"NO\"\n    \n    for i := 0; i\
    \ < len(interval1); i++ {\n        if interval1[i].(float64) >= interval2[i].(float64)\
    \ {\n            result = \"NO\"\n            break\n        }\n    }\n    \n\
    \    return result\n}\n", "    var interval1Start, interval1End int\n    var interval2Start,\
    \ interval2End int\n    var isIntersecting bool\n    \n    if len(interval1) !=\
    \ len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        interval1Start = interval1[i].(float64)\n        interval1End\
    \ = interval1[i].(float64)\n        \n        for j := 0; j < len(interval2);\
    \ j++ {\n            interval2Start = interval2[j].(float64)\n            interval2End\
    \ = interval2[j].(float64)\n            \n            if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n                isIntersecting = true\n \
    \               break\n            }\n        }\n        \n        if !isIntersecting\
    \ {\n            return \"NO\"\n        }\n    }\n    \n    return \"YES\"\n}\n",
  "    var interval1Start, interval1End int\n    var interval2Start, interval2End\
    \ int\n    var isIntersect bool\n\n    if len(interval1) != len(interval2) {\n\
    \        return \"NO\"\n    }\n\n    for i := 0; i < len(interval1); i++ {\n \
    \       interval1Start, interval1End = interval1[i].(int64)\n        interval2Start,\
    \ interval2End = interval2[i].(int64)\n        isIntersect = interval1Start <=\
    \ interval2End && interval2Start <= interval1End\n        if !isIntersect {\n\
    \            break\n        }\n    }\n\n    if isIntersect {\n        if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n            return \"YES\"\
    \n        }\n        return \"NO\"\n    }\n\n    return \"NO\"\n}\n", "    \n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        if interval1Start >\
    \ interval1End {\n            return \"NO\"\n        }\n        \n        if interval2Start\
    \ > interval2End {\n            return \"NO\"\n        }\n        \n        if\
    \ interval1Start <= interval2Start && interval1End >= interval2End {\n       \
    \     intersectionStart = interval1Start\n            intersectionEnd = interval1End\n\
    \        }\n        \n        if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n            intersectionEnd = interval1End\n        }\n\
    \    }\n    \n    if intersectionStart <= intersectionEnd && intersectionStart\
    \ >= interval1Start && intersectionEnd <= interval1End {\n        return \"YES\"\
    \n    }\n    \n    return \"NO\"\n}\n", "    var result string\n    \n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i <\
    \ len(interval1); i++ {\n        if interval1[i].(float64) < interval2[i].(float64)\
    \ {\n            result += \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0;\
    \ i < len(interval1); i++ {\n        if interval1[i].(float64) > interval2[i].(float64)\
    \ {\n            result += \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result\
    \ == \"YES\" {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n",
  "    \n    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  var result string\n    \n    interval1Start, interval1End := interval1[0].([]interface{})[0],\
    \ interval1[0].([]interface{})[1]\n    interval2Start, interval2End := interval2[0].([]interface{})[0],\
    \ interval2[0].([]interface{})[1]\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        result = \"NO\"\n    } else {\n \
    \       result = \"YES\"\n    }\n    \n    return result\n}\n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if len(interval1) != len(interval2) {\n     \
    \   return \"NO\"\n    }\n    \n    interval1 := interval1.([]interface{})\n \
    \   interval2 := interval2.([]interface{})\n    \n    i := 0\n    j := 0\n   \
    \ \n    result := \"\"\n    \n    for i < len(interval1) && j < len(interval2)\
    \ {\n        if interval1[i] < interval2[j] {\n            i++\n        } else\
    \ if interval1[i] > interval2[j] {\n            j++\n        } else {\n      \
    \      result += fmt.Sprintf(\"%v\", interval1[i])\n            i++\n        \
    \    j++\n        }\n    }\n    \n    if i == len(interval1) {\n        result\
    \ += fmt.Sprintf(\"%v\", interval2[j])\n        j++\n    }\n    \n    if j ==\
    \ len(interval2) {\n        result += fmt.Sprintf(\"%v\", interval1[i])\n    \
    \    i++\n    }\n    \n    return result\n}\n", "    var result string\n    \n\
    \    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n   \
    \ \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ > interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"YES\" {\n        return \"YES\"\n    }\n    \n\
    \    return \"NO\"\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    var result string\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    result := \"NO\"\n    \n    for i\
    \ := 0; i < len(interval1); i++ {\n        if interval1[i].(float64) <= interval2[i].(float64)\
    \ {\n            result := \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result\
    \ == \"YES\" {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\n   \
    \ interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \n    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n\n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n\n    if\
    \ interval1Start < interval2Start {\n        interval1Start, interval1End = interval2Start,\
    \ interval1End\n    }\n\n    if interval1Start <= interval1End && interval2Start\
    \ <= interval2End {\n        if interval1Start <= interval2Start {\n         \
    \   interval1Start, interval1End = interval2Start, interval1End\n        }\n\n\
    \        if interval1End <= interval2End {\n            interval1Start, interval1End\
    \ = interval1End, interval2End\n        }\n\n        if interval1Start <= interval2Start\
    \ {\n            interval1Start, interval1End = interval2Start, interval1End\n\
    \        }\n\n        if interval1End <= interval2End {\n            interval1Start,\
    \ interval1End = interval1End, interval2End\n        }\n\n        if interval1Start\
    \ <= interval2Start {\n            interval1Start, interval1End = interval2Start,\
    \ interval1End\n        }\n\n        if interval1End <= interval2End {\n     \
    \       interval1Start, interval1End = interval1End, interval2End\n        }\n\
    \n        if interval1Start <= interval2Start {\n            interval1Start, interval1End\
    \ = interval2Start, interval1End\n        }\n\n        if interval1End <= interval2End\
    \ {\n            interval1Start, interval1End = interval1End, interval2End\n \
    \       }\n\n        if interval1Start <= interval2Start {\n            interval1Start,\
    \ interval1End = interval2Start, interval1End\n        }\n\n        if interval1End\
    \ <= interval2End {\n            interval1Start, interval1End = interval1End,\
    \ interval2End\n        }\n\n        if interval1Start <= interval2Start {\n \
    \           interval1Start, interval1End = interval2Start, interval1End\n    \
    \    }\n\n        if interval1End <= interval2End {\n            interval1Start,\
    \ interval1End = interval1End, interval2End\n        }\n\n        if interval1Start\
    \ <= interval", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End\
    \ := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n    interval2End\
    \ := interval2[1].(int)\n    \n    if interval1Start > interval1End {\n      \
    \  interval1Start, interval1End = interval1End, interval1Start\n    }\n    if\
    \ interval2Start > interval2End {\n        interval2Start, interval2End = interval2End,\
    \ interval2Start\n    }\n    \n    intersectionStart := interval1Start\n    intersectionEnd\
    \ := interval1End\n    \n    for intersectionEnd < interval2End {\n        if\
    \ interval1Start <= intersectionEnd && intersectionEnd <= interval2End {\n   \
    \         intersectionEnd = intersectionEnd + 1\n        }\n    }\n    \n    if\
    \ intersectionEnd > interval2End {\n        return \"NO\"\n    }\n    \n    if\
    \ intersectionStart <= interval2Start && intersectionStart <= interval2End {\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1 := make([]int,\
    \ len(interval1))\n    interval2 := make([]int, len(interval2))\n    for i, v\
    \ := range interval1 {\n        interval1[i] = v.(int)\n    }\n    for i, v :=\
    \ range interval2 {\n        interval2[i] = v.(int)\n    }\n    \n    result :=\
    \ make([]int, len(interval1))\n    for i, v := range interval1 {\n        for\
    \ j, v2 := range interval2 {\n            if v == v2 {\n                result[i]\
    \ = j\n                break\n            }\n        }\n    }\n    \n    result\
    \ := make([]int, len(result))\n    for i, v := range result {\n        if v ==\
    \ i {\n            result[i] = v\n        }\n    }\n    \n    result := make([]int,\
    \ len(result))\n    for i, v := range result {\n        if v == len(interval1)\
    \ {\n            result[i] = v\n        }\n    }\n    \n    result := make([]int,\
    \ len(result))\n    for i, v := range result {\n        if v == len(interval2)\
    \ {\n            result[i] = v\n        }\n    }\n    \n    result := make([]int,\
    \ len(result))\n    for i, v := range result {\n        if v == len(interval1)\
    \ && v == len(interval2) {\n            result[i] = v\n        }\n    }\n    \n\
    \    result := make([]int, len(result))\n    for i, v := range result {\n    \
    \    if v == len(interval1) || v == len(interval2) {\n            result[i] =\
    \ v\n        }\n    }\n    \n    result := make([]int, len(result))\n    for i,\
    \ v := range result {\n        if v == len(interval1) && v == len(interval2) {\n\
    \            result[i] = v\n        }\n    }\n    \n    result := make([]int,\
    \ len(result))\n    for i, v := range result {\n        if v == len(interval1)\
    \ || v == len(interval2) {\n            result[i] = v\n        }\n    }\n    \n\
    \    result := make([]int, len(result))\n    for i, v := range result {\n    \
    \    if v == len(interval1) && v == len(interval2) {\n            result[i] =\
    \ v\n        }\n    }\n    \n    result := make([]int, len(result))\n    for i,\
    \ v := range result {\n        if v == len(interval1) || v == len(interval2) {\n\
    \            result[i] = v\n        }\n    }\n    \n    result := make([]int,\
    \ len(result))\n    for i, v := range result {\n        if v == len(interval1)\
    \ && v == len(interval2) {\n            result[i] = v\n        }\n    }\n    \n\
    \    ", "    var result string\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i].(float64) <= interval2[i].(float64) {\n         \
    \   result += \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i].(float64) >= interval2[i].(float64) {\n     \
    \       result += \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    \n    // Write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersectionStart\
    \ := interval1Start\n    intersectionEnd := interval1End\n    \n    for i := 1;\
    \ i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval2End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval2Start {\n            return \"NO\"\n        }\n        \n       \
    \ if interval1Start <= intersectionEnd && interval1End >= intersectionStart {\n\
    \            intersectionStart = interval1Start\n            intersectionEnd =\
    \ interval1End\n        }\n    }\n    \n    if intersectionEnd <= intersectionStart\
    \ {\n        return \"NO\"\n    }\n    \n    if isPrime(intersectionEnd - intersectionStart)\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    \n   \
    \ // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n  \
    \  // Write your code here\n    \n    return \"\"\n}\n", "    var result string\n\
    \    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    result := \"NO\"\n    \n    for i := 0; i < len(interval1); i++ {\n\
    \        if interval1[i].(float64) < interval2[i].(float64) {\n            result\
    \ := \"NO\"\n            break\n        }\n    }\n    \n    if result == \"NO\"\
    \ {\n        for i := 0; i < len(interval1); i++ {\n            if interval1[i].(float64)\
    \ > interval2[i].(float64) {\n                result := \"NO\"\n             \
    \   break\n            }\n        }\n    }\n    \n    if result == \"NO\" {\n\
    \        for i := 0; i < len(interval1); i++ {\n            if interval1[i].(float64)\
    \ == interval2[i].(float64) {\n                result := \"YES\"\n           \
    \     break\n            }\n        }\n    }\n    \n    return result\n}\n", " \
    \   \n    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n    // Your code here\n    \n    return \"\"\n}\n", "    \n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    intersection := interval1Start\
    \ <= interval2End && interval2Start <= interval1End\n    if intersection {\n \
    \       intersection := interval1Start <= interval2Start && interval2Start <=\
    \ interval1End\n        if intersection {\n            intersection := interval1Start\
    \ <= interval2End && interval2End <= interval1End\n            if intersection\
    \ {\n                intersection := interval1End <= interval2Start && interval2Start\
    \ <= interval1End\n                if intersection {\n                    intersection\
    \ := interval1End <= interval2End && interval2End <= interval1End\n          \
    \          if intersection {\n                        intersection := interval1Start\
    \ <= interval2Start && interval2End <= interval1End\n                        if\
    \ intersection {\n                            intersection := interval1Start <=\
    \ interval2End && interval2Start <= interval1End\n                           \
    \ if intersection {\n                                intersection := interval1End\
    \ <= interval2Start && interval2End <= interval1End\n                        \
    \        if intersection {\n                                    intersection :=\
    \ interval1End <= interval2End && interval2Start <= interval1End\n           \
    \                         if intersection {\n                                \
    \        intersection := interval1Start <= interval2Start && interval2End <= interval1End\n\
    \                                        if intersection {\n                 \
    \                           intersection := interval1Start <= interval2End &&\
    \ interval2Start <= interval1End\n                                           \
    \ if intersection {\n                                                intersection\
    \ := interval1End <= interval2Start && interval2End <= interval1End\n        \
    \                                        if intersection {\n                 \
    \                                   intersection := interval1End <= interval2End\
    \ && interval2Start <= interval1End\n                                        \
    \            if intersection {\n                                             \
    \           intersection := interval1Start <= interval2Start && interval2End <=\
    \ interval1End\n                                                        if intersection\
    \ {\n                                                            intersection\
    \ := interval1Start <= interval2End && interval2Start <= interval1End\n      \
    \                                                      if intersection {\n   \
    \                                                             intersection :=\
    \ interval1End <= interval2Start && interval2End <= interval1End\n           \
    \                                                     if intersection {\n    \
    \                                                                ", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1 := make([]int,\
    \ len(interval1))\n    interval2 := make([]int, len(interval2))\n    \n    for\
    \ i, v := range interval1 {\n        interval1[i] = v.(int)\n    }\n    for i,\
    \ v := range interval2 {\n        interval2[i] = v.(int)\n    }\n    \n    result\
    \ := make([]int, len(interval1))\n    \n    for i, v := range interval1 {\n  \
    \      for _, v2 := range interval2 {\n            if v >= v2 {\n            \
    \    result[i] = v\n                break\n            }\n        }\n    }\n \
    \   \n    if len(result) == 0 {\n        return \"NO\"\n    }\n    \n    result\
    \ := make([]int, len(result))\n    \n    for i, v := range result {\n        if\
    \ v == result[0] {\n            result[i] = result[0]\n        }\n    }\n    \n\
    \    result := make([]int, len(result))\n    \n    for i, v := range result {\n\
    \        if v == result[0] {\n            result[i] = result[0]\n        }\n \
    \   }\n    \n    result := make([]int, len(result))\n    \n    for i, v := range\
    \ result {\n        if v == result[0] {\n            result[i] = result[0]\n \
    \       }\n    }\n    \n    result := make([]int, len(result))\n    \n    for\
    \ i, v := range result {\n        if v == result[0] {\n            result[i] =\
    \ result[0]\n        }\n    }\n    \n    result := make([]int, len(result))\n\
    \    \n    for i, v := range result {\n        if v == result[0] {\n         \
    \   result[i] = result[0]\n        }\n    }\n    \n    result := make([]int, len(result))\n\
    \    \n    for i, v := range result {\n        if v == result[0] {\n         \
    \   result[i] = result[0]\n        }\n    }\n    \n    result := make([]int, len(result))\n\
    \    \n    for i, v := range result {\n        if v == result[0] {\n         \
    \   result[i] = result[0]\n        }\n    }\n    \n    result := make([]int, len(result))\n\
    \    \n    for i, v := range result {\n        if v == result[0] {\n         \
    \   result[i] = result[0]\n        }\n    }\n    \n    result := make([]int, len(result))\n\
    \    \n    for i, v := range result {\n        if v == result[0] {\n         \
    \   result[i] = result[0]\n        }\n    }\n    \n    result := make([]int, len(result))\n\
    \    \n    for i, v := range result {\n        if v == result[0] {\n         \
    \   result[i] = result[0]\n        }", "    var result string\n    \n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i <\
    \ len(interval1); i++ {\n        if interval1[i].(float64) < interval2[i].(float64)\
    \ {\n            result = \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0;\
    \ i < len(interval1); i++ {\n        if interval1[i].(float64) > interval2[i].(float64)\
    \ {\n            result = \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    if interval1[0].(float64)\
    \ <= interval2[0].(float64) && interval1[1].(float64) >= interval2[1].(float64)\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    var result\
    \ string\n    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\
    \n    }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ > interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"YES\" {\n        return \"YES\"\n    }\n    \n\
    \    return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n       \
    \ return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End\
    \ := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n    interval2End\
    \ := interval2[1].(int)\n    \n    if interval1Start > interval1End {\n      \
    \  interval1Start, interval1End = interval1End, interval1Start\n    }\n    if\
    \ interval2Start > interval2End {\n        interval2Start, interval2End = interval2End,\
    \ interval2Start\n    }\n    \n    result := 0\n    \n    for i := 0; i < interval1Start;\
    \ i++ {\n        result += interval1End - i\n    }\n    \n    for i := 0; i <\
    \ interval2Start; i++ {\n        result += interval2End - i\n    }\n    \n   \
    \ if result <= interval1End {\n        return \"NO\"\n    }\n    \n    if result\
    \ <= interval2End {\n        return \"NO\"\n    }\n    \n    return \"YES\"\n\
    }\n", "    var result string\n    \n    if len(interval1) != len(interval2) {\n\
    \        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++ {\n\
    \        if interval1[i].(float64) >= interval2[i].(float64) {\n            result\
    \ = \"NO\"\n            break\n        }\n    }\n    \n    if result == \"NO\"\
    \ {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n        \n\
    \        len1 := interval1[0].(float64)\n        len2 := interval2[0].(float64)\n\
    \        \n        if len1 == len2 {\n            \n            result := \"YES\"\
    \n            \n            len1 += interval1[1].(float64)\n            len2 +=\
    \ interval2[1].(float64)\n            \n            if len1 == len2 {\n      \
    \          \n                result := \"YES\"\n                \n           \
    \     len1 += interval1[2].(float64)\n                len2 += interval2[2].(float64)\n\
    \                \n                if len1 == len2 {\n                    \n \
    \                   result := \"YES\"\n                }\n            }\n    \
    \    }\n    }\n    \n    return result\n}\n", "    var result string\n    var\
    \ interval1_start, interval1_end int\n    var interval2_start, interval2_end int\n\
    \    \n    interval1_start = interval1[0].(int)\n    interval1_end = interval1[1].(int)\n\
    \    interval2_start = interval2[0].(int)\n    interval2_end = interval2[1].(int)\n\
    \n    if interval1_start > interval1_end {\n        interval1_start, interval1_end\
    \ = interval1_end, interval1_start\n    }\n    if interval2_start > interval2_end\
    \ {\n        interval2_start, interval2_end = interval2_end, interval2_start\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end\n   \
    \ }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end\n    }\n    \n    if interval1_start <= interval2_end\
    \ {\n        if interval1_end <= interval2_start {\n            result = \"NO\"\
    \n        } else {\n            result = \"YES\"\n        }\n    } else {\n  \
    \      if interval1_start <= interval2_end {\n            result = \"NO\"\n  \
    \      } else {\n            result = \"YES\"\n        }\n    }\n    \n    return\
    \ result\n}\n", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n        return \"NO\"\n\
    \    }\n    \n    if interval1Start <= interval2Start {\n        return \"NO\"\
    \n    }\n    if interval1End >= interval2End {\n        return \"NO\"\n    }\n\
    \    \n    if interval1Start <= interval2End {\n        return \"YES\"\n    }\n\
    \    \n    return \"NO\"\n}\n", "    \n    // Write your code here\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    if len(interval1) != len(interval2) {\n \
    \       return \"NO\"\n    }\n    \n    result := make([]interface{}, 0)\n   \
    \ \n    for _, interval1Element := range interval1 {\n        for _, interval2Element\
    \ := range interval2 {\n            if interval1Element >= interval2Element {\n\
    \                break\n            }\n            result = append(result, interval1Element)\n\
    \        }\n    }\n    \n    if len(result) == 0 {\n        return \"NO\"\n  \
    \  }\n    \n    length := len(result)\n    \n    if length == 1 {\n        return\
    \ \"YES\"\n    }\n    \n    if length == 2 && result[0] == result[1] {\n     \
    \   return \"YES\"\n    }\n    \n    if length == 2 && result[0] > result[1] {\n\
    \        return \"NO\"\n    }\n    \n    if length == 3 && result[0] == result[1]\
    \ && result[1] == result[2] {\n        return \"YES\"\n    }\n    \n    if length\
    \ == 3 && result[0] > result[1] && result[1] > result[2] {\n        return \"\
    NO\"\n    }\n    \n    if length == 4 && result[0] == result[1] && result[1] ==\
    \ result[2] && result[2] == result[3] {\n        return \"YES\"\n    }\n    \n\
    \    if length == 4 && result[0] > result[1] && result[1] > result[2] && result[2]\
    \ > result[3] {\n        return \"NO\"\n    }\n    \n    return \"NO\"\n}\n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersection := interval1Start <= interval2Start && interval1End >= interval2End\n\
    \    if intersection {\n        return \"YES\"\n    }\n    \n    intersection\
    \ := interval1Start <= interval2End && interval1End >= interval2Start\n    if\
    \ intersection {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n",
  "    var interval1Start, interval1End int\n    var interval2Start, interval2End\
    \ int\n    var lengthOfIntersection int\n\n    interval1Start, interval1End =\
    \ interval1[0].(int), interval1[1].(int)\n    interval2Start, interval2End = interval2[0].(int),\
    \ interval2[1].(int)\n    lengthOfIntersection = interval1End - interval1Start\
    \ + 1\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if lengthOfIntersection == 0 {\n        return \"NO\"\n    }\n    if\
    \ lengthOfIntersection == 1 {\n        if interval1Start <= interval1End && interval2Start\
    \ <= interval2End {\n            return \"YES\"\n        }\n        return \"\
    NO\"\n    }\n    if lengthOfIntersection == 2 {\n        if interval1Start <=\
    \ interval1End && interval2Start <= interval2End {\n            if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n                return\
    \ \"YES\"\n            }\n            if interval1Start >= interval2Start && interval1End\
    \ <= interval2End {\n                return \"NO\"\n            }\n        }\n\
    \        return \"NO\"\n    }\n    if lengthOfIntersection == 3 {\n        if\
    \ interval1Start <= interval1End && interval2Start <= interval2End {\n       \
    \     if interval1Start <= interval2Start && interval1End >= interval2End {\n\
    \                if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n                    return \"YES\"\n                }\n                if\
    \ interval1Start >= interval2End && interval1End <= interval2Start {\n       \
    \             return \"NO\"\n                }\n            }\n            if\
    \ interval1Start >= interval2Start && interval1End <= interval2End {\n       \
    \         if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n                    return \"NO\"\n                }\n                if\
    \ interval1Start >= interval2End && interval1End <= interval2Start {\n       \
    \             return \"YES\"\n                }\n            }\n        }\n  \
    \      return \"NO\"\n    }\n    if lengthOfIntersection == 4 {\n        if interval1Start\
    \ <= interval1End && interval2Start <= interval2End {\n            if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n                if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n                    if\
    \ interval1Start <= interval2End && interval1End ", "    if len(interval1) !=\
    \ len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start :=\
    \ interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n    \n    intersection := interval1Start <= interval2Start && interval1End\
    \ >= interval2End\n    \n    if intersection {\n        intersectionLength :=\
    \ interval1End - interval1Start\n        \n        if isPrime(intersectionLength)\
    \ {\n            return \"YES\"\n        }\n    }\n    \n    return \"NO\"\n}\n",
  "    \n    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  var result string\n    var start1 int\n    var end1 int\n    var start2 int\n\
    \    var end2 int\n    var length1 int\n    var length2 int\n    \n    start1\
    \ = interval1[0].(int)\n    end1 = interval1[1].(int)\n    start2 = interval2[0].(int)\n\
    \    end2 = interval2[1].(int)\n    \n    length1 = end1 - start1\n    length2\
    \ = end2 - start2\n    \n    if length1 > length2 {\n        interval1 = interval2\n\
    \        interval2 = interval1\n        start1 = interval1[0].(int)\n        end1\
    \ = interval1[1].(int)\n        start2 = interval2[0].(int)\n        end2 = interval2[1].(int)\n\
    \        length1 = end1 - start1\n        length2 = end2 - start2\n    }\n   \
    \ \n    if length1 == length2 {\n        if start1 <= start2 && end1 >= end2 {\n\
    \            result = \"YES\"\n        } else {\n            result = \"NO\"\n\
    \        }\n    } else {\n        if start1 <= start2 && end1 >= end2 {\n    \
    \        if length1 < length2 {\n                result = \"NO\"\n           \
    \ } else {\n                result = \"YES\"\n            }\n        } else {\n\
    \            if length1 < length2 {\n                result = \"YES\"\n      \
    \      } else {\n                result = \"NO\"\n            }\n        }\n \
    \   }\n    \n    return result\n}\n", "    var result string\n    \n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i <\
    \ len(interval1); i++ {\n        if interval1[i].(float64) < interval2[i].(float64)\
    \ {\n            result = \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0;\
    \ i < len(interval1); i++ {\n        if interval1[i].(float64) >= interval2[i].(float64)\
    \ {\n            result = \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result\
    \ == \"\" {\n        return \"YES\"\n    }\n    \n    return result\n}\n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    var result string\n\
    \    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ > interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"YES\" {\n        return \"YES\"\n    }\n    \n\
    \    return \"NO\"\n}\n", "    var result string\n    \n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i <\
    \ len(interval1); i++ {\n        if interval1[i].(float64) <= interval2[i].(float64)\
    \ {\n            result += \"NO\"\n        } else {\n            result += \"\
    YES\"\n        }\n    }\n    \n    return result\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1 := make([]int,\
    \ len(interval1))\n    interval2 := make([]int, len(interval2))\n    \n    for\
    \ i, v := range interval1 {\n        interval1[i] = v.(int)\n    }\n    for i,\
    \ v := range interval2 {\n        interval2[i] = v.(int)\n    }\n    \n    start\
    \ := 0\n    end := 0\n    \n    for i, v := range interval1 {\n        if v >=\
    \ interval2[end] {\n            end = i\n        }\n    }\n    \n    if end ==\
    \ len(interval1) {\n        return \"NO\"\n    }\n    \n    if interval1[end]\
    \ == interval2[end] {\n        return \"YES\"\n    }\n    \n    if interval1[end]\
    \ > interval2[end] {\n        start = end\n    } else {\n        start = end -\
    \ 1\n    }\n    \n    if start == len(interval1) {\n        return \"NO\"\n  \
    \  }\n    \n    if interval1[start] == interval2[start] {\n        return \"YES\"\
    \n    }\n    \n    if interval1[start] > interval2[start] {\n        end = start\n\
    \    } else {\n        end = start + 1\n    }\n    \n    if end == len(interval1)\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1[end] == interval2[end]\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1[end] > interval2[end]\
    \ {\n        start = end\n    } else {\n        start = end - 1\n    }\n    \n\
    \    if start == len(interval1) {\n        return \"NO\"\n    }\n    \n    if\
    \ interval1[start] == interval2[start] {\n        return \"YES\"\n    }\n    \n\
    \    if interval1[start] > interval2[start] {\n        end = start\n    } else\
    \ {\n        end = start + 1\n    }\n    \n    if end == len(interval1) {\n  \
    \      return \"NO\"\n    }\n    \n    if interval1[end] == interval2[end] {\n\
    \        return \"YES\"\n    }\n    \n    if interval1[end] > interval2[end] {\n\
    \        start = end\n    } else {\n        start = end - 1\n    }\n    \n   \
    \ if start == len(interval1) {\n        return \"NO\"\n    }\n    \n    if interval1[start]\
    \ == interval2[start] {\n        return \"YES\"\n    }\n    \n    if interval1[start]\
    \ > interval2[start] {\n        end = start\n    } else {\n        end = start\
    \ + 1\n    }\n    \n    if end == len(interval1) {\n        return \"NO\"\n  \
    \  }\n    \n    if interval1[end] == interval2[end] {\n        return \"YES\"\n\
    \    }\n    \n    if interval1[end] > interval2[end] {\n        start = end\n\
    \    } else {\n        start = ", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    interval1Start += interval1Start\n\
    \    interval1End += interval1End\n    interval2Start += interval2Start\n    interval2End\
    \ += interval2End\n    \n    if interval1Start > interval1End {\n        return\
    \ \"NO\"\n    }\n    if interval2Start > interval2End {\n        return \"NO\"\
    \n    }\n    \n    if interval1Start > interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1End < interval2Start {\n        return \"NO\"\n    }\n\
    \    \n    if interval1Start < interval2Start {\n        return \"NO\"\n    }\n\
    \    \n    if interval1Start < interval1End {\n        interval1Start += interval1Start\n\
    \        interval1End += interval1End\n        interval2Start += interval2Start\n\
    \        interval2End += interval2End\n    }\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    if interval1Start < interval2Start {\n\
    \        return \"NO\"\n    }\n    \n    if interval1Start < interval1End {\n\
    \        interval1Start += interval1Start\n        interval1End += interval1End\n\
    \        interval2Start += interval2Start\n        interval2End += interval2End\n\
    \    }\n    \n    if interval1Start > interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1End < interval2Start {\n        return \"NO\"\n    }\n\
    \    \n    if interval1Start < interval2Start {\n        return \"NO\"\n    }\n\
    \    \n    if interval1Start < interval1End {\n        interval1Start += interval1Start\n\
    \        interval1End += interval1End\n        interval2Start += interval2Start\n\
    \        interval2End += interval2End\n    }\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    if interval1Start < interval2Start {\n\
    \        return \"NO\"\n    }\n    \n    if interval1Start < interval1End {\n\
    \        interval1Start += interval1Start\n        ", "    var result string\n\
    \    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ <= interval2[i].(float64) {\n            result += fmt.Sprintf(\"%v\", interval1[i])\n\
    \        } else {\n            result += fmt.Sprintf(\"%v\", interval2[i])\n \
    \       }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n   \
    \ }\n    \n    if result == \"YES\" {\n        return \"YES\"\n    }\n    \n \
    \   return result\n}\n", "    \n    // Write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    var result string\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i].(float64) < interval2[i].(float64) {\n          \
    \  result = \"NO\"\n            break\n        }\n    }\n    \n    if result ==\
    \ \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i].(float64) >= interval2[i].(float64) {\n     \
    \       result = \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    var result\
    \ string\n    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\
    \n    }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ >= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"YES\" {\n        \n        interval1Start := interval1[0].(float64)\n\
    \        interval1End := interval1[1].(float64)\n        interval2Start := interval2[0].(float64)\n\
    \        interval2End := interval2[1].(float64)\n        \n        if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n            \n        \
    \    intersection := interval1Start + (interval1End - interval1Start) * (interval2End\
    \ - interval2Start) / (interval1End - interval1Start)\n            \n        \
    \    if isPrime(intersection) {\n                result = \"YES\"\n          \
    \  }\n        }\n    }\n    \n    return result\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1 := make([]int,\
    \ len(interval1))\n    interval2 := make([]int, len(interval2))\n    \n    for\
    \ i := 0; i < len(interval1); i++ {\n        interval1[i] = int(interval1[i].(float64))\n\
    \    }\n    for i := 0; i < len(interval2); i++ {\n        interval2[i] = int(interval2[i].(float64))\n\
    \    }\n    \n    result := 0\n    \n    for i := 0; i < len(interval1); i++ {\n\
    \        result ^= interval1[i]\n    }\n    for i := 0; i < len(interval2); i++\
    \ {\n        result ^= interval2[i]\n    }\n    \n    if result == 0 {\n     \
    \   return \"NO\"\n    }\n    \n    if result % 2 == 0 {\n        return \"YES\"\
    \n    }\n    \n    return \"NO\"\n}\n", "    \n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\n   \
    \ interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \n    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n\n    if interval1Start <= interval2End &&\
    \ interval1End >= interval2Start {\n        return \"NO\"\n    }\n\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"NO\"\n\
    \    }\n\n    if interval1Start >= interval2End && interval1End <= interval2Start\
    \ {\n        return \"YES\"\n    }\n\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"NO\"\n    }\n\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"NO\"\n    }\n\n    if interval1Start >= interval2Start &&\
    \ interval1End <= interval2End {\n        return \"YES\"\n    }\n\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"NO\"\n\
    \    }\n\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"NO\"\n    }\n\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"NO\"\n    }\n\n    if interval1Start >= interval2Start &&\
    \ interval1End <= interval2End {\n        return \"YES\"\n    }\n\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"NO\"\n\
    \    }\n\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End ", "    var result string\n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i].(float64) < interval2[i].(float64) {\n      \
    \      result = \"NO\"\n            break\n        }\n        if interval1[i].(float64)\
    \ > interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    if result == \"NO\" {\n        return \"NO\"\n    }\n \
    \   if result == \"YES\" {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersection := interval1Start <= interval2Start && interval1End >= interval2End\n\
    \    if intersection {\n        return fmt.Sprintf(\"YES\")\n    }\n    \n   \
    \ return \"NO\"\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval1End {\n            return \"NO\"\n        }\n        \n        if\
    \ interval2Start > interval2End {\n            return \"NO\"\n        }\n    \
    \    \n        if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n        }\n        \n        if interval2Start <= interval1Start\
    \ && interval2End >= interval1End {\n            intersectionStart = interval2Start\n\
    \            intersectionEnd = interval2End\n        }\n    }\n    \n    if intersectionStart\
    \ > intersectionEnd {\n        return \"NO\"\n    }\n    \n    if intersectionStart\
    \ <= intersectionEnd {\n        intersectionLength := float64(intersectionEnd\
    \ - intersectionStart)\n        if isPrime(intersectionLength) {\n           \
    \ return \"YES\"\n        }\n    }\n    \n    return \"NO\"\n}\n", "    var result\
    \ string\n    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\
    \n    }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ <= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ >= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"\" {\n        return \"YES\"\n    }\n    \n   \
    \ return result\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    result := make(map[int]bool)\n    \n    for _, v := range interval1 {\n \
    \       result[v] = true\n    }\n    \n    for _, v := range interval2 {\n   \
    \     if _, ok := result[v]; !ok {\n            return \"NO\"\n        }\n   \
    \ }\n    \n    for _, v := range interval1 {\n        if _, ok := result[v]; !ok\
    \ {\n            return \"NO\"\n        }\n    }\n    \n    if len(result) ==\
    \ 0 {\n        return \"NO\"\n    }\n    \n    for _, v := range result {\n  \
    \      if v == true {\n            return \"YES\"\n        }\n    }\n    \n  \
    \  return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for interval1Start <= interval1End\
    \ && interval2Start <= interval2End {\n        if interval1Start <= interval2Start\
    \ {\n            intersectionStart = interval1Start\n        }\n        if interval1End\
    \ >= interval2End {\n            intersectionEnd = interval1End\n        }\n \
    \       if intersectionStart <= intersectionEnd {\n            intersectionEnd\
    \ = interval1End\n        }\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ {\n        if intersectionStart <= interval1Start {\n            return \"NO\"\
    \n        }\n        if intersectionEnd >= interval1End {\n            return\
    \ \"NO\"\n        }\n        if intersectionStart <= interval2Start {\n      \
    \      return \"NO\"\n        }\n        if intersectionEnd >= interval2End {\n\
    \            return \"NO\"\n        }\n    }\n    \n    if intersectionStart <=\
    \ interval1Start {\n        return \"NO\"\n    }\n    if intersectionEnd >= interval1End\
    \ {\n        return \"NO\"\n    }\n    if intersectionStart <= interval2Start\
    \ {\n        return \"NO\"\n    }\n    if intersectionEnd >= interval2End {\n\
    \        return \"NO\"\n    }\n    \n    return \"YES\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(int)\n    interval1End := interval1[1].(int)\n    interval2Start\
    \ := interval2[0].(int)\n    interval2End := interval2[1].(int)\n    \n    if\
    \ interval1Start > interval1End {\n        interval1Start, interval1End = interval1End,\
    \ interval1Start\n    }\n    if interval2Start > interval2End {\n        interval2Start,\
    \ interval2End = interval2End, interval2Start\n    }\n    \n    if interval1Start\
    \ > interval2End {\n        return \"NO\"\n    }\n    if interval2Start > interval1End\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1Start < interval2Start\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2End {\n    \
    \    return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n        return \"YES\"\n    }\n    if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n        return \"YES\"\n    }\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n    if interval1Start >= interval2End && interval1End <= interval2Start\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n    \n    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for interval1Start <= interval1End && interval2Start <= interval2End\
    \ {\n        if interval1Start <= interval2Start {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1End\n        }\n  \
    \      if interval1End >= interval2End {\n            intersectionStart = interval1End\n\
    \            intersectionEnd = interval1End\n        }\n        if interval1Start\
    \ <= interval2End {\n            intersectionEnd = interval1End\n        }\n \
    \       if interval1End >= interval2Start {\n            intersectionEnd = interval1End\n\
    \        }\n    }\n    \n    if intersectionStart > intersectionEnd {\n      \
    \  return \"NO\"\n    }\n    \n    if intersectionStart <= intersectionEnd {\n\
    \        if intersectionStart % 2 == 0 {\n            return \"NO\"\n        }\n\
    \        \n        primeCount := 0\n        \n        for i := 2; i <= int(float64(intersectionEnd)\
    \ / 2.0); i++ {\n            if intersectionStart % i == 0 {\n               \
    \ primeCount++\n            }\n        }\n        \n        if primeCount == 0\
    \ {\n            return \"NO\"\n        }\n        \n        if primeCount !=\
    \ 1 {\n            return \"NO\"\n        }\n        \n        return \"YES\"\n\
    \    }\n    \n    return \"NO\"\n}\n", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    var result string\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i].(float64) < interval2[i].(float64) {\n          \
    \  result = \"NO\"\n            break\n        }\n    }\n    \n    if result ==\
    \ \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i].(float64) > interval2[i].(float64) {\n      \
    \      result = \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    var result\
    \ string\n    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\
    \n    }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ >= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"YES\" {\n        result := \"YES\"\n        \n\
    \        for i := 0; i < len(interval1); i++ {\n            if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n                result = \"NO\"\n              \
    \  break\n            }\n        }\n    }\n    \n    return result\n}\n", "  \
    \  \n    var interval1Start int\n    var interval1End int\n    var interval2Start\
    \ int\n    var interval2End int\n    \n    interval1Start = interval1[0].(int)\n\
    \    interval1End = interval1[1].(int)\n    interval2Start = interval2[0].(int)\n\
    \    interval2End = interval2[1].(int)\n    \n    if interval1Start > interval1End\
    \ {\n        fmt.Println(\"interval1Start > interval1End\")\n        return \"\
    NO\"\n    }\n    if interval2Start > interval2End {\n        fmt.Println(\"interval2Start\
    \ > interval2End\")\n        return \"NO\"\n    }\n    if interval1Start > interval2Start\
    \ {\n        fmt.Println(\"interval1Start > interval2Start\")\n        return\
    \ \"NO\"\n    }\n    if interval1End < interval2End {\n        fmt.Println(\"\
    interval1End < interval2End\")\n        return \"NO\"\n    }\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start, interval1End := interval1[0],\
    \ interval1[1]\n    interval2Start, interval2End := interval2[0], interval2[1]\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    \n    if interval1End < interval2Start {\n        return \"NO\"\n    }\n\
    \    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n        return \"YES\"\n    }\n    \n \
    \   return \"NO\"\n}\n", "    var interval1Start, interval1End int\n    var interval2Start,\
    \ interval2End int\n\n    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n\n    for i := 0; i < len(interval1); i++ {\n        interval1Start\
    \ = interval1[i].(int)\n        interval1End = interval1Start + interval1[i].(int)\n\
    \        interval2Start = interval2[i].(int)\n        interval2End = interval2Start\
    \ + interval2[i].(int)\n\n        if interval1Start > interval2End {\n       \
    \     return \"NO\"\n        }\n\n        if interval1End < interval2Start {\n\
    \            return \"NO\"\n        }\n    }\n\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n\n    return\
    \ \"NO\"\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    var result string\n\
    \    var len1, len2 int\n    len1 = len(interval1)\n    len2 = len(interval2)\n\
    \    if len1 == 0 || len2 == 0 {\n        result = \"NO\"\n    } else {\n    \
    \    if interval1[0] > interval2[0] {\n            interval1 = append(interval1,\
    \ interval2[0])\n            interval2 = append(interval2, interval1[0])\n   \
    \     }\n        if interval1[1] < interval2[1] {\n            interval1 = append(interval1,\
    \ interval2[1])\n            interval2 = append(interval2, interval1[1])\n   \
    \     }\n        for i := 0; i < len1; i++ {\n            if interval1[i] > interval2[i]\
    \ {\n                interval1 = append(interval1, interval2[i])\n           \
    \     interval2 = append(interval2, interval1[i])\n            }\n        }\n\
    \        for i := 0; i < len2; i++ {\n            if interval1[i] < interval2[i]\
    \ {\n                interval1 = append(interval1, interval2[i])\n           \
    \     interval2 = append(interval2, interval1[i])\n            }\n        }\n\
    \        if interval1[0] >= interval2[1] {\n            interval1 = append(interval1,\
    \ interval2[0])\n            interval2 = append(interval2, interval1[0])\n   \
    \     }\n        if interval1[1] < interval2[0] {\n            interval1 = append(interval1,\
    \ interval2[1])\n            interval2 = append(interval2, interval1[1])\n   \
    \     }\n        if interval1[0] >= interval2[1] {\n            interval1 = append(interval1,\
    \ interval2[0])\n            interval2 = append(interval2, interval1[0])\n   \
    \     }\n        if interval1[1] >= interval2[0] {\n            interval1 = append(interval1,\
    \ interval2[1])\n            interval2 = append(interval2, interval1[1])\n   \
    \     }\n        if interval1[1] >= interval2[0] {\n            interval1 = append(interval1,\
    \ interval2[0])\n            interval2 = append(interval2, interval1[0])\n   \
    \     }\n        if interval1[1] >= interval2[0] {\n            interval1 = append(interval1,\
    \ interval2[1])\n            interval2 = append(interval2, interval1[1])\n   \
    \     }\n        if interval1[1] >= interval2[0] {\n            interval1 = append(interval1,\
    \ interval2[0])\n            interval2 = append(interval2, interval1[0])\n   \
    \     }\n        if interval1[1] >= interval2[0] {\n            interval1 = append(interval1,\
    \ interval2[1])\n            interval2 = append(interval2, interval1[1])\n   \
    \     }\n        if interval1[1] >= interval2[0] {\n            interval1 = append(interval1,\
    \ interval2[0])\n            interval2 = append(interval2, interval1[0])\n   \
    \     }\n        if interval1[1] >= interval2[0] {\n            interval1 = append(interval1,\
    \ interval2[1])\n            interval2 = append(interval2, interval1[1])\n   \
    \     }\n", "    // Write your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    \n    var result string\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i].(float64) >= interval2[i].(float64) {\n         \
    \   result = \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i].(float64) <= interval2[i].(float64) {\n     \
    \       result = \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    \n    var\
    \ interval1Start, interval1End int\n    var interval2Start, interval2End int\n\
    \    \n    interval1Start, interval1End = interval1[0].(int), interval1[1].(int)\n\
    \    interval2Start, interval2End = interval2[0].(int), interval2[1].(int)\n \
    \   \n    if interval1Start > interval1End {\n        fmt.Println(\"interval1Start\
    \ > interval1End\")\n        return \"NO\"\n    }\n    if interval2Start > interval2End\
    \ {\n        fmt.Println(\"interval2Start > interval2End\")\n        return \"\
    NO\"\n    }\n    if interval1Start >= interval2Start {\n        fmt.Println(\"\
    interval1Start >= interval2Start\")\n        return \"NO\"\n    }\n    if interval1End\
    \ <= interval2End {\n        fmt.Println(\"interval1End <= interval2End\")\n \
    \       return \"NO\"\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    var result string\n    \n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i <\
    \ len(interval1); i++ {\n        if interval1[i].(float64) >= interval2[i].(float64)\
    \ {\n            result = \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result\
    \ == \"YES\" {\n        for i := 0; i < len(interval1); i++ {\n            if\
    \ interval1[i].(float64) < interval2[i].(float64) {\n                result =\
    \ \"NO\"\n                break\n            }\n        }\n    }\n    \n    if\
    \ result == \"YES\" {\n        for i := 0; i < len(interval1); i++ {\n       \
    \     if interval1[i].(float64) <= interval2[i].(float64) {\n                result\
    \ = \"YES\"\n                break\n            }\n        }\n    }\n    \n  \
    \  return result\n}\n", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    intersection := interval1Start\
    \ <= interval2End && interval2Start <= interval1End\n    \n    if intersection\
    \ {\n        intersectionLength := interval1End - interval1Start\n        \n \
    \       if isPrime(intersectionLength) {\n            return \"YES\"\n       \
    \ }\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n\n    result := make(map[interface{}]interface{})\n\
    \n    for _, interval := range interval1 {\n        result[interval] = interval1\n\
    \    }\n\n    for _, interval := range interval2 {\n        result[interval] =\
    \ interval2\n    }\n\n    result := make(map[interface{}]interface{})\n\n    for\
    \ key, value := range result {\n        if value[0] != value[1] {\n          \
    \  result[key] = nil\n        }\n    }\n\n    result := make(map[interface{}]interface{})\n\
    \n    for key, value := range result {\n        if value == nil {\n          \
    \  result[key] = nil\n        }\n    }\n\n    result := make(map[interface{}]interface{})\n\
    \n    for key, value := range result {\n        if value == nil {\n          \
    \  result[key] = nil\n        }\n    }\n\n    result := make(map[interface{}]interface{})\n\
    \n    for key, value := range result {\n        if value == nil {\n          \
    \  result[key] = nil\n        }\n    }\n\n    result := make(map[interface{}]interface{})\n\
    \n    for key, value := range result {\n        if value == nil {\n          \
    \  result[key] = nil\n        }\n    }\n\n    result := make(map[interface{}]interface{})\n\
    \n    for key, value := range result {\n        if value == nil {\n          \
    \  result[key] = nil\n        }\n    }\n\n    result := make(map[interface{}]interface{})\n\
    \n    for key, value := range result {\n        if value == nil {\n          \
    \  result[key] = nil\n        }\n    }\n\n    result := make(map[interface{}]interface{})\n\
    \n    for key, value := range result {\n        if value == nil {\n          \
    \  result[key] = nil\n        }\n    }\n\n    result := make(map[interface{}]interface{})\n\
    \n    for key, value := range result {\n        if value == nil {\n          \
    \  result[key] = nil\n        }\n    }\n\n    result := make(map[interface{}]interface{})\n\
    \n    for key, value := range result {\n        if value == nil {\n          \
    \  result[key] = nil\n        }\n    }\n\n    result := make(map[interface{}]interface{})\n\
    \n    for key, value := range result {\n        if value == nil {\n          \
    \  result[key] = nil\n        }\n    }\n\n    result := make(map[interface{}]interface{})\n\
    \n    for key, value := range result {\n        if value == nil {\n          \
    \  result[key] = nil\n        }\n    }\n\n    result := make(map[interface{}]interface{})\n\
    \n    for key, value := range result {\n        if value == nil {\n          \
    \  result[key] = nil\n        }\n    }\n\n    result := make(map[interface{}]interface{})\n\
    \n    for key, value := range result {\n        if value == nil {\n          \
    \  result[key] = nil\n        }\n    }\n\n    ", "    var result string\n    var\
    \ len1, len2 int\n    var start, end int\n    var isIntersect, flag1, flag2 bool\n\
    \n    len1 = len(interval1)\n    len2 = len(interval2)\n    if len1 == 0 || len2\
    \ == 0 {\n        result = \"NO\"\n        return result\n    }\n\n    start =\
    \ interval1[0].(float64)\n    end = interval1[1].(float64)\n    isIntersect =\
    \ false\n\n    for i := 0; i < len1; i++ {\n        if interval1[i].(float64)\
    \ >= start && interval1[i].(float64) <= end {\n            start = interval1[i].(float64)\n\
    \        } else {\n            isIntersect = true\n            break\n       \
    \ }\n    }\n\n    for i := 0; i < len2; i++ {\n        if interval2[i].(float64)\
    \ >= start && interval2[i].(float64) <= end {\n            end = interval2[i].(float64)\n\
    \        } else {\n            isIntersect = true\n            break\n       \
    \ }\n    }\n\n    if isIntersect {\n        if len1 == len2 {\n            if\
    \ isPrime(end-start) {\n                result = \"YES\"\n            } else {\n\
    \                result = \"NO\"\n            }\n        } else {\n          \
    \  result = \"NO\"\n        }\n    } else {\n        result = \"NO\"\n    }\n\n\
    \    return result\n}\n", "    var result string\n    \n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i <\
    \ len(interval1); i++ {\n        if interval1[i].(float64) <= interval2[i].(float64)\
    \ {\n            result += \"NO\"\n        } else {\n            result += \"\
    YES\"\n        }\n    }\n    \n    return result\n}\n", "    var result string\n\
    \    var i1, i2 int\n    var isPrime bool\n    for i1 = 0; i1 < len(interval1);\
    \ i1++ {\n        for i2 = 0; i2 < len(interval2); i2++ {\n            if interval1[i1].(int)\
    \ < interval2[i2].(int) {\n                break\n            }\n            if\
    \ interval1[i1].(int) > interval2[i2].(int) {\n                break\n       \
    \     }\n            if interval1[i1].(int) == interval2[i2].(int) {\n       \
    \         isPrime = true\n                break\n            }\n        }\n  \
    \      if isPrime {\n            result = \"YES\"\n            break\n       \
    \ }\n        isPrime = false\n    }\n    return result\n}\n", "    var result\
    \ string\n    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\
    \n    }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ >= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"YES\" {\n        return \"YES\"\n    }\n    \n\
    \    return \"NO\"\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n\
    \    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End :=\
    \ interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n    interval2End\
    \ := interval2[1].(float64)\n    \n    if interval1Start > interval1End {\n  \
    \      interval1Start, interval1End = interval1End, interval1Start\n    }\n  \
    \  if interval2Start > interval2End {\n        interval2Start, interval2End =\
    \ interval2End, interval2Start\n    }\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for intersectionStart <= interval1End\
    \ && intersectionEnd <= interval2End {\n        if interval1Start <= intersectionEnd\
    \ && intersectionEnd <= interval2End {\n            if interval1Start <= intersectionStart\
    \ && intersectionStart <= interval2Start {\n                intersectionStart\
    \ = interval1Start\n                intersectionEnd = interval1End\n         \
    \   } else {\n                intersectionStart = interval2Start\n           \
    \     intersectionEnd = interval2End\n            }\n        } else {\n      \
    \      intersectionStart = interval1Start\n            intersectionEnd = interval1End\n\
    \        }\n    }\n    \n    if intersectionStart > interval1End {\n        return\
    \ \"NO\"\n    }\n    if intersectionEnd > interval2End {\n        return \"NO\"\
    \n    }\n    if intersectionStart > intersectionEnd {\n        return \"NO\"\n\
    \    }\n    if intersectionStart <= intersectionEnd {\n        return \"YES\"\n\
    \    }\n    return \"NO\"\n}\n", "    var result string\n    \n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i <\
    \ len(interval1); i++ {\n        if interval1[i].(float64) < interval2[i].(float64)\
    \ {\n            result = \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0;\
    \ i < len(interval1); i++ {\n        if interval1[i].(float64) > interval2[i].(float64)\
    \ {\n            result = \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result\
    \ == \"YES\" {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n",
  "    \n    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\n   \
    \ result := make([]interface{}, len(interval1))\n    i := 0\n    for _, v := range\
    \ interval1 {\n        result[i] = v\n        i++\n    }\n    for _, v := range\
    \ interval2 {\n        result[i] = v\n        i++\n    }\n\n    result := make([]interface{},\
    \ len(result))\n    i := 0\n    for _, v := range result {\n        i++\n    }\n\
    \n    result := make([]interface{}, len(result))\n    i := 0\n    for _, v :=\
    \ range result {\n        i++\n    }\n\n    result := make([]interface{}, len(result))\n\
    \    i := 0\n    for _, v := range result {\n        i++\n    }\n\n    result\
    \ := make([]interface{}, len(result))\n    i := 0\n    for _, v := range result\
    \ {\n        i++\n    }\n\n    result := make([]interface{}, len(result))\n  \
    \  i := 0\n    for _, v := range result {\n        i++\n    }\n\n    result :=\
    \ make([]interface{}, len(result))\n    i := 0\n    for _, v := range result {\n\
    \        i++\n    }\n\n    result := make([]interface{}, len(result))\n    i :=\
    \ 0\n    for _, v := range result {\n        i++\n    }\n\n    result := make([]interface{},\
    \ len(result))\n    i := 0\n    for _, v := range result {\n        i++\n    }\n\
    \n    result := make([]interface{}, len(result))\n    i := 0\n    for _, v :=\
    \ range result {\n        i++\n    }\n\n    result := make([]interface{}, len(result))\n\
    \    i := 0\n    for _, v := range result {\n        i++\n    }\n\n    result\
    \ := make([]interface{}, len(result))\n    i := 0\n    for _, v := range result\
    \ {\n        i++\n    }\n\n    result := make([]interface{}, len(result))\n  \
    \  i := 0\n    for _, v := range result {\n        i++\n    }\n\n    result :=\
    \ make([]interface{}, len(result))\n    i := 0\n    for _, v := range result {\n\
    \        i++\n    }\n\n    result := make([]interface{}, len(result))\n    i :=\
    \ 0\n    for _, v := range result {\n        i++\n    }\n\n    result := make([]interface{},\
    \ len(result))\n    i := 0\n    for _, v := range result {\n        i++", "  \
    \  var result string\n    \n    if len(interval1) != len(interval2) {\n      \
    \  return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++ {\n   \
    \     if interval1[i].(float64) < interval2[i].(float64) {\n            result\
    \ += \"NO\"\n            break\n        }\n    }\n    \n    if result == \"NO\"\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i].(float64) >= interval2[i].(float64) {\n         \
    \   result += \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    result := make([]interface{},\
    \ len(interval1))\n    for i, v := range interval1 {\n        result[i] = v\n\
    \    }\n    for i, v := range interval2 {\n        if result[i] > v {\n      \
    \      result[i] = v\n        }\n    }\n    \n    if len(result) == 0 {\n    \
    \    return \"NO\"\n    }\n    \n    length := 0\n    for _, v := range result\
    \ {\n        length += 1\n    }\n    if length == 2 {\n        return \"YES\"\n\
    \    }\n    \n    if length%2 != 0 {\n        return \"NO\"\n    }\n    \n   \
    \ length /= 2\n    \n    for i := 0; i < length; i++ {\n        if result[i] >\
    \ result[i+length] {\n            return \"NO\"\n        }\n    }\n    \n    return\
    \ \"YES\"\n}\n", "    var interval1Start, interval1End int\n    var interval2Start,\
    \ interval2End int\n    \n    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++ {\n        interval1Start\
    \ = interval1[i].(float64)\n        interval1End = interval1[i].(float64)\n  \
    \      \n        for j := 0; j < len(interval2); j++ {\n            interval2Start\
    \ = interval2[j].(float64)\n            interval2End = interval2[j].(float64)\n\
    \            \n            if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n                fmt.Println(\"interval1Start\", interval1Start,\
    \ \"interval1End\", interval1End, \"interval2Start\", interval2Start, \"interval2End\"\
    , interval2End)\n                fmt.Println(\"interval1Start\", interval1Start,\
    \ \"interval1End\", interval1End, \"interval2Start\", interval2Start, \"interval2End\"\
    , interval2End)\n                fmt.Println(\"interval1Start\", interval1Start,\
    \ \"interval1End\", interval1End, \"interval2Start\", interval2Start, \"interval2End\"\
    , interval2End)\n                fmt.Println(\"interval1Start\", interval1Start,\
    \ \"interval1End\", interval1End, \"interval2Start\", interval2Start, \"interval2End\"\
    , interval2End)\n                fmt.Println(\"interval1Start\", interval1Start,\
    \ \"interval1End\", interval1End, \"interval2Start\", interval2Start, \"interval2End\"\
    , interval2End)\n                fmt.Println(\"interval1Start\", interval1Start,\
    \ \"interval1End\", interval1End, \"interval2Start\", interval2Start, \"interval2End\"\
    , interval2End)\n                fmt.Println(\"interval1Start\", interval1Start,\
    \ \"interval1End\", interval1End, \"interval2Start\", interval2Start, \"interval2End\"\
    , interval2End)\n                fmt.Println(\"interval1Start\", interval1Start,\
    \ \"interval1End\", interval1End, \"interval2Start\", interval2Start, \"interval2End\"\
    , interval2End)\n                fmt.Println(\"interval1Start\", interval1Start,\
    \ \"interval1End\", interval1End, \"interval2Start\", interval2Start, \"interval2End\"\
    , interval2End)\n                fmt.Println(\"interval1Start\", interval1Start,\
    \ \"interval1End\", interval1End, \"interval2Start\", interval2Start, \"interval2End\"\
    , interval2End)\n                fmt.Println(\"interval1Start\", interval1Start,\
    \ \"interval1End\", interval", "    \n    // Your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    var result string\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    result += \"YES\"\n    \n    for\
    \ i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64) <= interval2[i].(float64)\
    \ {\n            result += fmt.Sprintf(\"%v\", interval1[i])\n        }\n    }\n\
    \    \n    return result\n}\n", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    var result string\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        return \"NO\"\n    }\n    \n    if interval2Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1Start < interval2Start\
    \ {\n        interval1Start, interval1End = interval2Start, interval1End\n   \
    \ }\n    \n    if interval1Start < interval2End {\n        interval1Start, interval1End\
    \ = interval2Start, interval1End\n    }\n    \n    if interval1End > interval2End\
    \ {\n        interval1End, interval1Start = interval2End, interval1Start\n   \
    \ }\n    \n    if interval1End > interval2Start {\n        interval1End, interval1Start\
    \ = interval2End, interval1Start\n    }\n    \n    if interval1Start <= interval1End\
    \ && interval2Start <= interval2End {\n        \n        if interval1Start <=\
    \ interval2Start {\n            interval1Start, interval1End = interval2Start,\
    \ interval1End\n        }\n        \n        if interval1End <= interval2End {\n\
    \            interval1End, interval1Start = interval2End, interval1Start\n   \
    \     }\n        \n        if interval1Start <= interval1End && interval2Start\
    \ <= interval2End {\n            \n            if interval1Start <= interval2Start\
    \ {\n                interval1Start, interval1End = interval2Start, interval1End\n\
    \            }\n            \n            if interval1End <= interval2End {\n\
    \                interval1End, interval1Start = interval2End, interval1Start\n\
    \            }\n            \n            if interval1Start <= interval1End &&\
    \ interval2Start <= interval2End {\n                \n                if interval1Start\
    \ <= interval2Start {\n                    interval1Start, interval1End = interval2Start,\
    \ interval1End\n                }\n                \n                if interval1End\
    \ <= interval2End {\n                    interval1End, interval1Start = interval2End,\
    \ interval1Start\n                }\n                \n                if interval1Start\
    \ <= interval1End && interval2Start <= interval2End {\n                    \n\
    \                    if interval1Start <= interval2Start {\n                 \
    \       interval1Start, interval1End = interval2Start, interval1End\n        \
    \            }\n                    \n                    if interval1End <= interval2End\
    \ {\n", "    var a []interface{}\n    var b []interface{}\n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    for i := 0; i < len(interval1);\
    \ i++ {\n        a = append(a, interval1[i])\n        b = append(b, interval2[i])\n\
    \    }\n    sort.Slice(a, func(i, j int) bool {\n        return a[i].(float64)\
    \ < a[j].(float64)\n    })\n    sort.Slice(b, func(i, j int) bool {\n        return\
    \ b[i].(float64) < b[j].(float64)\n    })\n    var c []interface{}\n    var d\
    \ []interface{}\n    if len(a) == 0 {\n        return \"NO\"\n    }\n    if len(b)\
    \ == 0 {\n        return \"NO\"\n    }\n    if len(a) == 1 {\n        if a[0].(float64)\
    \ == b[0].(float64) {\n            return \"YES\"\n        }\n        return \"\
    NO\"\n    }\n    if len(b) == 1 {\n        if a[0].(float64) == b[0].(float64)\
    \ {\n            return \"YES\"\n        }\n        return \"NO\"\n    }\n   \
    \ for i := 0; i < len(a); i++ {\n        if a[i].(float64) > b[i].(float64) {\n\
    \            c = append(c, a[i])\n            d = append(d, b[i])\n        } else\
    \ {\n            c = append(c, b[i])\n            d = append(d, a[i])\n      \
    \  }\n    }\n    sort.Slice(d, func(i, j int) bool {\n        return d[i].(float64)\
    \ < d[j].(float64)\n    })\n    for i := 0; i < len(d); i++ {\n        if d[i].(float64)\
    \ == c[i].(float64) {\n            return \"YES\"\n        }\n    }\n    return\
    \ \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n    \n    interval1 := interval1.([]interface{})\n    interval2 :=\
    \ interval2.([]interface{})\n    \n    result := make([]interface{}, len(interval1))\n\
    \    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i] > interval2[i]\
    \ {\n            result[i] = interval1[i]\n        } else {\n            result[i]\
    \ = interval2[i]\n        }\n    }\n    \n    result := result.([]interface{})\n\
    \    \n    if len(result) == 0 {\n        return \"NO\"\n    }\n    \n    result\
    \ := result.([]interface{})\n    \n    if len(result) == 1 {\n        return fmt.Sprintf(\"\
    YES\")\n    }\n    \n    result := result.([]interface{})\n    \n    if len(result)\
    \ == 2 {\n        if result[0] > result[1] {\n            return fmt.Sprintf(\"\
    YES\")\n        } else {\n            return fmt.Sprintf(\"NO\")\n        }\n\
    \    }\n    \n    result := result.([]interface{})\n    \n    if len(result) ==\
    \ 3 {\n        if result[0] > result[1] {\n            if result[1] > result[2]\
    \ {\n                return fmt.Sprintf(\"YES\")\n            } else {\n     \
    \           return fmt.Sprintf(\"NO\")\n            }\n        } else {\n    \
    \        if result[1] > result[2] {\n                return fmt.Sprintf(\"NO\"\
    )\n            } else {\n                return fmt.Sprintf(\"YES\")\n       \
    \     }\n        }\n    }\n    \n    result := result.([]interface{})\n    \n\
    \    if len(result) == 4 {\n        if result[0] > result[1] {\n            if\
    \ result[1] > result[2] {\n                if result[2] > result[3] {\n      \
    \              return fmt.Sprintf(\"YES\")\n                } else {\n       \
    \             return fmt.Sprintf(\"NO\")\n                }\n            } else\
    \ {\n                if result[2] > result[3] {\n                    return fmt.Sprintf(\"\
    NO\")\n                } else {\n                    return fmt.Sprintf(\"YES\"\
    )\n                }\n            }\n        } else {\n            if result[1]\
    \ > result[2] {\n                if result[2] > result[3] {\n                \
    \    return fmt.Sprintf(\"NO\")\n                } else {\n                  \
    \  return fmt.Sprintf(\"YES\")\n                }\n            } else {\n    \
    \            if result[2] > result[3] {\n                    return fmt.Sprintf(\"\
    NO\")\n                } else {\n                    return fmt.Sprintf(\"YES\"\
    )\n                }\n            }\n        }\n    }\n    \n    result := result.([]interface{})\n\
    \    \n    if len(result) == 5 {\n        if result[0] > result[1] {\n       \
    \     if result[1] > result[2] {\n                if result[2] > result[3] {\n\
    \                    if result[3] > result[4] {\n                        return\
    \ fmt.Sprintf(\"YES\")\n                    } else {\n                       \
    \ return fmt.Sprintf(\"NO\")\n                    }\n                } else {\n\
    \                    if result[3] > result", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if len(interval1) != len(interval2) {\n     \
    \   return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n   \
    \ interval1End := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n\
    \    interval2End := interval2[1].(int)\n\n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"NO\"\n    }\n    if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n        return \"NO\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1Start >= interval2End && interval1End\
    \ <= interval2Start {\n        return \"NO\"\n    }\n    if interval1Start <=\
    \ interval2Start && interval1End >= interval2End {\n        return \"NO\"\n  \
    \  }\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1Start <= interval2Start &&\
    \ interval1End >= interval2End {\n        return \"NO\"\n    }\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1Start >= interval2Start &&\
    \ interval1End <= interval2End {\n        return \"NO\"\n    }\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1Start <= interval2Start &&\
    \ interval1End >= interval2End {\n        return \"NO\"\n    }\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1Start >= interval2Start &&\
    \ interval1End <= interval2End {\n        return \"NO\"\n    }\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n", "    var result string\n\
    \    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ >= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"YES\" {\n        return \"YES\"\n    }\n    \n\
    \    return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n       \
    \ return \"NO\"\n    }\n    \n    interval1Start, interval1End := interval1[0],\
    \ interval1[1]\n    interval2Start, interval2End := interval2[0], interval2[1]\n\
    \    \n    if interval1Start > interval2End {\n        interval1Start, interval1End\
    \ = interval2End, interval1Start\n    }\n    if interval2Start > interval1End\
    \ {\n        interval2Start, interval2End = interval1End, interval2Start\n   \
    \ }\n    \n    intersection := interval1Start <= interval2Start && interval1End\
    \ >= interval2End\n    \n    if intersection {\n        if interval1Start <= interval2Start\
    \ {\n            return fmt.Sprintf(\"YES\")\n        } else {\n            return\
    \ fmt.Sprintf(\"NO\")\n        }\n    } else {\n        return \"NO\"\n    }\n\
    }\n", "    var result string\n    \n    if len(interval1) != len(interval2) {\n\
    \        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++ {\n\
    \        if interval1[i].(float64) < interval2[i].(float64) {\n            result\
    \ = \"NO\"\n            break\n        }\n    }\n    \n    if result == \"NO\"\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i].(float64) >= interval2[i].(float64) {\n         \
    \   result = \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1 := interval1[0].([]int)\n\
    \    interval2 := interval2[0].([]int)\n    \n    result := make([]int, len(interval1))\n\
    \    \n    for i := 0; i < len(interval1); i++ {\n        result[i] = interval1[i]\
    \ & interval2[i]\n    }\n    \n    result := result[:len(interval1)]\n    \n \
    \   if len(result) == 1 {\n        return fmt.Sprintf(\"YES\")\n    }\n    \n\
    \    if isPrime(result[0]) {\n        return fmt.Sprintf(\"YES\")\n    }\n   \
    \ \n    return fmt.Sprintf(\"NO\")\n}\n", "    // Write your code here\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    \n    var result string\n    \n   \
    \ if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ >= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"YES\" {\n        return \"YES\"\n    }\n    \n\
    \    return \"NO\"\n}\n", "    var interval1Start, interval1End int\n    var interval2Start,\
    \ interval2End int\n    var lengthOfIntersection int\n    \n    interval1Start\
    \ = interval1[0].(int)\n    interval1End = interval1[1].(int)\n    interval2Start\
    \ = interval2[0].(int)\n    interval2End = interval2[1].(int)\n    \n    if interval1Start\
    \ <= interval1End && interval2Start <= interval2End {\n        if interval1Start\
    \ < interval1End && interval2Start < interval2End {\n            if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n                lengthOfIntersection\
    \ = interval1End - interval1Start\n            } else {\n                lengthOfIntersection\
    \ = interval2End - interval2Start\n            }\n        } else {\n         \
    \   lengthOfIntersection = interval1End - interval1Start\n        }\n    } else\
    \ {\n        lengthOfIntersection = interval2End - interval2Start\n    }\n   \
    \ \n    if lengthOfIntersection == 0 {\n        return \"NO\"\n    }\n    \n \
    \   if lengthOfIntersection == 1 {\n        return \"YES\"\n    }\n    \n    if\
    \ lengthOfIntersection == 2 && isPrime(lengthOfIntersection) {\n        return\
    \ \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    result := make([]interface{}, len(interval1))\n\
    \    for i := 0; i < len(interval1); i++ {\n        result[i] = interval1[i]\n\
    \    }\n    for i := 0; i < len(interval2); i++ {\n        result[i] = interval2[i]\n\
    \    }\n    \n    result := intersection_test.intersection(result)\n    \n   \
    \ if len(result) == 0 {\n        return \"NO\"\n    }\n    \n    if result[0].(float64)\
    \ >= result[1].(float64) {\n        return \"NO\"\n    }\n    \n    return \"\
    YES\"\n}\n", "    \n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    var interval1Start, interval1End int\n    var interval2Start, interval2End\
    \ int\n    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\n\
    \    }\n    \n    for i := 0; i < len(interval1); i++ {\n        interval1Start\
    \ = interval1[i].(int)\n        interval1End = interval1Start + interval1[i].(int)\n\
    \        interval2Start = interval2[i].(int)\n        interval2End = interval2Start\
    \ + interval2[i].(int)\n        \n        if interval1Start <= interval2End &&\
    \ interval2Start <= interval1End {\n            interval1Start = interval1Start\
    \ + 1\n            interval2Start = interval2Start + 1\n        }\n        \n\
    \        if interval1End >= interval2Start || interval2End >= interval1Start {\n\
    \            return \"NO\"\n        }\n    }\n    \n    return \"YES\"\n}\n",
  "    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \    \n    if interval1Start > interval1End {\n        return \"NO\"\n    }\n\
    \    if interval2Start > interval2End {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for intersectionStart <= interval2End {\n        if interval1Start\
    \ <= intersectionEnd && intersectionEnd <= interval2End {\n            intersectionEnd\
    \ = intersectionEnd + 1\n        }\n        if intersectionStart <= intersectionEnd\
    \ && intersectionEnd <= interval2End {\n            intersectionStart = intersectionStart\
    \ + 1\n        }\n    }\n    \n    if intersectionStart <= intersectionEnd {\n\
    \        return \"YES\"\n    }\n    return \"NO\"\n}\n", "    var result string\n\
    \    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ >= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ <= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"YES\" {\n        return \"YES\"\n    }\n    \n\
    \    return \"NO\"\n}\n", "    \n    // Write your code here\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    var result string\n    \n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i <\
    \ len(interval1); i++ {\n        if interval1[i].(float64) >= interval2[i].(float64)\
    \ {\n            result = \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result\
    \ == \"YES\" {\n        result := \"YES\"\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) >= interval2[i].(float64) {\n \
    \               result += \"YES\"\n            }\n        }\n    }\n    \n   \
    \ return result\n}\n", "    // Write your code here\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    \n    // Write your code here\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    var result string\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i].(float64) < interval2[i].(float64) {\n          \
    \  result = \"NO\"\n            break\n        }\n    }\n    \n    if result ==\
    \ \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i].(float64) >= interval2[i].(float64) {\n     \
    \       result = \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    var result\
    \ string\n    var len1, len2 int\n    var start, end int\n    len1, len2 = len(interval1),\
    \ len(interval2)\n    if len1 == 0 || len2 == 0 {\n        result = \"NO\"\n \
    \   } else {\n        start = interval1[0]\n        end = interval2[0]\n     \
    \   for i := 0; i < len1; i++ {\n            if interval1[i] > end {\n       \
    \         end = interval1[i]\n            }\n        }\n        for i := 0; i\
    \ < len2; i++ {\n            if interval2[i] > end {\n                end = interval2[i]\n\
    \            }\n        }\n        if start <= end {\n            result = \"\
    NO\"\n        } else {\n            result = \"YES\"\n        }\n    }\n    return\
    \ result\n}\n", "    var result string\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i].(float64) < interval2[i].(float64) {\n          \
    \  result = \"NO\"\n            break\n        }\n    }\n    \n    if result ==\
    \ \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i].(float64) > interval2[i].(float64) {\n      \
    \      result = \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1 := interval1.([]interface{})\n\
    \    interval2 := interval2.([]interface{})\n    \n    result := make([]interface{},\
    \ 0)\n    \n    for _, interval := range interval1 {\n        start = interval.([]interface{})[0].(int)\n\
    \        end = interval.([]interface{})[1].(int)\n        \n        for _, interval2\
    \ := range interval2 {\n            start2 = interval2.([]interface{})[0].(int)\n\
    \            end2 = interval2.([]interface{})[1].(int)\n            \n       \
    \     if start <= end2 && start2 <= end {\n                fmt.Println(start,\
    \ end)\n                fmt.Println(start2, end2)\n                fmt.Println(start,\
    \ start2)\n                fmt.Println(end, end2)\n                fmt.Println(start,\
    \ end)\n                fmt.Println(start2, end2)\n                fmt.Println(start,\
    \ start2)\n                fmt.Println(end, end2)\n                fmt.Println(start,\
    \ end)\n                fmt.Println(start2, end2)\n                fmt.Println(start,\
    \ start2)\n                fmt.Println(end, end2)\n                fmt.Println(start,\
    \ end)\n                fmt.Println(start2, end2)\n                fmt.Println(start,\
    \ start2)\n                fmt.Println(end, end2)\n                fmt.Println(start,\
    \ end)\n                fmt.Println(start2, end2)\n                fmt.Println(start,\
    \ start2)\n                fmt.Println(end, end2)\n                fmt.Println(start,\
    \ end)\n                fmt.Println(start2, end2)\n                fmt.Println(start,\
    \ start2)\n                fmt.Println(end, end2)\n                fmt.Println(start,\
    \ end)\n                fmt.Println(start2, end2)\n                fmt.Println(start,\
    \ start2)\n                fmt.Println(end, end2)\n                fmt.Println(start,\
    \ end)\n                fmt.Println(start2, end2)\n                fmt.Println(start,\
    \ start2)\n                fmt.Println(end, end2)\n                fmt.Println(start,\
    \ end)\n                fmt.Println(start2, end2)\n                fmt.Println(start,\
    \ start2)\n                fmt.Println(end, end2)\n                fmt.Println(start,\
    \ end)\n                fmt.Println(start2, end2)\n                fmt.Println(start,\
    \ start2)\n                fmt.Println(end, end2)\n                fmt.Println(start,\
    \ end)\n                fmt.Println(start2, end2)\n                fmt.Println(start,\
    \ start2)\n                fmt.Println(end, end2)\n                fmt.Println(start,\
    \ end)\n                fmt.Println(start2, end2)\n                fmt.Println(start,\
    \ start2)\n                fmt.Println(end, end2)\n                ", "    var\
    \ a []int\n    var b []int\n    var c []int\n    var d []int\n    var e []int\n\
    \    var f []int\n    var g []int\n    var h []int\n    var i int\n    var j int\n\
    \    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n \
    \   var p int\n    var q int\n    var r int\n    var s int\n    var t int\n  \
    \  var u int\n    var v int\n    var w int\n    var x int\n    var y int\n   \
    \ var z int\n    var a bool\n    var b bool\n    var c bool\n    var d bool\n\
    \    var e bool\n    var f bool\n    var g bool\n    var h bool\n    var i bool\n\
    \    var j bool\n    var k bool\n    var l bool\n    var m bool\n    var n bool\n\
    \    var o bool\n    var p bool\n    var q bool\n    var r bool\n    var s bool\n\
    \    var t bool\n    var u bool\n    var v bool\n    var w bool\n    var x bool\n\
    \    var y bool\n    var z bool\n    var a int\n    var b int\n    var c int\n\
    \    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n \
    \   var i int\n    var j int\n    var k int\n    var l int\n    var m int\n  \
    \  var n int\n    var o int\n    var p int\n    var q int\n    var r int\n   \
    \ var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var\
    \ x int\n    var y int\n    var z int\n    var a bool\n    var b bool\n    var\
    \ c bool\n    var d bool\n    var e bool\n    var f bool\n    var g bool\n   \
    \ var h bool\n    var i bool\n    var j bool\n    var k bool\n    var l bool\n\
    \    var m bool\n    var n bool\n    var o bool\n    var p bool\n    var q bool\n\
    \    var r bool\n    var s bool\n    var t bool\n    var u bool\n    var v bool\n\
    \    var w bool\n    var x bool\n    var y bool\n    var z bool\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n\
    \    }\n\n    interval1Start, interval1End := interval1[0], interval1[1]\n   \
    \ interval2Start, interval2End := interval2[0], interval2[1]\n\n    if interval1Start\
    \ > interval2End {\n        return \"NO\"\n    }\n\n    if interval1End < interval2Start\
    \ {\n        return \"NO\"\n    }\n\n    intersectionLength := interval1End -\
    \ interval1Start\n    if intersectionLength == 0 {\n        return \"NO\"\n  \
    \  }\n\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n\n    if interval1Start <= interval2End &&\
    \ interval1End >= interval2Start {\n        return \"YES\"\n    }\n\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n\n    return \"NO\"\n}\n", "    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(int)\n    interval1End := interval1[1].(int)\n    interval2Start\
    \ := interval2[0].(int)\n    interval2End := interval2[1].(int)\n    \n    if\
    \ interval1Start > interval1End {\n        interval1Start, interval1End = interval1End,\
    \ interval1Start\n    }\n    if interval2Start > interval2End {\n        interval2Start,\
    \ interval2End = interval2End, interval2Start\n    }\n    \n    intersectionLength\
    \ := interval1End - interval1Start\n    \n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n    \n    if interval1Start > interval2End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    \n    if interval1Start > interval2Start\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    \n    if interval1Start < interval2Start {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    \n    if interval1End < interval2End\
    \ {\n        interval1End, interval1Start = interval1Start, interval1End\n   \
    \ }\n    \n    if interval1End < interval2Start {\n        interval1End, interval1Start\
    \ = interval1Start, interval1End\n    }\n    \n    if interval1End > interval2End\
    \ {\n        interval1End, interval1Start = interval1Start, interval1End\n   \
    \ }\n    \n    if interval1Start > interval2Start {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    \n    if interval1Start > interval2End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    \n    if interval1Start < interval2Start {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    \n    if interval1End < interval2End\
    \ {\n        interval1End, interval1Start = interval1Start, interval1End\n   \
    \ }\n    \n    if interval1End > interval2Start {\n        interval1End, interval1Start\
    \ = interval1Start, interval1End\n    }\n    \n    if interval1Start > interval2Start\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    \n    if interval1Start > interval", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if len(interval1) != len(interval2) {\n     \
    \   return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for interval1Start <= interval1End\
    \ && interval2Start <= interval2End {\n        if interval1Start <= interval2Start\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n        }\n        if interval1End >= interval2End {\n     \
    \       intersectionEnd = interval2Start\n            intersectionStart = interval2End\n\
    \        }\n        if intersectionStart <= intersectionEnd {\n            intersectionStart\
    \ = interval1End\n            intersectionEnd = interval2End\n        }\n    }\n\
    \    \n    if intersectionStart <= intersectionEnd {\n        if intersectionStart\
    \ <= interval1Start {\n            return \"NO\"\n        }\n        if intersectionEnd\
    \ >= interval1End {\n            return \"NO\"\n        }\n        if intersectionStart\
    \ <= interval2Start {\n            return \"NO\"\n        }\n        if intersectionEnd\
    \ >= interval2End {\n            return \"NO\"\n        }\n        if intersectionStart\
    \ <= interval1End {\n            return \"NO\"\n        }\n        if intersectionEnd\
    \ >= interval2End {\n            return \"NO\"\n        }\n        if intersectionStart\
    \ <= interval2Start {\n            return \"NO\"\n        }\n        if intersectionEnd\
    \ >= interval1End {\n            return \"NO\"\n        }\n        if intersectionStart\
    \ <= interval1Start {\n            return \"NO\"\n        }\n        if intersectionEnd\
    \ >= interval2Start {\n            return \"NO\"\n        }\n        if intersectionStart\
    \ <= interval2End {\n            return \"NO\"\n        }\n        if intersectionEnd\
    \ >= interval1Start {\n            return \"NO\"\n        }\n        if intersectionStart\
    \ <= interval2End {\n            return \"NO\"\n        }\n        if intersectionEnd\
    \ >= interval1End {\n            return \"NO\"\n        }\n        if intersectionStart\
    \ <= interval1Start {\n            return \"NO\"\n        }\n        if intersectionEnd\
    \ >= interval2End {\n            return \"NO\"\n        }\n        if intersectionStart\
    \ <= interval2Start {\n            return \"NO\"\n        }\n        if intersectionEnd\
    \ >= interval1End {\n            return \"NO\"\n        }\n", "    \n    var result\
    \ string\n    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\
    \n    }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ > interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ == interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"YES\" {\n        return \"YES\"\n    }\n    \n\
    \    return \"NO\"\n}\n", "    \n    // Write your code here\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    if len(interval1) != len(interval2) {\n       \
    \ return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n \
    \   interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for interval1Start < interval1End\
    \ {\n        interval1End := interval1Start + interval1End - interval1Start\n\
    \        \n        for interval2Start < interval2End {\n            interval2End\
    \ := interval2Start + interval2End - interval2Start\n            \n          \
    \  if interval1Start <= interval2Start && interval1End >= interval2End {\n   \
    \             intersectionStart = interval1Start\n                intersectionEnd\
    \ = interval1End\n                \n                break\n            }\n   \
    \         \n            if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n                intersectionStart = interval1Start\n                intersectionEnd\
    \ = interval1End\n                \n                break\n            }\n   \
    \         \n            if interval1Start <= interval2Start && interval1End <=\
    \ interval2End {\n                intersectionStart = interval1Start\n       \
    \         intersectionEnd = interval1End\n                \n                break\n\
    \            }\n            \n            if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n                intersectionStart = interval1Start\n\
    \                intersectionEnd = interval1End\n                \n          \
    \      break\n            }\n            \n            if interval1Start >= interval2Start\
    \ && interval1End >= interval2End {\n                intersectionStart = interval1Start\n\
    \                intersectionEnd = interval1End\n                \n          \
    \      break\n            }\n            \n            if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n                intersectionStart = interval1Start\n\
    \                intersectionEnd = interval1End\n                \n          \
    \      break\n            }\n            \n            if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n                intersectionStart = interval1Start\n\
    \                intersectionEnd = interval1End\n                \n          \
    \      break\n            }\n            \n            if interval1Start <= interval2Start\
    \ && interval1End <= interval2End {\n                intersectionStart = interval1Start\n\
    \                intersectionEnd = interval1End\n                \n          \
    \      break\n            }\n", "    if len(interval1) != len(interval2) {\n \
    \       return \"NO\"\n    }\n    \n    result := make([]interface{}, 0)\n   \
    \ \n    for _, interval := range interval1 {\n        if interval <= interval2[0]\
    \ {\n            result = append(result, interval)\n        }\n    }\n    \n \
    \   for _, interval := range interval2 {\n        if interval <= interval1[1]\
    \ {\n            result = append(result, interval)\n        }\n    }\n    \n \
    \   if len(result) == 0 {\n        return \"NO\"\n    }\n    \n    if len(result)\
    \ == 1 {\n        return \"YES\"\n    }\n    \n    length := len(result)\n   \
    \ \n    if length == 2 {\n        if result[0] == result[1] {\n            return\
    \ \"YES\"\n        }\n        return \"NO\"\n    }\n    \n    if length == 3 {\n\
    \        if result[0] == result[1] && result[1] == result[2] {\n            return\
    \ \"YES\"\n        }\n        return \"NO\"\n    }\n    \n    if length == 4 {\n\
    \        if result[0] == result[1] && result[1] == result[2] && result[2] == result[3]\
    \ {\n            return \"YES\"\n        }\n        return \"NO\"\n    }\n   \
    \ \n    if length == 5 {\n        if result[0] == result[1] && result[1] == result[2]\
    \ && result[2] == result[3] && result[3] == result[4] {\n            return \"\
    YES\"\n        }\n        return \"NO\"\n    }\n    \n    if length == 6 {\n \
    \       if result[0] == result[1] && result[1] == result[2] && result[2] == result[3]\
    \ && result[3] == result[4] && result[4] == result[5] {\n            return \"\
    YES\"\n        }\n        return \"NO\"\n    }\n    \n    if length == 7 {\n \
    \       if result[0] == result[1] && result[1] == result[2] && result[2] == result[3]\
    \ && result[3] == result[4] && result[4] == result[5] && result[5] == result[6]\
    \ {\n            return \"YES\"\n        }\n        return \"NO\"\n    }\n   \
    \ \n    if length == 8 {\n        if result[0] == result[1] && result[1] == result[2]\
    \ && result[2] == result[3] && result[3] == result[4] && result[4] == result[5]\
    \ && result[5] == result[6] && result[6] == result[7] {\n            return \"\
    YES\"\n        }\n        return \"NO\"\n    }\n    \n    if length == 9 {\n \
    \       if result[0] == result[1] && result[1] == result[2] && result[2] == result[3]\
    \ && result[3] == result[4] && result[4] == result[5] && result[5] == result[6]\
    \ && result[6] == result[7] && result[7] == result[8] {\n            return \"\
    YES\"\n        }\n        return \"NO\"\n    }\n    \n    if length == 10 {\n\
    \        if result[0] == result[1] && result[1] == result[2] && result[2] == result[3]\
    \ && result[3] == ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\n   \
    \ interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \n    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n\n    if interval1Start > interval2Start {\n        return \"NO\"\n    }\n\
    \n    if interval1End < interval2End {\n        return \"NO\"\n    }\n\n    if\
    \ interval1Start <= interval2Start && interval1End >= interval2End {\n       \
    \ return \"YES\"\n    }\n\n    if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n        return \"YES\"\n    }\n\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n\n    if interval1Start >= interval2End && interval1End <= interval2Start\
    \ {\n        return \"YES\"\n    }\n\n    return \"NO\"\n}\n", "    var result\
    \ string\n    var start1, end1, start2, end2 int\n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    for i := 0; i < len(interval1); i++ {\n\
    \        start1 = interval1[i].(int)\n        end1 = interval1[i].(int)\n    }\n\
    \    for i := 0; i < len(interval2); i++ {\n        start2 = interval2[i].(int)\n\
    \        end2 = interval2[i].(int)\n    }\n    if start1 < start2 {\n        start1,\
    \ start2 = start2, start1\n    }\n    if end1 < end2 {\n        end1, end2 = end2,\
    \ end1\n    }\n    if end1 < start2 {\n        return \"NO\"\n    }\n    if start1\
    \ == start2 {\n        if end1 == end2 {\n            result = \"YES\"\n     \
    \   } else {\n            result = \"NO\"\n        }\n    } else {\n        if\
    \ end1 == end2 {\n            result = \"YES\"\n        } else {\n           \
    \ result = \"NO\"\n        }\n    }\n    return result\n}\n", "    \n    // Your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start, interval1End := interval1[0],\
    \ interval1[1]\n    interval2Start, interval2End := interval2[0], interval2[1]\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    if interval1Start <= interval2Start && interval1End >= interval2End {\n \
    \       return \"YES\"\n    }\n    \n    if interval1Start <= interval2End &&\
    \ interval1End >= interval2Start {\n        return \"YES\"\n    }\n    \n    return\
    \ \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    \n    if interval1Start >\
    \ interval1End {\n        interval1Start, interval1End = interval1End, interval1Start\n\
    \    }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    var interval1Start,\
    \ interval1End int\n    var interval2Start, interval2End int\n    \n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i <\
    \ len(interval1); i++ {\n        interval1Start, interval1End = interval1[i].(int)\n\
    \        interval2Start, interval2End = interval2[i].(int)\n        \n       \
    \ if interval1Start <= interval2End && interval1End >= interval2Start {\n    \
    \        if interval1Start < interval2Start {\n                interval1Start,\
    \ interval1End = interval2Start, interval1End\n            }\n            if interval1End\
    \ > interval2End {\n                interval1Start, interval1End = interval1End,\
    \ interval2End\n            }\n            \n            if interval1Start <=\
    \ interval2Start && interval1End >= interval2End {\n                return \"\
    YES\"\n            }\n        }\n    }\n    \n    return \"NO\"\n}\n", "    if\
    \ len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n   \
    \ interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval1End {\n            intersectionEnd = interval1End\n        } else\
    \ {\n            intersectionStart = interval1Start\n        }\n    }\n    \n\
    \    for i := 1; i < len(interval2); i++ {\n        interval2Start := interval2[i].(float64)\n\
    \        interval2End := interval2[i+1].(float64)\n        \n        if interval2Start\
    \ > interval2End {\n            intersectionEnd = interval2End\n        } else\
    \ {\n            intersectionStart = interval2Start\n        }\n    }\n    \n\
    \    if intersectionStart > intersectionEnd {\n        return \"NO\"\n    }\n\
    \    \n    if intersectionStart < intersectionEnd {\n        if intersectionStart\
    \ > interval1Start {\n            intersectionStart = interval1Start\n       \
    \ }\n        if intersectionEnd < interval2End {\n            intersectionEnd\
    \ = interval2End\n        }\n    }\n    \n    if intersectionStart > interval1Start\
    \ {\n        intersectionStart = interval1Start\n    }\n    if intersectionEnd\
    \ < interval2End {\n        intersectionEnd = interval2End\n    }\n    \n    if\
    \ intersectionStart > interval2Start {\n        intersectionStart = interval2Start\n\
    \    }\n    if intersectionEnd < interval1End {\n        intersectionEnd = interval1End\n\
    \    }\n    \n    if intersectionStart <= intersectionEnd {\n        if intersectionStart\
    \ > interval1Start {\n            intersectionStart = interval1Start\n       \
    \ }\n        if intersectionEnd < interval2End {\n            intersectionEnd\
    \ = interval2End\n        }\n    }\n    \n    if intersectionStart <= interval1Start\
    \ {\n        if intersectionStart > interval2Start {\n            intersectionStart\
    \ = interval2Start\n        }\n        if intersectionEnd < interval1End {\n \
    \           intersectionEnd = interval1End\n        }\n    }\n    \n    if intersectionStart\
    \ <= interval2Start {\n        if intersectionStart > interval1Start {\n     \
    \       intersectionStart = interval1Start\n        }\n        if intersectionEnd\
    \ < interval2End {\n            intersectionEnd = interval2End\n        }\n  \
    \  }\n    \n    if intersectionStart <= interval1End {", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    result := make([]interface{},\
    \ 0)\n    \n    for _, interval1Element := range interval1 {\n        for _, interval2Element\
    \ := range interval2 {\n            if interval1Element <= interval2Element {\n\
    \                result = append(result, interval1Element)\n            }\n  \
    \      }\n    }\n    \n    if len(result) == 0 {\n        return \"NO\"\n    }\n\
    \    \n    if len(result) == 1 {\n        return fmt.Sprintf(\"YES\")\n    }\n\
    \    \n    if isPrime(result.([]interface{})[0]) {\n        return fmt.Sprintf(\"\
    YES\")\n    }\n    \n    return fmt.Sprintf(\"NO\")\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    result := make([]interface{},\
    \ 0)\n    for _, interval1Element := range interval1 {\n        for _, interval2Element\
    \ := range interval2 {\n            if interval1Element > interval2Element {\n\
    \                interval1Element, interval2Element = interval2Element, interval1Element\n\
    \            }\n            if interval1Element == interval2Element {\n      \
    \          result = append(result, interval1Element)\n            }\n        }\n\
    \    }\n    if len(result) == 0 {\n        return \"NO\"\n    }\n    \n    length\
    \ := len(result)\n    if length == 1 {\n        return \"YES\"\n    }\n    if\
    \ length == 2 && result[0] == result[1] {\n        return \"YES\"\n    }\n   \
    \ if length == 2 && result[0] == result[1] {\n        return \"NO\"\n    }\n \
    \   if length == 3 && result[0] == result[1] && result[1] == result[2] {\n   \
    \     return \"YES\"\n    }\n    if length == 3 && result[0] == result[1] && result[1]\
    \ == result[2] {\n        return \"NO\"\n    }\n    if length == 4 && result[0]\
    \ == result[1] && result[1] == result[2] && result[2] == result[3] {\n       \
    \ return \"YES\"\n    }\n    if length == 4 && result[0] == result[1] && result[1]\
    \ == result[2] && result[2] == result[3] {\n        return \"NO\"\n    }\n   \
    \ return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1 := make([]int, len(interval1))\n    interval2\
    \ := make([]int, len(interval2))\n    \n    for i, v := range interval1 {\n  \
    \      interval1[i] = v.(int)\n    }\n    for i, v := range interval2 {\n    \
    \    interval2[i] = v.(int)\n    }\n    \n    result := 0\n    \n    for i, v\
    \ := range interval1 {\n        result += v\n    }\n    \n    for i, v := range\
    \ interval2 {\n        result -= v\n    }\n    \n    if result > 0 {\n       \
    \ return \"YES\"\n    }\n    return \"NO\"\n}\n", "    var interval1Start, interval1End\
    \ int\n    var interval2Start, interval2End int\n    \n    if len(interval1) !=\
    \ len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        interval1Start = interval1[i].(int)\n        interval1End = interval1Start\
    \ + interval1[i].(int)\n        interval2Start = interval2[i].(int)\n        interval2End\
    \ = interval2Start + interval2[i].(int)\n        \n        if interval1Start >\
    \ interval2End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval2Start {\n            return \"NO\"\n        }\n    }\n    \n    if\
    \ interval1Start <= interval2Start && interval1End >= interval2End {\n       \
    \ return \"YES\"\n    }\n    if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
  "    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  var result string\n    \n    if len(interval1) != len(interval2) {\n      \
    \  return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++ {\n   \
    \     if interval1[i].(float64) <= interval2[i].(float64) {\n            result\
    \ = \"NO\"\n            break\n        }\n    }\n    \n    if result == \"NO\"\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i].(float64) >= interval2[i].(float64) {\n         \
    \   result = \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    // Write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    result := \"\"\n\
    \    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i] < interval2[i]\
    \ {\n            result += \"NO\"\n            break\n        }\n        \n  \
    \      if interval1[i] > interval2[i] {\n            result += \"YES\"\n     \
    \       break\n        }\n    }\n    \n    return result\n}\n", "    var result\
    \ string\n    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\
    \n    }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ > interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"\" {\n        return \"YES\"\n    }\n    \n   \
    \ return result\n}\n", "    \n    \n    var result string\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    var result string\n    var len1, len2 int\n    len1 = len(interval1)\n\
    \    len2 = len(interval2)\n    if len1 == 0 || len2 == 0 {\n        result =\
    \ \"NO\"\n    } else {\n        for i := 0; i < len1; i++ {\n            if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n                result += \"NO\"\n             \
    \   break\n            }\n        }\n        for i := 0; i < len2; i++ {\n   \
    \         if interval1[i].(float64) > interval2[i].(float64) {\n             \
    \   result += \"NO\"\n                break\n            }\n        }\n      \
    \  if result == \"NO\" {\n            result = \"YES\"\n        }\n    }\n   \
    \ return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
