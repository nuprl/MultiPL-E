name: HumanEval_127_intersection
language: go_test.go
prompt: "package intersection_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // You are given two intervals,\n// where each interval is a pair of integers. For\
  \ example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
  \ which means that the interval (start, end)\n// includes both start and end.\n\
  // For each given interval, it is assumed that its start is less or equal its end.\n\
  // Your task is to determine whether the length of intersection of these two \n\
  // intervals is a prime number.\n// Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n//\
  \ If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
  \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output]\
  \ samples:\n// intersection((1, 2), (2, 3)) ==> \"NO\"\n// intersection((-1, 1),\
  \ (0, 4)) ==> \"NO\"\n// intersection((-3, -1), (-5, 5)) ==> \"YES\"\nfunc intersection(interval1\
  \ []interface{}, interval2 []interface{}) string {\n"
tests: "func TestIntersection(t *testing.T) {\n  candidate := intersection\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate([]interface{}{1, 2}, []interface{}{2, 3}),\
  \ expected: \"NO\" },\n     { actual: candidate([]interface{}{-1, 1}, []interface{}{0,\
  \ 4}), expected: \"NO\" },\n     { actual: candidate([]interface{}{-3, -1}, []interface{}{-5,\
  \ 5}), expected: \"YES\" },\n     { actual: candidate([]interface{}{-2, 2}, []interface{}{-4,\
  \ 0}), expected: \"YES\" },\n     { actual: candidate([]interface{}{-11, 2}, []interface{}{-1,\
  \ -1}), expected: \"NO\" },\n     { actual: candidate([]interface{}{1, 2}, []interface{}{3,\
  \ 5}), expected: \"NO\" },\n     { actual: candidate([]interface{}{1, 2}, []interface{}{1,\
  \ 2}), expected: \"NO\" },\n     { actual: candidate([]interface{}{-2, -2}, []interface{}{-3,\
  \ -2}), expected: \"NO\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result string\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i].(float64) < interval2[i].(float64) {\n          \
    \  result = \"NO\"\n            break\n        }\n    }\n    \n    if result ==\
    \ \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i].(float64) >= interval2[i].(float64) {\n     \
    \       result = \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i].(float64) > interval2[i].(float64) {\n      \
    \      result = \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1 := make([]int,\
    \ len(interval1))\n    interval2 := make([]int, len(interval2))\n    \n    for\
    \ i, v := range interval1 {\n        interval1[i] = int(v.(float64))\n    }\n\
    \    for i, v := range interval2 {\n        interval2[i] = int(v.(float64))\n\
    \    }\n    \n    result := make([]int, len(interval1))\n    \n    for i, v :=\
    \ range interval1 {\n        for j, w := range interval2 {\n            if v >=\
    \ w {\n                result[i] = v\n                result[j] = w\n        \
    \        break\n            }\n        }\n    }\n    \n    length := len(result)\n\
    \    \n    if length == 0 {\n        return \"NO\"\n    }\n    \n    if length\
    \ == 1 {\n        if result[0] == result[1] {\n            return \"YES\"\n  \
    \      }\n        return \"NO\"\n    }\n    \n    if length == 2 && result[0]\
    \ == result[1] {\n        return \"YES\"\n    }\n    \n    if length == 2 && result[0]\
    \ != result[1] {\n        return \"NO\"\n    }\n    \n    if length == 3 && result[0]\
    \ == result[1] && result[2] == result[1] {\n        return \"YES\"\n    }\n  \
    \  \n    if length == 3 && result[0] != result[1] && result[2] != result[1] {\n\
    \        return \"NO\"\n    }\n    \n    if length == 4 && result[0] == result[1]\
    \ && result[2] == result[1] && result[3] == result[1] {\n        return \"YES\"\
    \n    }\n    \n    if length == 4 && result[0] != result[1] && result[2] != result[1]\
    \ && result[3] != result[1] {\n        return \"NO\"\n    }\n    \n    if length\
    \ == 5 && result[0] == result[1] && result[2] == result[1] && result[3] == result[1]\
    \ && result[4] == result[1] {\n        return \"YES\"\n    }\n    \n    if length\
    \ == 5 && result[0] != result[1] && result[2] != result[1] && result[3] != result[1]\
    \ && result[4] != result[1] {\n        return \"NO\"\n    }\n    \n    if length\
    \ == 6 && result[0] == result[1] && result[2] == result[1] && result[3] == result[1]\
    \ && result[4] == result[1] && result[5] == result[1] {\n        return \"YES\"\
    \n    }\n    \n    if length == 6 && result[0] != result[1] && result[2] != result[1]\
    \ && result[3] != result[1] && result[4] != result[1] && result[5] != result[1]\
    \ {\n        return \"NO\"\n    }\n    \n    if length == 7 && result[0] == result[1]\
    \ && result[2] == result[1] && result[3] == result[1] && result[4] == result[1]\
    \ && result[5] == result", "    if len(interval1) != len(interval2) {\n      \
    \  return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    intersection := interval1End\
    \ - interval1Start\n    \n    if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n        if intersection <= 0 {\n            return \"NO\"\
    \n        }\n        if intersection <= 1 {\n            return \"YES\"\n    \
    \    }\n        if intersection <= 2 {\n            return \"YES\"\n        }\n\
    \        if intersection <= 3 {\n            return \"YES\"\n        }\n     \
    \   if intersection <= 4 {\n            return \"YES\"\n        }\n        if\
    \ intersection <= 5 {\n            return \"YES\"\n        }\n        if intersection\
    \ <= 6 {\n            return \"YES\"\n        }\n        if intersection <= 7\
    \ {\n            return \"YES\"\n        }\n        if intersection <= 8 {\n \
    \           return \"YES\"\n        }\n        if intersection <= 9 {\n      \
    \      return \"YES\"\n        }\n        if intersection <= 10 {\n          \
    \  return \"YES\"\n        }\n        if intersection <= 11 {\n            return\
    \ \"YES\"\n        }\n        if intersection <= 12 {\n            return \"YES\"\
    \n        }\n        if intersection <= 13 {\n            return \"YES\"\n   \
    \     }\n        if intersection <= 14 {\n            return \"YES\"\n       \
    \ }\n        if intersection <= 15 {\n            return \"YES\"\n        }\n\
    \        if intersection <= 16 {\n            return \"YES\"\n        }\n    \
    \    if intersection <= 17 {\n            return \"YES\"\n        }\n        if\
    \ intersection <= 18 {\n            return \"YES\"\n        }\n        if intersection\
    \ <= 19 {\n            return \"YES\"\n        }\n        if intersection <= 20\
    \ {\n            return \"YES\"\n        }\n        if intersection <= 21 {\n\
    \            return \"YES\"\n        }\n        if intersection <= 22 {\n    \
    \        return \"YES\"\n        }\n        if intersection <= 23 {\n        \
    \    return \"YES\"\n        }\n        if intersection <= 24 {\n            return\
    \ \"YES\"\n        }\n        if intersection <= 25 {\n            return \"YES\"\
    \n        }\n        if intersection <= 26 {\n            return \"YES\"\n   \
    \     }\n        if intersection <= 27 {\n            return \"YES\"\n       \
    \ }\n        if intersection ", "    var a []int\n    var b []int\n    var c []int\n\
    \    var d []int\n    var e []int\n    var f []int\n    var g []int\n    var h\
    \ []int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m\
    \ int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n\
    \    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n \
    \   var x int\n    var y int\n    var z int\n    var a int\n    var b int\n  \
    \  var c int\n    var d int\n    var e int\n    var f int\n    var g int\n   \
    \ var h int\n    var i int\n    var j int\n    var k int\n    var l int\n    var\
    \ m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r\
    \ int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n\
    \    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n \
    \   var c int\n    var d int\n    var e int\n    var f int\n    var g int\n  \
    \  var h int\n    var i int\n    var j int\n    var k int\n    var l int\n   \
    \ var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var\
    \ r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w\
    \ int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n\
    \    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n \
    \   var h int\n    var i int\n    var j int\n    var k int\n    var l int\n  \
    \  var m int\n    var n int\n    var o int\n    var p int\n    var q int\n   \
    \ var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var\
    \ w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b\
    \ int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n\
    \    var h int\n    var i int\n    var j int\n    var k int\n    var l int\n \
    \   var m int\n    var n int\n    var o int\n    var p int\n    var q int\n  \
    \  var r int\n    var s int\n    var t int\n    var u int\n    var v int\n", " \
    \   var result string\n    \n    if len(interval1) != len(interval2) {\n     \
    \   return \"NO\"\n    }\n    \n    result := \"NO\"\n    \n    for i := 0; i\
    \ < len(interval1); i++ {\n        if interval1[i].(float64) >= interval2[i].(float64)\
    \ {\n            result = \"NO\"\n            break\n        }\n    }\n    \n\
    \    return result\n}\n", "    var interval1Start, interval1End int\n    var interval2Start,\
    \ interval2End int\n    var isIntersecting bool\n    \n    if len(interval1) !=\
    \ len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        interval1Start = interval1[i].(float64)\n        interval1End\
    \ = interval1[i].(float64)\n        \n        for j := 0; j < len(interval2);\
    \ j++ {\n            interval2Start = interval2[j].(float64)\n            interval2End\
    \ = interval2[j].(float64)\n            \n            if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n                isIntersecting = true\n \
    \               break\n            }\n        }\n        \n        if !isIntersecting\
    \ {\n            return \"NO\"\n        }\n    }\n    \n    return \"YES\"\n}\n",
  "    var interval1Start, interval1End int\n    var interval2Start, interval2End\
    \ int\n    var isIntersect bool\n\n    if len(interval1) != len(interval2) {\n\
    \        return \"NO\"\n    }\n\n    for i := 0; i < len(interval1); i++ {\n \
    \       interval1Start, interval1End = interval1[i].(int64)\n        interval2Start,\
    \ interval2End = interval2[i].(int64)\n        isIntersect = interval1Start <=\
    \ interval2End && interval2Start <= interval1End\n        if !isIntersect {\n\
    \            break\n        }\n    }\n\n    if isIntersect {\n        if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n            return \"YES\"\
    \n        }\n        return \"NO\"\n    }\n\n    return \"NO\"\n}\n", "    \n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        if interval1Start >\
    \ interval1End {\n            return \"NO\"\n        }\n        \n        if interval2Start\
    \ > interval2End {\n            return \"NO\"\n        }\n        \n        if\
    \ interval1Start <= interval2Start && interval1End >= interval2End {\n       \
    \     intersectionStart = interval1Start\n            intersectionEnd = interval1End\n\
    \        }\n        \n        if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n            intersectionEnd = interval1End\n        }\n\
    \    }\n    \n    if intersectionStart <= intersectionEnd && intersectionStart\
    \ >= interval1Start && intersectionEnd <= interval1End {\n        return \"YES\"\
    \n    }\n    \n    return \"NO\"\n}\n", "    var result string\n    \n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i <\
    \ len(interval1); i++ {\n        if interval1[i].(float64) < interval2[i].(float64)\
    \ {\n            result += \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0;\
    \ i < len(interval1); i++ {\n        if interval1[i].(float64) > interval2[i].(float64)\
    \ {\n            result += \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result\
    \ == \"YES\" {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n",
  "    \n    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  var result string\n    \n    interval1Start, interval1End := interval1[0].([]interface{})[0],\
    \ interval1[0].([]interface{})[1]\n    interval2Start, interval2End := interval2[0].([]interface{})[0],\
    \ interval2[0].([]interface{})[1]\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        result = \"NO\"\n    } else {\n \
    \       result = \"YES\"\n    }\n    \n    return result\n}\n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if len(interval1) != len(interval2) {\n     \
    \   return \"NO\"\n    }\n    \n    interval1 := interval1.([]interface{})\n \
    \   interval2 := interval2.([]interface{})\n    \n    i := 0\n    j := 0\n   \
    \ \n    result := \"\"\n    \n    for i < len(interval1) && j < len(interval2)\
    \ {\n        if interval1[i] < interval2[j] {\n            i++\n        } else\
    \ if interval1[i] > interval2[j] {\n            j++\n        } else {\n      \
    \      result += fmt.Sprintf(\"%v\", interval1[i])\n            i++\n        \
    \    j++\n        }\n    }\n    \n    if i == len(interval1) {\n        result\
    \ += fmt.Sprintf(\"%v\", interval2[j])\n        j++\n    }\n    \n    if j ==\
    \ len(interval2) {\n        result += fmt.Sprintf(\"%v\", interval1[i])\n    \
    \    i++\n    }\n    \n    return result\n}\n", "    var result string\n    \n\
    \    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n   \
    \ \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ > interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"YES\" {\n        return \"YES\"\n    }\n    \n\
    \    return \"NO\"\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    var result string\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    result := \"NO\"\n    \n    for i\
    \ := 0; i < len(interval1); i++ {\n        if interval1[i].(float64) <= interval2[i].(float64)\
    \ {\n            result := \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    if result\
    \ == \"YES\" {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\n   \
    \ interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \n    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n\n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n\n    if\
    \ interval1Start < interval2Start {\n        interval1Start, interval1End = interval2Start,\
    \ interval1End\n    }\n\n    if interval1Start <= interval1End && interval2Start\
    \ <= interval2End {\n        if interval1Start <= interval2Start {\n         \
    \   interval1Start, interval1End = interval2Start, interval1End\n        }\n\n\
    \        if interval1End <= interval2End {\n            interval1Start, interval1End\
    \ = interval1End, interval2End\n        }\n\n        if interval1Start <= interval2Start\
    \ {\n            interval1Start, interval1End = interval2Start, interval1End\n\
    \        }\n\n        if interval1End <= interval2End {\n            interval1Start,\
    \ interval1End = interval1End, interval2End\n        }\n\n        if interval1Start\
    \ <= interval2Start {\n            interval1Start, interval1End = interval2Start,\
    \ interval1End\n        }\n\n        if interval1End <= interval2End {\n     \
    \       interval1Start, interval1End = interval1End, interval2End\n        }\n\
    \n        if interval1Start <= interval2Start {\n            interval1Start, interval1End\
    \ = interval2Start, interval1End\n        }\n\n        if interval1End <= interval2End\
    \ {\n            interval1Start, interval1End = interval1End, interval2End\n \
    \       }\n\n        if interval1Start <= interval2Start {\n            interval1Start,\
    \ interval1End = interval2Start, interval1End\n        }\n\n        if interval1End\
    \ <= interval2End {\n            interval1Start, interval1End = interval1End,\
    \ interval2End\n        }\n\n        if interval1Start <= interval2Start {\n \
    \           interval1Start, interval1End = interval2Start, interval1End\n    \
    \    }\n\n        if interval1End <= interval2End {\n            interval1Start,\
    \ interval1End = interval1End, interval2End\n        }\n\n        if interval1Start\
    \ <= interval"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
