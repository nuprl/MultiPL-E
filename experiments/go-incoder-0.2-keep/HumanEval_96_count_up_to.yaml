name: HumanEval_96_count_up_to
language: go_test.go
prompt: "package count_up_to_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Implement a function that takes an non-negative integer and returns an array\
  \ of the first n\n// integers that are prime numbers and less than n.\n// for example:\n\
  // count_up_to(5) => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) =>\
  \ []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18)\
  \ => [2,3,5,7,11,13,17]\nfunc count_up_to(n int) []int {\n"
tests: "func TestCount_Up_To(t *testing.T) {\n  candidate := count_up_to\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(5), expected: []int{2, 3} },\n     { actual:\
  \ candidate(6), expected: []int{2, 3, 5} },\n     { actual: candidate(7), expected:\
  \ []int{2, 3, 5} },\n     { actual: candidate(10), expected: []int{2, 3, 5, 7} },\n\
  \     { actual: candidate(0), expected: []int{} },\n     { actual: candidate(22),\
  \ expected: []int{2, 3, 5, 7, 11, 13, 17, 19} },\n     { actual: candidate(1), expected:\
  \ []int{} },\n     { actual: candidate(18), expected: []int{2, 3, 5, 7, 11, 13,\
  \ 17} },\n     { actual: candidate(47), expected: []int{2, 3, 5, 7, 11, 13, 17,\
  \ 19, 23, 29, 31, 37, 41, 43} },\n     { actual: candidate(101), expected: []int{2,\
  \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
  \ 83, 89, 97} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    primes := make([]int, n+1)\n    primes[0] = 1\n    primes[1] =\
    \ 1\n    for i := 2; i <= n; i++ {\n        for j := 2; j < i; j++ {\n       \
    \     if i*j > n {\n                break\n            }\n            if primes[i*j]\
    \ == 0 {\n                primes[i*j] = i\n            }\n        }\n    }\n \
    \   return primes[:n]\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    for i := 3; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if i == j {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    if n < 2 {\n        return []int{}\n    }\n    prime\
    \ := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ == 0 || prime[prime[0]-1] == i {\n            prime = append(prime, i)\n   \
    \     }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    for\
    \ i := 2; i < n; i++ {\n        if n%i == 0 {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if j > i {\n       \
    \     prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "  \
    \  primes := make([]int, n)\n    primes[0] = 1\n    for i := 1; i < n; i++ {\n\
    \        for j := 2; j < i; j++ {\n            if primes[j] == 0 {\n         \
    \       break\n            }\n            if i%primes[j] == 0 {\n            \
    \    primes[j] += 1\n                break\n            }\n        }\n    }\n\
    \    return primes\n}\n", "    if n < 2 {\n        return []\n    }\n    primes\
    \ := make([]int, n+1)\n    primes[0] = 2\n    primes[1] = 3\n    for i := 2; i\
    \ <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % primes[j]\
    \ == 0 {\n                break\n            }\n        }\n        if j > i {\n\
    \            primes[i+1] = i\n        }\n    }\n    return primes[:n]\n}\n", " \
    \   prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if j > i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n\
    \        if prime[len(prime)-1] < i {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    for i := 3; i < n; i++ {\n        for _, j := range\
    \ prime {\n            if i%j == 0 {\n                break\n            }\n \
    \       }\n        if i == n {\n            prime = append(prime, n)\n       \
    \ }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime :=\
    \ append(prime, 2)\n    for i := 3; i < n; i++ {\n        if prime[prime[len(prime)-1]-1]\
    \ == i {\n            prime = append(prime, i)\n        } else {\n           \
    \ prime = append(prime, i+1)\n        }\n    }\n    return prime\n}\n", "    primes\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        primes[i] = 1\n   \
    \ }\n    for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n        \
    \    if primes[j] == 0 {\n                primes[j] = 1\n                for k\
    \ := i + 1; k < n; k++ {\n                    if primes[k] == 0 {\n          \
    \              primes[k] = 1\n                        primes[j] = 0\n        \
    \                break\n                    }\n                }\n           \
    \ }\n        }\n    }\n    return primes[:n]\n}\n", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i\
    \ := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j\
    \ == 0 {\n                break\n            }\n        }\n        if j == i {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 49)\n    prime := append(prime, 57)\n    prime\
    \ := append(prime, 61)\n    prime := append(prime, 67)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 251)\n    prime := append(prime, 257)\n    prime := append(prime,\
    \ 263)\n    prime := append(prime, 269)\n    prime := append(prime, 271)\n   \
    \ prime := append(prime, 277)\n    prime := append(prime, 281)\n    prime := append(prime, ",
  "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 0;\
    \ j < i; j++ {\n            if prime[j] == 0 {\n                prime = append(prime,\
    \ j)\n                break\n            }\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ prime[i] {\n            continue\n        }\n        for j := 2; j < i; j++\
    \ {\n            if i%j == 0 {\n                prime = false\n              \
    \  break\n            }\n        }\n        if prime {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if j > i {\n       \
    \     prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "  \
    \  prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <\
    \ n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n  \
    \              break\n            }\n        }\n        if j > i {\n         \
    \   prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime\
    \ := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++\
    \ {\n        if isPrime(i) {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        if\
    \ i%2 == 0 {\n            prime = append(prime, 2)\n        }\n        for j :=\
    \ 3; j < i; j++ {\n            if i%j == 0 {\n                prime = append(prime,\
    \ j)\n            }\n        }\n    }\n    return prime\n}\n", "    primes :=\
    \ make([]int, n)\n    primes[0] = 2\n    primes[1] = 3\n    for i := 2; i < n;\
    \ i++ {\n        for j := 2; j < i; j++ {\n            if primes[j] == i {\n \
    \               primes[j] = primes[j] + 1\n            }\n        }\n    }\n \
    \   return primes\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n   \
    \         }\n        }\n        if j == i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    for i := 3; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            continue\n        }\n        for j := 3; j*j <= i; j++ {\n\
    \            if i%j == 0 {\n                prime = append(prime, i)\n       \
    \         break\n            }\n        }\n    }\n    return prime\n}\n", "  \
    \  prime := make([]int, 0)\n    for i := 2; i <= n; i++ {\n        if isPrime(i)\
    \ {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i :=\
    \ 3; i < n; i++ {\n        if prime[prime[len(prime)-1]-1] != i {\n          \
    \  prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime\
    \ := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 59)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 73)\n    prime := append(prime,\
    \ 79)\n    prime := append(prime, 83)\n    prime := append(prime, 89)\n    prime\
    \ := append(prime, 97)\n    prime := append(prime, 101)\n    prime := append(prime,\
    \ 103)\n    prime := append(prime, 107)\n    prime := append(prime, 109)\n   \
    \ prime := append(prime, 113)\n    prime := append(prime, 127)\n    prime := append(prime,\
    \ 131)\n    prime := append(prime, 137)\n    prime := append(prime, 139)\n   \
    \ prime := append(prime, 149)\n    prime := append(prime, 151)\n    prime := append(prime,\
    \ 157)\n    prime := append(prime, 163)\n    prime := append(prime, 167)\n   \
    \ prime := append(prime, 173)\n    prime := append(prime, 179)\n    prime := append(prime,\
    \ 181)\n    prime := append(prime, 191)\n    prime := append(prime, 193)\n   \
    \ prime := append(prime, 197)\n    prime := append(prime, 199)\n    prime := append(prime,\
    \ 211)\n    prime := append(prime, 223)\n    prime := append(prime, 227)\n   \
    \ prime := append(prime, 229)\n    prime := append(prime, 233)\n    prime := append(prime,\
    \ 239)\n    prime := append(prime, 241)\n    prime := append(prime, 251)\n   \
    \ prime := append(prime, 257)\n    prime := append(prime, 263)\n    prime := append(prime,\
    \ 269)\n    prime := append(prime, 271)\n    prime := append(prime, 277)\n   \
    \ prime := append(prime, 281)\n    prime := append(prime, 283)\n    prime := append(prime, ",
  "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[len(prime)-1]-1]\
    \ != i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime :=\
    \ append(prime, 3)\n    for i := 4; i <= n; i++ {\n        if prime[len(prime)-1]\
    \ == i {\n            prime[len(prime)-1]++\n        } else {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n\
    \    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n           \
    \ if i % j == 0 {\n                break\n            }\n        }\n        if\
    \ j > i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   prime := append(prime, 3)\n    prime := append(prime, 5)\n    prime := append(prime,\
    \ 7)\n    prime := append(prime, 11)\n    prime := append(prime, 13)\n    prime\
    \ := append(prime, 17)\n    prime := append(prime, 19)\n    prime := append(prime,\
    \ 29)\n    prime := append(prime, 31)\n    prime := append(prime, 37)\n    prime\
    \ := append(prime, 43)\n    prime := append(prime, 51)\n    prime := append(prime,\
    \ 59)\n    prime := append(prime, 67)\n    prime := append(prime, 73)\n    prime\
    \ := append(prime, 79)\n    prime := append(prime, 83)\n    prime := append(prime,\
    \ 89)\n    prime := append(prime, 97)\n    prime := append(prime, 101)\n    prime\
    \ := append(prime, 103)\n    prime := append(prime, 107)\n    prime := append(prime,\
    \ 109)\n    prime := append(prime, 113)\n    prime := append(prime, 127)\n   \
    \ prime := append(prime, 131)\n    prime := append(prime, 137)\n    prime := append(prime,\
    \ 139)\n    prime := append(prime, 149)\n    prime := append(prime, 151)\n   \
    \ prime := append(prime, 157)\n    prime := append(prime, 163)\n    prime := append(prime,\
    \ 167)\n    prime := append(prime, 173)\n    prime := append(prime, 179)\n   \
    \ prime := append(prime, 181)\n    prime := append(prime, 191)\n    prime := append(prime,\
    \ 193)\n    prime := append(prime, 197)\n    prime := append(prime, 199)\n   \
    \ prime := append(prime, 211)\n    prime := append(prime, 223)\n    prime := append(prime,\
    \ 227)\n    prime := append(prime, 229)\n    prime := append(prime, 233)\n   \
    \ prime := append(prime, 239)\n    prime := append(prime, 241)\n    prime := append(prime,\
    \ 251)\n    prime := append(prime, 257)\n    prime := append(prime, 263)\n   \
    \ prime := append(prime, 269)\n    prime := append(prime, 271)\n    prime := append(prime,\
    \ 277)\n    prime := append(prime, 281)\n    prime := append(prime, 283)\n   \
    \ prime := append(prime, ", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    prime := append(prime, 5)\n    prime\
    \ := append(prime, 7)\n    prime := append(prime, 11)\n    prime := append(prime,\
    \ 13)\n    prime := append(prime, 17)\n    prime := append(prime, 19)\n    prime\
    \ := append(prime, 29)\n    prime := append(prime, 31)\n    prime := append(prime,\
    \ 37)\n    prime := append(prime, 43)\n    prime := append(prime, 49)\n    prime\
    \ := append(prime, 57)\n    prime := append(prime, 61)\n    prime := append(prime,\
    \ 67)\n    prime := append(prime, 73)\n    prime := append(prime, 79)\n    prime\
    \ := append(prime, 83)\n    prime := append(prime, 89)\n    prime := append(prime,\
    \ 97)\n    prime := append(prime, 101)\n    prime := append(prime, 103)\n    prime\
    \ := append(prime, 107)\n    prime := append(prime, 109)\n    prime := append(prime,\
    \ 113)\n    prime := append(prime, 127)\n    prime := append(prime, 131)\n   \
    \ prime := append(prime, 137)\n    prime := append(prime, 139)\n    prime := append(prime,\
    \ 149)\n    prime := append(prime, 151)\n    prime := append(prime, 157)\n   \
    \ prime := append(prime, 163)\n    prime := append(prime, 167)\n    prime := append(prime,\
    \ 173)\n    prime := append(prime, 179)\n    prime := append(prime, 181)\n   \
    \ prime := append(prime, 191)\n    prime := append(prime, 193)\n    prime := append(prime,\
    \ 197)\n    prime := append(prime, 199)\n    prime := append(prime, 211)\n   \
    \ prime := append(prime, 223)\n    prime := append(prime, 227)\n    prime := append(prime,\
    \ 229)\n    prime := append(prime, 233)\n    prime := append(prime, 239)\n   \
    \ prime := append(prime, 241)\n    prime := append(prime, 243)\n    prime := append(prime,\
    \ 247)\n    prime := append(prime, 251)\n    prime := append(prime, 257)\n   \
    \ prime := append(prime, 263)\n    prime := append(prime, 269)\n    prime := append(prime,\
    \ 271)\n    prime := append(prime, ", "    prime := make([]int, 0, n)\n    for\
    \ i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j\
    \ == 0 {\n                break\n            }\n        }\n        if i == j {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 59)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 73)\n    prime := append(prime,\
    \ 79)\n    prime := append(prime, 83)\n    prime := append(prime, 89)\n    prime\
    \ := append(prime, 97)\n    prime := append(prime, 101)\n    prime := append(prime,\
    \ 103)\n    prime := append(prime, 107)\n    prime := append(prime, 109)\n   \
    \ prime := append(prime, 113)\n    prime := append(prime, 127)\n    prime := append(prime,\
    \ 131)\n    prime := append(prime, 137)\n    prime := append(prime, 139)\n   \
    \ prime := append(prime, 149)\n    prime := append(prime, 151)\n    prime := append(prime,\
    \ 157)\n    prime := append(prime, 163)\n    prime := append(prime, 167)\n   \
    \ prime := append(prime, 173)\n    prime := append(prime, 179)\n    prime := append(prime,\
    \ 181)\n    prime := append(prime, 191)\n    prime := append(prime, 193)\n   \
    \ prime := append(prime, 197)\n    prime := append(prime, 199)\n    prime := append(prime,\
    \ 211)\n    prime := append(prime, 223)\n    prime := append(prime, 227)\n   \
    \ prime := append(prime, 229)\n    prime := append(prime, 233)\n    prime := append(prime,\
    \ 239)\n    prime := append(prime, 241)\n    prime := append(prime, 251)\n   \
    \ prime := append(prime, 257)\n    prime := append(prime, 263)\n    prime := append(prime,\
    \ 269)\n    prime := append(prime, 271)\n    prime := append(prime, 277)\n   \
    \ prime := append(prime, 281)\n    prime := append(prime, 283)\n    prime := append(prime, ",
  "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 0;\
    \ j < i; j++ {\n            if prime[j] == 0 {\n                prime = append(prime,\
    \ j)\n                break\n            }\n        }\n    }\n    return prime\n\
    }\n", "    if n < 2 {\n        return []\n    }\n    primes := make([]int, n+1)\n\
    \    primes[0] = 2\n    primes[1] = 3\n    for i := 2; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i*j > n {\n                break\n    \
    \        }\n            if primes[i*j] == 0 {\n                primes[i*j] = primes[i]\
    \ + primes[j]\n            }\n        }\n    }\n    return primes[:n]\n}\n", " \
    \   prime := make([]int, n)\n    prime[0] = prime[1] = 1\n    for i := 2; i <\
    \ n; i++ {\n        if prime[i] == 0 {\n            for j := i * i; j < n; j +=\
    \ i {\n                prime[j] = i\n            }\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i % j == 0 {\n                break\n      \
    \      }\n        }\n        if j > i {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    for i := 3; i < n; i++ {\n        if prime[prime[len(prime)-1]-1]\
    \ != i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i :=\
    \ 3; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j ==\
    \ 0 {\n                break\n            }\n        }\n        if i == j {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if j > i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   for i := 3; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i % j == 0 {\n                break\n            }\n        }\n        if j\
    \ == i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ prime[prime[0]-1] == 0 {\n            prime = append(prime, i)\n        }\n\
    \        for j := 0; j < i; j++ {\n            if prime[j] == 0 {\n          \
    \      prime = append(prime, j)\n                break\n            }\n      \
    \  }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime :=\
    \ append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 29)\n    prime := append(prime, 31)\n    prime\
    \ := append(prime, 37)\n    prime := append(prime, 43)\n    prime := append(prime,\
    \ 59)\n    prime := append(prime, 61)\n    prime := append(prime, 67)\n    prime\
    \ := append(prime, 73)\n    prime := append(prime, 79)\n    prime := append(prime,\
    \ 83)\n    prime := append(prime, 89)\n    prime := append(prime, 97)\n    prime\
    \ := append(prime, 101)\n    prime := append(prime, 103)\n    prime := append(prime,\
    \ 107)\n    prime := append(prime, 109)\n    prime := append(prime, 113)\n   \
    \ prime := append(prime, 127)\n    prime := append(prime, 131)\n    prime := append(prime,\
    \ 137)\n    prime := append(prime, 139)\n    prime := append(prime, 149)\n   \
    \ prime := append(prime, 151)\n    prime := append(prime, 157)\n    prime := append(prime,\
    \ 163)\n    prime := append(prime, 167)\n    prime := append(prime, 173)\n   \
    \ prime := append(prime, 179)\n    prime := append(prime, 181)\n    prime := append(prime,\
    \ 191)\n    prime := append(prime, 193)\n    prime := append(prime, 197)\n   \
    \ prime := append(prime, 199)\n    prime := append(prime, 211)\n    prime := append(prime,\
    \ 223)\n    prime := append(prime, 227)\n    prime := append(prime, 229)\n   \
    \ prime := append(prime, 233)\n    prime := append(prime, 239)\n    prime := append(prime,\
    \ 241)\n    prime := append(prime, 251)\n    prime := append(prime, 257)\n   \
    \ prime := append(prime, 263)\n    prime := append(prime, 269)\n    prime := append(prime,\
    \ 271)\n    prime := append(prime, 277)\n    prime := append(prime, 281)\n   \
    \ prime := append(prime, 283)\n    prime := append(prime, ", "    prime := make([]int,\
    \ 0, n)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n       \
    \ for j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n\
    \            }\n        }\n        if j == i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i <= n; i++ {\n        if i%2 == 0 {\n            prime = append(prime, 2)\n\
    \        }\n        for j := 3; j < i; j++ {\n            if i%j == 0 {\n    \
    \            prime = append(prime, j)\n            }\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i % j == 0 {\n                break\n      \
    \      }\n        }\n        if j > i {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    for i := 3; i < n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i%j == 0 {\n                break\n            }\n   \
    \     }\n        if i == j {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    for i :=\
    \ 2; i < n; i++ {\n        if prime[prime[0]-1] == 0 {\n            prime = append(prime,\
    \ i)\n        }\n        for j := 1; j < i; j++ {\n            if prime[j-1] ==\
    \ 0 {\n                prime = append(prime, j)\n            }\n        }\n  \
    \  }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2;\
    \ i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n\
    \                break\n            }\n        }\n        if i == n {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i\
    \ <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n \
    \               break\n            }\n        }\n        if i == j {\n       \
    \     prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "  \
    \  prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <\
    \ n; i++ {\n        if prime[prime[len(prime)-1]-1] == i {\n            prime\
    \ = append(prime, i)\n        } else {\n            prime = append(prime, i+1)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    for i := 3; i < n; i++ {\n        for _, j := range\
    \ prime {\n            if i%j == 0 {\n                break\n            }\n \
    \       }\n        if i == n {\n            prime = append(prime, n)\n       \
    \ }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    for i :=\
    \ 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n\
    \                break\n            }\n        }\n        if i == n {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   if n < 2 {\n        return []\n    }\n    prime := make([]int, 0, n)\n   \
    \ for i := 2; i < n; i++ {\n        if prime[prime[0]-1] == 0 {\n            prime\
    \ = append(prime, i)\n        }\n        for j := 0; j < i; j++ {\n          \
    \  if prime[j] == 0 {\n                prime = append(prime, j)\n            }\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   for i := 2; i < n; i++ {\n        if prime[len(prime)-1] < i {\n         \
    \   prime = append(prime, i)\n        }\n        for j := 0; j < len(prime)-1;\
    \ j++ {\n            if prime[j]*prime[j+1] < i {\n                prime = append(prime,\
    \ i)\n                break\n            }\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i :=\
    \ 3; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n\
    \                break\n            }\n        }\n        if j > i {\n       \
    \     prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "  \
    \  prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <\
    \ n; i++ {\n        if isPrime(i) {\n            prime = append(prime, i)\n  \
    \      }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    for i := 3; i <= n; i++ {\n        if i%2 == 0 {\n\
    \            continue\n        }\n        for j := 3; j*j <= i; j++ {\n      \
    \      if i%j == 0 {\n                break\n            }\n            if j ==\
    \ i {\n                prime = append(prime, i)\n                break\n     \
    \       }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n \
    \           }\n        }\n        if j == i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, n)\n\
    \    prime[0] = prime[1] = 1\n    for i := 2; i < n; i++ {\n        for j := 2;\
    \ j < i; j++ {\n            if prime[j] == 0 {\n                for k := j; k\
    \ < i; k++ {\n                    prime[k] = i\n                }\n          \
    \  }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n        if isPrime(i)\
    \ {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n   \
    \         }\n        }\n        if i == n {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if j > i {\n       \
    \     prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "  \
    \  prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <=\
    \ n; i++ {\n        if i%2 == 0 {\n            continue\n        }\n        for\
    \ j := 3; j*j <= i; j++ {\n            if i%j == 0 {\n                break\n\
    \            }\n            if j == i {\n                prime = append(prime,\
    \ i)\n            }\n        }\n    }\n    return prime\n}\n", "    if n < 2 {\n\
    \        return []\n    }\n    primes := make([]int, n)\n    primes[0] = 2\n \
    \   primes[1] = 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n\
    \    primes[5] = 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n\
    \    primes[9] = 29\n    primes[10] = 31\n    primes[11] = 31\n    primes[12]\
    \ = 37\n    primes[13] = 41\n    primes[14] = 43\n    primes[15] = 47\n    primes[16]\
    \ = 53\n    primes[17] = 59\n    primes[18] = 61\n    primes[19] = 67\n    primes[20]\
    \ = 71\n    primes[21] = 73\n    primes[22] = 79\n    primes[23] = 83\n    primes[24]\
    \ = 89\n    primes[25] = 97\n    primes[26] = 101\n    primes[27] = 103\n    primes[28]\
    \ = 107\n    primes[29] = 109\n    primes[30] = 112\n    primes[31] = 116\n  \
    \  primes[32] = 113\n    primes[33] = 121\n    primes[34] = 123\n    primes[35]\
    \ = 127\n    primes[36] = 131\n    primes[37] = 301\n    primes[38] = 303\n  \
    \  primes[39] = 307\n    primes[40] = 311\n    primes[41] = 313\n    primes[42]\
    \ = 317\n    primes[43] = 319\n    primes[44] = 329\n    primes[45] = 331\n  \
    \  primes[46] = 333\n    primes[47] = 359\n    primes[48] = 371\n    primes[49]\
    \ = 373\n    primes[50] = 379\n    primes[51] = 381\n    primes[52] = 383\n  \
    \  primes[53] = 389\n    primes[54] = 391\n    primes[55] = 397\n    primes[56]\
    \ = 401\n    primes[57] = 403\n    primes[58] = 407\n    primes[59] = 411\n  \
    \  primes[60] = 417\n    primes[61] = 419\n    primes[62] = 429\n    primes[63]\
    \ = 431\n    primes[64] = 433\n    primes[65] = 439\n    primes[66] = 443\n  \
    \  ", "    if n < 2 {\n        return []\n    }\n    primes := make([]int, n)\n\
    \    primes[0] = 2\n    primes[1] = 3\n    for i := 2; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n \
    \           }\n        }\n        if j > i {\n            primes[i] = i\n    \
    \    }\n    }\n    return primes\n}\n", "    if n < 2 {\n        return []int{}\n\
    \    }\n\n    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n\n  \
    \  for i := 3; i < n; i++ {\n        if prime[i-1] == 0 {\n            prime =\
    \ append(prime, i)\n        }\n        for j := 2; j < i; j++ {\n            if\
    \ prime[j-1] == 0 {\n                prime = append(prime, j)\n            }\n\
    \        }\n    }\n\n    return prime\n}\n", "    prime := make([]int, 0)\n  \
    \  for i := 2; i < n; i++ {\n        if n%i == 0 {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n        if prime[prime[len(prime)-1]-1]\
    \ != i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i :=\
    \ 3; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0\
    \ {\n                break\n            }\n        }\n        if i == j {\n  \
    \          prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <=\
    \ n; i++ {\n        for _, j := range prime {\n            if i%j == 0 {\n   \
    \             break\n            }\n        }\n        if i == n {\n         \
    \   prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime\
    \ := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if j > i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n\
    \        if prime[prime[len(prime)-1]-1] < i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if j > i {\n       \
    \     prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "  \
    \  prime := make([]int, n)\n    prime[0] = prime[1] = 1\n    for i := 2; i < n;\
    \ i++ {\n        if prime[i] == 0 {\n            for j := i * i; j < n; j += i\
    \ {\n                prime[j] = i\n            }\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   for i := 3; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i % j == 0 {\n                break\n            }\n        }\n        if j\
    \ == i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i :=\
    \ 3; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n\
    \                break\n            }\n        }\n        if i == j {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if j == i {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n;\
    \ i++ {\n        if prime[prime[0]-1] == 0 {\n            prime = append(prime,\
    \ i)\n        }\n        for j := 1; j < i; j++ {\n            if prime[j-1] ==\
    \ 0 {\n                prime = append(prime, j)\n            }\n        }\n  \
    \  }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n \
    \           }\n        }\n        if j > i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if j > i {\n       \
    \     prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "  \
    \  prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 0;\
    \ j < i; j++ {\n            if prime[j] == 0 {\n                prime = append(prime,\
    \ j)\n            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i\
    \ := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j\
    \ == 0 {\n                break\n            }\n        }\n        if j > i {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <\
    \ n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n    \
    \            break\n            }\n        }\n        if i == j {\n          \
    \  prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime\
    \ := make([]int, n)\n    prime[0] = 1\n    prime[1] = 1\n    prime[2] = 2\n  \
    \  prime[3] = 3\n    prime[4] = 5\n    prime[5] = 7\n    prime[6] = 11\n    prime[7]\
    \ = 13\n    prime[8] = 17\n    prime[9] = 19\n    prime[10] = 23\n    prime[11]\
    \ = 29\n    prime[12] = 31\n    prime[13] = 41\n    prime[14] = 67\n    prime[15]\
    \ = 89\n    prime[16] = 101\n    prime[17] = 121\n    prime[18] = 147\n    prime[19]\
    \ = 159\n    prime[20] = 191\n    prime[21] = 223\n    prime[22] = 313\n    prime[23]\
    \ = 419\n    prime[24] = 647\n    prime[25] = 831\n    prime[26] = 1023\n    prime[27]\
    \ = 1229\n    prime[28] = 1439\n    prime[29] = 1647\n    prime[30] = 1855\n \
    \   prime[31] = 2047\n    prime[32] = 2277\n    prime[33] = 2461\n    prime[34]\
    \ = 2779\n    prime[35] = 2983\n    prime[36] = 3199\n    prime[37] = 3301\n \
    \   prime[38] = 3521\n    prime[39] = 3729\n    prime[40] = 3937\n    prime[41]\
    \ = 4157\n    prime[42] = 4331\n    prime[43] = 4529\n    prime[44] = 4743\n \
    \   prime[45] = 4947\n    prime[46] = 5149\n    prime[47] = 5349\n    prime[48]\
    \ = 5639\n    prime[49] = 5941\n    prime[50] = 6141\n    prime[51] = 6451\n \
    \   prime[52] = 6751\n    prime[53] = 7149\n    prime[54] = 7457\n    prime[55]\
    \ = 7771\n    prime[56] = 8089\n    prime[57] = 8491\n    prime[58] = 8719\n \
    \   prime[59] = 9031\n    prime[60] = 9337\n    prime[61] = 9639\n    prime[62]\
    \ = 9949\n    prime[63] = 10159\n    prime[64] = 10359\n    prime[65] = 10559\n\
    \    prime[66] = 10761\n    prime[67] = 10967", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    for i := 3; i <= n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i%j == 0 {\n                break\n        \
    \    }\n        }\n        if i != j {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 23)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 49)\n    prime := append(prime, 57)\n    prime\
    \ := append(prime, 61)\n    prime := append(prime, 67)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 251)\n    prime := append(prime, 257)\n    prime := append(prime,\
    \ 263)\n    prime := append(prime, 269)\n    prime := append(prime, 271)\n   \
    \ prime := append(prime, 277)\n    prime := append(prime, 28", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime\
    \ := append(prime, 5)\n    prime := append(prime, 7)\n    prime := append(prime,\
    \ 11)\n    prime := append(prime, 13)\n    prime := append(prime, 17)\n    prime\
    \ := append(prime, 19)\n    prime := append(prime, 23)\n    prime := append(prime,\
    \ 29)\n    prime := append(prime, 31)\n    prime := append(prime, 37)\n    prime\
    \ := append(prime, 43)\n    prime := append(prime, 49)\n    prime := append(prime,\
    \ 57)\n    prime := append(prime, 61)\n    prime := append(prime, 67)\n    prime\
    \ := append(prime, 73)\n    prime := append(prime, 79)\n    prime := append(prime,\
    \ 83)\n    prime := append(prime, 89)\n    prime := append(prime, 97)\n    prime\
    \ := append(prime, 101)\n    prime := append(prime, 103)\n    prime := append(prime,\
    \ 107)\n    prime := append(prime, 109)\n    prime := append(prime, 113)\n   \
    \ prime := append(prime, 127)\n    prime := append(prime, 131)\n    prime := append(prime,\
    \ 137)\n    prime := append(prime, 139)\n    prime := append(prime, 149)\n   \
    \ prime := append(prime, 151)\n    prime := append(prime, 157)\n    prime := append(prime,\
    \ 163)\n    prime := append(prime, 167)\n    prime := append(prime, 173)\n   \
    \ prime := append(prime, 179)\n    prime := append(prime, 181)\n    prime := append(prime,\
    \ 191)\n    prime := append(prime, 193)\n    prime := append(prime, 197)\n   \
    \ prime := append(prime, 199)\n    prime := append(prime, 211)\n    prime := append(prime,\
    \ 223)\n    prime := append(prime, 227)\n    prime := append(prime, 229)\n   \
    \ prime := append(prime, 233)\n    prime := append(prime, 239)\n    prime := append(prime,\
    \ 241)\n    prime := append(prime, 251)\n    prime := append(prime, 257)\n   \
    \ prime := append(prime, 263)\n    prime := append(prime, 269)\n    prime := append(prime,\
    \ 271)\n    prime := append(prime, 277)\n    prime := append(prime, 28", "   \
    \ prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 0;\
    \ j < i; j++ {\n            if prime[j] == 0 {\n                prime = append(prime,\
    \ j)\n                break\n            }\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, n)\n    prime[0] = 1\n    for i := 1; i < n; i++\
    \ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n           \
    \     break\n            }\n        }\n        if i == j {\n            prime[i]\
    \ = 1\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 29)\n    prime := append(prime, 31)\n    prime\
    \ := append(prime, 37)\n    prime := append(prime, 43)\n    prime := append(prime,\
    \ 51)\n    prime := append(prime, 59)\n    prime := append(prime, 67)\n    prime\
    \ := append(prime, 73)\n    prime := append(prime, 79)\n    prime := append(prime,\
    \ 83)\n    prime := append(prime, 89)\n    prime := append(prime, 97)\n    prime\
    \ := append(prime, 101)\n    prime := append(prime, 103)\n    prime := append(prime,\
    \ 107)\n    prime := append(prime, 109)\n    prime := append(prime, 113)\n   \
    \ prime := append(prime, 127)\n    prime := append(prime, 131)\n    prime := append(prime,\
    \ 137)\n    prime := append(prime, 139)\n    prime := append(prime, 149)\n   \
    \ prime := append(prime, 151)\n    prime := append(prime, 157)\n    prime := append(prime,\
    \ 163)\n    prime := append(prime, 167)\n    prime := append(prime, 173)\n   \
    \ prime := append(prime, 179)\n    prime := append(prime, 181)\n    prime := append(prime,\
    \ 191)\n    prime := append(prime, 193)\n    prime := append(prime, 197)\n   \
    \ prime := append(prime, 199)\n    prime := append(prime, 211)\n    prime := append(prime,\
    \ 223)\n    prime := append(prime, 227)\n    prime := append(prime, 229)\n   \
    \ prime := append(prime, 233)\n    prime := append(prime, 239)\n    prime := append(prime,\
    \ 241)\n    prime := append(prime, 251)\n    prime := append(prime, 257)\n   \
    \ prime := append(prime, 263)\n    prime := append(prime, 269)\n    prime := append(prime,\
    \ 271)\n    prime := append(prime, 277)\n    prime := append(prime, 281)\n   \
    \ prime := append(prime, 283)\n    prime := append(prime, ", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[len(prime)-1]-1]\
    \ != i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i :=\
    \ 3; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n\
    \                break\n            }\n        }\n        if i == j {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0)\n    for i := 2; i < n; i++ {\n        if isPrime(i)\
    \ {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n   \
    \         }\n        }\n        if i == n {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    for i := 2; i < n; i++ {\n        if prime[prime[0]-1] == 0 {\n         \
    \   prime = append(prime, i)\n        }\n        for j := 1; j < i; j++ {\n  \
    \          if prime[j-1] != 0 && prime[j-1] != i {\n                prime = append(prime,\
    \ i)\n                break\n            }\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, n)\n    prime[0] = prime[1] = 1\n    for i :=\
    \ 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if prime[j] ==\
    \ 0 {\n                for k := j; k < i; k++ {\n                    prime[k]\
    \ = i\n                }\n                break\n            }\n        }\n  \
    \  }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    for i := 3; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if j > i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   prime := append(prime, 3)\n    prime := append(prime, 5)\n    prime := append(prime,\
    \ 7)\n    prime := append(prime, 11)\n    prime := append(prime, 13)\n    prime\
    \ := append(prime, 17)\n    prime := append(prime, 19)\n    prime := append(prime,\
    \ 29)\n    prime := append(prime, 31)\n    prime := append(prime, 37)\n    prime\
    \ := append(prime, 41)\n    prime := append(prime, 43)\n    prime := append(prime,\
    \ 47)\n    prime := append(prime, 53)\n    prime := append(prime, 59)\n    prime\
    \ := append(prime, 61)\n    prime := append(prime, 67)\n    prime := append(prime,\
    \ 71)\n    prime := append(prime, 73)\n    prime := append(prime, 79)\n    prime\
    \ := append(prime, 83)\n    prime := append(prime, 89)\n    prime := append(prime,\
    \ 97)\n    prime := append(prime, 101)\n    prime := append(prime, 103)\n    prime\
    \ := append(prime, 107)\n    prime := append(prime, 109)\n    prime := append(prime,\
    \ 113)\n    prime := append(prime, 127)\n    prime := append(prime, 131)\n   \
    \ prime := append(prime, 137)\n    prime := append(prime, 139)\n    prime := append(prime,\
    \ 149)\n    prime := append(prime, 151)\n    prime := append(prime, 157)\n   \
    \ prime := append(prime, 163)\n    prime := append(prime, 167)\n    prime := append(prime,\
    \ 173)\n    prime := append(prime, 179)\n    prime := append(prime, 181)\n   \
    \ prime := append(prime, 191)\n    prime := append(prime, 193)\n    prime := append(prime,\
    \ 197)\n    prime := append(prime, 199)\n    prime := append(prime, 211)\n   \
    \ prime := append(prime, 223)\n    prime := append(prime, 227)\n    prime := append(prime,\
    \ 229)\n    prime := append(prime, 233)\n    prime := append(prime, 239)\n   \
    \ prime := append(prime, 241)\n    prime := append(prime, 243)\n    prime := append(prime,\
    \ 247)\n    prime := append(prime, 251)\n    prime := append(prime, 257)\n   \
    \ prime := append(prime, ", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    prime := append(prime, 5)\n    prime\
    \ := append(prime, 7)\n    prime := append(prime, 11)\n    prime := append(prime,\
    \ 13)\n    prime := append(prime, 17)\n    prime := append(prime, 19)\n    prime\
    \ := append(prime, 23)\n    prime := append(prime, 29)\n    prime := append(prime,\
    \ 31)\n    prime := append(prime, 37)\n    prime := append(prime, 43)\n    prime\
    \ := append(prime, 49)\n    prime := append(prime, 57)\n    prime := append(prime,\
    \ 61)\n    prime := append(prime, 67)\n    prime := append(prime, 73)\n    prime\
    \ := append(prime, 79)\n    prime := append(prime, 83)\n    prime := append(prime,\
    \ 89)\n    prime := append(prime, 97)\n    prime := append(prime, 101)\n    prime\
    \ := append(prime, 103)\n    prime := append(prime, 107)\n    prime := append(prime,\
    \ 109)\n    prime := append(prime, 113)\n    prime := append(prime, 127)\n   \
    \ prime := append(prime, 131)\n    prime := append(prime, 137)\n    prime := append(prime,\
    \ 139)\n    prime := append(prime, 149)\n    prime := append(prime, 151)\n   \
    \ prime := append(prime, 157)\n    prime := append(prime, 163)\n    prime := append(prime,\
    \ 167)\n    prime := append(prime, 173)\n    prime := append(prime, 179)\n   \
    \ prime := append(prime, 181)\n    prime := append(prime, 191)\n    prime := append(prime,\
    \ 193)\n    prime := append(prime, 197)\n    prime := append(prime, 199)\n   \
    \ prime := append(prime, 211)\n    prime := append(prime, 223)\n    prime := append(prime,\
    \ 227)\n    prime := append(prime, 229)\n    prime := append(prime, 233)\n   \
    \ prime := append(prime, 239)\n    prime := append(prime, 241)\n    prime := append(prime,\
    \ 251)\n    prime := append(prime, 257)\n    prime := append(prime, 263)\n   \
    \ prime := append(prime, 269)\n    prime := append(prime, 271)\n    prime := append(prime,\
    \ 277)\n    prime := append(prime, 28", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n;\
    \ i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n     \
    \           break\n            }\n        }\n        if j > i {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n\
    \    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n           \
    \ if i % j == 0 {\n                break\n            }\n        }\n        if\
    \ j > i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n\
    \        if prime[prime[0]-1] == 0 {\n            prime = append(prime, i)\n \
    \       }\n        for j := 1; j < i; j++ {\n            if prime[j-1] == 0 {\n\
    \                prime = append(prime, j)\n            }\n        }\n    }\n \
    \   return prime\n}\n", "    if n < 2 {\n        return []int{}\n    }\n    prime\
    \ := make([]int, 0, n)\n    prime := append(prime, 2)\n    for i := 3; i < n;\
    \ i++ {\n        if prime[i-1] == 0 {\n            prime = append(prime, i)\n\
    \        }\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n    \
    \            prime = append(prime, i)\n                break\n            }\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    for i := 3; i < n; i++ {\n        if prime[prime[len(prime)-1]-1]\
    \ == i {\n            prime = append(prime, i)\n        } else {\n           \
    \ prime = append(prime, i+1)\n        }\n    }\n    return prime\n}\n", "    primes\
    \ := make([]int, n+1)\n    primes[0] = 2\n    primes[1] = 2\n    primes[2] = 2\n\
    \    primes[3] = 1\n    primes[4] = 1\n    primes[5] = 1\n    primes[6] = 1\n\
    \    primes[7] = 1\n    primes[8] = 1\n    primes[9] = 1\n    primes[10] = 1\n\
    \    primes[11] = 1\n    primes[12] = 1\n    primes[13] = 1\n    primes[14] =\
    \ 1\n    primes[15] = 1\n    primes[16] = 1\n    primes[17] = 1\n    primes[18]\
    \ = 1\n    primes[19] = 1\n    primes[20] = 1\n    primes[21] = 1\n    primes[22]\
    \ = 1\n    primes[23] = 1\n    primes[24] = 1\n    primes[25] = 1\n    primes[26]\
    \ = 1\n    primes[27] = 1\n    primes[28] = 1\n    primes[29] = 1\n    primes[30]\
    \ = 1\n    primes[31] = 1\n    primes[32] = 1\n    primes[33] = 1\n    primes[34]\
    \ = 1\n    primes[35] = 1\n    primes[36] = 1\n    primes[37] = 1\n    primes[38]\
    \ = 1\n    primes[39] = 1\n    primes[40] = 1\n    primes[41] = 1\n    primes[42]\
    \ = 1\n    primes[43] = 1\n    primes[44] = 1\n    primes[45] = 1\n    primes[46]\
    \ = 1\n    primes[47] = 1\n    primes[48] = 1\n    primes[49] = 1\n    primes[50]\
    \ = 1\n    primes[51] = 1\n    primes[52] = 1\n    primes[53] = 1\n    primes[54]\
    \ = 1\n    primes[55] = 1\n    primes[56] = 1\n    primes[57] = 1\n    primes[58]\
    \ = 1\n    primes[59] = 1\n    primes[60] = 1\n    primes[61] = 1\n    primes[62]\
    \ = 1\n    primes[63] = 1\n    primes[64] = 1\n    primes[65] = 1\n    primes[66]\
    \ = 1\n    primes[67] = 1\n    primes[68] = 1\n    primes[69] = 1\n    primes[70]\
    \ = 1\n    primes[71] = 1\n    primes[72] = 1\n    primes[73] = 1\n    primes[74]\
    \ = 1\n    primes[75] = 1\n    primes[76] = 1\n    primes[77] = 1\n    primes[78]\
    \ = 1\n    primes[79] = 1\n    primes[80] = 1\n    primes[81] = 1\n    ", "  \
    \  prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if i == j {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    prime := make([]int, 0)\n    for i := 2; i <= n; i++\
    \ {\n        if isPrime(i) {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    for i := 3; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if i == j {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    prime := make([]int, n)\n    prime[0] = prime[1] =\
    \ 1\n    for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n        \
    \    if prime[j] == 0 {\n                for k := j; k < i; k++ {\n          \
    \          if prime[k] == 0 {\n                        prime[j] = prime[k]\n \
    \                       prime[j+1]++\n                        break\n        \
    \            }\n                }\n            }\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    for i := 2; i <= n; i++ {\n \
    \       if isprime(i) {\n            prime = append(prime, i)\n        }\n   \
    \ }\n    return prime\n}\n", "    primes := make([]int, n+1)\n    primes[0] =\
    \ 1\n    primes[1] = 1\n    for i := 2; i <= n; i++ {\n        for j := 2; j <\
    \ i; j++ {\n            if i%j == 0 {\n                break\n            }\n\
    \        }\n        if j > i {\n            primes[i+1] = i\n        }\n    }\n\
    \    return primes[:n]\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    prime := append(prime, 5)\n    prime\
    \ := append(prime, 7)\n    prime := append(prime, 11)\n    prime := append(prime,\
    \ 13)\n    prime := append(prime, 17)\n    prime := append(prime, 19)\n    prime\
    \ := append(prime, 29)\n    prime := append(prime, 31)\n    prime := append(prime,\
    \ 37)\n    prime := append(prime, 43)\n    prime := append(prime, 49)\n    prime\
    \ := append(prime, 57)\n    prime := append(prime, 61)\n    prime := append(prime,\
    \ 67)\n    prime := append(prime, 73)\n    prime := append(prime, 79)\n    prime\
    \ := append(prime, 83)\n    prime := append(prime, 89)\n    prime := append(prime,\
    \ 97)\n    prime := append(prime, 101)\n    prime := append(prime, 103)\n    prime\
    \ := append(prime, 107)\n    prime := append(prime, 109)\n    prime := append(prime,\
    \ 113)\n    prime := append(prime, 127)\n    prime := append(prime, 131)\n   \
    \ prime := append(prime, 137)\n    prime := append(prime, 139)\n    prime := append(prime,\
    \ 149)\n    prime := append(prime, 151)\n    prime := append(prime, 157)\n   \
    \ prime := append(prime, 163)\n    prime := append(prime, 167)\n    prime := append(prime,\
    \ 173)\n    prime := append(prime, 179)\n    prime := append(prime, 181)\n   \
    \ prime := append(prime, 191)\n    prime := append(prime, 193)\n    prime := append(prime,\
    \ 197)\n    prime := append(prime, 199)\n    prime := append(prime, 211)\n   \
    \ prime := append(prime, 223)\n    prime := append(prime, 227)\n    prime := append(prime,\
    \ 229)\n    prime := append(prime, 233)\n    prime := append(prime, 239)\n   \
    \ prime := append(prime, 241)\n    prime := append(prime, 251)\n    prime := append(prime,\
    \ 257)\n    prime := append(prime, 263)\n    prime := append(prime, 269)\n   \
    \ prime := append(prime, 271)\n    prime := append(prime, 277)\n    prime := append(prime,\
    \ 281)\n    prime := append(prime, ", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    for i := 3; i < n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i%j == 0 {\n                break\n            }\n   \
    \     }\n        if j > i {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n \
    \           }\n        }\n        if j > i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    for i := 3; i <= n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i%j == 0 {\n                break\n        \
    \    }\n        }\n        if i == j {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    for i := 3; i < n; i++ {\n        if prime[prime[len(prime)-1]-1]\
    \ == i {\n            prime = append(prime, i)\n        } else {\n           \
    \ prime = append(prime, i+1)\n        }\n    }\n    return prime\n}\n", "    prime\
    \ := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if j == i {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    for i := 3; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i%j == 0 {\n                break\n            }\n        }\n      \
    \  if j > i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i % j == 0 {\n                break\n      \
    \      }\n        }\n        if j > i {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n;\
    \ i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n     \
    \           break\n            }\n        }\n        if j > i {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n\
    \    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime := append(prime,\
    \ 11)\n    prime := append(prime, 13)\n    prime := append(prime, 17)\n    prime\
    \ := append(prime, 19)\n    prime := append(prime, 29)\n    prime := append(prime,\
    \ 31)\n    prime := append(prime, 37)\n    prime := append(prime, 43)\n    prime\
    \ := append(prime, 49)\n    prime := append(prime, 57)\n    prime := append(prime,\
    \ 61)\n    prime := append(prime, 67)\n    prime := append(prime, 73)\n    prime\
    \ := append(prime, 79)\n    prime := append(prime, 83)\n    prime := append(prime,\
    \ 89)\n    prime := append(prime, 97)\n    prime := append(prime, 101)\n    prime\
    \ := append(prime, 103)\n    prime := append(prime, 107)\n    prime := append(prime,\
    \ 109)\n    prime := append(prime, 113)\n    prime := append(prime, 127)\n   \
    \ prime := append(prime, 131)\n    prime := append(prime, 137)\n    prime := append(prime,\
    \ 139)\n    prime := append(prime, 149)\n    prime := append(prime, 151)\n   \
    \ prime := append(prime, 157)\n    prime := append(prime, 163)\n    prime := append(prime,\
    \ 167)\n    prime := append(prime, 173)\n    prime := append(prime, 179)\n   \
    \ prime := append(prime, 181)\n    prime := append(prime, 191)\n    prime := append(prime,\
    \ 193)\n    prime := append(prime, 197)\n    prime := append(prime, 199)\n   \
    \ prime := append(prime, 211)\n    prime := append(prime, 223)\n    prime := append(prime,\
    \ 227)\n    prime := append(prime, 229)\n    prime := append(prime, 233)\n   \
    \ prime := append(prime, 239)\n    prime := append(prime, 241)\n    prime := append(prime,\
    \ 251)\n    prime := append(prime, 257)\n    prime := append(prime, 263)\n   \
    \ prime := append(prime, 269)\n    prime := append(prime, 271)\n    prime := append(prime,\
    \ 277)\n    prime := append(prime, 281)\n    prime := append(prime, ", "    prime\
    \ := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++\
    \ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n           \
    \     break\n            }\n        }\n        if i == j {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n\
    \    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n           \
    \ if i % j == 0 {\n                break\n            }\n        }\n        if\
    \ j > i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i%j == 0 {\n                break\n        \
    \    }\n        }\n        if i == j {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    if n < 2 {\n        return []int{}\n\
    \    }\n\n    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime\
    \ := append(prime, 3)\n    prime := append(prime, 5)\n    prime := append(prime,\
    \ 7)\n    prime := append(prime, 11)\n    prime := append(prime, 13)\n    prime\
    \ := append(prime, 17)\n    prime := append(prime, 19)\n\n    for i := 5; i <=\
    \ n; i++ {\n        if prime[i-1] == 0 {\n            prime = append(prime, i)\n\
    \        }\n    }\n\n    return prime\n}\n", "    primes := make([]int, n+1)\n\
    \    primes[0] = 1\n    for i := 2; i <= n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i%j == 0 {\n                break\n            }\n   \
    \     }\n        if j > i {\n            primes[i] = j\n        }\n    }\n   \
    \ return primes[:n]\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n \
    \           }\n        }\n        if j == i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if j > i {\n       \
    \     prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "  \
    \  prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <\
    \ n; i++ {\n        for _, j := range prime {\n            if i%j == 0 {\n   \
    \             break\n            }\n        }\n        if i == n {\n         \
    \   prime = append(prime, n)\n        }\n    }\n    return prime\n}\n", "    prime\
    \ := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++\
    \ {\n        if prime[len(prime)-1] != i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    for i := 3; i <= n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i % j == 0 {\n                break\n      \
    \      }\n        }\n        if i == j {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 29)\n    prime := append(prime, 31)\n    prime\
    \ := append(prime, 37)\n    prime := append(prime, 43)\n    prime := append(prime,\
    \ 49)\n    prime := append(prime, 57)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 73)\n    prime := append(prime,\
    \ 79)\n    prime := append(prime, 83)\n    prime := append(prime, 89)\n    prime\
    \ := append(prime, 97)\n    prime := append(prime, 101)\n    prime := append(prime,\
    \ 103)\n    prime := append(prime, 107)\n    prime := append(prime, 109)\n   \
    \ prime := append(prime, 113)\n    prime := append(prime, 127)\n    prime := append(prime,\
    \ 131)\n    prime := append(prime, 137)\n    prime := append(prime, 139)\n   \
    \ prime := append(prime, 149)\n    prime := append(prime, 151)\n    prime := append(prime,\
    \ 157)\n    prime := append(prime, 163)\n    prime := append(prime, 167)\n   \
    \ prime := append(prime, 173)\n    prime := append(prime, 179)\n    prime := append(prime,\
    \ 181)\n    prime := append(prime, 191)\n    prime := append(prime, 193)\n   \
    \ prime := append(prime, 197)\n    prime := append(prime, 199)\n    prime := append(prime,\
    \ 211)\n    prime := append(prime, 223)\n    prime := append(prime, 227)\n   \
    \ prime := append(prime, 229)\n    prime := append(prime, 233)\n    prime := append(prime,\
    \ 239)\n    prime := append(prime, 241)\n    prime := append(prime, 251)\n   \
    \ prime := append(prime, 257)\n    prime := append(prime, 263)\n    prime := append(prime,\
    \ 269)\n    prime := append(prime, 271)\n    prime := append(prime, 277)\n   \
    \ prime := append(prime, 281)\n    prime := append(prime, ", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime\
    \ := append(prime, 5)\n    prime := append(prime, 7)\n    prime := append(prime,\
    \ 11)\n    prime := append(prime, 13)\n    prime := append(prime, 17)\n    prime\
    \ := append(prime, 19)\n    if n < 0 {\n        return nil\n    }\n    if n ==\
    \ 0 {\n        return nil\n    }\n    if n > 0 {\n        for i := 3; i <= n;\
    \ i++ {\n            if n % i == 0 {\n                prime = append(prime, i)\n\
    \            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i\
    \ := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j\
    \ == 0 {\n                break\n            }\n        }\n        if j > i {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[len(prime)-1]-1]\
    \ == i {\n            prime = append(prime, i)\n        } else {\n           \
    \ prime = append(prime, i+1)\n        }\n    }\n    return prime\n}\n", "    prime\
    \ := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <= n; i++\
    \ {\n        for _, j := range prime {\n            if i%j == 0 {\n          \
    \      break\n            }\n        }\n        if i == n {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 1;\
    \ j < i; j++ {\n            if prime[j-1] != 0 {\n                break\n    \
    \        }\n            if i%prime[j] == 0 {\n                prime = append(prime,\
    \ i)\n                break\n            }\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i :=\
    \ 3; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j ==\
    \ 0 {\n                break\n            }\n        }\n        if j > i {\n \
    \           prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if j > i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    for i := 2; i < n; i++ {\n  \
    \      if n%i == 0 {\n            prime = append(prime, i)\n        }\n    }\n\
    \    return prime\n}\n", "    prime := make([]int, 0)\n    for i := 2; i < n;\
    \ i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n       \
    \         break\n            }\n        }\n        if i == j {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n\
    \    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n           \
    \ if i % j == 0 {\n                break\n            }\n        }\n        if\
    \ j == i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n\
    \        if prime[prime[0]-1] == 0 {\n            prime = append(prime, i)\n \
    \       }\n        for j := 0; j < i; j++ {\n            if prime[j] == 0 {\n\
    \                prime = append(prime, j)\n            }\n        }\n    }\n \
    \   return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    for i := 4; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n \
    \           }\n        }\n        if j > i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if j == i {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i\
    \ < n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if j > i {\n       \
    \     prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "  \
    \  prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 1;\
    \ j < i; j++ {\n            if prime[j-1] == 0 {\n                prime = append(prime,\
    \ j)\n            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime\
    \ := append(prime, 5)\n    prime := append(prime, 7)\n    prime := append(prime,\
    \ 11)\n    prime := append(prime, 13)\n    prime := append(prime, 17)\n    prime\
    \ := append(prime, 19)\n    prime := append(prime, 29)\n    prime := append(prime,\
    \ 31)\n    prime := append(prime, 37)\n    prime := append(prime, 43)\n    prime\
    \ := append(prime, 59)\n    prime := append(prime, 61)\n    prime := append(prime,\
    \ 67)\n    prime := append(prime, 73)\n    prime := append(prime, 79)\n    prime\
    \ := append(prime, 83)\n    prime := append(prime, 89)\n    prime := append(prime,\
    \ 97)\n    prime := append(prime, 101)\n    prime := append(prime, 103)\n    prime\
    \ := append(prime, 107)\n    prime := append(prime, 109)\n    prime := append(prime,\
    \ 113)\n    prime := append(prime, 127)\n    prime := append(prime, 131)\n   \
    \ prime := append(prime, 137)\n    prime := append(prime, 139)\n    prime := append(prime,\
    \ 149)\n    prime := append(prime, 151)\n    prime := append(prime, 157)\n   \
    \ prime := append(prime, 163)\n    prime := append(prime, 167)\n    prime := append(prime,\
    \ 173)\n    prime := append(prime, 179)\n    prime := append(prime, 181)\n   \
    \ prime := append(prime, 191)\n    prime := append(prime, 193)\n    prime := append(prime,\
    \ 197)\n    prime := append(prime, 199)\n    prime := append(prime, 211)\n   \
    \ prime := append(prime, 223)\n    prime := append(prime, 227)\n    prime := append(prime,\
    \ 229)\n    prime := append(prime, 233)\n    prime := append(prime, 239)\n   \
    \ prime := append(prime, 241)\n    prime := append(prime, 251)\n    prime := append(prime,\
    \ 257)\n    prime := append(prime, 263)\n    prime := append(prime, 269)\n   \
    \ prime := append(prime, 271)\n    prime := append(prime, 277)\n    prime := append(prime,\
    \ 281)\n    prime := append(prime, 283)\n    prime := append(prime, ", "    prime\
    \ := make([]int, n)\n    prime[0] = prime[1] = 1\n    for i := 2; i < n; i++ {\n\
    \        for j := 2; j < i; j++ {\n            if prime[j] == 0 {\n          \
    \      for k := j; k < i; k++ {\n                    prime[k] = i\n          \
    \      }\n                break\n            }\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime :=\
    \ append(prime, 3)\n    prime := append(prime, 5)\n    prime := append(prime,\
    \ 7)\n    prime := append(prime, 11)\n    prime := append(prime, 13)\n    prime\
    \ := append(prime, 17)\n    prime := append(prime, 19)\n    prime := append(prime,\
    \ 29)\n    prime := append(prime, 31)\n    prime := append(prime, 37)\n    prime\
    \ := append(prime, 43)\n    prime := append(prime, 49)\n    prime := append(prime,\
    \ 57)\n    prime := append(prime, 61)\n    prime := append(prime, 67)\n    prime\
    \ := append(prime, 73)\n    prime := append(prime, 79)\n    prime := append(prime,\
    \ 83)\n    prime := append(prime, 89)\n    prime := append(prime, 97)\n    prime\
    \ := append(prime, 101)\n    prime := append(prime, 103)\n    prime := append(prime,\
    \ 107)\n    prime := append(prime, 109)\n    prime := append(prime, 113)\n   \
    \ prime := append(prime, 127)\n    prime := append(prime, 131)\n    prime := append(prime,\
    \ 137)\n    prime := append(prime, 139)\n    prime := append(prime, 149)\n   \
    \ prime := append(prime, 151)\n    prime := append(prime, 157)\n    prime := append(prime,\
    \ 163)\n    prime := append(prime, 167)\n    prime := append(prime, 173)\n   \
    \ prime := append(prime, 179)\n    prime := append(prime, 181)\n    prime := append(prime,\
    \ 191)\n    prime := append(prime, 193)\n    prime := append(prime, 197)\n   \
    \ prime := append(prime, 199)\n    prime := append(prime, 211)\n    prime := append(prime,\
    \ 223)\n    prime := append(prime, 227)\n    prime := append(prime, 229)\n   \
    \ prime := append(prime, 233)\n    prime := append(prime, 239)\n    prime := append(prime,\
    \ 241)\n    prime := append(prime, 251)\n    prime := append(prime, 257)\n   \
    \ prime := append(prime, 263)\n    prime := append(prime, 269)\n    prime := append(prime,\
    \ 271)\n    prime := append(prime, 277)\n    prime := append(prime, 281)\n   \
    \ prime := append(prime, ", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n \
    \           }\n        }\n        if j > i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i%j == 0 {\n                break\n        \
    \    }\n        }\n        if i == j {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    for i := 3; i <= n; i++ {\n        for j := 2; j <\
    \ i; j++ {\n            if i % j == 0 {\n                break\n            }\n\
    \        }\n        if j == i {\n            prime = append(prime, i)\n      \
    \  }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    for i :=\
    \ 2; i < n; i++ {\n        if n%i == 0 {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n;\
    \ i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n     \
    \           break\n            }\n        }\n        if j > i {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <= n; i++ {\n\
    \        for j := 2; j < i; j++ {\n            if i%j == 0 {\n               \
    \ break\n            }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    if n < 2 {\n        return\
    \ []int{}\n    }\n\n    result := make([]int, 0, n)\n    prime := make([]bool,\
    \ len(primes))\n    for i := 0; i < len(primes); i++ {\n        prime[i] = true\n\
    \    }\n\n    for i := 2; i < n; i++ {\n        if prime[i] {\n            for\
    \ j := i * i; j < n; j += i {\n                prime[j] = false\n            }\n\
    \        }\n    }\n\n    for i := 2; i < n; i++ {\n        if prime[i] {\n   \
    \         result = append(result, i)\n        }\n    }\n\n    return result\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i :=\
    \ 3; i < n; i++ {\n        for _, j := range prime {\n            if i%j == 0\
    \ {\n                break\n            }\n        }\n        if i == n {\n  \
    \          prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 49)\n    prime := append(prime, 57)\n    prime\
    \ := append(prime, 61)\n    prime := append(prime, 67)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 251)\n    prime := append(prime, 257)\n    prime := append(prime,\
    \ 263)\n    prime := append(prime, 269)\n    prime := append(prime, 271)\n   \
    \ prime := append(prime, 277)\n    prime := append(prime, 281)\n    prime := append(prime, ",
  "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i < n; i++ {\n        for j := 2; j < i; j++ {\n       \
    \     if i%j == 0 {\n                break\n            }\n        }\n       \
    \ if i == j {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   for i := 3; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i % j == 0 {\n                break\n            }\n        }\n        if j\
    \ > i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n       \
    \ if prime[prime[0]-1] == 0 {\n            prime = append(prime, i)\n        }\n\
    \        for j := 1; j < i; j++ {\n            if i%prime[j] == 0 {\n        \
    \        break\n            }\n        }\n    }\n    return prime\n}\n", "   \
    \ prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <=\
    \ n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n  \
    \              break\n            }\n        }\n        if i == j {\n        \
    \    prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "   \
    \ prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[len(prime)-1]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 0;\
    \ j < i; j++ {\n            if i%prime[j] == 0 {\n                break\n    \
    \        }\n            if j == len(prime)-1 {\n                prime = append(prime,\
    \ i)\n            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    for i := 3; i <= n; i++ {\n        if\
    \ isPrime(i) {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   for i := 3; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i%j == 0 {\n                break\n            }\n        }\n        if i ==\
    \ j {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i :=\
    \ 3; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0\
    \ {\n                break\n            }\n        }\n        if j > i {\n   \
    \         prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <\
    \ n; i++ {\n        for _, j := range prime {\n            if j%i == 0 {\n   \
    \             break\n            }\n            if i == j {\n                prime\
    \ = append(prime, i)\n                break\n            }\n        }\n    }\n\
    \    return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    prime := append(prime, 5)\n    prime\
    \ := append(prime, 7)\n    prime := append(prime, 11)\n    prime := append(prime,\
    \ 13)\n    prime := append(prime, 17)\n    prime := append(prime, 19)\n    prime\
    \ := append(prime, 29)\n    prime := append(prime, 31)\n    prime := append(prime,\
    \ 37)\n    prime := append(prime, 43)\n    prime := append(prime, 59)\n    prime\
    \ := append(prime, 61)\n    prime := append(prime, 67)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 251)\n    prime := append(prime, 257)\n    prime := append(prime,\
    \ 263)\n    prime := append(prime, 269)\n    prime := append(prime, 271)\n   \
    \ prime := append(prime, 277)\n    prime := append(prime, 281)\n    prime := append(prime,\
    \ 283)\n    prime := append(prime, ", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    for i := 3; i < n; i++ {\n        for _, j := range\
    \ prime {\n            if i%j == 0 {\n                break\n            }\n \
    \           if j > i {\n                break\n            }\n            prime\
    \ = append(prime, j)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n\
    \        for j := 2; j < i; j++ {\n            if i%j == 0 {\n               \
    \ break\n            }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    for i := 3; i <= n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i % j == 0 {\n                break\n      \
    \      }\n        }\n        if j > i {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    if n < 2 {\n        return []\n\
    \    }\n    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n       \
    \ if prime[prime[len(prime)-1]-1] != i {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n;\
    \ i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n     \
    \           break\n            }\n        }\n        if j > i {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n\
    \    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n           \
    \ if i % j == 0 {\n                break\n            }\n        }\n        if\
    \ j == i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    for i := 2; i < n; i++ {\n  \
    \      if isPrime(i) {\n            prime = append(prime, i)\n        }\n    }\n\
    \    return prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i <\
    \ n; i++ {\n        if prime[prime[0]-1] == 0 {\n            prime = append(prime,\
    \ i)\n        }\n        for j := 0; j < i; j++ {\n            if prime[j] ==\
    \ 0 {\n                prime = append(prime, j)\n                break\n     \
    \       }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime\
    \ := append(prime, 5)\n    prime := append(prime, 7)\n    prime := append(prime,\
    \ 11)\n    prime := append(prime, 13)\n    prime := append(prime, 17)\n    prime\
    \ := append(prime, 19)\n    if n < 0 {\n        return nil\n    }\n    for i :=\
    \ 3; i <= n; i++ {\n        if prime[i] == true {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 29)\n    prime := append(prime, 31)\n    prime\
    \ := append(prime, 37)\n    prime := append(prime, 43)\n    prime := append(prime,\
    \ 49)\n    prime := append(prime, 57)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 73)\n    prime := append(prime,\
    \ 79)\n    prime := append(prime, 83)\n    prime := append(prime, 89)\n    prime\
    \ := append(prime, 97)\n    prime := append(prime, 101)\n    prime := append(prime,\
    \ 103)\n    prime := append(prime, 107)\n    prime := append(prime, 109)\n   \
    \ prime := append(prime, 113)\n    prime := append(prime, 127)\n    prime := append(prime,\
    \ 131)\n    prime := append(prime, 137)\n    prime := append(prime, 139)\n   \
    \ prime := append(prime, 149)\n    prime := append(prime, 151)\n    prime := append(prime,\
    \ 157)\n    prime := append(prime, 163)\n    prime := append(prime, 167)\n   \
    \ prime := append(prime, 173)\n    prime := append(prime, 179)\n    prime := append(prime,\
    \ 181)\n    prime := append(prime, 191)\n    prime := append(prime, 193)\n   \
    \ prime := append(prime, 197)\n    prime := append(prime, 199)\n    prime := append(prime,\
    \ 211)\n    prime := append(prime, 223)\n    prime := append(prime, 227)\n   \
    \ prime := append(prime, 229)\n    prime := append(prime, 233)\n    prime := append(prime,\
    \ 239)\n    prime := append(prime, 241)\n    prime := append(prime, 243)\n   \
    \ prime := append(prime, 247)\n    prime := append(prime, 251)\n    prime := append(prime,\
    \ 257)\n    prime := append(prime, 263)\n    prime := append(prime, 269)\n   \
    \ prime := append(prime, 271)\n    prime := append(prime, ", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i\
    \ := 4; i <= n; i++ {\n        if i%2 == 0 {\n            continue\n        }\n\
    \        for j := 3; j < i; j++ {\n            if i%j == 0 {\n               \
    \ break\n            }\n            if j%i == 0 {\n                prime = append(prime,\
    \ j)\n                break\n            }\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime :=\
    \ append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i % j == 0 {\n                break\n            }\n \
    \       }\n        if j > i {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n \
    \           }\n        }\n        if j > i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    for i := 2; i < n; i++ {\n        if prime[prime[len(prime)-1]-1] < i {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    for i := 2; i <= n; i++ {\n        if i%2 == 0\
    \ {\n            continue\n        }\n        for j := 3; j < i; j++ {\n     \
    \       if i%j == 0 {\n                break\n            }\n        }\n     \
    \   if j > i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   prime := append(prime, 3)\n    for i := 4; i < n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i % j == 0 {\n                break\n      \
    \      }\n        }\n        if j > i {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 23)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 49)\n    prime := append(prime, 57)\n    prime\
    \ := append(prime, 61)\n    prime := append(prime, 67)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 243)\n    prime := append(prime, 247)\n    prime := append(prime,\
    \ 251)\n    prime := append(prime, 257)\n    prime := append(prime, 263)\n   \
    \ prime := append(prime, 269)\n    prime := append(prime, 27", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime\
    \ := append(prime, 5)\n    prime := append(prime, 7)\n    prime := append(prime,\
    \ 11)\n    prime := append(prime, 13)\n    prime := append(prime, 17)\n    prime\
    \ := append(prime, 19)\n    if n <= 0 {\n        return nil\n    }\n    for i\
    \ := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j\
    \ == 0 {\n                break\n            }\n        }\n        if j > i {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if j == i {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n \
    \           }\n        }\n        if j == i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    for i := 3; i <= n; i++ {\n        if i%2\
    \ == 0 {\n            continue\n        }\n        for j := 3; j*j <= i; j++ {\n\
    \            if i%j == 0 {\n                prime = append(prime, i)\n       \
    \         break\n            }\n        }\n    }\n    return prime\n}\n", "  \
    \  prime := make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i%j == 0 {\n                break\n        \
    \    }\n        }\n        if i == n {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   for i := 2; i < n; i++ {\n        if prime[prime[0]-1] == 0 {\n          \
    \  prime = append(prime, i)\n        }\n        for j := 0; j < i; j++ {\n   \
    \         if prime[j] == 0 {\n                prime = append(prime, j)\n     \
    \       }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n        for\
    \ _, j := range prime {\n            if i%j == 0 {\n                break\n  \
    \          }\n        }\n        if i == n {\n            prime = append(prime,\
    \ n)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    for i := 3; i <= n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i % j == 0 {\n                break\n      \
    \      }\n        }\n        if j > i {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    for i := 3; i < n; i++ {\n        if prime[prime[len(prime)-1]-1]\
    \ == i {\n            prime = append(prime, i)\n        } else {\n           \
    \ prime = append(prime, i+1)\n        }\n    }\n    return prime\n}\n", "    prime\
    \ := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if i == j {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    prime := make([]int, n)\n    for i := 0; i < n; i++\
    \ {\n        prime[i] = i\n    }\n    for i := 1; i < n; i++ {\n        for j\
    \ := 1; j < i; j++ {\n            if prime[j] >= i {\n                break\n\
    \            }\n            if prime[j] == i {\n                prime[j] = i\n\
    \                break\n            }\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if j > i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
