name: HumanEval_56_correct_bracketing
language: go_test.go
prompt: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
  )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
  <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
  \ string) bool {\n"
tests: "func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n    \
  \ { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
  <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
  ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n\
  \     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
  <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false },\n\
  \     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
  <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
  \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    brackets = strings.Trim(brackets, \">\")\n    brackets = strings.Trim(brackets,\
    \ \"<\")\n    brackets = strings.Trim(brackets, \">>\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\", -1)\n\
    \    return brackets == \"<<><>>\"\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    openingBrackets := make([]string, 0)\n    closingBrackets := make([]string,\
    \ 0)\n    for _, char := range brackets {\n        if char == \">\" {\n      \
    \      closingBrackets = append(closingBrackets, char)\n        } else {\n   \
    \         openingBrackets = append(openingBrackets, char)\n        }\n    }\n\
    \    if len(openingBrackets) != len(closingBrackets) {\n        return false\n\
    \    }\n    for i := 0; i < len(openingBrackets); i++ {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n  \
    \  brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    brackets = strings.TrimSpace(brackets)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for c := range openingBrackets {\n        if !closingBrackets[c] {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n  \
    \  brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        openingBrackets[c] = true\n    }\n    for _, c := range brackets\
    \ {\n        closingBrackets[c] = true\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[rune]bool)\n    closingBrackets := make(map[rune]bool)\n    for\
    \ _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "    brackets = strings.TrimSpace(brackets)\n  \
    \  if len(brackets) == 0 {\n        return false\n    }\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \"<\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets :=\
    \ make(map[string]bool)\n    for _, c := range brackets {\n        if c == '<'\
    \ {\n            openingBrackets[c] = true\n        } else {\n            closingBrackets[c]\
    \ = true\n        }\n    }\n    for c := range openingBrackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[rune]bool)\n    closingBrackets := make(map[rune]bool)\n    for\
    \ _, c := range brackets {\n        openingBrackets[c] = true\n    }\n    for\
    \ _, c := range brackets {\n        closingBrackets[c] = true\n    }\n    for\
    \ _, c := range brackets {\n        if !openingBrackets[c] {\n            return\
    \ false\n        }\n        if !closingBrackets[c] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    stacks := make([][]bool, len(brackets))\n\
    \    for i := range brackets {\n        stacks[i] = make([]bool, len(brackets))\n\
    \    }\n    stacks[0][0] = true\n    stacks[len(brackets)-1][len(brackets)-1]\
    \ = true\n    for i := range brackets {\n        if brackets[i] == '<' {\n   \
    \         stacks[i][len(brackets)-1] = true\n        } else {\n            stacks[i][len(brackets)-1]\
    \ = false\n        }\n    }\n    for i := range stacks {\n        for j := range\
    \ stacks[i] {\n            if stacks[i][j] != stacks[i-1][j] {\n             \
    \   return false\n            }\n        }\n    }\n    return true\n}\n", "  \
    \  stack, _ := bracketStack(brackets)\n    return len(stack) == 0\n}\n", "   \
    \ brackets = brackets[1 : len(brackets)-1]\n    openingBrackets := make([]int,\
    \ len(brackets))\n    closingBrackets := make([]int, len(brackets))\n    i :=\
    \ 0\n    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[i]\
    \ = 1\n            i++\n        } else if c == '>' {\n            closingBrackets[len(openingBrackets)-i-1]\
    \ = 1\n            i++\n        } else {\n            return false\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[len(openingBrackets)-i-1]\
    \ {\n            return false\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !closingBrackets[len(openingBrackets)-i] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n  \
    \  brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n", "    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n   \
    \ brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace", "    brackets = brackets[1\
    \ : len(brackets)-1]\n    openingBrackets := make([]int, len(brackets))\n    closingBrackets\
    \ := make([]int, len(brackets))\n    for i := 0; i < len(brackets); i++ {\n  \
    \      switch brackets[i] {\n        case \"<\":\n            openingBrackets[i]\
    \ = 1\n        case \"<=\":\n            openingBrackets[i] = 2\n        case\
    \ \"=\":\n            openingBrackets[i] = 3\n        case \">\":\n          \
    \  closingBrackets[i] = 1\n        case \">=\":\n            closingBrackets[i]\
    \ = 2\n        case \"=\":\n            closingBrackets[i] = 3\n        default:\n\
    \            return false\n        }\n    }\n    for i := 0; i < len(openingBrackets);\
    \ i++ {\n        if openingBrackets[i] != closingBrackets[i] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    for _, c := range brackets {\n        if\
    \ c != \">\" && c != \"<\" {\n            return false\n        }\n    }\n   \
    \ return true\n}\n", "    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for c := range openingBrackets {\n        if !closingBrackets[c] {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n    }\n    for _, c := range brackets {\n        if\
    \ !closingBrackets[c] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = strings.TrimSpace(brackets)\n    brackets\
    \ = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"\")\n    brackets = strings.Replace(brackets, \">\", \"\")\n    brackets\
    \ = strings.Replace(brackets, \"<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \">>>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n \
    \   brackets = strings.Replace(brackets, \">>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \">>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \">>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \">>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \">>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \">>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \">>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \">>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \">>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \">>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \">>\", \"\")\n    brackets = strings.Replace(bracket",
  "    brackets = strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(b", "    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, c\
    \ := range brackets {\n        if c == '<' {\n            openingBrackets = append(openingBrackets,\
    \ c)\n        } else {\n            closingBrackets = append(closingBrackets,\
    \ c)\n        }\n    }\n    if len(openingBrackets) != len(closingBrackets) {\n\
    \        return false\n    }\n    for i := 0; i < len(openingBrackets); i++ {\n\
    \        if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        switch c {\n        case '<':\n            openingBrackets[c] = true\n\
    \        case '>':\n            closingBrackets[c] = true\n        }\n    }\n\
    \    for _, c := range brackets {\n        if !openingBrackets[c] {\n        \
    \    return false\n        }\n        if !closingBrackets[c] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace",
  "    brackets = brackets[0 : len(brackets)-1]\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    stacks := make([][]bool, len(brackets))\n\
    \    for i := 0; i < len(brackets); i++ {\n        stacks[i] = make([]bool, len(brackets))\n\
    \    }\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<'\
    \ {\n            stacks[i][0]++\n        } else if brackets[i] == '>' {\n    \
    \        stacks[i][1]++\n        } else {\n            return false\n        }\n\
    \    }\n    for i := 0; i < len(brackets); i++ {\n        if stacks[i][0] != stacks[i][1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for c := range openingBrackets {\n        if !closingBrackets[c] {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[0 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n  \
    \  brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    ", "    stack, _ := bracketStack(brackets)\n\
    \    return len(stack) == 0\n}\n", "    openingBrackets := make([]string, 0)\n\
    \    closingBrackets := make([]string, 0)\n    for _, c := range brackets {\n\
    \        if c == '<' {\n            openingBrackets = append(openingBrackets,\
    \ c)\n        } else {\n            closingBrackets = append(closingBrackets,\
    \ c)\n        }\n    }\n    if len(openingBrackets) != len(closingBrackets) {\n\
    \        return false\n    }\n    for i := 0; i < len(openingBrackets); i++ {\n\
    \        if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, char := range brackets {\n        if char\
    \ == '<' {\n            openingBrackets[char] = true\n        } else {\n     \
    \       closingBrackets[char] = true\n        }\n    }\n    for _, char := range\
    \ brackets {\n        if !openingBrackets[char] {\n            return false\n\
    \        }\n    }\n    for _, char := range brackets {\n        if !closingBrackets[char]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, char := range brackets {\n        if char == '<' {\n            openingBrackets[char]\
    \ = true\n        } else {\n            closingBrackets[char] = true\n       \
    \ }\n    }\n    for _, char := range brackets {\n        if !openingBrackets[char]\
    \ {\n            return false\n        }\n    }\n    for _, char := range brackets\
    \ {\n        if !closingBrackets[char] {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    brackets = brackets[0 : len(brackets)-1]\n\
    \    openingBrackets := make([]int, len(brackets))\n    closingBrackets := make([]int,\
    \ len(brackets))\n    for i := range brackets {\n        if brackets[i] == '<'\
    \ {\n            openingBrackets[i] = 1\n        } else {\n            openingBrackets[i]\
    \ = 0\n        }\n    }\n    for i := range brackets {\n        if brackets[i]\
    \ == '>' {\n            closingBrackets[i] = 1\n        } else {\n           \
    \ closingBrackets[i] = 0\n        }\n    }\n    for i := range openingBrackets\
    \ {\n        if openingBrackets[i] == closingBrackets[i] {\n            continue\n\
    \        }\n        return false\n    }\n    return true\n}\n", "    brackets\
    \ = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n        if !closingBrackets[c] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for c := range openingBrackets {\n        if !closingBrackets[c] {\n       \
    \     return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = strings.TrimSpace(brackets)\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"><\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", ", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for c := range openingBrackets {\n        if !closingBrackets[c] {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    brackets\
    \ = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets, \"<\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets =\
    \ strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n \
    \   brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets =\
    \ strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n \
    \   brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\", \"\", ", " \
    \   openingBrackets := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n\
    \    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for c := range openingBrackets {\n        if !closingBrackets[c] {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n  \
    \  brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for c := range\
    \ openingBrackets {\n        if !closingBrackets[c] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, char := range brackets\
    \ {\n        if char == '<' {\n            openingBrackets[char] = true\n    \
    \    } else {\n            closingBrackets[char] = true\n        }\n    }\n  \
    \  for _, char := range brackets {\n        if !openingBrackets[char] {\n    \
    \        return false\n        }\n        if !closingBrackets[char] {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[rune]bool)\n    closingBrackets := make(map[rune]bool)\n    for\
    \ _, r := range brackets {\n        if r == '<' {\n            openingBrackets[r]\
    \ = true\n        } else {\n            closingBrackets[r] = true\n        }\n\
    \    }\n    for _, r := range brackets {\n        if !openingBrackets[r] {\n \
    \           return false\n        }\n        if !closingBrackets[r] {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for c := range openingBrackets {\n        if !closingBrackets[c] {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    brackets\
    \ = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets, \"<\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    brackets = strings.TrimSpace(brackets)\n\
    \    if len(brackets) == 0 {\n        return false\n    }\n    brackets = brackets[1\
    \ : len(brackets)-1]\n    for _, c := range brackets {\n        if c != \">\"\
    \ && c != \"<\" {\n            return false\n        }\n    }\n    return true\n\
    }\n", "    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace", "    openingBrackets :=\
    \ make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n    for\
    \ _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"<\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<", "    stack,\
    \ _ := bracketStack(brackets)\n    return len(stack) == 0\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    stack,\
    \ b := make([]string, 0), false\n    for _, c := range brackets {\n        if\
    \ c == '<' {\n            stack = append(stack, c)\n        } else if c == '>'\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            c := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n\
    \            if c != c {\n                return false\n            }\n      \
    \  }\n    }\n    return len(stack) == 0\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    brackets\
    \ = brackets[0 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"\")\n    brackets = strings.Replace(brackets, \">\", \"\")\n    brackets\
    \ = strings.Replace(brackets, \"<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \"><<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\")\n    brackets = strings.Replace(brackets, \"<<\", \"\")\n    brackets\
    \ = strings.Replace(brackets, \">>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<\", \"\")\n \
    \   brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<\", \"\")\n \
    \   brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<\", \"\")\n \
    \   brackets = strings.Replace(b", "    opening, closing := brackets[0], brackets[1]\n\
    \    count := 0\n    for _, c := range opening {\n        if c != closing {\n\
    \            return false\n        }\n        count++\n    }\n    return count\
    \ == len(opening)\n}\n", "    brackets = brackets[0 : len(brackets)-1]\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\"", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<", "    stacks\
    \ := make([][]bool, len(brackets))\n    for i := range brackets {\n        stacks[i]\
    \ = make([]bool, len(brackets))\n    }\n    stacks[0][0] = true\n    stacks[len(brackets)-1][len(brackets)-1]\
    \ = true\n    for i := range brackets {\n        for j := range brackets {\n \
    \           if brackets[i] == brackets[j] {\n                stacks[i][j] = true\n\
    \            }\n        }\n    }\n    for i := range brackets {\n        for j\
    \ := range brackets {\n            if stacks[i][j] == false {\n              \
    \  return false\n            }\n        }\n    }\n    return true\n}\n", "   \
    \ brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"", "    stack, _ := bracketStack(brackets)\n \
    \   return len(stack) == 0\n}\n", "    brackets = strings.Replace(brackets, \"\
    <\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n  \
    \  brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace",
  "    openingBrackets := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n\
    \    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n  \
    \  brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>><\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>>><\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>><\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>><\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>>><\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>><\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>><\", \"\", -1)\n    bracket", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for c := range openingBrackets {\n        if !closingBrackets[c] {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n        if !closingBrackets[c] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n        if !closingBrackets[c] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    openingBrackets := make([]string, 0)\n\
    \    closingBrackets := make([]string, 0)\n    for _, char := range brackets {\n\
    \        if char == '<' {\n            openingBrackets = append(openingBrackets,\
    \ char)\n        } else {\n            closingBrackets = append(closingBrackets,\
    \ char)\n        }\n    }\n    if len(openingBrackets) != len(closingBrackets)\
    \ {\n        return false\n    }\n    for i := 0; i < len(openingBrackets); i++\
    \ {\n        if openingBrackets[i] != closingBrackets[i] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace",
  "    brackets = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    brackets = strings.TrimSpace(brackets)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"><\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>\", \">>>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">><<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<<\", \">>><\", -1)\n    brackets = strings.Replace(brackets, \"<<>>\",\
    \ \">>><\", -1)\n    brackets = strings.Replace(brackets, \">>><\", \">>>>>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<>>\", \">>><<\", -1)\n  \
    \  brackets = strings.Replace(brackets, \">>><<\", \">>>>>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<>><\", \">>>>><\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>><\", \">>>>><\", -1)\n    brackets = strings.Replace(brackets, \"<<>>>>\"\
    , \">>>>><\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \">>>>><\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<>>>><\", \">>>>><\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>>><\", \">>>>><\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<>>>><\", \">>>>><\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>><\", \">>>>><\", -1)\n    brackets = strings.Replace(brackets, \"<<>>>><\"\
    , \">>>>><\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \">>>>><\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<>>>><\", \">>>>><\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>>><\", \">>>>><\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<>>>><\", \">>>>><\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>><\", \">>>>><\", -1)\n    brackets = strings.Replace(brackets, \"<<>>>><\"\
    , \">>>>><\", -1)\n    brackets = strings.Replace(brackets, \">>>>>", "    brackets\
    \ = strings.TrimSpace(brackets)\n    if len(brackets) == 0 {\n        return false\n\
    \    }\n    brackets = strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"<\", -1)\n    brackets = strings.Replace(brackets, \">>\", \">\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"<<\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \">\", -1)\n    brackets = strings.Replace(brackets, \">>\", \">\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \">\", -1)\n    brackets = strings.Replace(brackets, \">>\", \">\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \">\", -1)\n    brackets = strings.Replace(brackets, \">>\", \">\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \">\", -1)\n    brackets = strings.Replace(brackets, \">>\", \">\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \">\", -1)\n    brackets = strings.Replace(brackets, \">>\", \">\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \">\", -1)\n    brackets = strings.Replace(bra", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        } else {\n            return false\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n        if !closingBrackets[c] {\n            return false\n     \
    \   }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    openingBrackets := make([]int, len(brackets))\n\
    \    closingBrackets := make([]int, len(brackets))\n    for i := range brackets\
    \ {\n        if brackets[i] == '<' {\n            openingBrackets[i] = 1\n   \
    \     } else {\n            openingBrackets[i] = 0\n        }\n    }\n    for\
    \ i := range brackets {\n        if brackets[i] == '>' {\n            closingBrackets[i]\
    \ = 1\n        } else {\n            closingBrackets[i] = 0\n        }\n    }\n\
    \    for i := range openingBrackets {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, c\
    \ := range brackets {\n        if c == '<' {\n            openingBrackets = append(openingBrackets,\
    \ c)\n        } else {\n            closingBrackets = append(closingBrackets,\
    \ c)\n        }\n    }\n    if len(openingBrackets) != len(closingBrackets) {\n\
    \        return false\n    }\n    for i := 0; i < len(openingBrackets); i++ {\n\
    \        if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    brackets\
    \ := brackets[1 : len(brackets)-1]\n    for _, char := range brackets {\n    \
    \    if char == \"<\" {\n            openingBrackets = append(openingBrackets,\
    \ char)\n        } else {\n            closingBrackets = append(closingBrackets,\
    \ char)\n        }\n    }\n    if len(openingBrackets) != len(closingBrackets)\
    \ {\n        return false\n    }\n    for _, openingBracket := range openingBrackets\
    \ {\n        found := false\n        for _, closingBracket := range closingBrackets\
    \ {\n            if openingBracket == closingBracket {\n                found\
    \ = true\n                break\n            }\n        }\n        if !found {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = strings.TrimSpace(brackets)\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for c := range\
    \ openingBrackets {\n        if !closingBrackets[c] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, char := range brackets\
    \ {\n        if char == '<' {\n            openingBrackets[char] = true\n    \
    \    } else if char == '>' {\n            closingBrackets[char] = true\n     \
    \   }\n    }\n    for _, char := range brackets {\n        if !openingBrackets[char]\
    \ {\n            return false\n        }\n        if !closingBrackets[char] {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    for _, c := range brackets {\n        if\
    \ c != \">\" && c != \"<\" {\n            return false\n        }\n    }\n   \
    \ return true\n}\n", "    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    openingBrackets := make([]int, len(brackets))\n    closingBrackets := make([]int,\
    \ len(brackets))\n    for i := range brackets {\n        if brackets[i] == '<'\
    \ {\n            openingBrackets[i] = 1\n        } else {\n            openingBrackets[i]\
    \ = 0\n        }\n    }\n    for i := range brackets {\n        if brackets[i]\
    \ == '>' {\n            closingBrackets[i] = 1\n        } else {\n           \
    \ closingBrackets[i] = 0\n        }\n    }\n    for i := range openingBrackets\
    \ {\n        if openingBrackets[i] != closingBrackets[i] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n        if !closingBrackets[c] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[0 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n  \
    \  brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets =\
    \ strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n \
    \   brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets =\
    \ strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n \
    \   brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\", \"\", ", " \
    \   brackets = brackets[1 : len(brackets)-1]\n    openingBrackets := make([]string,\
    \ 0)\n    closingBrackets := make([]string, 0)\n    for _, char := range brackets\
    \ {\n        if char == \"<\" {\n            openingBrackets = append(openingBrackets,\
    \ char)\n        } else {\n            closingBrackets = append(closingBrackets,\
    \ char)\n        }\n    }\n    if len(openingBrackets) != len(closingBrackets)\
    \ {\n        return false\n    }\n    for i := 0; i < len(openingBrackets); i++\
    \ {\n        if openingBrackets[i] != closingBrackets[i] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[rune]bool)\n\
    \    closingBrackets := make(map[rune]bool)\n    for _, c := range brackets {\n\
    \        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n        if !closingBrackets[c] {\n            return false\n     \
    \   }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n", "    stack,\
    \ _ := bracketStack(brackets)\n    return len(stack) == 0\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n        if !closingBrackets[c] {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    opening, closing\
    \ := brackets[0], brackets[1]\n    openingCount := 0\n    closingCount := 0\n\
    \    for _, c := range brackets {\n        if c == '<' {\n            openingCount++\n\
    \        } else if c == '>' {\n            closingCount++\n        }\n    }\n\
    \    return openingCount == closingCount\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n        if !closingBrackets[c] {\n            return false\n     \
    \   }\n    }\n    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    openingBrackets := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n\
    \    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for c := range openingBrackets {\n        if !closingBrackets[c] {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        } else {\n            return false\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n        if !closingBrackets[c] {\n            return false\n     \
    \   }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for c := range openingBrackets {\n        if !closingBrackets[c] {\n       \
    \     return false\n        }\n    }\n    return true\n}\n", "    stack, _ :=\
    \ bracketStack(brackets)\n    return len(stack) == 0\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n        if !closingBrackets[c] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    stacks := make([][]bool,\
    \ len(brackets))\n    for i := range brackets {\n        stacks[i] = make([]bool,\
    \ len(brackets))\n        stacks[i][i] = true\n    }\n    for i := range brackets\
    \ {\n        for j := range brackets {\n            if i == j {\n            \
    \    continue\n            }\n            if brackets[i] == brackets[j] {\n  \
    \              continue\n            }\n            if stacks[i][j] {\n      \
    \          return false\n            }\n        }\n    }\n    return true\n}\n",
  "    openingBrackets := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n\
    \    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = strings.Replace(brackets, \"<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace",
  "    openingBrackets := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n\
    \    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.", "    openingBrackets := make(map[rune]bool)\n\
    \    closingBrackets := make(map[rune]bool)\n    for _, c := range brackets {\n\
    \        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n        if !closingBrackets[c] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
