name: HumanEval_56_correct_bracketing
language: go_test.go
prompt: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
  )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
  <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
  \ string) bool {\n"
tests: "func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n    \
  \ { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
  <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
  ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n\
  \     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
  <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false },\n\
  \     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
  <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
  \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    brackets = strings.Trim(brackets, \">\")\n    brackets = strings.Trim(brackets,\
    \ \"<\")\n    brackets = strings.Trim(brackets, \">>\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\", -1)\n\
    \    return brackets == \"<<><>>\"\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    openingBrackets := make([]string, 0)\n    closingBrackets := make([]string,\
    \ 0)\n    for _, char := range brackets {\n        if char == \">\" {\n      \
    \      closingBrackets = append(closingBrackets, char)\n        } else {\n   \
    \         openingBrackets = append(openingBrackets, char)\n        }\n    }\n\
    \    if len(openingBrackets) != len(closingBrackets) {\n        return false\n\
    \    }\n    for i := 0; i < len(openingBrackets); i++ {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n  \
    \  brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    brackets = strings.TrimSpace(brackets)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for c := range openingBrackets {\n        if !closingBrackets[c] {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n  \
    \  brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        openingBrackets[c] = true\n    }\n    for _, c := range brackets\
    \ {\n        closingBrackets[c] = true\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[rune]bool)\n    closingBrackets := make(map[rune]bool)\n    for\
    \ _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "    brackets = strings.TrimSpace(brackets)\n  \
    \  if len(brackets) == 0 {\n        return false\n    }\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \"<\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets :=\
    \ make(map[string]bool)\n    for _, c := range brackets {\n        if c == '<'\
    \ {\n            openingBrackets[c] = true\n        } else {\n            closingBrackets[c]\
    \ = true\n        }\n    }\n    for c := range openingBrackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[rune]bool)\n    closingBrackets := make(map[rune]bool)\n    for\
    \ _, c := range brackets {\n        openingBrackets[c] = true\n    }\n    for\
    \ _, c := range brackets {\n        closingBrackets[c] = true\n    }\n    for\
    \ _, c := range brackets {\n        if !openingBrackets[c] {\n            return\
    \ false\n        }\n        if !closingBrackets[c] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    stacks := make([][]bool, len(brackets))\n\
    \    for i := range brackets {\n        stacks[i] = make([]bool, len(brackets))\n\
    \    }\n    stacks[0][0] = true\n    stacks[len(brackets)-1][len(brackets)-1]\
    \ = true\n    for i := range brackets {\n        if brackets[i] == '<' {\n   \
    \         stacks[i][len(brackets)-1] = true\n        } else {\n            stacks[i][len(brackets)-1]\
    \ = false\n        }\n    }\n    for i := range stacks {\n        for j := range\
    \ stacks[i] {\n            if stacks[i][j] != stacks[i-1][j] {\n             \
    \   return false\n            }\n        }\n    }\n    return true\n}\n", "  \
    \  stack, _ := bracketStack(brackets)\n    return len(stack) == 0\n}\n", "   \
    \ brackets = brackets[1 : len(brackets)-1]\n    openingBrackets := make([]int,\
    \ len(brackets))\n    closingBrackets := make([]int, len(brackets))\n    i :=\
    \ 0\n    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[i]\
    \ = 1\n            i++\n        } else if c == '>' {\n            closingBrackets[len(openingBrackets)-i-1]\
    \ = 1\n            i++\n        } else {\n            return false\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[len(openingBrackets)-i-1]\
    \ {\n            return false\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !closingBrackets[len(openingBrackets)-i] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
