name: HumanEval_49_modp
language: go_test.go
prompt: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
  \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
  \ 101)\n// 1\nfunc modp(n int, p int) int {\n"
tests: "func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
  \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
  \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
  \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
  \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n       \
    \ return p\n    }\n    if n == p {\n        return n\n    }\n    if p < 2 {\n\
    \        return modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n -\
    \ 2, p)\n    }\n    if p < 5 {\n        return modp(n - 3, p)\n    }\n    if p\
    \ < 7 {\n        return modp(n - 4, p)\n    }\n    if p < 9 {\n        return\
    \ modp(n - 5, p)\n    }\n    if p < 11 {\n        return modp(n - 6, p)\n    }\n\
    \    if p < 13 {\n        return modp(n - 7, p)\n    }\n    if p < 15 {\n    \
    \    return modp(n - 8, p)\n    }\n    if p < 17 {\n        return modp(n - 9,\
    \ p)\n    }\n    if p < 19 {\n        return modp(n - 10, p)\n    }\n    if p\
    \ < 23 {\n        return modp(n - 11, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 12, p)\n    }\n    if p < 27 {\n        return modp(n - 13, p)\n  \
    \  }\n    if p < 29 {\n        return modp(n - 14, p)\n    }\n    if p < 31 {\n\
    \        return modp(n - 15, p)\n    }\n    if p < 33 {\n        return modp(n\
    \ - 16, p)\n    }\n    if p < 35 {\n        return modp(n - 17, p)\n    }\n  \
    \  if p < 37 {\n        return modp(n - 18, p)\n    }\n    if p < 39 {\n     \
    \   return modp(n - 19, p)\n    }\n    if p < 41 {\n        return modp(n - 20,\
    \ p)\n    }\n    if p < 43 {\n        return modp(n - 21, p)\n    }\n    if p\
    \ < 45 {\n        return modp(n - 22, p)\n    }\n    if p < 47 {\n        return\
    \ modp(n - 23, p)\n    }\n    if p < 49 {\n        return modp(n - 24, p)\n  \
    \  }\n    if p < 51 {\n        return modp(n - 25, p)\n    }\n    if p < 53 {\n\
    \        return modp(n - 26, p)\n    }\n    if p < 55 {\n        return modp(n\
    \ - 27, p)\n    }\n    if p < 57 {\n        return modp(n - 28, p)\n    }\n  \
    \  if p < 59 {\n        return modp(n - 29, p)\n    }\n    if p < 61 {\n     \
    \   return modp(n - 30, p)\n    }\n    if p < 63 {\n        return modp(n - 31,\
    \ p)\n    }\n    if p < 65 {\n        return modp(n - 32, p)\n    }\n    if p\
    \ < 67 {\n        return mod", "    if n == 0 {\n        return 1\n    }\n   \
    \ if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 1, p)\n    }\n \
    \   return modp(n - 1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n\
    \    if n == 1 {\n        return p\n    }\n    if n == p {\n        return n\n\
    \    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n     \
    \   return p\n    }\n    if p < 2 {\n        return modp(n - 1, p*p)\n    }\n\
    \    if p < p {\n        return modp(n - 1, p)\n    }\n    return modp(n - 1,\
    \ p*p)\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n   \
    \     return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) * p\n   \
    \ }\n    if p < 3 {\n        return modp(n - 1, p) * (p - 1)\n    }\n    if p\
    \ < 4 {\n        return modp(n - 1, p) * (p - 2)\n    }\n    if p < 5 {\n    \
    \    return modp(n - 1, p) * (p - 3)\n    }\n    if p < 6 {\n        return modp(n\
    \ - 1, p) * (p - 4)\n    }\n    if p < 7 {\n        return modp(n - 1, p) * (p\
    \ - 5)\n    }\n    if p < 8 {\n        return modp(n - 1, p) * (p - 6)\n    }\n\
    \    if p < 9 {\n        return modp(n - 1, p) * (p - 7)\n    }\n    if p < 10\
    \ {\n        return modp(n - 1, p) * (p - 8)\n    }\n    if p < 11 {\n       \
    \ return modp(n - 1, p) * (p - 9)\n    }\n    if p < 12 {\n        return modp(n\
    \ - 1, p) * (p - 10)\n    }\n    if p < 13 {\n        return modp(n - 1, p) *\
    \ (p - 11)\n    }\n    if p < 14 {\n        return modp(n - 1, p) * (p - 12)\n\
    \    }\n    if p < 15 {\n        return modp(n - 1, p) * (p - 13)\n    }\n   \
    \ if p < 16 {\n        return modp(n - 1, p) * (p - 14)\n    }\n    if p < 17\
    \ {\n        return modp(n - 1, p) * (p - 15)\n    }\n    if p < 18 {\n      \
    \  return modp(n - 1, p) * (p - 16)\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) * (p - 17)\n    }\n    if p < 20 {\n        return modp(n - 1, p) *\
    \ (p - 18)\n    }\n    if p < 21 {\n        return modp(n - 1, p) * (p - 19)\n\
    \    }\n    if p < 22 {\n        return modp(n - 1, p) * (p - 20)\n    }\n   \
    \ if p < 23 {\n        return modp(n - 1, p) * (p - 21)\n    }\n    if p < 24\
    \ {\n        return modp(n - 1, p) * (p - 22)\n    }\n    if p < 25 {\n      \
    \  return modp(n - 1, p) * (p - 23)\n    }\n    if p < 26 {\n        return modp(n\
    \ - 1, p) * (p - 24)\n    }\n    if p < 27 {\n        return modp(n - 1, p) *\
    \ (p - 25)\n    }\n    if p < 28 {\n        return modp(n - 1, p) * (p - 26)\n\
    \    }\n    if p < 29 {\n        return modp(n - 1, p) * (p - 27)\n    }\n   \
    \ if p < 30 {\n        return modp(n - 1, p) * (p - 28)\n    }\n    if ", "  \
    \  if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return p\n \
    \   }\n    if n == p {\n        return n\n    }\n    if n < p {\n        return\
    \ modp(n - 1, p) + p\n    }\n    return modp(n - 1, p)\n}\n", "    if n < 0 {\n\
    \        n *= -1\n    }\n    if n < p {\n        return n\n    }\n    if n ==\
    \ p {\n        return 1\n    }\n    if n < p {\n        return modp(n - p, p)\n\
    \    }\n    return modp(p, n)\n}\n", "    if n == 0 {\n        return 1\n    }\n\
    \    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n\
    \ - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p*p + p)\n    }\n\
    \    return modp(n - 1, p*p + p*p)\n}\n", "    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p - 1) + 1\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n       \
    \ return modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1,\
    \ p) + p\n    }\n    return modp(n - 1, p)\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n\
    \        return modp(n - 1, p)\n    }\n    if p < 4 {\n        return modp(n -\
    \ 2, p)\n    }\n    if p < 5 {\n        return modp(n - 3, p)\n    }\n    if p\
    \ < 6 {\n        return modp(n - 4, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 5, p)\n    }\n    if p < 8 {\n        return modp(n - 6, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 7, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 8, p)\n    }\n    if p < 11 {\n        return modp(n - 9,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 10, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 11, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 12, p)\n    }\n    if p < 15 {\n        return modp(n - 13, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 14, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 15, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 16, p)\n    }\n    if p < 19 {\n        return modp(n - 17, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 18, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 19, p)\n    }\n    if p < 22 {\n        return modp(n - 20,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 21, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 22, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 23, p)\n    }\n    if p < 26 {\n        return modp(n - 24, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 25, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 26, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 27, p)\n    }\n    if p < 30 {\n        return modp(n - 28, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 29, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 30, p)\n    }\n    if p < 33 {\n        return modp(n - 31,\
    \ p)\n    }\n    if p < 34 {\n        return modp(n - 32, p)\n", "    if n ==\
    \ 0 {\n        return 1\n    }\n    if n == 1 {\n        return p\n    }\n   \
    \ if n == p {\n        return n\n    }\n    if p < 2 {\n        return modp(n\
    \ - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n    return\
    \ modp(n - 3, p) + modp(n - 2, p)\n}\n", "    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n   \
    \ }\n    return modp(n - 1, p*p)\n}\n", "    if n == 0 {\n        return 1\n \
    \   }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n, p - 1) + p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n == 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n - 1,\
    \ p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n    }\n    if\
    \ p < 4 {\n        return modp(n - 1, p - 1) + 1\n    }\n    return modp(n - 1,\
    \ p - 2)\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n \
    \       return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) + p\n \
    \   }\n    if p < 3 {\n        return modp(n - 1, p) + modp(n - 1, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 1, modp(n - 1, p))\n    }\n    if p <\
    \ 5 {\n        return modp(n - 1, modp(n - 1, modp(n - 1, p)))\n    }\n    if\
    \ p < 6 {\n        return modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p))))\n\
    \    }\n    if p < 7 {\n        return modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, p)))))\n    }\n    if p < 8 {\n        return modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p)))))) + p\n    }\n  \
    \  if p < 9 {\n        return modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1,\
    \ modp(n - 1, modp(n - 1, modp(n - 1, p)))))) + modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p)))))) + p)\n    }\n \
    \   if p < 10 {\n        return modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1,\
    \ modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p))))))\
    \ + modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, p)))))) + p)))\n    }\n    if p < 11 {\n      \
    \  return modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n -\
    \ 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, p)))))) + modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1,\
    \ modp(n - 1, p)))))) + p)))\n    }\n    if p < 12 {\n        return modp(n -\
    \ 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - ", " \
    \   if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return p\n\
    \    }\n    if p == 0 {\n        return 0\n    }\n    if p > n {\n        return\
    \ modp(n - 1, p) + modp(n, p)\n    }\n    if p < n {\n        return modp(n -\
    \ 1, p)\n    }\n    return modp(n-1, p) + modp(n-1, p) + modp(n-1, p) + modp(n-1,\
    \ p)\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n     \
    \   return p\n    }\n    if n == p {\n        return n\n    }\n    if p < n {\n\
    \        return modp(n - p, p)\n    }\n    return modp(n + p - n, p)\n}\n", " \
    \   if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return p\n\
    \    }\n    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p) % p\n    }\n    if p < 4 {\n        return\
    \ modp(n - 3, p) % p\n    }\n    if p < 5 {\n        return modp(n - 4, p) % p\n\
    \    }\n    return modp(n - 5, p) % p\n}\n", "    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
