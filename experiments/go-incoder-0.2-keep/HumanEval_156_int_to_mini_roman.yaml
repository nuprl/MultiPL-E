name: HumanEval_156_int_to_mini_roman
language: go_test.go
prompt: "package int_to_mini_roman_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
  // >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152) == 'clii'\n\
  // >>> int_to_mini_roman(426) == 'cdxxvi'\nfunc int_to_mini_roman(number int) string\
  \ {\n"
tests: "func TestInt_To_Mini_Roman(t *testing.T) {\n  candidate := int_to_mini_roman\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(19), expected: \"xix\" },\n     {\
  \ actual: candidate(152), expected: \"clii\" },\n     { actual: candidate(251),\
  \ expected: \"ccli\" },\n     { actual: candidate(426), expected: \"cdxxvi\" },\n\
  \     { actual: candidate(500), expected: \"d\" },\n     { actual: candidate(1),\
  \ expected: \"i\" },\n     { actual: candidate(4), expected: \"iv\" },\n     { actual:\
  \ candidate(43), expected: \"xliii\" },\n     { actual: candidate(90), expected:\
  \ \"xc\" },\n     { actual: candidate(94), expected: \"xciv\" },\n     { actual:\
  \ candidate(532), expected: \"dxxxii\" },\n     { actual: candidate(900), expected:\
  \ \"cm\" },\n     { actual: candidate(994), expected: \"cmxciv\" },\n     { actual:\
  \ candidate(1000), expected: \"m\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    roman_number := \"\"\n    switch number {\n    case 1:\n      \
    \  roman_number = \"I\"\n    case 2:\n        roman_number = \"II\"\n    case\
    \ 3:\n        roman_number = \"III\"\n    case 4:\n        roman_number = \"IV\"\
    \n    case 5:\n        roman_number = \"V\"\n    case 6:\n        roman_number\
    \ = \"VI\"\n    case 7:\n        roman_number = \"VII\"\n    case 8:\n       \
    \ roman_number = \"VIII\"\n    case 9:\n        roman_number = \"IX\"\n    case\
    \ 10:\n        roman_number = \"X\"\n    case 11:\n        roman_number = \"XI\"\
    \n    case 12:\n        roman_number = \"XII\"\n    case 13:\n        roman_number\
    \ = \"XIII\"\n    case 14:\n        roman_number = \"XIV\"\n    case 15:\n   \
    \     roman_number = \"XV\"\n    case 16:\n        roman_number = \"XVI\"\n  \
    \  case 17:\n        roman_number = \"XVII\"\n    case 18:\n        roman_number\
    \ = \"XVIII\"\n    case 19:\n        roman_number = \"XIX\"\n    case 20:\n  \
    \      roman_number = \"XX\"\n    case 21:\n        roman_number = \"XXI\"\n \
    \   case 22:\n        roman_number = \"XXII\"\n    case 23:\n        roman_number\
    \ = \"XXIII\"\n    case 24:\n        roman_number = \"XXIV\"\n    case 25:\n \
    \       roman_number = \"XXV\"\n    case 26:\n        roman_number = \"XXVI\"\n\
    \    case 27:\n        roman_number = \"XXVII\"\n    case 28:\n        roman_number\
    \ = \"XXVIII\"\n    case 29:\n        roman_number = \"XXIX\"\n    case 30:\n\
    \        roman_number = \"XXX\"\n    case 31:\n        roman_number = \"XXXI\"\
    \n    case 32:\n        roman_number = \"XXXII\"\n    case 33:\n        roman_number\
    \ = \"XXXIII\"\n    case 34:\n        roman_number = \"XXXIV\"\n    case 35:\n\
    \        roman_number = \"XXXV\"\n    case 36:\n        roman_number = \"XXXVI\"\
    \n    case 37:\n        roman_number = \"XXXVII\"\n    case 38:\n        roman_number\
    \ = \"XXXVIII\"\n    case 39:\n        roman_number = \"XXXIX\"\n    case 40:\n\
    \        roman_number = \"XL\"", "    if number < 1 || number > 1000 {\n     \
    \   fmt.Println(\"int_to_mini_roman: Invalid input\")\n    }\n    romans := []string{\"\
    M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"}\n    result := \"\"\n    for _, romanIndex := range romans {\n\
    \        result += \"M\"\n        if number >= 100 && number < 1000 {\n      \
    \      result += romanIndex\n            number -= 100\n        }\n    }\n   \
    \ return result\n}\n", "    romanNumerals := map[int]string{\n        1: \"I\"\
    ,\n        5: \"V\",\n        10: \"X\",\n        50: \"L\",\n        100: \"\
    C\",\n        500: \"D\",\n        1000: \"M\",\n    }\n    romanNumeral := romanNumerals[number]\n\
    \    return strings.ToLower(romanNumeral)\n}\n", "    romanNumerals := map[int]string{\n\
    \        1:  \"I\",\n        2:  \"II\",\n        3:  \"III\",\n        4:  \"\
    IV\",\n        5:  \"V\",\n        6:  \"VI\",\n        7:  \"VII\",\n       \
    \ 8:  \"VIII\",\n        9:  \"IX\",\n        10: \"X\",\n        11: \"XI\",\n\
    \        12: \"XII\",\n        13: \"XIII\",\n        14: \"XIV\",\n        15:\
    \ \"XV\",\n        16: \"XVI\",\n        17: \"XVII\",\n        18: \"XVIII\"\
    ,\n        19: \"XIX\",\n        20: \"XX\",\n        30: \"XXX\",\n        40:\
    \ \"XL\",\n        50: \"L\",\n        60: \"LX\",\n        70: \"LXX\",\n   \
    \     80: \"LXXX\",\n        90: \"XC\",\n        100: \"C\",\n        1000: \"\
    C\",\n    }\n\n    romanNumeral := romanNumerals[number]\n    return strings.ToLower(romanNumeral)\n\
    }\n", "    romans := map[int]string{\n        1:  \"I\",\n        5:  \"V\",\n\
    \        10: \"X\",\n        50:  \"L\",\n        100: \"C\",\n        500: \"\
    D\",\n        1000: \"M\",\n    }\n    roman, ok := romans[number]\n    if !ok\
    \ {\n        fmt.Println(\"int_to_mini_roman: number too large\")\n    }\n   \
    \ return roman\n}\n", "    roman_number := \"\"\n    roman_number += int_to_roman(number)\n\
    \    return strings.ToLower(roman_number)\n}\n", "    romanNumerals := map[int]string{\n\
    \        1: \"I\",\n        5: \"V\",\n        10: \"X\",\n        50: \"L\",\n\
    \        100: \"C\",\n        500: \"D\",\n        1000: \"M\",\n    }\n    romanNumeral\
    \ := romanNumerals[number]\n    return strings.ToLower(romanNumeral)\n}\n", " \
    \   roman_numerals := []string{\n        \"I\", \"II\", \"III\", \"IV\", \"V\"\
    , \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\", \"XIV\"\
    ,\n        \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\", \"XX\", \"XXI\", \"\
    XXII\", \"XXIII\", \"XXIV\", \"XXV\", \"XXVI\",\n        \"XXVII\", \"XXVIII\"\
    , \"XXIX\", \"XXX\", \"XXXI\", \"XXXII\", \"XXXIII\", \"XXXIV\", \"XXXV\", \"\
    XXXVI\",\n        \"XXXVII\", \"XXXVIII\", \"XXXIX\", \"XL\", \"L\", \"LI\", \"\
    LII\", \"LIII\", \"LIIII\", \"LIIV\", \"LV\", \"LVI\",\n        \"LVII\", \"LVIII\"\
    , \"LIV\", \"LVV\", \"LVVI\", \"LVVII\", \"LVVIII\", \"LVIX\", \"LX\", \"LXI\"\
    , \"LXII\",\n        \"LXIII\", \"LXIV\", \"LXV\", \"LXVI\", \"LXVII\", \"LXVIII\"\
    , \"LXIX\", \"LXX\", \"LXXI\", \"LXXII\",\n        \"LXXIII\", \"LXXIV\", \"LXXV\"\
    , \"LXXVI\", \"LXXVII\", \"LXXVIII\", \"LXXIX\", \"LXXX\", \"LXXXI\",\n      \
    \  \"LXXXII\", \"LXXXIII\", \"LXXXIV\", \"LXXXV\", \"LXXXVI\", \"LXXXVII\", \"\
    LXXXVIII\", \"LXXXIX\",\n        \"XC\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\"\
    , \"DCC\", \"DCCC\", \"CM\", \"M\", \"MM\", \"MMM\",\n    }\n    roman_numeral_index\
    \ := 0\n    roman_numeral_string := \"\"\n    for roman_numeral_index < len(roman_numerals)\
    \ {\n        if number >= roman_numerals[roman_numeral_index] {\n            roman_numeral_string\
    \ += roman_numerals[roman_numeral_index]\n            number -= roman_numerals[roman_numeral_index]\n\
    \        } else {\n            break\n        }\n    }\n    return roman_numeral_string\n\
    }\n", "    romanNumerals := map[int]string{\n        1: \"I\",\n        5: \"\
    V\",\n        10: \"X\",\n        50: \"L\",\n        100: \"C\",\n        500:\
    \ \"D\",\n        1000: \"M\",\n    }\n    romanNumeral := romanNumerals[number]\n\
    \    return strings.ToLower(romanNumeral)\n}\n", "    romanNumerals := map[int]string{\n\
    \        1: \"I\",\n        5: \"V\",\n        10: \"X\",\n        50: \"L\",\n\
    \        100: \"C\",\n        500: \"D\",\n        1000: \"M\",\n    }\n    romanNumeral\
    \ := romanNumerals[number]\n    return strings.ToLower(romanNumeral)\n}\n", " \
    \   romanNumerals := map[int]string{\n        1: \"I\",\n        5: \"V\",\n \
    \       10: \"X\",\n        50: \"L\",\n        100: \"C\",\n        500: \"D\"\
    ,\n        1000: \"M\",\n    }\n    romanNumeral := romanNumerals[number]\n  \
    \  return strings.ToLower(romanNumeral)\n}\n", "    romanNumerals := map[int]string{\n\
    \        1:  \"I\",\n        5:  \"V\",\n        10: \"X\",\n        50:  \"L\"\
    ,\n        100: \"C\",\n        500: \"D\",\n        1000: \"M\",\n    }\n   \
    \ romanNumeral := romanNumerals[number]\n    return strings.ToLower(romanNumeral)\n\
    }\n", "    roman_numerals := map[int]string{\n        1:  \"I\",\n        2: \
    \ \"II\",\n        3:  \"III\",\n        4:  \"IV\",\n        5:  \"V\",\n   \
    \     6:  \"VI\",\n        7:  \"VII\",\n        8:  \"VIII\",\n        9:  \"\
    IX\",\n        10: \"X\",\n        11: \"XI\",\n        12: \"XII\",\n       \
    \ 13: \"XIII\",\n        14: \"XIV\",\n        15: \"XV\",\n        16: \"XVI\"\
    ,\n        17: \"XVII\",\n        18: \"XVIII\",\n        19: \"XIX\",\n     \
    \   20: \"XX\",\n        30: \"XXX\",\n        40: \"XL\",\n        50: \"L\"\
    ,\n        60: \"LX\",\n        70: \"LXX\",\n        80: \"LXXX\",\n        90:\
    \ \"XC\",\n        100: \"C\",\n        1000: \"C\",\n    }\n    roman_numeral\
    \ := roman_numerals[number]\n    return strings.ToLower(roman_numeral)\n}\n",
  "    roman_num := []string{\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"\
    XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"}\n    roman_num := roman_num[:number%100]\n\
    \    number /= 100\n    roman_num := append(roman_num, roman_num...)\n    roman_num\
    \ := append(roman_num, roman_num...)\n    roman_num := append(roman_num, roman_num...)\n\
    \    roman_num := append(roman_num, roman_num...)\n    roman_num := append(roman_num,\
    \ roman_num...)\n    roman_num := append(roman_num, roman_num...)\n    roman_num\
    \ := append(roman_num, roman_num...)\n    roman_num := append(roman_num, roman_num...)\n\
    \    roman_num := append(roman_num, roman_num...)\n    roman_num := append(roman_num,\
    \ roman_num...)\n    roman_num := append(roman_num, roman_num...)\n    roman_num\
    \ := append(roman_num, roman_num...)\n    roman_num := append(roman_num, roman_num...)\n\
    \    roman_num := append(roman_num, roman_num...)\n    roman_num := append(roman_num,\
    \ roman_num...)\n    roman_num := append(roman_num, roman_num...)\n    roman_num\
    \ := append(roman_num, roman_num...)\n    roman_num := append(roman_num, roman_num...)\n\
    \    roman_num := append(roman_num, roman_num...)\n    roman_num := append(roman_num,\
    \ roman_num...)\n    roman_num := append(roman_num, roman_num...)\n    roman_num\
    \ := append(roman_num, roman_num...)\n    roman_num := append(roman_num, roman_num...)\n\
    \    roman_num := append(roman_num, roman_num...)\n    roman_num := append(roman_num,\
    \ roman_num...)\n    roman_num := append(roman_num, roman_num...)\n    roman_num\
    \ := append(roman_num, roman_num...)\n    roman_num := append(roman_num, roman_num...)\n\
    \    roman_num := append(roman_num, roman_num...)\n    roman_num := append(roman_num,\
    \ roman_num...)\n    roman_num := append(roman_num, roman_num...)\n    roman_num\
    \ := append(roman_num, roman_num...)\n    roman_num := append(roman_num, ", " \
    \   romans := map[int]string{\n        100: \"M\",\n        900: \"CM\",\n   \
    \     500: \"D\",\n        400: \"CD\",\n        100: \"C\",\n        90: \"XC\"\
    ,\n        50: \"L\",\n        40: \"XL\",\n        10: \"X\",\n        9: \"\
    IX\",\n        5: \"V\",\n        4: \"IV\",\n        1: \"I\",\n    }\n\n   \
    \ roman, ok := romans[number]\n    if !ok {\n        fmt.Println(\"Invalid input:\"\
    , number)\n    }\n    return strings.ToLower(roman)\n}\n", "    roman_number :=\
    \ []string{\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\",\
    \ \"IX\", \"V\", \"IV\", \"I\"}\n    roman_number := roman_number[:number%100]\n\
    \    number /= 100\n    roman_number := append(roman_number, []string{\"I\"}...)\n\
    \    roman_number := append(roman_number, []string{\"V\"}...)\n    roman_number\
    \ := append(roman_number, []string{\"X\"}...)\n    roman_number := append(roman_number,\
    \ []string{\"L\"}...)\n    roman_number := append(roman_number, []string{\"C\"\
    }...)\n    roman_number := append(roman_number, []string{\"D\"}...)\n    roman_number\
    \ := append(roman_number, []string{\"M\"}...)\n    roman_number := append(roman_number,\
    \ []string{\"V\"}...)\n    roman_number := append(roman_number, []string{\"I\"\
    }...)\n    roman_number := append(roman_number, []string{\"X\"}...)\n    roman_number\
    \ := append(roman_number, []string{\"C\"}...)\n    roman_number := append(roman_number,\
    \ []string{\"D\"}...)\n    roman_number := append(roman_number, []string{\"M\"\
    }...)\n    roman_number := append(roman_number, []string{\"V\"}...)\n    roman_number\
    \ := append(roman_number, []string{\"I\"}...)\n    roman_number := append(roman_number,\
    \ []string{\"X\"}...)\n    roman_number := append(roman_number, []string{\"C\"\
    }...)\n    roman_number := append(roman_number, []string{\"D\"}...)\n    roman_number\
    \ := append(roman_number, []string{\"M\"}...)\n    roman_number := append(roman_number,\
    \ []string{\"V\"}...)\n    roman_number := append(roman_number, []string{\"I\"\
    }...)\n    roman_number := append(roman_number, []string{\"X\"}...)\n    roman_number\
    \ := append(roman_number, []string{\"C\"}...)\n    roman_number := append(roman_number,\
    \ []string{\"D\"}...)\n    roman_number := append(roman_number, []string{\"M\"\
    }...)\n    roman_number := append(roman_number, []string{\"V\"}...)\n    roman_number\
    \ := append(roman_number, []string{\"I\"}...)\n    roman_number := append(roman_number,\
    \ []string{\"X\"}...)\n    roman_number := append(roman_number, ", "    if number\
    \ < 1 || number > 1000 {\n        fmt.Println(\"Invalid input\")\n    }\n    roman_numerals\
    \ := map[int]string{\n        1: \"I\",\n        5: \"V\",\n        10: \"X\"\
    ,\n        50: \"L\",\n        100: \"C\",\n        500: \"D\",\n        1000:\
    \ \"M\",\n    }\n    roman_numeral := \"\"\n    for roman_numeral, number := range\
    \ roman_numerals {\n        if number <= number {\n            break\n       \
    \ }\n    }\n    return roman_numeral\n}\n", "    romans := map[int]string{\n \
    \       100: \"M\",\n        900: \"CM\",\n        500: \"D\",\n        400: \"\
    CD\",\n        100: \"C\",\n        90: \"XC\",\n        50: \"L\",\n        40:\
    \ \"XL\",\n        10: \"X\",\n        9: \"IX\",\n        5: \"V\",\n       \
    \ 4: \"IV\",\n        1: \"I\",\n    }\n\n    roman, ok := romans[number]\n  \
    \  if !ok {\n        fmt.Println(\"Invalid input\")\n    }\n\n    return roman\n\
    }\n", "    roman_numerals := map[int]string{\n        1: \"I\",\n        5: \"\
    V\",\n        10: \"X\",\n        50: \"L\",\n        100: \"C\",\n        500:\
    \ \"D\",\n        1000: \"M\",\n    }\n    roman_numeral := roman_numerals[number]\n\
    \    return strings.ToLower(roman_numeral)\n}\n", "    roman_number := \"\"\n\
    \    switch number {\n    case 1:\n        roman_number = \"I\"\n    case 2:\n\
    \        roman_number = \"II\"\n    case 3:\n        roman_number = \"III\"\n\
    \    case 4:\n        roman_number = \"IV\"\n    case 5:\n        roman_number\
    \ = \"V\"\n    case 6:\n        roman_number = \"VI\"\n    case 7:\n        roman_number\
    \ = \"VII\"\n    case 8:\n        roman_number = \"VIII\"\n    case 9:\n     \
    \   roman_number = \"IX\"\n    case 10:\n        roman_number = \"X\"\n    case\
    \ 11:\n        roman_number = \"XI\"\n    case 12:\n        roman_number = \"\
    XII\"\n    case 13:\n        roman_number = \"XIII\"\n    case 14:\n        roman_number\
    \ = \"XIV\"\n    case 15:\n        roman_number = \"XV\"\n    case 16:\n     \
    \   roman_number = \"XVI\"\n    case 17:\n        roman_number = \"XVII\"\n  \
    \  case 18:\n        roman_number = \"XVIII\"\n    case 19:\n        roman_number\
    \ = \"XIX\"\n    case 20:\n        roman_number = \"XX\"\n    case 21:\n     \
    \   roman_number = \"XXI\"\n    case 22:\n        roman_number = \"XXII\"\n  \
    \  case 23:\n        roman_number = \"XXIII\"\n    case 24:\n        roman_number\
    \ = \"XXIV\"\n    case 25:\n        roman_number = \"XXV\"\n    case 26:\n   \
    \     roman_number = \"XXVI\"\n    case 27:\n        roman_number = \"XXVII\"\n\
    \    case 28:\n        roman_number = \"XXVIII\"\n    case 29:\n        roman_number\
    \ = \"XXIX\"\n    case 30:\n        roman_number = \"XXX\"\n    case 31:\n   \
    \     roman_number = \"XXXI\"\n    case 32:\n        roman_number = \"XXXII\"\n\
    \    case 33:\n        roman_number = \"XXXIII\"\n    case 34:\n        roman_number\
    \ = \"XXXIV\"\n    case 35:\n        roman_number = \"XXXV\"\n    case 36:\n \
    \       roman_number = \"XXXVI\"\n    case 37:\n        roman_number = \"XXXVII\"\
    \n    case 38:\n        roman_number = \"XXXVIII\"\n    case 39:\n        roman_number\
    \ = \"XXXIX\"\n    case 40:\n        roman_number = \"XL\""]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
