language: go_test.go
name: HumanEval_69_search
results:
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxFreq int\n    var maxVal int\n    for _, v := range lst {\n  \
    \      if v > maxVal {\n            maxFreq = maxVal\n            maxVal = v\n\
    \        } else if v == maxVal {\n            maxFreq++\n        }\n    }\n  \
    \  if maxFreq == 0 {\n        return -1\n    }\n    return maxVal\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp_dhwcdok_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmp_dhwcdok_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp_dhwcdok_test.go:70: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp_dhwcdok_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmp_dhwcdok_test.go:70: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmp_dhwcdok_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmp_dhwcdok_test.go:70: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmp_dhwcdok_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmp_dhwcdok_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmp_dhwcdok_test.go:70:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmp_dhwcdok_test.go:70: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp_dhwcdok_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmp_dhwcdok_test.go:70: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmp_dhwcdok_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmp_dhwcdok_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmp_dhwcdok_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmp_dhwcdok_test.go:70: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    ---"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq map[int]int\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\npanic: assignment to entry in nil map [recovered]\n\
    \tpanic: assignment to entry in nil map\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x505a40,\
    \ 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x505a40, 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.search(...)\n\t/tmp/tmpxl949nx4_test.go:19\n\
    command-line-arguments_test.TestSearch(0xc0001036c0?)\n\t/tmp/tmpxl949nx4_test.go:36\
    \ +0xad\ntesting.tRunner(0xc0001036c0, 0x52b080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq map[int]int\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\npanic: assignment to entry in nil map [recovered]\n\
    \tpanic: assignment to entry in nil map\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x505a40,\
    \ 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x505a40, 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.search(...)\n\t/tmp/tmpxl949nx4_test.go:19\n\
    command-line-arguments_test.TestSearch(0xc0001036c0?)\n\t/tmp/tmpxl949nx4_test.go:36\
    \ +0xad\ntesting.tRunner(0xc0001036c0, 0x52b080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq map[int]int\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if freq[k] > v {\n            return\
    \ k\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\npanic: assignment to entry in nil map [recovered]\n\
    \tpanic: assignment to entry in nil map\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x505a40,\
    \ 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x505a40, 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.search(...)\n\t/tmp/tmpyux8yup8_test.go:19\n\
    command-line-arguments_test.TestSearch(0xc0001924e0?)\n\t/tmp/tmpyux8yup8_test.go:36\
    \ +0xad\ntesting.tRunner(0xc0001924e0, 0x52b080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ v\n            }\n        }\n    }\n    if max > 0 {\n        return max\n \
    \   }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpiefwzuk6_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpiefwzuk6_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpiefwzuk6_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpiefwzuk6_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpiefwzuk6_test.go:70: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpiefwzuk6_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpiefwzuk6_test.go:70: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpiefwzuk6_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpiefwzuk6_test.go:70: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpiefwzuk6_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpiefwzuk6_test.go:70: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpiefwzuk6_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpiefwzuk6_test.go:70: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpiefwzuk6_test.go:70:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpiefwzuk6_test.go:70: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpiefwzuk6_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpiefwzuk6_test.go:70: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int = -1\n    var freq int = 0\n    for _, v := range lst {\n\
    \        if v > 0 {\n            freq++\n            if freq > max {\n       \
    \         max = freq\n            }\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4,\
    \ 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected:\
    \ -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8\
    \ },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10,\
    \ 8, 1}), expected: 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected:\
    \ 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n\
    \     { actual: candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8,\
    \ 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 9, 10, 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8,\
    \ 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpg9ko_jjv_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpg9ko_jjv_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpg9ko_jjv_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpg9ko_jjv_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpg9ko_jjv_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpg9ko_jjv_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpg9ko_jjv_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpg9ko_jjv_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpg9ko_jjv_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpg9ko_jjv_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpg9ko_jjv_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpg9ko_jjv_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq int\n    var max int\n    for _, v := range lst {\n        if\
    \ v > 0 {\n            freq++\n            if freq > max {\n                max\
    \ = freq\n            }\n        }\n    }\n    if max > 0 {\n        return max\n\
    \    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp938t2dyv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp938t2dyv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmp938t2dyv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmp938t2dyv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmp938t2dyv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmp938t2dyv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmp938t2dyv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmp938t2dyv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmp938t2dyv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmp938t2dyv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmp938t2dyv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp938t2dyv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmp938t2dyv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmp938t2dyv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmp938t2dyv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmp938t2dyv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmp938t2dyv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq int\n    var max int\n    for _, v := range lst {\n        if\
    \ v > 0 {\n            freq++\n            if freq > max {\n                max\
    \ = freq\n            }\n        }\n    }\n    if max == 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp9ukfhzd2_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp9ukfhzd2_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmp9ukfhzd2_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmp9ukfhzd2_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmp9ukfhzd2_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmp9ukfhzd2_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmp9ukfhzd2_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmp9ukfhzd2_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmp9ukfhzd2_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmp9ukfhzd2_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmp9ukfhzd2_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp9ukfhzd2_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmp9ukfhzd2_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmp9ukfhzd2_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmp9ukfhzd2_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmp9ukfhzd2_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmp9ukfhzd2_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq int\n    var max int\n    for _, v := range lst {\n        freq\
    \ = freq + v\n        if freq > max {\n            max = freq\n        }\n   \
    \ }\n    if freq > max {\n        return -1\n    }\n    return max\n}\n\nfunc\
    \ TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4,\
    \ 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected:\
    \ -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8\
    \ },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10,\
    \ 8, 1}), expected: 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected:\
    \ 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n\
    \     { actual: candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8,\
    \ 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 9, 10, 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8,\
    \ 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp7iu90iyi_test.go:68: expected '%!s(int=1)', got '%!s(int=21)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp7iu90iyi_test.go:68: expected\
    \ '%!s(int=4)', got '%!s(int=18)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmp7iu90iyi_test.go:68: expected '%!s(int=-1)', got '%!s(int=6)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmp7iu90iyi_test.go:68: expected\
    \ '%!s(int=8)', got '%!s(int=64)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp7iu90iyi_test.go:68: expected '%!s(int=2)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp7iu90iyi_test.go:68: expected\
    \ '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmp7iu90iyi_test.go:68: expected '%!s(int=2)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmp7iu90iyi_test.go:68: expected\
    \ '%!s(int=1)', got '%!s(int=71)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmp7iu90iyi_test.go:68: expected '%!s(int=-1)', got '%!s(int=40)'\n \
    \   --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmp7iu90iyi_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=163)'\n    --- FAIL: TestSearch/test_num__10\
    \ (0.00s)\n        tmp7iu90iyi_test.go:68: expected '%!s(int=1)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmp7iu90iyi_test.go:68:\
    \ expected '%!s(int=5)', got '%!s(int=153)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmp7iu90iyi_test.go:68: expected '%!s(int=4)', got '%!s(int=114)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmp7iu90iyi_test.go:68:\
    \ expected '%!s(int=2)', got '%!s(int=100)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmp7iu90iyi_test.go:68: expected '%!s(int=1)', got '%!s(int=75)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmp7iu90iyi_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=162)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmp7iu90iyi_test.go:68: expected '%!s(int=4)', got '%!s(int=119)"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq int\n    var max int\n    for _, v := range lst {\n        freq++\n\
    \        if v > 0 {\n            if freq > max {\n                max = freq\n\
    \            }\n        }\n    }\n    if max == -1 {\n        return -1\n    }\n\
    \    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp8oimqjal_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp8oimqjal_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmp8oimqjal_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmp8oimqjal_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmp8oimqjal_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmp8oimqjal_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmp8oimqjal_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmp8oimqjal_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmp8oimqjal_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmp8oimqjal_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmp8oimqjal_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp8oimqjal_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmp8oimqjal_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmp8oimqjal_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmp8oimqjal_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmp8oimqjal_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmp8oimqjal_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxVal int = -1\n    var maxFreq int = -1\n    for _, v := range\
    \ lst {\n        if v > maxVal {\n            maxVal = v\n            maxFreq\
    \ = 1\n        } else if v == maxVal {\n            maxFreq++\n        }\n   \
    \ }\n    if maxFreq == 0 {\n        return -1\n    }\n    return maxVal\n}\n\n\
    func TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpu0b27lbg_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpu0b27lbg_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpu0b27lbg_test.go:70: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpu0b27lbg_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpu0b27lbg_test.go:70: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpu0b27lbg_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpu0b27lbg_test.go:70: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpu0b27lbg_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpu0b27lbg_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpu0b27lbg_test.go:70:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpu0b27lbg_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpu0b27lbg_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmpu0b27lbg_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpu0b27lbg_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpu0b27lbg_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpu0b27lbg_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpu0b27lbg_test.go:70: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxVal int = -1\n    var maxCount int = -1\n    for _, v := range\
    \ lst {\n        if v > maxVal {\n            maxVal = v\n            maxCount\
    \ = 1\n        } else if v == maxVal {\n            maxCount++\n        }\n  \
    \  }\n    if maxCount > maxVal {\n        return -1\n    }\n    return maxVal\n\
    }\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp9_iy5ubd_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmp9_iy5ubd_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp9_iy5ubd_test.go:70: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp9_iy5ubd_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmp9_iy5ubd_test.go:70: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmp9_iy5ubd_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmp9_iy5ubd_test.go:70: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmp9_iy5ubd_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmp9_iy5ubd_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmp9_iy5ubd_test.go:70:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmp9_iy5ubd_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmp9_iy5ubd_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmp9_iy5ubd_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmp9_iy5ubd_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmp9_iy5ubd_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp9_iy5ubd_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmp9_iy5ubd_test.go:70: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxVal int = -1\n    var maxCount int = 0\n    for _, val := range\
    \ lst {\n        if val > 0 {\n            if maxCount == 0 || maxCount < val\
    \ {\n                maxCount = val\n                maxVal = val\n          \
    \  }\n        }\n    }\n    return maxVal\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp53c8ysqb_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmp53c8ysqb_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp53c8ysqb_test.go:67: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp53c8ysqb_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmp53c8ysqb_test.go:67: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmp53c8ysqb_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmp53c8ysqb_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmp53c8ysqb_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmp53c8ysqb_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmp53c8ysqb_test.go:67:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmp53c8ysqb_test.go:67: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmp53c8ysqb_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmp53c8ysqb_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmp53c8ysqb_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmp53c8ysqb_test.go:67: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp53c8ysqb_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmp53c8ysqb_test.go:67: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxVal int = -1\n    var maxFreq int = -1\n    for _, v := range\
    \ lst {\n        if v > 0 {\n            if maxFreq < v {\n                maxFreq\
    \ = v\n                maxVal = v\n            }\n        }\n    }\n    return\
    \ maxVal\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual:\
    \ candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8, 8,\
    \ 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3, 3,\
    \ 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7,\
    \ 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpwuaxxyh7_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpwuaxxyh7_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpwuaxxyh7_test.go:67: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpwuaxxyh7_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpwuaxxyh7_test.go:67: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpwuaxxyh7_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpwuaxxyh7_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpwuaxxyh7_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpwuaxxyh7_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpwuaxxyh7_test.go:67:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpwuaxxyh7_test.go:67: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpwuaxxyh7_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmpwuaxxyh7_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpwuaxxyh7_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpwuaxxyh7_test.go:67: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpwuaxxyh7_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpwuaxxyh7_test.go:67: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int = -1\n    var freq int = 0\n    for _, v := range lst {\n\
    \        if v > 0 {\n            freq++\n            if freq > max {\n       \
    \         max = freq\n            }\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4,\
    \ 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected:\
    \ -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8\
    \ },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10,\
    \ 8, 1}), expected: 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected:\
    \ 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n\
    \     { actual: candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8,\
    \ 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 9, 10, 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8,\
    \ 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpg9ko_jjv_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpg9ko_jjv_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpg9ko_jjv_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpg9ko_jjv_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpg9ko_jjv_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpg9ko_jjv_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpg9ko_jjv_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpg9ko_jjv_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpg9ko_jjv_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpg9ko_jjv_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpg9ko_jjv_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpg9ko_jjv_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxVal int = -1\n    var maxFreq int = -1\n    for _, v := range\
    \ lst {\n        if v > maxVal {\n            maxVal = v\n            maxFreq\
    \ = 0\n        }\n        if v == maxVal {\n            maxFreq++\n        }\n\
    \    }\n    if maxFreq > maxVal {\n        return -1\n    }\n    return maxVal\n\
    }\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmphrj90u9q_test.go:71: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmphrj90u9q_test.go:71: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmphrj90u9q_test.go:71: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmphrj90u9q_test.go:71: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmphrj90u9q_test.go:71: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmphrj90u9q_test.go:71: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmphrj90u9q_test.go:71: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmphrj90u9q_test.go:71: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmphrj90u9q_test.go:71: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmphrj90u9q_test.go:71:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmphrj90u9q_test.go:71: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmphrj90u9q_test.go:71:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmphrj90u9q_test.go:71: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmphrj90u9q_test.go:71:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmphrj90u9q_test.go:71: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmphrj90u9q_test.go:71:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmphrj90u9q_test.go:71: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        freq++\n\
    \        if v > 0 {\n            if freq > max {\n                max = v\n  \
    \          }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpafmx5yto_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpafmx5yto_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpafmx5yto_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpafmx5yto_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpafmx5yto_test.go:67: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpafmx5yto_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpafmx5yto_test.go:67: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpafmx5yto_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpafmx5yto_test.go:67: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpafmx5yto_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpafmx5yto_test.go:67: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpafmx5yto_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpafmx5yto_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpafmx5yto_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpafmx5yto_test.go:67: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpafmx5yto_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpafmx5yto_test.go:67: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxVal int = -1\n    var maxFreq int = -1\n    for _, v := range\
    \ lst {\n        if v > maxVal {\n            maxVal = v\n            maxFreq\
    \ = maxVal\n        } else if v == maxVal {\n            maxFreq++\n        }\n\
    \    }\n    return maxFreq > maxVal ? maxVal : -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp387p_jgi_test.go:27:29: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq map[int]int\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\npanic: assignment to entry in nil map [recovered]\n\
    \tpanic: assignment to entry in nil map\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x505a40,\
    \ 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x505a40, 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.search(...)\n\t/tmp/tmpxl949nx4_test.go:19\n\
    command-line-arguments_test.TestSearch(0xc0001036c0?)\n\t/tmp/tmpxl949nx4_test.go:36\
    \ +0xad\ntesting.tRunner(0xc0001036c0, 0x52b080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        freq++\n\
    \        if v > 0 {\n            if freq > max {\n                max = v\n  \
    \          }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpafmx5yto_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpafmx5yto_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpafmx5yto_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpafmx5yto_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpafmx5yto_test.go:67: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpafmx5yto_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpafmx5yto_test.go:67: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpafmx5yto_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpafmx5yto_test.go:67: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpafmx5yto_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpafmx5yto_test.go:67: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpafmx5yto_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpafmx5yto_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpafmx5yto_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpafmx5yto_test.go:67: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpafmx5yto_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpafmx5yto_test.go:67: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxFreq int\n    var maxVal int\n    for _, v := range lst {\n  \
    \      if v > maxVal {\n            maxFreq = maxVal\n            maxVal = v\n\
    \        } else if v == maxVal {\n            maxFreq++\n        }\n    }\n  \
    \  if maxFreq == 0 {\n        return -1\n    }\n    return maxVal\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp_dhwcdok_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmp_dhwcdok_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp_dhwcdok_test.go:70: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp_dhwcdok_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmp_dhwcdok_test.go:70: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmp_dhwcdok_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmp_dhwcdok_test.go:70: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmp_dhwcdok_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmp_dhwcdok_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmp_dhwcdok_test.go:70:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmp_dhwcdok_test.go:70: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp_dhwcdok_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmp_dhwcdok_test.go:70: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmp_dhwcdok_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmp_dhwcdok_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmp_dhwcdok_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmp_dhwcdok_test.go:70: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    ---"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max > 0 {\n        return max\n\
    \    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpvkleinzb_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpvkleinzb_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpvkleinzb_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpvkleinzb_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpvkleinzb_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpvkleinzb_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpvkleinzb_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpvkleinzb_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpvkleinzb_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpvkleinzb_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpvkleinzb_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpvkleinzb_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpvkleinzb_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpvkleinzb_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpvkleinzb_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpvkleinzb_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpvkleinzb_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq map[int]int\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\npanic: assignment to entry in nil map [recovered]\n\
    \tpanic: assignment to entry in nil map\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x505a40,\
    \ 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x505a40, 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.search(...)\n\t/tmp/tmpxl949nx4_test.go:19\n\
    command-line-arguments_test.TestSearch(0xc0001036c0?)\n\t/tmp/tmpxl949nx4_test.go:36\
    \ +0xad\ntesting.tRunner(0xc0001036c0, 0x52b080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxFreq int\n    var maxVal int\n    for _, v := range lst {\n  \
    \      if v > maxVal {\n            maxVal = v\n            maxFreq = 1\n    \
    \    } else if v == maxVal {\n            maxFreq++\n        }\n    }\n    if\
    \ maxFreq == 0 {\n        return -1\n    }\n    return maxVal\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpr82x2ua2_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpr82x2ua2_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpr82x2ua2_test.go:70: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpr82x2ua2_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpr82x2ua2_test.go:70: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpr82x2ua2_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpr82x2ua2_test.go:70: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpr82x2ua2_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpr82x2ua2_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpr82x2ua2_test.go:70:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpr82x2ua2_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpr82x2ua2_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmpr82x2ua2_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpr82x2ua2_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpr82x2ua2_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpr82x2ua2_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpr82x2ua2_test.go:70: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq int\n    var max int\n    for _, v := range lst {\n        freq++\n\
    \        if v > max {\n            max = v\n        }\n    }\n    if freq > max\
    \ {\n        return -1\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp3hqcgbiz_test.go:68: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp3hqcgbiz_test.go:68: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmp3hqcgbiz_test.go:68: expected '%!s(int=-1)', got '%!s(int=3)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmp3hqcgbiz_test.go:68: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmp3hqcgbiz_test.go:68: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmp3hqcgbiz_test.go:68: expected\
    \ '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmp3hqcgbiz_test.go:68: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmp3hqcgbiz_test.go:68: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmp3hqcgbiz_test.go:68: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmp3hqcgbiz_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmp3hqcgbiz_test.go:68: expected '%!s(int=5)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp3hqcgbiz_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmp3hqcgbiz_test.go:68: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmp3hqcgbiz_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmp3hqcgbiz_test.go:68: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmp3hqcgbiz_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmp3hqcgbiz_test.go:68: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    ---"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxVal int = -1\n    var maxFreq int = -1\n    for _, v := range\
    \ lst {\n        if v > maxVal {\n            maxVal = v\n            maxFreq\
    \ = 1\n        } else if v == maxVal {\n            maxFreq++\n        }\n   \
    \ }\n    if maxFreq > maxVal {\n        return -1\n    }\n    return maxVal\n\
    }\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpxszqff7x_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpxszqff7x_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpxszqff7x_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpxszqff7x_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpxszqff7x_test.go:70:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpxszqff7x_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpxszqff7x_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmpxszqff7x_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpxszqff7x_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpxszqff7x_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpxszqff7x_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpxszqff7x_test.go:70: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxVal int = -1\n    var maxFreq int = -1\n    for _, v := range\
    \ lst {\n        if v > maxVal {\n            maxVal = v\n            maxFreq\
    \ = 1\n        } else if v == maxVal {\n            maxFreq++\n        }\n   \
    \ }\n    if maxFreq > maxVal {\n        return -1\n    }\n    return maxVal\n\
    }\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpxszqff7x_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpxszqff7x_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpxszqff7x_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpxszqff7x_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpxszqff7x_test.go:70:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpxszqff7x_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpxszqff7x_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmpxszqff7x_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpxszqff7x_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpxszqff7x_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpxszqff7x_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpxszqff7x_test.go:70: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        freq++\n\
    \        if v > 0 {\n            if freq > max {\n                max = v\n  \
    \          }\n        }\n    }\n    if max > 0 {\n        return max\n    }\n\
    \    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp_6g3_4xo_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmp_6g3_4xo_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmp_6g3_4xo_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmp_6g3_4xo_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmp_6g3_4xo_test.go:70: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmp_6g3_4xo_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp_6g3_4xo_test.go:70: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp_6g3_4xo_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmp_6g3_4xo_test.go:70: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmp_6g3_4xo_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmp_6g3_4xo_test.go:70: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp_6g3_4xo_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmp_6g3_4xo_test.go:70: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmp_6g3_4xo_test.go:70:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmp_6g3_4xo_test.go:70: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp_6g3_4xo_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp_6g3_4xo_test.go:70: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int = -1\n    var freq int = 0\n    for _, v := range lst {\n\
    \        if v > 0 {\n            freq++\n            if v > max {\n          \
    \      max = v\n            }\n        }\n    }\n    if freq > max {\n       \
    \ return -1\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp6hce0tkp_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp6hce0tkp_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmp6hce0tkp_test.go:70: expected '%!s(int=-1)', got '%!s(int=3)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmp6hce0tkp_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmp6hce0tkp_test.go:70: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmp6hce0tkp_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmp6hce0tkp_test.go:70: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmp6hce0tkp_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmp6hce0tkp_test.go:70: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmp6hce0tkp_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmp6hce0tkp_test.go:70: expected '%!s(int=5)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp6hce0tkp_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmp6hce0tkp_test.go:70: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmp6hce0tkp_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmp6hce0tkp_test.go:70: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmp6hce0tkp_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmp6hce0tkp_test.go:70: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    ---"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int = -1\n    var freq int = 0\n    for _, v := range lst {\n\
    \        freq = freq + v\n        if freq > max {\n            max = freq\n  \
    \      }\n    }\n    if max > 0 {\n        return max\n    }\n    return -1\n\
    }\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp0lp1snp7_test.go:68: expected '%!s(int=1)', got '%!s(int=21)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp0lp1snp7_test.go:68: expected\
    \ '%!s(int=4)', got '%!s(int=18)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmp0lp1snp7_test.go:68: expected '%!s(int=-1)', got '%!s(int=6)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmp0lp1snp7_test.go:68: expected\
    \ '%!s(int=8)', got '%!s(int=64)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp0lp1snp7_test.go:68: expected '%!s(int=2)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp0lp1snp7_test.go:68: expected\
    \ '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmp0lp1snp7_test.go:68: expected '%!s(int=2)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmp0lp1snp7_test.go:68: expected\
    \ '%!s(int=1)', got '%!s(int=71)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmp0lp1snp7_test.go:68: expected '%!s(int=-1)', got '%!s(int=40)'\n \
    \   --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmp0lp1snp7_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=163)'\n    --- FAIL: TestSearch/test_num__10\
    \ (0.00s)\n        tmp0lp1snp7_test.go:68: expected '%!s(int=1)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmp0lp1snp7_test.go:68:\
    \ expected '%!s(int=5)', got '%!s(int=153)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmp0lp1snp7_test.go:68: expected '%!s(int=4)', got '%!s(int=114)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmp0lp1snp7_test.go:68:\
    \ expected '%!s(int=2)', got '%!s(int=100)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmp0lp1snp7_test.go:68: expected '%!s(int=1)', got '%!s(int=75)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmp0lp1snp7_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=162)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmp0lp1snp7_test.go:68: expected '%!s(int=4)', got '%!s(int=119)"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxVal int = -1\n    var maxFreq int = -1\n    for _, v := range\
    \ lst {\n        if v > maxVal {\n            maxVal = v\n            maxFreq\
    \ = 1\n        } else if v == maxVal {\n            maxFreq++\n        }\n   \
    \ }\n    if maxFreq > maxVal {\n        return -1\n    }\n    return maxVal\n\
    }\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpxszqff7x_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpxszqff7x_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpxszqff7x_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpxszqff7x_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpxszqff7x_test.go:70:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpxszqff7x_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpxszqff7x_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmpxszqff7x_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpxszqff7x_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpxszqff7x_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpxszqff7x_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpxszqff7x_test.go:70: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        freq++\n\
    \        if v > max {\n            max = v\n        }\n    }\n    if freq > max\
    \ {\n        return -1\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppojfy9a9_test.go:68: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppojfy9a9_test.go:68: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmppojfy9a9_test.go:68: expected '%!s(int=-1)', got '%!s(int=3)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppojfy9a9_test.go:68: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppojfy9a9_test.go:68: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppojfy9a9_test.go:68: expected\
    \ '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppojfy9a9_test.go:68: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmppojfy9a9_test.go:68: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmppojfy9a9_test.go:68: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmppojfy9a9_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmppojfy9a9_test.go:68: expected '%!s(int=5)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppojfy9a9_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppojfy9a9_test.go:68: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppojfy9a9_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppojfy9a9_test.go:68: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppojfy9a9_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppojfy9a9_test.go:68: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    ---"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq int\n    var max int\n    for _, v := range lst {\n        freq++\n\
    \        if v > 0 {\n            if freq > max {\n                max = freq\n\
    \            }\n        }\n    }\n    if max < 1 {\n        return -1\n    }\n\
    \    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp7vbl_k2n_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp7vbl_k2n_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmp7vbl_k2n_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmp7vbl_k2n_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmp7vbl_k2n_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmp7vbl_k2n_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmp7vbl_k2n_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmp7vbl_k2n_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmp7vbl_k2n_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmp7vbl_k2n_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmp7vbl_k2n_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp7vbl_k2n_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmp7vbl_k2n_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmp7vbl_k2n_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmp7vbl_k2n_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmp7vbl_k2n_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmp7vbl_k2n_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxVal int = -1\n    var maxFreq int = -1\n    for _, v := range\
    \ lst {\n        if v > maxVal {\n            maxVal = v\n            maxFreq\
    \ = 1\n        } else if v == maxVal {\n            maxFreq++\n        }\n   \
    \ }\n    if maxFreq > maxVal {\n        return -1\n    }\n    return maxVal\n\
    }\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpxszqff7x_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpxszqff7x_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpxszqff7x_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpxszqff7x_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpxszqff7x_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpxszqff7x_test.go:70:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpxszqff7x_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpxszqff7x_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmpxszqff7x_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpxszqff7x_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpxszqff7x_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpxszqff7x_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpxszqff7x_test.go:70: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int = -1\n    var freq int = 0\n    for _, v := range lst {\n\
    \        freq = freq + v\n        if freq > max {\n            max = freq\n  \
    \      }\n    }\n    if max > 0 {\n        return max\n    }\n    return -1\n\
    }\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp0lp1snp7_test.go:68: expected '%!s(int=1)', got '%!s(int=21)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp0lp1snp7_test.go:68: expected\
    \ '%!s(int=4)', got '%!s(int=18)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmp0lp1snp7_test.go:68: expected '%!s(int=-1)', got '%!s(int=6)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmp0lp1snp7_test.go:68: expected\
    \ '%!s(int=8)', got '%!s(int=64)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp0lp1snp7_test.go:68: expected '%!s(int=2)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp0lp1snp7_test.go:68: expected\
    \ '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmp0lp1snp7_test.go:68: expected '%!s(int=2)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmp0lp1snp7_test.go:68: expected\
    \ '%!s(int=1)', got '%!s(int=71)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmp0lp1snp7_test.go:68: expected '%!s(int=-1)', got '%!s(int=40)'\n \
    \   --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmp0lp1snp7_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=163)'\n    --- FAIL: TestSearch/test_num__10\
    \ (0.00s)\n        tmp0lp1snp7_test.go:68: expected '%!s(int=1)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmp0lp1snp7_test.go:68:\
    \ expected '%!s(int=5)', got '%!s(int=153)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmp0lp1snp7_test.go:68: expected '%!s(int=4)', got '%!s(int=114)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmp0lp1snp7_test.go:68:\
    \ expected '%!s(int=2)', got '%!s(int=100)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmp0lp1snp7_test.go:68: expected '%!s(int=1)', got '%!s(int=75)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmp0lp1snp7_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=162)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmp0lp1snp7_test.go:68: expected '%!s(int=4)', got '%!s(int=119)"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int = -1\n    var freq int = 0\n    for _, v := range lst {\n\
    \        if v > 0 {\n            freq++\n            if freq > max {\n       \
    \         max = v\n            }\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4,\
    \ 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected:\
    \ -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8\
    \ },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10,\
    \ 8, 1}), expected: 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected:\
    \ 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n\
    \     { actual: candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8,\
    \ 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 9, 10, 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8,\
    \ 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpcf0m_d7w_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpcf0m_d7w_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpcf0m_d7w_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpcf0m_d7w_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpcf0m_d7w_test.go:67: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpcf0m_d7w_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpcf0m_d7w_test.go:67: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpcf0m_d7w_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpcf0m_d7w_test.go:67: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpcf0m_d7w_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpcf0m_d7w_test.go:67: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpcf0m_d7w_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpcf0m_d7w_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpcf0m_d7w_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpcf0m_d7w_test.go:67: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpcf0m_d7w_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpcf0m_d7w_test.go:67: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int = -1\n    var freq int = 0\n    for _, v := range lst {\n\
    \        if v > 0 {\n            freq++\n            if freq > max {\n       \
    \         max = freq\n            }\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4,\
    \ 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected:\
    \ -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8\
    \ },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10,\
    \ 8, 1}), expected: 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected:\
    \ 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n\
    \     { actual: candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8,\
    \ 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 9, 10, 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8,\
    \ 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpg9ko_jjv_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpg9ko_jjv_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpg9ko_jjv_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpg9ko_jjv_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpg9ko_jjv_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpg9ko_jjv_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpg9ko_jjv_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpg9ko_jjv_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpg9ko_jjv_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpg9ko_jjv_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpg9ko_jjv_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpg9ko_jjv_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq map[int]int\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if freq[k] > v {\n            return\
    \ k\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\npanic: assignment to entry in nil map [recovered]\n\
    \tpanic: assignment to entry in nil map\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x505a40,\
    \ 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x505a40, 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.search(...)\n\t/tmp/tmpyux8yup8_test.go:19\n\
    command-line-arguments_test.TestSearch(0xc0001924e0?)\n\t/tmp/tmpyux8yup8_test.go:36\
    \ +0xad\ntesting.tRunner(0xc0001924e0, 0x52b080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 2
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int = -1\n    var max int = -1\n    for _, v := range lst {\n\
    \        if v > 0 {\n            if v > max {\n                max = v\n     \
    \       }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0dt1w0ns_test.go:18:9:\
    \ max redeclared in this block\n\t/tmp/tmp0dt1w0ns_test.go:17:9: other declaration\
    \ of max\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int = -1\n    var freq int = 0\n    for _, v := range lst {\n\
    \        freq = freq + 1\n        if v > max {\n            max = v\n        }\n\
    \        if freq > max {\n            max = freq\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual:\
    \ candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8, 8,\
    \ 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3, 3,\
    \ 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7,\
    \ 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpyt1vsvna_test.go:68: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpyt1vsvna_test.go:68: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpyt1vsvna_test.go:68: expected '%!s(int=-1)', got '%!s(int=3)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpyt1vsvna_test.go:68: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpyt1vsvna_test.go:68: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpyt1vsvna_test.go:68: expected\
    \ '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpyt1vsvna_test.go:68: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpyt1vsvna_test.go:68: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpyt1vsvna_test.go:68: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpyt1vsvna_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpyt1vsvna_test.go:68: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpyt1vsvna_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpyt1vsvna_test.go:68: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpyt1vsvna_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpyt1vsvna_test.go:68: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpyt1vsvna_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpyt1vsvna_test.go:68: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- F"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxVal int = -1\n    var maxFreq int = -1\n    for _, v := range\
    \ lst {\n        if v > maxVal {\n            maxVal = v\n            maxFreq\
    \ = 1\n        } else if v == maxVal {\n            maxFreq++\n        }\n   \
    \ }\n    if maxFreq == 0 {\n        return -1\n    }\n    return maxVal\n}\n\n\
    func TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpu0b27lbg_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpu0b27lbg_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpu0b27lbg_test.go:70: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpu0b27lbg_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpu0b27lbg_test.go:70: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpu0b27lbg_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpu0b27lbg_test.go:70: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpu0b27lbg_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpu0b27lbg_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpu0b27lbg_test.go:70:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpu0b27lbg_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpu0b27lbg_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmpu0b27lbg_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpu0b27lbg_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpu0b27lbg_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpu0b27lbg_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpu0b27lbg_test.go:70: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int = -1\n    var freq int = 0\n    for _, v := range lst {\n\
    \        freq = freq + v\n        if freq > max {\n            max = freq\n  \
    \      }\n    }\n    if max > 0 {\n        return max\n    }\n    return -1\n\
    }\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp0lp1snp7_test.go:68: expected '%!s(int=1)', got '%!s(int=21)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp0lp1snp7_test.go:68: expected\
    \ '%!s(int=4)', got '%!s(int=18)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmp0lp1snp7_test.go:68: expected '%!s(int=-1)', got '%!s(int=6)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmp0lp1snp7_test.go:68: expected\
    \ '%!s(int=8)', got '%!s(int=64)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp0lp1snp7_test.go:68: expected '%!s(int=2)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp0lp1snp7_test.go:68: expected\
    \ '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmp0lp1snp7_test.go:68: expected '%!s(int=2)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmp0lp1snp7_test.go:68: expected\
    \ '%!s(int=1)', got '%!s(int=71)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmp0lp1snp7_test.go:68: expected '%!s(int=-1)', got '%!s(int=40)'\n \
    \   --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmp0lp1snp7_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=163)'\n    --- FAIL: TestSearch/test_num__10\
    \ (0.00s)\n        tmp0lp1snp7_test.go:68: expected '%!s(int=1)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmp0lp1snp7_test.go:68:\
    \ expected '%!s(int=5)', got '%!s(int=153)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmp0lp1snp7_test.go:68: expected '%!s(int=4)', got '%!s(int=114)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmp0lp1snp7_test.go:68:\
    \ expected '%!s(int=2)', got '%!s(int=100)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmp0lp1snp7_test.go:68: expected '%!s(int=1)', got '%!s(int=75)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmp0lp1snp7_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=162)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmp0lp1snp7_test.go:68: expected '%!s(int=4)', got '%!s(int=119)"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq map[int]int\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\npanic: assignment to entry in nil map [recovered]\n\
    \tpanic: assignment to entry in nil map\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x505a40,\
    \ 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x505a40, 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.search(...)\n\t/tmp/tmpxl949nx4_test.go:19\n\
    command-line-arguments_test.TestSearch(0xc0001036c0?)\n\t/tmp/tmpxl949nx4_test.go:36\
    \ +0xad\ntesting.tRunner(0xc0001036c0, 0x52b080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq map[int]int\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\npanic: assignment to entry in nil map [recovered]\n\
    \tpanic: assignment to entry in nil map\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x505a40,\
    \ 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x505a40, 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.search(...)\n\t/tmp/tmpxl949nx4_test.go:19\n\
    command-line-arguments_test.TestSearch(0xc0001036c0?)\n\t/tmp/tmpxl949nx4_test.go:36\
    \ +0xad\ntesting.tRunner(0xc0001036c0, 0x52b080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxVal int = -1\n    var maxFreq int = -1\n    for _, val := range\
    \ lst {\n        if val > maxVal {\n            maxVal = val\n            maxFreq\
    \ = 1\n        } else if val == maxVal {\n            maxFreq++\n        }\n \
    \   }\n    if maxFreq == 0 {\n        return -1\n    }\n    return maxVal\n}\n\
    \nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp0r42irji_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmp0r42irji_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp0r42irji_test.go:70: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp0r42irji_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmp0r42irji_test.go:70: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmp0r42irji_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmp0r42irji_test.go:70: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmp0r42irji_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmp0r42irji_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmp0r42irji_test.go:70:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmp0r42irji_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmp0r42irji_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmp0r42irji_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmp0r42irji_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmp0r42irji_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp0r42irji_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmp0r42irji_test.go:70: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxVal int = -1\n    var maxCount int = 0\n    for _, v := range\
    \ lst {\n        if v > maxVal {\n            maxVal = v\n            maxCount\
    \ = 1\n        } else if v == maxVal {\n            maxCount++\n        }\n  \
    \  }\n    if maxCount > maxVal {\n        return -1\n    }\n    return maxVal\n\
    }\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpe_4p2jol_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpe_4p2jol_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpe_4p2jol_test.go:70: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpe_4p2jol_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpe_4p2jol_test.go:70: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpe_4p2jol_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpe_4p2jol_test.go:70: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpe_4p2jol_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpe_4p2jol_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpe_4p2jol_test.go:70:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpe_4p2jol_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpe_4p2jol_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmpe_4p2jol_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpe_4p2jol_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpe_4p2jol_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpe_4p2jol_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpe_4p2jol_test.go:70: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        freq++\n\
    \        if v > max {\n            max = v\n        }\n    }\n    if freq > max\
    \ {\n        return -1\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppojfy9a9_test.go:68: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppojfy9a9_test.go:68: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmppojfy9a9_test.go:68: expected '%!s(int=-1)', got '%!s(int=3)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppojfy9a9_test.go:68: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppojfy9a9_test.go:68: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppojfy9a9_test.go:68: expected\
    \ '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppojfy9a9_test.go:68: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmppojfy9a9_test.go:68: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmppojfy9a9_test.go:68: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmppojfy9a9_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmppojfy9a9_test.go:68: expected '%!s(int=5)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppojfy9a9_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppojfy9a9_test.go:68: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppojfy9a9_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppojfy9a9_test.go:68: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppojfy9a9_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppojfy9a9_test.go:68: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    ---"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        freq++\n\
    \        if v > 0 {\n            if freq > max {\n                max = freq\n\
    \            }\n        }\n    }\n    if max > 0 {\n        return max\n    }\n\
    \    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpcvskygao_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpcvskygao_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpcvskygao_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpcvskygao_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpcvskygao_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpcvskygao_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpcvskygao_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpcvskygao_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpcvskygao_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpcvskygao_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpcvskygao_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpcvskygao_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpcvskygao_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpcvskygao_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpcvskygao_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpcvskygao_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpcvskygao_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxVal int = -1\n    var maxFreq int = -1\n    for _, val := range\
    \ lst {\n        if val > 0 {\n            if maxFreq == -1 || maxFreq > val {\n\
    \                maxFreq = val\n                maxVal = val\n            }\n\
    \        }\n    }\n    return maxVal\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n\
    \        tmp0ul57c1x_test.go:67: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmp0ul57c1x_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmp0ul57c1x_test.go:67: expected '%!s(int=-1)', got '%!s(int=3)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmp0ul57c1x_test.go:67:\
    \ expected '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmp0ul57c1x_test.go:67: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmp0ul57c1x_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmp0ul57c1x_test.go:67: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmp0ul57c1x_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmp0ul57c1x_test.go:67: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__19 (0.00s)\n        tmp0ul57c1x_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__20\
    \ (0.00s)\n        tmp0ul57c1x_test.go:67: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmp0ul57c1x_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        freq++\n\
    \        if v > 0 {\n            if freq > max {\n                max = v\n  \
    \          }\n        }\n    }\n    if freq > max {\n        return -1\n    }\n\
    \    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpgy5l0e27_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpgy5l0e27_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpgy5l0e27_test.go:70: expected '%!s(int=-1)', got '%!s(int=3)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpgy5l0e27_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpgy5l0e27_test.go:70: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpgy5l0e27_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpgy5l0e27_test.go:70: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpgy5l0e27_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpgy5l0e27_test.go:70: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpgy5l0e27_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpgy5l0e27_test.go:70: expected '%!s(int=5)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpgy5l0e27_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpgy5l0e27_test.go:70: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpgy5l0e27_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpgy5l0e27_test.go:70: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpgy5l0e27_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpgy5l0e27_test.go:70: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    ---"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq int\n    var max int\n    for _, v := range lst {\n        freq++\n\
    \        if v > max {\n            max = v\n        }\n    }\n    if freq > max\
    \ {\n        return -1\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp3hqcgbiz_test.go:68: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp3hqcgbiz_test.go:68: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmp3hqcgbiz_test.go:68: expected '%!s(int=-1)', got '%!s(int=3)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmp3hqcgbiz_test.go:68: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmp3hqcgbiz_test.go:68: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmp3hqcgbiz_test.go:68: expected\
    \ '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmp3hqcgbiz_test.go:68: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmp3hqcgbiz_test.go:68: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmp3hqcgbiz_test.go:68: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmp3hqcgbiz_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmp3hqcgbiz_test.go:68: expected '%!s(int=5)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp3hqcgbiz_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmp3hqcgbiz_test.go:68: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmp3hqcgbiz_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmp3hqcgbiz_test.go:68: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmp3hqcgbiz_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmp3hqcgbiz_test.go:68: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    ---"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpflqvgvp8_test.go:67: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpflqvgvp8_test.go:67: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpflqvgvp8_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpflqvgvp8_test.go:67: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ v\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n  \
    \  }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpovf6wa___test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpovf6wa___test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpovf6wa___test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpovf6wa___test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpovf6wa___test.go:70: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpovf6wa___test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpovf6wa___test.go:70: expected '%!s(int=5)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpovf6wa___test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpovf6wa___test.go:70: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpovf6wa___test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpovf6wa___test.go:70: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpovf6wa___test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpovf6wa___test.go:70: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpovf6wa___test.go:70:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpovf6wa___test.go:70: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpovf6wa___test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpovf6wa___test.go:70: expected '%!s(int=-1)', got '%!s(int=9)'\n\
    FAIL\nFAIL"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int = -1\n    var freq int = 0\n    for _, v := range lst {\n\
    \        if v > 0 {\n            freq++\n            if freq > max {\n       \
    \         max = freq\n            }\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4,\
    \ 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected:\
    \ -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8\
    \ },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10,\
    \ 8, 1}), expected: 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected:\
    \ 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n\
    \     { actual: candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8,\
    \ 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 9, 10, 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8,\
    \ 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpg9ko_jjv_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpg9ko_jjv_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpg9ko_jjv_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpg9ko_jjv_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpg9ko_jjv_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpg9ko_jjv_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpg9ko_jjv_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpg9ko_jjv_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpg9ko_jjv_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpg9ko_jjv_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpg9ko_jjv_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpg9ko_jjv_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpg9ko_jjv_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq map[int]int\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\npanic: assignment to entry in nil map [recovered]\n\
    \tpanic: assignment to entry in nil map\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x505a40,\
    \ 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x505a40, 0x54c3f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.search(...)\n\t/tmp/tmpxl949nx4_test.go:19\n\
    command-line-arguments_test.TestSearch(0xc0001036c0?)\n\t/tmp/tmpxl949nx4_test.go:36\
    \ +0xad\ntesting.tRunner(0xc0001036c0, 0x52b080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var freq int\n    var max int\n    for _, v := range lst {\n        freq++\n\
    \        if v > max {\n            max = v\n        }\n    }\n    if freq == 0\
    \ {\n        return -1\n    }\n    for _, v := range lst {\n        if v == max\
    \ && freq >= v {\n            return max\n        }\n    }\n    return -1\n}\n\
    \nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpjjsebzbr_test.go:73: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpjjsebzbr_test.go:73: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpjjsebzbr_test.go:73: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpjjsebzbr_test.go:73: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpjjsebzbr_test.go:73: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpjjsebzbr_test.go:73: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpjjsebzbr_test.go:73: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpjjsebzbr_test.go:73:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpjjsebzbr_test.go:73: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpjjsebzbr_test.go:73:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmpjjsebzbr_test.go:73: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpjjsebzbr_test.go:73:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpjjsebzbr_test.go:73: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpjjsebzbr_test.go:73:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpjjsebzbr_test.go:73: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__21 (0.00s)\n        tmpjjsebzbr_test.go:73:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__22\
    \ (0.00s)\n        tmpjjsebzbr_test.go:73: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \   "
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range freq {\n        if freq[v] > 0 {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmp1qcnrjbx_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp1qcnrjbx_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmp1qcnrjbx_test.go:66: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for k, v := range freq {\n        if v > 0 {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpscg2ghff_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=5)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=-1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__21\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__22 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__23\
    \ (0.00s)\n        tmpscg2ghff_test.go:66: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSearch/test_num__24 (0.00s)\n        tmpscg2ghff_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int = -1\n    var freq int = 0\n    for _, v := range lst {\n\
    \        freq = freq + v\n        if freq > max {\n            max = freq\n  \
    \      }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpcu2kbgkk_test.go:65: expected '%!s(int=1)', got '%!s(int=21)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpcu2kbgkk_test.go:65: expected\
    \ '%!s(int=4)', got '%!s(int=18)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpcu2kbgkk_test.go:65: expected '%!s(int=-1)', got '%!s(int=6)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpcu2kbgkk_test.go:65: expected\
    \ '%!s(int=8)', got '%!s(int=64)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpcu2kbgkk_test.go:65: expected '%!s(int=2)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpcu2kbgkk_test.go:65: expected\
    \ '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpcu2kbgkk_test.go:65: expected '%!s(int=2)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpcu2kbgkk_test.go:65: expected\
    \ '%!s(int=1)', got '%!s(int=71)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpcu2kbgkk_test.go:65: expected '%!s(int=-1)', got '%!s(int=40)'\n \
    \   --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpcu2kbgkk_test.go:65:\
    \ expected '%!s(int=1)', got '%!s(int=163)'\n    --- FAIL: TestSearch/test_num__10\
    \ (0.00s)\n        tmpcu2kbgkk_test.go:65: expected '%!s(int=1)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpcu2kbgkk_test.go:65:\
    \ expected '%!s(int=5)', got '%!s(int=153)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpcu2kbgkk_test.go:65: expected '%!s(int=4)', got '%!s(int=114)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpcu2kbgkk_test.go:65:\
    \ expected '%!s(int=2)', got '%!s(int=100)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmpcu2kbgkk_test.go:65: expected '%!s(int=1)', got '%!s(int=75)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpcu2kbgkk_test.go:65:\
    \ expected '%!s(int=4)', got '%!s(int=162)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpcu2kbgkk_test.go:65: expected '%!s(int=4)', got '%!s(int=119)"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var maxVal int = -1\n    var maxFreq int = -1\n    for _, v := range\
    \ lst {\n        if v > maxVal {\n            maxVal = v\n            maxFreq\
    \ = 1\n        } else if v == maxVal {\n            maxFreq++\n        }\n   \
    \ }\n    if maxFreq == 0 {\n        return -1\n    }\n    return maxVal\n}\n\n\
    func TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpu0b27lbg_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__2 (0.00s)\n        tmpu0b27lbg_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpu0b27lbg_test.go:70: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpu0b27lbg_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpu0b27lbg_test.go:70: expected '%!s(int=2)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpu0b27lbg_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpu0b27lbg_test.go:70: expected '%!s(int=-1)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpu0b27lbg_test.go:70: expected\
    \ '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpu0b27lbg_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpu0b27lbg_test.go:70:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpu0b27lbg_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpu0b27lbg_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmpu0b27lbg_test.go:70: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpu0b27lbg_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpu0b27lbg_test.go:70: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpu0b27lbg_test.go:70:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__19\
    \ (0.00s)\n        tmpu0b27lbg_test.go:70: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    \    --"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        freq +=\
    \ v\n        if freq > max {\n            max = freq\n        }\n    }\n    if\
    \ max < 0 {\n        return -1\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdwmhviqk_test.go:68: expected '%!s(int=1)', got '%!s(int=21)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdwmhviqk_test.go:68: expected\
    \ '%!s(int=4)', got '%!s(int=18)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdwmhviqk_test.go:68: expected '%!s(int=-1)', got '%!s(int=6)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdwmhviqk_test.go:68: expected\
    \ '%!s(int=8)', got '%!s(int=64)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdwmhviqk_test.go:68: expected '%!s(int=2)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdwmhviqk_test.go:68: expected\
    \ '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdwmhviqk_test.go:68: expected '%!s(int=2)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdwmhviqk_test.go:68: expected\
    \ '%!s(int=1)', got '%!s(int=71)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdwmhviqk_test.go:68: expected '%!s(int=-1)', got '%!s(int=40)'\n \
    \   --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdwmhviqk_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=163)'\n    --- FAIL: TestSearch/test_num__10\
    \ (0.00s)\n        tmpdwmhviqk_test.go:68: expected '%!s(int=1)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdwmhviqk_test.go:68:\
    \ expected '%!s(int=5)', got '%!s(int=153)'\n    --- FAIL: TestSearch/test_num__13\
    \ (0.00s)\n        tmpdwmhviqk_test.go:68: expected '%!s(int=4)', got '%!s(int=114)'\n\
    \    --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpdwmhviqk_test.go:68:\
    \ expected '%!s(int=2)', got '%!s(int=100)'\n    --- FAIL: TestSearch/test_num__15\
    \ (0.00s)\n        tmpdwmhviqk_test.go:68: expected '%!s(int=1)', got '%!s(int=75)'\n\
    \    --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpdwmhviqk_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=162)'\n    --- FAIL: TestSearch/test_num__17\
    \ (0.00s)\n        tmpdwmhviqk_test.go:68: expected '%!s(int=4)', got '%!s(int=119)"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int = -1\n    var freq int = 0\n    for _, v := range lst {\n\
    \        if v > 0 {\n            freq++\n            if freq > max {\n       \
    \         max = freq\n            }\n        }\n    }\n    if max < 0 {\n    \
    \    return -1\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpjuo049qw_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpjuo049qw_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpjuo049qw_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpjuo049qw_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpjuo049qw_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpjuo049qw_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpjuo049qw_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpjuo049qw_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpjuo049qw_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpjuo049qw_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpjuo049qw_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpjuo049qw_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpjuo049qw_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpjuo049qw_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpjuo049qw_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpjuo049qw_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpjuo049qw_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073919
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    if max < 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpnvdlt5vv_test.go:70: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpnvdlt5vv_test.go:70: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpnvdlt5vv_test.go:70:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpnvdlt5vv_test.go:70: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        if v >\
    \ 0 {\n            freq++\n            if freq > max {\n                max =\
    \ freq\n            }\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=-1)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpbgqh4ygu_test.go:67: expected\
    \ '%!s(int=-1)', got '%!s(int=7)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbgqh4ygu_test.go:67: expected '%!s(int=1)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=5)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=12)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=4)', got '%!s(int=30)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpbgqh4ygu_test.go:67:\
    \ expected '%!s(int=4)', got '%!s(int=23)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpbgqh4ygu_test.go:67: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FA"
  timestamp: 1660073917
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    max := -1\n    freq := 0\n    for _, v := range lst {\n        freq++\n\
    \        if v > max {\n            max = v\n        }\n    }\n    if freq > max\
    \ {\n        return -1\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppojfy9a9_test.go:68: expected '%!s(int=1)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppojfy9a9_test.go:68: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmppojfy9a9_test.go:68: expected '%!s(int=-1)', got '%!s(int=3)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppojfy9a9_test.go:68: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppojfy9a9_test.go:68: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppojfy9a9_test.go:68: expected\
    \ '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppojfy9a9_test.go:68: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmppojfy9a9_test.go:68: expected\
    \ '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmppojfy9a9_test.go:68: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmppojfy9a9_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=10)'\n    --- FAIL: TestSearch/test_num__11\
    \ (0.00s)\n        tmppojfy9a9_test.go:68: expected '%!s(int=5)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppojfy9a9_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppojfy9a9_test.go:68: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppojfy9a9_test.go:68:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppojfy9a9_test.go:68: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppojfy9a9_test.go:68:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppojfy9a9_test.go:68: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    ---"
  timestamp: 1660073919
