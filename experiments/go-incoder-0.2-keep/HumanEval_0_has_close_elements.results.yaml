language: go_test.go
name: HumanEval_0_has_close_elements
results:
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    diff *= diff\n    for _, number := range numbers[2:]\
    \ {\n        diff += number - numbers[0]\n        diff /= 2\n        diff *= diff\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpyd4f4foe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpyd4f4foe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpyd4f4foe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpyd4f4foe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    diff *= diff\n    for i := 2; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        diff /= 2\n      \
    \  diff *= diff\n        if diff < threshold {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp2_7t23d5_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp2_7t23d5_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp2_7t23d5_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__6 (0.00s)\n        tmp2_7t23d5_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= numbers[1]\n    for _, n := range numbers {\n    \
    \    diff /= n\n        if diff > threshold {\n            return true\n     \
    \   }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcn_a3wns_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpcn_a3wns_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmpcn_a3wns_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpe8ribrh5_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpe8ribrh5_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpe8ribrh5_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpe8ribrh5_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff -= numbers[i]\n    }\n\
    \    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp3ahmfs6o_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp3ahmfs6o_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp3ahmfs6o_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp3ahmfs6o_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= numbers[1] - numbers[0]\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        diff /= numbers[i]\
    \ - numbers[i-1]\n    }\n\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp_mde39bf_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp_mde39bf_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmp_mde39bf_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n    for\
    \ i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz96v7pd2_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz96v7pd2_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp31l5uwy4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp31l5uwy4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp31l5uwy4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp31l5uwy4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpojhv0gvb_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpojhv0gvb_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpojhv0gvb_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpojhv0gvb_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n    for\
    \ i := 1; i < len(numbers); i++ {\n        diff += numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpcr49mlfs_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpcr49mlfs_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpcr49mlfs_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpcr49mlfs_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp31l5uwy4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp31l5uwy4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp31l5uwy4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp31l5uwy4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmppdumsca1_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmppdumsca1_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmppdumsca1_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers {\n        diff\
    \ += number - threshold\n        if diff < 0 {\n            diff = 0\n       \
    \ }\n        if diff > threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpbptqzzn3_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpbptqzzn3_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpbptqzzn3_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers {\n        if\
    \ number > threshold {\n            return false\n        }\n        if number\
    \ < -threshold {\n            return false\n        }\n        diff += number\n\
    \    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpfrx9xozp_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpfrx9xozp_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpfrx9xozp_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpfrx9xozp_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff -= number\n    }\n    return\
    \ true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp8dpizhkj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp8dpizhkj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp8dpizhkj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp8dpizhkj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n    for\
    \ i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz96v7pd2_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz96v7pd2_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers {\n        if\
    \ number - threshold < diff {\n            return true\n        }\n        diff\
    \ -= number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp8ps6m5w9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8ps6m5w9_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp8ps6m5w9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for i := 1; i < len(numbers); i++ {\n     \
    \   diff += numbers[i] - numbers[i-1]\n        diff /= 2\n        if diff < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp_zfmmfku_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp_zfmmfku_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n\n    for _, number := range numbers {\n      \
    \  if number > threshold {\n            return false\n        }\n        if number\
    \ < -threshold {\n            return false\n        }\n        if number > diff\
    \ {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpndpcfot8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpndpcfot8_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpndpcfot8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpndpcfot8_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n\n   \
    \ for i := 2; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpvuxt1osm_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpvuxt1osm_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n\n    for _, number := range numbers {\n      \
    \  if number - diff < threshold {\n            return true\n        }\n    }\n\
    \n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp5_5vhkm4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp5_5vhkm4_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp5_5vhkm4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers {\n        if\
    \ number - threshold < diff {\n            return true\n        }\n        diff\
    \ -= number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp8ps6m5w9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8ps6m5w9_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp8ps6m5w9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for i := 1; i < len(numbers); i++ {\n     \
    \   diff += numbers[i] - numbers[i-1]\n        diff /= 2\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmppw0gvnk8_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmppw0gvnk8_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmppw0gvnk8_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__6 (0.00s)\n        tmppw0gvnk8_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmppdumsca1_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmppdumsca1_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmppdumsca1_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    diff *= diff\n    for i := 2; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        diff /= 2\n      \
    \  diff *= diff\n        if diff < threshold {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp2_7t23d5_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp2_7t23d5_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp2_7t23d5_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__6 (0.00s)\n        tmp2_7t23d5_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        if number -\
    \ diff < threshold {\n            return true\n        }\n        diff = number\n\
    \    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n \
    \ candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp0omtlcl__test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp0omtlcl__test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp2roy9t8s_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp2roy9t8s_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp2roy9t8s_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp31l5uwy4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp31l5uwy4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp31l5uwy4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp31l5uwy4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    diff *= diff\n    for i := 1; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        diff /= 2\n      \
    \  diff *= diff\n        if diff < threshold {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp0g8qbn_r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp0g8qbn_r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp0g8qbn_r_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__6 (0.00s)\n        tmp0g8qbn_r_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for i := 1; i < len(numbers); i++ {\n     \
    \   diff += numbers[i] - numbers[i-1]\n        diff /= 2\n        if diff < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp_zfmmfku_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp_zfmmfku_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff -= numbers[i]\n    }\n\
    \    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp3ahmfs6o_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp3ahmfs6o_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp3ahmfs6o_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp3ahmfs6o_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff -= number\n    }\n    return\
    \ true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpl1w292ie_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpl1w292ie_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpl1w292ie_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpl1w292ie_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers {\n        diff\
    \ += number - threshold\n        if diff < 0 {\n            diff = 0\n       \
    \ }\n        if diff > threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpbptqzzn3_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpbptqzzn3_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpbptqzzn3_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, n := range numbers[2:] {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff -= n\n    }\n    return\
    \ true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp42q3m0ag_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp42q3m0ag_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp42q3m0ag_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp42q3m0ag_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n\n    for _, number := range numbers {\n      \
    \  if number - diff < threshold {\n            return true\n        }\n    }\n\
    \n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp5_5vhkm4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp5_5vhkm4_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp5_5vhkm4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return true\n    }\n\n    diff\
    \ /= 2\n    diff *= diff\n    diff /= 2\n    diff *= diff\n    diff /= 2\n\n \
    \   return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n\
    \  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp9uf4ddoa_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp9uf4ddoa_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp9uf4ddoa_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        if number -\
    \ diff < threshold {\n            return true\n        }\n        diff = number\n\
    \    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n \
    \ candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp0omtlcl__test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp0omtlcl__test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n    for\
    \ i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz96v7pd2_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz96v7pd2_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    diff *= diff\n    diff += threshold\n\n   \
    \ for _, number := range numbers {\n        diff /= 2\n        diff *= diff\n\
    \        diff += threshold\n        if diff < 0 {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsxzpdn2j_test.go:24:12: number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    diff *= diff\n    diff += threshold\n\n   \
    \ for i := 1; i < len(numbers); i++ {\n        diff += numbers[i] - numbers[i-1]\n\
    \        diff /= 2\n        diff *= diff\n        diff += threshold\n        if\
    \ diff < 0 {\n            return true\n        }\n    }\n    return false\n}\n\
    \nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpvz6ocpg7_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpvz6ocpg7_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpvz6ocpg7_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpvz6ocpg7_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers {\n        diff\
    \ += number - threshold\n        if diff > threshold {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpa3n0clda_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpa3n0clda_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpa3n0clda_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp31l5uwy4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp31l5uwy4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp31l5uwy4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp31l5uwy4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpmtbb3rss_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpmtbb3rss_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpmtbb3rss_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= numbers[1]\n    diff -= threshold\n    return diff\
    \ < 0\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpq70viogl_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpq70viogl_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpq70viogl_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    diff *= diff\n    diff += threshold\n    return\
    \ diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp8__ueof4_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp8__ueof4_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp8__ueof4_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp8__ueof4_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff -= number\n    }\n    return\
    \ true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp8dpizhkj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp8dpizhkj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp8dpizhkj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp8dpizhkj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers {\n        diff\
    \ += number - threshold\n        if diff > threshold {\n            return true\n\
    \        }\n        diff -= threshold\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp4v6z7536_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp4v6z7536_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp4v6z7536_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    diff *= diff\n    diff += threshold\n    return\
    \ diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp8__ueof4_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp8__ueof4_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp8__ueof4_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp8__ueof4_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n    for\
    \ i := 1; i < len(numbers); i++ {\n        diff += numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpcr49mlfs_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpcr49mlfs_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpcr49mlfs_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpcr49mlfs_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        if number -\
    \ diff < threshold {\n            return true\n        }\n        diff = number\n\
    \    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n \
    \ candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmps277szuj_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmps277szuj_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers[2:] {\n    \
    \    diff += number - numbers[0]\n        diff /= 2\n    }\n    return diff <\
    \ threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate :=\
    \ has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp4lut9aez_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp4lut9aez_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp4lut9aez_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp4lut9aez_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, num := range numbers[2:] {\n        diff += num - numbers[0]\n\
    \        if diff > threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp72c4zb77_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp72c4zb77_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp72c4zb77_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= numbers[0]\n    diff *= diff\n    diff /= numbers[1]\n\
    \    diff *= diff\n\n    for _, number := range numbers {\n        if number -\
    \ threshold < diff {\n            return true\n        }\n    }\n\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp5br9_v4a_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp5br9_v4a_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp5br9_v4a_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, num := range numbers[2:] {\n        if abs(num-diff)\
    \ < threshold {\n            return true\n        }\n        diff = num - diff\n\
    \    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n \
    \ candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfnc0ldy_test.go:20:12: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers {\n        if\
    \ number - diff < threshold {\n            return true\n        }\n        diff\
    \ = number - diff\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpp_65m7aq_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpp_65m7aq_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n    for\
    \ i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz96v7pd2_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz96v7pd2_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, n := range numbers[2:] {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff -= n\n    }\n    return\
    \ true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp42q3m0ag_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp42q3m0ag_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp42q3m0ag_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp42q3m0ag_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n    for\
    \ i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz96v7pd2_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz96v7pd2_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n    }\n\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmphjwmcyh2_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmphjwmcyh2_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmphjwmcyh2_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmphjwmcyh2_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n    for\
    \ i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz96v7pd2_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz96v7pd2_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff -= number\n    }\n    return\
    \ true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp8dpizhkj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp8dpizhkj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp8dpizhkj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp8dpizhkj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        if abs(number\
    \ - numbers[0]) < diff {\n            diff = abs(number - numbers[0])\n      \
    \  }\n    }\n\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplwqf3ju6_test.go:21:12: undefined: abs

    /tmp/tmplwqf3ju6_test.go:22:20: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpe8ribrh5_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpe8ribrh5_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpe8ribrh5_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpe8ribrh5_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpup7m5odz_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpup7m5odz_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpup7m5odz_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpup7m5odz_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers {\n        diff\
    \ += number - threshold\n        if diff < 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpm2btzrhs_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpm2btzrhs_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpm2btzrhs_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers {\n        if number - threshold\
    \ < diff {\n            diff = number - threshold\n        }\n    }\n    return\
    \ diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpc9vkjefo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpc9vkjefo_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpc9vkjefo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpx8t10wzy_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpx8t10wzy_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpx8t10wzy_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074560
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff = number - numbers[0]\n\
    \    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmprp_lb0_4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmprp_lb0_4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmprp_lb0_4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmprp_lb0_4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074560
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff -= number\n    }\n    return\
    \ true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp8dpizhkj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp8dpizhkj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp8dpizhkj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp8dpizhkj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp31l5uwy4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp31l5uwy4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp31l5uwy4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp31l5uwy4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= numbers[1]\n    diff *= diff\n    for _, n := range\
    \ numbers {\n        diff /= n\n        diff *= diff\n        if diff > threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp10_c5icz_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__1 (0.00s)\n        tmp10_c5icz_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__2\
    \ (0.00s)\n        tmp10_c5icz_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__4 (0.00s)\n        tmp10_c5icz_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmp10_c5icz_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074560
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp2roy9t8s_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp2roy9t8s_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp2roy9t8s_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers {\n        if number - threshold\
    \ < diff {\n            diff = number - threshold\n        }\n    }\n    return\
    \ diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpc9vkjefo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpc9vkjefo_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpc9vkjefo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for i := 1; i < len(numbers); i++ {\n     \
    \   diff += numbers[i] - numbers[i-1]\n        diff /= 2\n        if diff < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp_zfmmfku_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp_zfmmfku_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff = numbers[i] - numbers[i-1]\n\
    \    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpv3ooi7jh_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpv3ooi7jh_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpv3ooi7jh_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpv3ooi7jh_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, n := range numbers[2:] {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff -= n\n    }\n    return\
    \ true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp42q3m0ag_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp42q3m0ag_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp42q3m0ag_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp42q3m0ag_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n    for\
    \ i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz96v7pd2_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz96v7pd2_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers {\n        if number - threshold\
    \ < diff {\n            diff = number - threshold\n        }\n    }\n    return\
    \ diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpc9vkjefo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpc9vkjefo_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpc9vkjefo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n    for\
    \ i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz96v7pd2_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz96v7pd2_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        diff += number\
    \ - numbers[0]\n    }\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp8rwk9jdi_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp8rwk9jdi_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp8rwk9jdi_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp8rwk9jdi_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n\n    for _, number := range numbers {\n      \
    \  if number - diff < threshold {\n            return true\n        }\n    }\n\
    \n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp5_5vhkm4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp5_5vhkm4_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp5_5vhkm4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpe8ribrh5_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpe8ribrh5_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpe8ribrh5_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpe8ribrh5_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmppdumsca1_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmppdumsca1_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmppdumsca1_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmppdumsca1_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmppdumsca1_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmppdumsca1_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff -= number\n    }\n    return\
    \ true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp8dpizhkj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp8dpizhkj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp8dpizhkj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp8dpizhkj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers {\n        diff\
    \ += number - threshold\n        if diff > threshold {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpa3n0clda_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpa3n0clda_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpa3n0clda_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, num := range numbers[2:] {\n        if num-diff < threshold\
    \ {\n            return true\n        }\n        diff = num - diff\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpaqeuth0u_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpaqeuth0u_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmpaqeuth0u_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpx8t10wzy_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpx8t10wzy_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpx8t10wzy_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074560
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    diff *= diff\n    diff /= 2\n\n    for _, number\
    \ := range numbers {\n        if number - threshold < diff {\n            return\
    \ true\n        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmprrff4n_c_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__4 (0.00s)\n        tmprrff4n_c_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers {\n        if\
    \ number - threshold < diff {\n            return true\n        }\n        diff\
    \ -= number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp8ps6m5w9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8ps6m5w9_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp8ps6m5w9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n    for\
    \ i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz96v7pd2_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz96v7pd2_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpmtbb3rss_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpmtbb3rss_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpmtbb3rss_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers {\n        diff\
    \ += number - threshold\n        if diff < 0 {\n            diff = 0\n       \
    \ }\n        if diff > threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpbptqzzn3_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpbptqzzn3_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpbptqzzn3_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n\n    for _, number := range numbers {\n      \
    \  if number - threshold < diff {\n            return true\n        }\n    }\n\
    \n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmptk_wp5qz_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmptk_wp5qz_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmptk_wp5qz_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmppdumsca1_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmppdumsca1_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmppdumsca1_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff -= number\n    }\n    return\
    \ true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp8dpizhkj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp8dpizhkj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp8dpizhkj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp8dpizhkj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers {\n        if\
    \ number - diff < threshold {\n            return true\n        }\n        diff\
    \ = number-diff\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpj2oov531_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpj2oov531_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers {\n        if number - threshold\
    \ < diff {\n            diff = number - threshold\n        }\n    }\n    return\
    \ diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpc9vkjefo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpc9vkjefo_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpc9vkjefo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff = number - numbers[0]\n\
    \    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmprp_lb0_4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmprp_lb0_4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmprp_lb0_4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmprp_lb0_4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074560
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, n := range numbers[2:] {\n        diff\
    \ += n - numbers[0]\n        diff /= 2\n    }\n    return diff < threshold\n}\n\
    \nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpuaso1k25_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpuaso1k25_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpuaso1k25_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpuaso1k25_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n\n   \
    \ for i := 2; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpvuxt1osm_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpvuxt1osm_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n\n    for i := 1; i < len(numbers); i++ {\n   \
    \     diff += numbers[i] - numbers[i-1]\n        diff /= 2\n\n        if diff\
    \ < threshold {\n            return true\n        }\n    }\n\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmphnlgvisl_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmphnlgvisl_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n    for\
    \ i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz96v7pd2_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz96v7pd2_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers {\n        if\
    \ number - threshold < diff {\n            return true\n        }\n        diff\
    \ -= number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp8ps6m5w9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8ps6m5w9_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp8ps6m5w9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n    for\
    \ i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz96v7pd2_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz96v7pd2_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= numbers[1]\n    diff *= diff\n    diff /= numbers[0]\n\
    \    diff *= threshold\n    return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmporvlc5nf_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmporvlc5nf_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmporvlc5nf_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers {\n        if number - threshold\
    \ < diff {\n            diff = number - threshold\n        }\n    }\n    return\
    \ diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpc9vkjefo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpc9vkjefo_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpc9vkjefo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        if abs(number-numbers[0])\
    \ < diff {\n            diff = abs(number-numbers[0])\n        }\n    }\n\n  \
    \  return diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n\
    \  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm6q794yv_test.go:21:12: undefined: abs

    /tmp/tmpm6q794yv_test.go:22:20: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, n := range numbers[2:] {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff -= n\n    }\n    return\
    \ true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp42q3m0ag_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp42q3m0ag_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp42q3m0ag_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp42q3m0ag_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= numbers[1]\n    diff *= diff\n    diff /= numbers[0]\n\
    \    diff *= diff\n    diff /= numbers[0]\n\n    return diff < threshold\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__3\
    \ (0.00s)\n        tmpvqpqns77_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__6 (0.00s)\n        tmpvqpqns77_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpx8t10wzy_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpx8t10wzy_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpx8t10wzy_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074560
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    diff *= diff\n    for _, number := range numbers\
    \ {\n        if number - threshold < diff {\n            return true\n       \
    \ }\n        diff -= number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpfu7lekt2_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpfu7lekt2_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpfu7lekt2_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers {\n        if number - threshold\
    \ < diff {\n            diff = number - threshold\n        }\n    }\n    return\
    \ diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpc9vkjefo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpc9vkjefo_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpc9vkjefo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers[2:] {\n    \
    \    if number - diff < threshold {\n            return true\n        }\n    \
    \    diff = number - diff\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpoatichyo_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpoatichyo_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmpoatichyo_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, n := range numbers[2:] {\n        diff\
    \ += n - numbers[0]\n        diff /= 2\n        if diff < threshold {\n      \
    \      return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpjvyva3de_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpjvyva3de_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpjvyva3de_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpjvyva3de_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n    for\
    \ i := 2; i < len(numbers); i++ {\n        diff += numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpwwdsjdau_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpwwdsjdau_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpwwdsjdau_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpwwdsjdau_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    if diff < threshold {\n        return false\n    }\n    for\
    \ i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n\
    \        if diff < threshold {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz96v7pd2_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz96v7pd2_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n\n    for i := 1; i < len(numbers); i++ {\n   \
    \     diff += numbers[i] - numbers[i-1]\n        diff /= 2\n\n        if diff\
    \ < threshold {\n            return true\n        }\n    }\n\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmphnlgvisl_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmphnlgvisl_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, num := range numbers {\n        if num > threshold\
    \ {\n            return false\n        }\n        if num < threshold {\n     \
    \       return true\n        }\n        diff += num - threshold\n    }\n    return\
    \ diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpuuvooy_z_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpuuvooy_z_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpuuvooy_z_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpuuvooy_z_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for i := 1; i < len(numbers); i++ {\n     \
    \   diff += numbers[i] - numbers[i-1]\n        diff /= 2\n        if diff < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp_zfmmfku_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp_zfmmfku_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        diff += number\
    \ - numbers[0]\n        if diff > threshold {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpv7rww93c_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpv7rww93c_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpv7rww93c_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpv7rww93c_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp7jeo0lee_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp7jeo0lee_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp7jeo0lee_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp7jeo0lee_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n\n    for i := 1; i < len(numbers); i++ {\n   \
    \     diff += numbers[i] - numbers[i-1]\n        diff /= 2\n\n        if diff\
    \ < threshold {\n            return true\n        }\n    }\n\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmphnlgvisl_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmphnlgvisl_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers {\n        if number - threshold\
    \ < diff {\n            return true\n        }\n        diff = number - threshold\n\
    \    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n \
    \ candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpurfus162_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpurfus162_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpurfus162_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for _, number := range numbers {\n        if\
    \ number - threshold < diff {\n            return true\n        }\n        diff\
    \ -= number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp8ps6m5w9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8ps6m5w9_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp8ps6m5w9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers[2:] {\n        diff += number\
    \ - numbers[0]\n        if diff > threshold {\n            return true\n     \
    \   }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpc0tdyybu_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpc0tdyybu_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpc0tdyybu_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers {\n        if number - threshold\
    \ < diff {\n            diff = number - threshold\n        }\n    }\n    return\
    \ diff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpc9vkjefo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpc9vkjefo_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpc9vkjefo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmppdumsca1_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmppdumsca1_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmppdumsca1_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi2g0pd3x_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpi2g0pd3x_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, number := range numbers {\n        if number - threshold\
    \ < diff {\n            return false\n        }\n        diff = number - threshold\n\
    \    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpctdazyhj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpctdazyhj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpctdazyhj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpctdazyhj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    for i := 1; i < len(numbers); i++ {\n     \
    \   diff += numbers[i] - numbers[i-1]\n        diff /= 2\n        if diff < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp_zfmmfku_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp_zfmmfku_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp31l5uwy4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp31l5uwy4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp31l5uwy4_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp31l5uwy4_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp7jeo0lee_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp7jeo0lee_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp7jeo0lee_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp7jeo0lee_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for _, n := range numbers[2:] {\n        if diff > threshold\
    \ {\n            return false\n        }\n        diff -= n\n    }\n    return\
    \ true\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp42q3m0ag_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp42q3m0ag_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp42q3m0ag_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp42q3m0ag_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074558
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 2; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmppdumsca1_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmppdumsca1_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmppdumsca1_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff > threshold {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpybelt1ue_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpybelt1ue_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074556
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // True\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n\
    \    if len(numbers) < 2 {\n        return false\n    }\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    diff *= diff\n    for i := 2; i < len(numbers);\
    \ i++ {\n        diff += numbers[i] - numbers[i-1]\n        diff /= 2\n      \
    \  diff *= diff\n        if diff < threshold {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp2_7t23d5_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp2_7t23d5_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp2_7t23d5_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__6 (0.00s)\n        tmp2_7t23d5_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074556
