language: go_test.go
name: HumanEval_135_can_arrange
results:
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            max = i\n     \
    \   }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpyyap2ko2_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpyyap2ko2_test.go:34\
    \ +0x552\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var max int = -1\n    for i :=\
    \ 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpq7b85uoz_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpq7b85uoz_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpq7b85uoz_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpq7b85uoz_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = i + 1\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 20 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpawh5s1jr_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpawh5s1jr_test.go:36\
    \ +0x5c6\ntesting.tRunner(0xc0001036c0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] >= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpodr_c7l__test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpodr_c7l__test.go:35\
    \ +0x599\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    max := -1\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkdrj9hdd_test.go:17:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    max := -1\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkdrj9hdd_test.go:17:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var maxIndex int = -1\n    var\
    \ maxValue int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >\
    \ maxValue {\n            maxValue = arr[i]\n            maxIndex = i\n      \
    \  }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmphimkq42r_test.go:44: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmphimkq42r_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmphimkq42r_test.go:44: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmphimkq42r_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            max = i\n     \
    \   } else {\n            i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmperrvyxh5_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmperrvyxh5_test.go:35\
    \ +0x5e6\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // Write code here\n    max :=\
    \ -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] <= arr[i-1] {\n  \
    \          i++\n        } else {\n            max = i\n            i = 0\n   \
    \     }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmptnr494zz_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmptnr494zz_test.go:37\
    \ +0x5a6\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] >= arr[i-1] {\n            i++\n        } else {\n   \
    \         return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpx3fwdhx9_test.go:22\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpx3fwdhx9_test.go:38\
    \ +0x5d2\ntesting.tRunner(0xc000198ea0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var maxIndex int = -1\n    var\
    \ maxValue int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >\
    \ maxValue {\n            maxValue = arr[i]\n            maxIndex = i\n      \
    \  }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmphimkq42r_test.go:44: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmphimkq42r_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmphimkq42r_test.go:44: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmphimkq42r_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    max := arr[0]\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzdznteb7_test.go:17:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp4pih6gw3_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp4pih6gw3_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp4pih6gw3_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp4pih6gw3_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            max = i\n     \
    \   } else {\n            i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmperrvyxh5_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmperrvyxh5_test.go:35\
    \ +0x5e6\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp4pih6gw3_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp4pih6gw3_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp4pih6gw3_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp4pih6gw3_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // Write code here\n    max :=\
    \ -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n       \
    \     max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmps_xcr722_test.go:43: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmps_xcr722_test.go:43:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmps_xcr722_test.go:43: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmps_xcr722_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            max = i\n     \
    \   } else {\n            i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmperrvyxh5_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmperrvyxh5_test.go:35\
    \ +0x5e6\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // Write code here\n    max :=\
    \ -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] >= arr[i-1] {\n  \
    \          i++\n        } else {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpvkey54ur_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpvkey54ur_test.go:36\
    \ +0x599\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n         \
    \   continue\n        }\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpk6x4q8qu_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpk6x4q8qu_test.go:38\
    \ +0x5f9\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    max := arr[0]\n\
    \    for _, v := range arr {\n        if v > max {\n            max = v\n    \
    \    }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp77ljx1mx_test.go:17:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    max := arr[0]\n\
    \    for _, v := range arr[1:] {\n        if v >= max {\n            max = v\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu1xb6020_test.go:17:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpeduyror3_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpeduyror3_test.go:35\
    \ +0x599\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] <= max {\n            continue\n        }\n\
    \        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpwua8gp1k_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpwua8gp1k_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpwua8gp1k_test.go:45: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpwua8gp1k_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp4pih6gw3_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp4pih6gw3_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp4pih6gw3_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp4pih6gw3_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var maxIndex int = -1\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] > maxIndex {\n            maxIndex\
    \ = arr[i]\n        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpg74qb69r_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpg74qb69r_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpg74qb69r_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpg74qb69r_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var maxIndex int = -1\n    var\
    \ maxValue int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >\
    \ maxValue {\n            maxValue = arr[i]\n            maxIndex = i\n      \
    \  }\n    }\n    if maxIndex == -1 {\n        return -1\n    }\n    return maxIndex\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpb1hkbzg2_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpb1hkbzg2_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpb1hkbzg2_test.go:47: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpb1hkbzg2_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp4pih6gw3_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp4pih6gw3_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp4pih6gw3_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp4pih6gw3_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] >= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpyjadpn4g_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpyjadpn4g_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc000103380, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n         \
    \   continue\n        }\n        max = i\n        i++\n    }\n    return max\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp7y368jim_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp7y368jim_test.go:36\
    \ +0x5c6\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] >= arr[i-1] {\n            return -1\n        }\n    \
    \    i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n \
    \ candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2r595n97_test.go:22\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2r595n97_test.go:37\
    \ +0x5d2\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            max = i\n     \
    \   } else {\n            i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmperrvyxh5_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmperrvyxh5_test.go:35\
    \ +0x5e6\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] >= arr[i-1] {\n            i++\n        } else {\n   \
    \         return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpx3fwdhx9_test.go:22\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpx3fwdhx9_test.go:38\
    \ +0x5d2\ntesting.tRunner(0xc000198ea0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n         \
    \   continue\n        }\n        max = i\n        break\n    }\n    return max\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpk_vxqhie_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpk_vxqhie_test.go:36\
    \ +0x552\ntesting.tRunner(0xc0000d4680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var max_index int = -1\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] <= arr[i-1] {\n            max_index\
    \ = i\n        } else {\n            break\n        }\n    }\n    return max_index\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp1xnrytau_test.go:18\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp1xnrytau_test.go:34\
    \ +0x55f\ntesting.tRunner(0xc0000d04e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] >= arr[i-1] {\n            return -1\n        }\n    \
    \    i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n \
    \ candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2r595n97_test.go:22\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2r595n97_test.go:37\
    \ +0x5d2\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var maxIndex int = -1\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] <= arr[maxIndex] {\n        \
    \    maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpcrlgpn47_test.go:18\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpcrlgpn47_test.go:32\
    \ +0x592\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp4pih6gw3_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp4pih6gw3_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp4pih6gw3_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp4pih6gw3_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] >= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpodr_c7l__test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpodr_c7l__test.go:35\
    \ +0x599\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // Write code here\n    max :=\
    \ -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n       \
    \     max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmps_xcr722_test.go:43: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmps_xcr722_test.go:43:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmps_xcr722_test.go:43: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmps_xcr722_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var max int = -1\n    var index\
    \ int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n \
    \           max = arr[i]\n            index = i\n        }\n    }\n    if index\
    \ != -1 {\n        return index\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpdfa2bbwc_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpdfa2bbwc_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpdfa2bbwc_test.go:47: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpdfa2bbwc_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = i + 1\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 20 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpawh5s1jr_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpawh5s1jr_test.go:36\
    \ +0x5c6\ntesting.tRunner(0xc0001036c0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] >= arr[i-1] {\n            i++\n        } else {\n   \
    \         return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpx3fwdhx9_test.go:22\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpx3fwdhx9_test.go:38\
    \ +0x5d2\ntesting.tRunner(0xc000198ea0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // Write code here\n    max :=\
    \ -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n        \
    \    max = arr[i]\n        }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp9eugot3b_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp9eugot3b_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp9eugot3b_test.go:45: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp9eugot3b_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // Write code here\n    max :=\
    \ -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n        \
    \    max = arr[i]\n        }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp9eugot3b_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp9eugot3b_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp9eugot3b_test.go:45: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp9eugot3b_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = i + 1\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 20 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpawh5s1jr_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpawh5s1jr_test.go:36\
    \ +0x5c6\ntesting.tRunner(0xc0001036c0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var max int = -1\n    var i int\
    \ = 0\n    for ; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp7yfut4ft_test.go:43: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp7yfut4ft_test.go:43:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp7yfut4ft_test.go:43: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp7yfut4ft_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var maxIndex int = -1\n    var\
    \ maxValue int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >\
    \ maxValue {\n            maxValue = arr[i]\n            maxIndex = i\n      \
    \  }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmphimkq42r_test.go:44: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmphimkq42r_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmphimkq42r_test.go:44: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmphimkq42r_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] >= arr[i-1] {\n            i++\n        } else {\n   \
    \         return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpx3fwdhx9_test.go:22\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpx3fwdhx9_test.go:38\
    \ +0x5d2\ntesting.tRunner(0xc000198ea0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    if max\
    \ < 0 {\n        return -1\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpgb0vbxjm_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpgb0vbxjm_test.go:39\
    \ +0x5e6\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] >= arr[i-1] {\n            i++\n        }\n    }\n   \
    \ return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpkhzmpc_5_test.go:22\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpkhzmpc_5_test.go:36\
    \ +0x5f9\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] >= arr[i-1] {\n            max = i\n     \
    \   } else {\n            i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpr2463tql_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpr2463tql_test.go:35\
    \ +0x5e6\ntesting.tRunner(0xc0000d0680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpeduyror3_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpeduyror3_test.go:35\
    \ +0x599\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var maxIndex int = -1\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] <= arr[maxIndex] {\n        \
    \    maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpcrlgpn47_test.go:18\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpcrlgpn47_test.go:32\
    \ +0x592\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] <= arr[max] {\n            max = i\n    \
    \    }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2mx2i5aw_test.go:18\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2mx2i5aw_test.go:32\
    \ +0x592\ntesting.tRunner(0xc000103380, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] >= arr[i-1] {\n            i++\n        }\n    }\n   \
    \ return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpkhzmpc_5_test.go:22\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpkhzmpc_5_test.go:36\
    \ +0x5f9\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            max = i\n     \
    \   } else {\n            i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmperrvyxh5_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmperrvyxh5_test.go:35\
    \ +0x5e6\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = i + 1\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 20 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpawh5s1jr_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpawh5s1jr_test.go:36\
    \ +0x5c6\ntesting.tRunner(0xc0001036c0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] >= arr[i-1] {\n            max = i\n     \
    \   } else {\n            i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpr2463tql_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpr2463tql_test.go:35\
    \ +0x5e6\ntesting.tRunner(0xc0000d0680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] >= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpodr_c7l__test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpodr_c7l__test.go:35\
    \ +0x599\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // Write code here\n    max :=\
    \ -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n        \
    \    max = arr[i]\n        }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp9eugot3b_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp9eugot3b_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp9eugot3b_test.go:45: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp9eugot3b_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073456
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var max int = -1\n    var i int\n\
    \    for i = 1; i < len(arr); i++ {\n        if arr[i] > arr[i-1] {\n        \
    \    max = i\n        }\n    }\n    if max < 0 {\n        return -1\n    }\n \
    \   return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpayhyechy_test.go:46: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpayhyechy_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpayhyechy_test.go:46: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpayhyechy_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] >= arr[i-1] {\n            max = i\n     \
    \   } else {\n            i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpr2463tql_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpr2463tql_test.go:35\
    \ +0x5e6\ntesting.tRunner(0xc0000d0680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] >= arr[i-1] {\n            i++\n        } else {\n   \
    \         return i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmplmg9hyfl_test.go:22\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmplmg9hyfl_test.go:38\
    \ +0x5bf\ntesting.tRunner(0xc000103380, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            max = i\n     \
    \   } else {\n            i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmperrvyxh5_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmperrvyxh5_test.go:35\
    \ +0x5e6\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] >= arr[i-1] {\n            i++\n        }\n    }\n   \
    \ return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpkhzmpc_5_test.go:22\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpkhzmpc_5_test.go:36\
    \ +0x5f9\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073456
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp4pih6gw3_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp4pih6gw3_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp4pih6gw3_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp4pih6gw3_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var max int = -1\n    for i :=\
    \ 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpq7b85uoz_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpq7b85uoz_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpq7b85uoz_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpq7b85uoz_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    max := arr[0]\n\
    \    for _, v := range arr {\n        if v >= max {\n            max = v\n   \
    \     }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2zs2vjih_test.go:17:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073456
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            max = i\n     \
    \   } else {\n            i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmperrvyxh5_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmperrvyxh5_test.go:35\
    \ +0x5e6\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var maxIndex int = -1\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] > maxIndex {\n            maxIndex\
    \ = arr[i]\n        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpg74qb69r_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpg74qb69r_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpg74qb69r_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpg74qb69r_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var maxIndex int = -1\n    var\
    \ maxValue int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >\
    \ maxValue {\n            maxValue = arr[i]\n            maxIndex = i\n      \
    \  }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmphimkq42r_test.go:44: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmphimkq42r_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmphimkq42r_test.go:44: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmphimkq42r_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] >= arr[i-1] {\n            i++\n        } else {\n   \
    \         return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpx3fwdhx9_test.go:22\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpx3fwdhx9_test.go:38\
    \ +0x5d2\ntesting.tRunner(0xc000198ea0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] >= arr[i-1] {\n            return -1\n        }\n    \
    \    i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n \
    \ candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp2r595n97_test.go:22\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp2r595n97_test.go:37\
    \ +0x5d2\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var max int = -1\n    for i :=\
    \ 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpq7b85uoz_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpq7b85uoz_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpq7b85uoz_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpq7b85uoz_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            max = i\n     \
    \   } else {\n            i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmperrvyxh5_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmperrvyxh5_test.go:35\
    \ +0x5e6\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n         \
    \   continue\n        }\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpk6x4q8qu_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpk6x4q8qu_test.go:38\
    \ +0x5f9\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    max := arr[0]\n\
    \    for _, v := range arr {\n        if v > max {\n            max = v\n    \
    \    }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp77ljx1mx_test.go:17:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] >= arr[i-1] {\n            i++\n        } else {\n   \
    \         return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpx3fwdhx9_test.go:22\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpx3fwdhx9_test.go:38\
    \ +0x5d2\ntesting.tRunner(0xc000198ea0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var maxIndex int = -1\n    var\
    \ maxValue int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >\
    \ maxValue {\n            maxValue = arr[i]\n            maxIndex = i\n      \
    \  }\n    }\n    if maxIndex == -1 {\n        return -1\n    }\n    for i := 0;\
    \ i < len(arr); i++ {\n        if arr[i] > maxValue {\n            return -1\n\
    \        }\n        if arr[i] == maxValue {\n            return i\n        }\n\
    \    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpapydi2p9_test.go:55: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpapydi2p9_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpapydi2p9_test.go:55: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpapydi2p9_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073456
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    if max\
    \ < 0 {\n        return -1\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpgb0vbxjm_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpgb0vbxjm_test.go:39\
    \ +0x5e6\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n         \
    \   continue\n        }\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpk6x4q8qu_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpk6x4q8qu_test.go:38\
    \ +0x5f9\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp4pih6gw3_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp4pih6gw3_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp4pih6gw3_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp4pih6gw3_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            max = i\n     \
    \   } else {\n            i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmperrvyxh5_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmperrvyxh5_test.go:35\
    \ +0x5e6\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // Write code here\n    max :=\
    \ -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n       \
    \     max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmps_xcr722_test.go:43: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmps_xcr722_test.go:43:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmps_xcr722_test.go:43: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmps_xcr722_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n         \
    \   continue\n        }\n        max = i\n        break\n    }\n    return max\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpk_vxqhie_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpk_vxqhie_test.go:36\
    \ +0x552\ntesting.tRunner(0xc0000d4680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = i + 1\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 20 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpawh5s1jr_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpawh5s1jr_test.go:36\
    \ +0x5c6\ntesting.tRunner(0xc0001036c0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var maxIndex int = -1\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] > arr[maxIndex] {\n         \
    \   maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpn0gdzpzq_test.go:18\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpn0gdzpzq_test.go:32\
    \ +0x592\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] >= arr[i-1] {\n            i++\n        } else {\n   \
    \         return -1\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwms18194_test.go:22\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwms18194_test.go:38\
    \ +0x5d2\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            max = i\n     \
    \   } else {\n            i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmperrvyxh5_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmperrvyxh5_test.go:35\
    \ +0x5e6\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var maxIndex int = -1\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] <= arr[maxIndex] {\n        \
    \    maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpcrlgpn47_test.go:18\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpcrlgpn47_test.go:32\
    \ +0x592\ntesting.tRunner(0xc0000cc4e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var maxIndex int = -1\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] > maxIndex {\n            maxIndex\
    \ = arr[i]\n        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpg74qb69r_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpg74qb69r_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpg74qb69r_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpg74qb69r_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // Write code here\n    max :=\
    \ -1\n    i := 0\n    for i < len(arr) {\n        if arr[i] > max {\n        \
    \    max = arr[i]\n        }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp9eugot3b_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp9eugot3b_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp9eugot3b_test.go:45: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp9eugot3b_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        i++\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp4pih6gw3_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp4pih6gw3_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp4pih6gw3_test.go:44: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp4pih6gw3_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] >= arr[i-1] {\n            i++\n        } else {\n   \
    \         return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpx3fwdhx9_test.go:22\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpx3fwdhx9_test.go:38\
    \ +0x5d2\ntesting.tRunner(0xc000198ea0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpeduyror3_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpeduyror3_test.go:35\
    \ +0x599\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            max = i\n     \
    \   } else {\n            i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmperrvyxh5_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmperrvyxh5_test.go:35\
    \ +0x5e6\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var maxIndex int = -1\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] > maxIndex {\n            maxIndex\
    \ = arr[i]\n        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpg74qb69r_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpg74qb69r_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpg74qb69r_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpg74qb69r_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] >= arr[i-1] {\n            i++\n        } else {\n   \
    \         return i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmplmg9hyfl_test.go:22\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmplmg9hyfl_test.go:38\
    \ +0x5bf\ntesting.tRunner(0xc000103380, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpeduyror3_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpeduyror3_test.go:35\
    \ +0x599\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            max = i\n     \
    \   } else {\n            i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmperrvyxh5_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmperrvyxh5_test.go:35\
    \ +0x5e6\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    max := arr[0]\n\
    \    for _, v := range arr[1:] {\n        if v > max {\n            max = v\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp4kgq5ei_test.go:17:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073456
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var maxIndex int = -1\n    var\
    \ maxValue int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >\
    \ maxValue {\n            maxValue = arr[i]\n            maxIndex = i\n      \
    \  }\n    }\n    if maxIndex == -1 {\n        return -1\n    }\n    for i := 0;\
    \ i < maxIndex; i++ {\n        if arr[i] > maxValue {\n            return -1\n\
    \        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpwmunm_3t_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpwmunm_3t_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpwmunm_3t_test.go:52: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpwmunm_3t_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = 0\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwvq5_zrh_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwvq5_zrh_test.go:36\
    \ +0x5a6\ntesting.tRunner(0xc0000cc680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var max int\n    var i int\n  \
    \  for i = 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    if max <= arr[0] {\n        return -1\n    }\n\
    \    for i = 0; i < len(arr); i++ {\n        if arr[i] > max {\n            return\
    \ i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp5ba1z7wc_test.go:23\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp5ba1z7wc_test.go:45\
    \ +0x293\ntesting.tRunner(0xc0000da1a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // Write code here\n    max :=\
    \ -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n       \
    \     max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmps_xcr722_test.go:43: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmps_xcr722_test.go:43:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmps_xcr722_test.go:43: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmps_xcr722_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    max := -1\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkdrj9hdd_test.go:17:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] >= arr[i-1] {\n            i++\n        }\
    \ else {\n            max = i\n            i = i + 1\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpwpu8h6ih_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpwpu8h6ih_test.go:36\
    \ +0x5c6\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073457
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi7qszsk6_test.go:42: expected '%!s(int=2)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpi7qszsk6_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] <= arr[i-1] {\n            max = i\n     \
    \   } else {\n            i++\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmperrvyxh5_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmperrvyxh5_test.go:35\
    \ +0x5e6\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    max := -1\n    i := 0\n    for\
    \ i < len(arr) {\n        if arr[i] > max {\n            max = arr[i]\n      \
    \  }\n        if arr[i] == max {\n            i++\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073465
