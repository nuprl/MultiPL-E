language: go_test.go
name: HumanEval_105_by_length
results:
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    if len(arr) == 0 {\n        return result\n    }\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    for _, v := range arr {\n        result = append(result,\
    \ name[v])\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9phd2u98_test.go:29:5: undefined: sort

    /tmp/tmp9phd2u98_test.go:30:5: undefined: reverse

    /tmp/tmp9phd2u98_test.go:32:33: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7yn09nh_test.go:25:5: undefined: sort

    /tmp/tmpz7yn09nh_test.go:26:5: undefined: reverse

    /tmp/tmpz7yn09nh_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7yn09nh_test.go:25:5: undefined: sort

    /tmp/tmpz7yn09nh_test.go:26:5: undefined: reverse

    /tmp/tmpz7yn09nh_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgb910fp1_test.go:82:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075264
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdguv8nd3_test.go:28:5: undefined: sort

    /tmp/tmpdguv8nd3_test.go:29:5: undefined: reverse

    /tmp/tmpdguv8nd3_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    sort.Ints(arr[len(arr)-1])\n    sort.Ints(arr[:len(arr)-1])\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] - 1\n    arr[len(arr)-1] = arr[len(arr)-1] - 1\n    arr[len(arr)\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuhmhz_8o_test.go:68:17: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr2\
    \ := make([]int, len(arr))\n    arr3 := make([]string, len(arr))\n    arr4 :=\
    \ make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6 := make([]int,\
    \ len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n\
    \    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n    arr11\
    \ := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13 := make([]int,\
    \ len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n\
    \    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n    arr18\
    \ := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20 := make([]int,\
    \ len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n\
    \    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n    arr25\
    \ := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27 := make([]int,\
    \ len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n\
    \    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n    arr32\
    \ := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34 := make([]int,\
    \ len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n\
    \    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n    arr39\
    \ := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41 := make([]int,\
    \ len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n\
    \    arr\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwmkekaa7_test.go:68:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075264
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = name[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz3xk4stc_test.go:25:5: undefined: sort

    /tmp/tmpz3xk4stc_test.go:26:5: undefined: reverse

    /tmp/tmpz3xk4stc_test.go:29:21: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \    sort.Ints(arr[:len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[0] = reverse(arr[0])\n    arr[0] = nameOf(arr[0])\n    return arr\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwpzwnygx_test.go:28:5: undefined: sort

    /tmp/tmpwpzwnygx_test.go:29:5: undefined: sort

    /tmp/tmpwpzwnygx_test.go:30:5: undefined: sort

    /tmp/tmpwpzwnygx_test.go:31:23: undefined: reverse

    /tmp/tmpwpzwnygx_test.go:32:14: undefined: reverse

    /tmp/tmpwpzwnygx_test.go:33:14: undefined: nameOf

    /tmp/tmpwpzwnygx_test.go:34:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append(arr, 0)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)/2]\n    reverse(arr)\n    arr := append(arr, 0)\n  \
    \  arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n\
    \    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfc34w4f9_test.go:91:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075264
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n\
    \    arr := reverse(arr)\n    for _, v := range arr {\n        if v < 10 {\n \
    \           arr[v] = fmt.Sprintf(\"%v\", v)\n        }\n    }\n    return arr\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_1rezn9t_test.go:28:9:\
    \ no new variables on left side of :=\n/tmp/tmp_1rezn9t_test.go:29:5: undefined:\
    \ sort\n/tmp/tmp_1rezn9t_test.go:30:9: no new variables on left side of :=\n/tmp/tmp_1rezn9t_test.go:31:9:\
    \ no new variables on left side of :=\n/tmp/tmp_1rezn9t_test.go:31:12: cannot\
    \ use append([]string{\u2026}, arr...) (value of type []string) as type []int\
    \ in assignment\n/tmp/tmp_1rezn9t_test.go:31:101: cannot use arr (variable of\
    \ type []int) as type []string in argument to append\n/tmp/tmp_1rezn9t_test.go:32:9:\
    \ no new variables on left side of :=\n/tmp/tmp_1rezn9t_test.go:32:12: undefined:\
    \ reverse\n/tmp/tmp_1rezn9t_test.go:35:22: cannot use fmt.Sprintf(\"%v\", v) (value\
    \ of type string) as type int in assignment\n/tmp/tmp_1rezn9t_test.go:38:12: cannot\
    \ use arr (variable of type []int) as type []string in return statement\n/tmp/tmp_1rezn9t_test.go:38:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \n    reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    result := make([]string, len(arr))\n    for i := 0; i < len(arr); i++ {\n\
    \        result[i] = names[arr[i]]\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkoxfr6sb_test.go:29:5: undefined: sort

    /tmp/tmpkoxfr6sb_test.go:30:5: undefined: sort

    /tmp/tmpkoxfr6sb_test.go:32:5: undefined: reverse

    /tmp/tmpkoxfr6sb_test.go:33:23: undefined: reverse

    /tmp/tmpkoxfr6sb_test.go:37:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr2\
    \ := make([]int, len(arr))\n    arr3 := make([]string, len(arr))\n    arr4 :=\
    \ make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6 := make([]int,\
    \ len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n\
    \    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n    arr11\
    \ := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13 := make([]int,\
    \ len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n\
    \    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n    arr18\
    \ := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20 := make([]int,\
    \ len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n\
    \    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n    arr25\
    \ := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27 := make([]int,\
    \ len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n\
    \    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n    arr32\
    \ := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34 := make([]int,\
    \ len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n\
    \    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n    arr39\
    \ := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41 := make([]int,\
    \ len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n\
    \    arr\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwmkekaa7_test.go:68:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n     \
    \       result = append(result, fmt.Sprintf(\"%v\", v))\n        } else {\n  \
    \          result = append(result, \"One\")\n        }\n    }\n    return append(result,\
    \ []string{\"One\"}...)\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpcwdgyzs2_test.go:53: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3 One]'\n    --- FAIL: TestBy_Length/test_num__1\
    \ (0.00s)\n        tmpcwdgyzs2_test.go:53: expected '[]', got '[One]'\n    ---\
    \ FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpcwdgyzs2_test.go:53: expected\
    \ '[One]', got '[1 One One One]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n\
    \        tmpcwdgyzs2_test.go:53: expected '[Three Two One]', got '[1 One 3 2 One]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpcwdgyzs2_test.go:53:\
    \ expected '[Nine Eight Four]', got '[9 4 8 One]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075266
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i, v := range arr {\n        result[i]\
    \ = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qaui7vo_test.go:28:5: undefined: sort

    /tmp/tmp9qaui7vo_test.go:29:5: undefined: reverse

    /tmp/tmp9qaui7vo_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7yn09nh_test.go:25:5: undefined: sort

    /tmp/tmpz7yn09nh_test.go:26:5: undefined: reverse

    /tmp/tmpz7yn09nh_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        result[i] = names[arr[i]]\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmgp4dvis_test.go:25:5: undefined: sort

    /tmp/tmpmgp4dvis_test.go:26:5: undefined: reverse

    /tmp/tmpmgp4dvis_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    arr := reverse(arr)\n\
    \    arr := replaceDigits(arr)\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjzhn8koq_test.go:28:5: undefined: sort

    /tmp/tmpjzhn8koq_test.go:29:9: no new variables on left side of :=

    /tmp/tmpjzhn8koq_test.go:29:12: undefined: reverse

    /tmp/tmpjzhn8koq_test.go:30:9: no new variables on left side of :=

    /tmp/tmpjzhn8koq_test.go:30:12: undefined: replaceDigits

    /tmp/tmpjzhn8koq_test.go:31:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    arr := append(arr, 0)\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr\
    \ := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n  \
    \  arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n\
    \    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    arr := append(arr, 0)\n    arr := append(arr,\
    \ 0)\n    arr := append(arr, 0)\n    \nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpop9yi3zq_test.go:92:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075264
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7yn09nh_test.go:25:5: undefined: sort

    /tmp/tmpz7yn09nh_test.go:26:5: undefined: reverse

    /tmp/tmpz7yn09nh_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7yn09nh_test.go:25:5: undefined: sort

    /tmp/tmpz7yn09nh_test.go:26:5: undefined: reverse

    /tmp/tmpz7yn09nh_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    sort.Ints(arr)\n    reverse(arr)\n\
    \    result := make([]string, len(arr))\n    for i, v := range arr {\n       \
    \ result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7wh8zzr_test.go:28:5: undefined: sort

    /tmp/tmpl7wh8zzr_test.go:29:5: undefined: reverse

    /tmp/tmpl7wh8zzr_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n\n    arr := make([]int, len(arr))\n    for\
    \ i := range arr {\n        arr[i] = i\n    }\n\n    sort.Sort(arr)\n    reverse(arr)\n\
    \n    result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdxgzz5x9_test.go:29:9: no new variables on left side of :=

    /tmp/tmpdxgzz5x9_test.go:34:5: undefined: sort

    /tmp/tmpdxgzz5x9_test.go:35:5: undefined: reverse

    /tmp/tmpdxgzz5x9_test.go:39:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \    sort.Ints(arr[:len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzqslpva__test.go:71:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075264
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    if len(arr) == 0 {\n        return result\n    }\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    for _, v := range arr {\n        result = append(result,\
    \ name[v])\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9phd2u98_test.go:29:5: undefined: sort

    /tmp/tmp9phd2u98_test.go:30:5: undefined: reverse

    /tmp/tmp9phd2u98_test.go:32:33: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr2 := make([]int, len(arr))\n    for\
    \ i := range arr2 {\n        arr2[i] = arr[i]\n    }\n    sort.Ints(arr2)\n  \
    \  arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n    return arr2\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy769mte__test.go:32:5: undefined: sort

    /tmp/tmpy769mte__test.go:33:12: undefined: reverse

    /tmp/tmpy769mte__test.go:34:12: undefined: replaceDigits

    /tmp/tmpy769mte__test.go:35:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7yn09nh_test.go:25:5: undefined: sort

    /tmp/tmpz7yn09nh_test.go:26:5: undefined: reverse

    /tmp/tmpz7yn09nh_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigit(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa98d5f24_test.go:29:5: undefined: sort

    /tmp/tmpa98d5f24_test.go:30:12: undefined: reverse

    /tmp/tmpa98d5f24_test.go:31:12: undefined: replaceDigit

    /tmp/tmpa98d5f24_test.go:32:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr2 := make([]int, len(arr))\n    for\
    \ i := range arr2 {\n        arr2[i] = arr[i]\n    }\n    sort.Ints(arr2)\n  \
    \  arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n    return arr2\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy769mte__test.go:32:5: undefined: sort

    /tmp/tmpy769mte__test.go:33:12: undefined: reverse

    /tmp/tmpy769mte__test.go:34:12: undefined: replaceDigits

    /tmp/tmpy769mte__test.go:35:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ append([]int{}, arr...)\n    sort.Ints(arr)\n    reverse(arr)\n    result :=\
    \ make([]string, len(arr))\n    for i, v := range arr {\n        result[i] = names[v]\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_d52rifn_test.go:25:9: no new variables on left side of :=

    /tmp/tmp_d52rifn_test.go:26:5: undefined: sort

    /tmp/tmp_d52rifn_test.go:27:5: undefined: reverse

    /tmp/tmp_d52rifn_test.go:30:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr := append([]string{},\
    \ strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    for _, i := range arr {\n \
    \       if i >= 1 && i <= 9 {\n            arr[len(arr)-1] = names[i-1]\n    \
    \    }\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzd7en6p_test.go:28:9: no new variables on left side of :=

    /tmp/tmpzzd7en6p_test.go:29:5: undefined: sort

    /tmp/tmpzzd7en6p_test.go:30:9: no new variables on left side of :=

    /tmp/tmpzzd7en6p_test.go:31:9: no new variables on left side of :=

    /tmp/tmpzzd7en6p_test.go:31:12: cannot use append([]string{}, strings.Split(fmt.Sprint(arr),
    "\n")...) (value of type []string) as type []int in assignment

    /tmp/tmpzzd7en6p_test.go:31:31: undefined: strings

    /tmp/tmpzzd7en6p_test.go:34:31: undefined: names

    /tmp/tmpzzd7en6p_test.go:37:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl8mosilp_test.go:84:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075266
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        result[i] = names[arr[i]]\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmgp4dvis_test.go:25:5: undefined: sort

    /tmp/tmpmgp4dvis_test.go:26:5: undefined: reverse

    /tmp/tmpmgp4dvis_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ make([]int, len(arr))\n    copy(arr, arr)\n    sort.Ints(arr)\n    arr.reverse()\n\
    \    arr := append([]int{10}, arr...)\n    arr := append([]string{\"One\"}, arr...)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxyx24dtd_test.go:25:9:\
    \ no new variables on left side of :=\n/tmp/tmpxyx24dtd_test.go:27:5: undefined:\
    \ sort\n/tmp/tmpxyx24dtd_test.go:28:9: arr.reverse undefined (type []int has no\
    \ field or method reverse)\n/tmp/tmpxyx24dtd_test.go:29:9: no new variables on\
    \ left side of :=\n/tmp/tmpxyx24dtd_test.go:30:9: no new variables on left side\
    \ of :=\n/tmp/tmpxyx24dtd_test.go:30:12: cannot use append([]string{\u2026}, arr...)\
    \ (value of type []string) as type []int in assignment\n/tmp/tmpxyx24dtd_test.go:30:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpxyx24dtd_test.go:31:12: cannot use arr (variable of type []int) as type\
    \ []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075267
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := make([]int, len(arr))\n    for\
    \ i := range arr {\n        arr[i] = arr[i] + 1\n    }\n    sort.Ints(arr)\n \
    \   arr := reverse(arr)\n    arr := replaceDigits(arr)\n    return arr\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjfq9bz2h_test.go:28:9: no new variables on left side of :=

    /tmp/tmpjfq9bz2h_test.go:32:5: undefined: sort

    /tmp/tmpjfq9bz2h_test.go:33:9: no new variables on left side of :=

    /tmp/tmpjfq9bz2h_test.go:33:12: undefined: reverse

    /tmp/tmpjfq9bz2h_test.go:34:9: no new variables on left side of :=

    /tmp/tmpjfq9bz2h_test.go:34:12: undefined: replaceDigits

    /tmp/tmpjfq9bz2h_test.go:35:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075267
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append(arr, 0)\n    sort.Ints(arr)\n\
    \    arr[len(arr)-1]--\n    arr := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n\
    \    arr := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr\
    \ := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr,\
    \ 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr, 0)\n \
    \   sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr, 0)\n    sort.Ints(arr)\n\
    \    arr[len(arr)-1]--\n    arr := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n\
    \    arr := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr\
    \ := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr,\
    \ 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr, 0)\n \
    \   sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr, 0)\n    sort.Ints(arr)\n\
    \    arr[len(arr)-1]--\n    arr := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n\
    \    arr := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr\
    \ := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr,\
    \ 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr, 0)\n \
    \   sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr, 0)\n    sort.Ints(arr)\n\
    \    arr[len(arr)-1]--\n    arr := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n\
    \    arr := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr\
    \ := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr,\
    \ 0)\n    sort.Ints(arr)\n    arr[len(\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3yko4idl_test.go:97:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075266
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7yn09nh_test.go:25:5: undefined: sort

    /tmp/tmpz7yn09nh_test.go:26:5: undefined: reverse

    /tmp/tmpz7yn09nh_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl8mosilp_test.go:84:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075266
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    for _, v := range arr {\n        if v > 9 {\n            v = v\
    \ - 10\n        }\n        result = append(result, by_length_test.One[v])\n  \
    \  }\n    for _, v := range arr {\n        if v < 1 {\n            v = v + 10\n\
    \        }\n        result = append(result, by_length_test.Two[v])\n    }\n  \
    \  for _, v := range arr {\n        if v < 2 {\n            v = v + 10\n     \
    \   }\n        result = append(result, by_length_test.Three[v])\n    }\n    for\
    \ _, v := range arr {\n        if v < 3 {\n            v = v + 10\n        }\n\
    \        result = append(result, by_length_test.Four[v])\n    }\n    for _, v\
    \ := range arr {\n        if v < 4 {\n            v = v + 10\n        }\n    \
    \    result = append(result, by_length_test.Five[v])\n    }\n    for _, v := range\
    \ arr {\n        if v < 5 {\n            v = v + 10\n        }\n        result\
    \ = append(result, by_length_test.Six[v])\n    }\n    for _, v := range arr {\n\
    \        if v < 6 {\n            v = v + 10\n        }\n        result = append(result,\
    \ by_length_test.Seven[v])\n    }\n    for _, v := range arr {\n        if v <\
    \ 7 {\n            v = v + 10\n        }\n        result = append(result, by_length_test.Eight[v])\n\
    \    }\n    for _, v := range arr {\n        if v < 8 {\n            v = v + 10\n\
    \        }\n        result = append(result, by_length_test.Nine[v])\n    }\n \
    \   return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplkz_2p9k_test.go:30:33: undefined: by_length_test

    /tmp/tmplkz_2p9k_test.go:36:33: undefined: by_length_test

    /tmp/tmplkz_2p9k_test.go:42:33: undefined: by_length_test

    /tmp/tmplkz_2p9k_test.go:48:33: undefined: by_length_test

    /tmp/tmplkz_2p9k_test.go:54:33: undefined: by_length_test

    /tmp/tmplkz_2p9k_test.go:60:33: undefined: by_length_test

    /tmp/tmplkz_2p9k_test.go:66:33: undefined: by_length_test

    /tmp/tmplkz_2p9k_test.go:72:33: undefined: by_length_test

    /tmp/tmplkz_2p9k_test.go:78:33: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075267
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  arr := []string{}\n    for _, v := range arr {\n        if v >= 1 && v <= 9\
    \ {\n            arr = append(arr, fmt.Sprintf(\"%s\", v))\n        }\n    }\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2q6vk06_test.go:28:5: undefined: sort

    /tmp/tmpu2q6vk06_test.go:29:5: undefined: reverse

    /tmp/tmpu2q6vk06_test.go:30:9: no new variables on left side of :=

    /tmp/tmpu2q6vk06_test.go:30:12: cannot use []string{} (value of type []string)
    as type []int in assignment

    /tmp/tmpu2q6vk06_test.go:33:31: cannot use fmt.Sprintf("%s", v) (value of type
    string) as type int in argument to append

    /tmp/tmpu2q6vk06_test.go:36:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075267
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i, v := range arr {\n        result[i]\
    \ = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qaui7vo_test.go:28:5: undefined: sort

    /tmp/tmp9qaui7vo_test.go:29:5: undefined: reverse

    /tmp/tmp9qaui7vo_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7yn09nh_test.go:25:5: undefined: sort

    /tmp/tmpz7yn09nh_test.go:26:5: undefined: reverse

    /tmp/tmpz7yn09nh_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl8mosilp_test.go:84:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075266
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \    sort.Ints(arr[:len(arr)-1])\n\n    var result []string\n    for _, v := range\
    \ arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, names[v])\n\
    \        }\n    }\n\n    return reverse(result[:])\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp183fztd1_test.go:29:5: undefined: sort

    /tmp/tmp183fztd1_test.go:30:5: undefined: sort

    /tmp/tmp183fztd1_test.go:31:5: undefined: sort

    /tmp/tmp183fztd1_test.go:36:37: undefined: names

    /tmp/tmp183fztd1_test.go:40:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    if len(arr) == 0 {\n        return result\n    }\n    sort.Ints(arr)\n\
    \    sort.Ints(arr[len(arr)-1])\n    for i := 0; i < len(arr); i++ {\n       \
    \ if arr[i] < 1 || arr[i] > 9 {\n            continue\n        }\n        result\
    \ := append(result, fmt.Sprintf(\"%v\", arr[i]))\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n       \
    \ }\n        result := append(result, fmt.Sprintf(\"%v\", arr[len(arr)-i-1]))\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb752eii1_test.go:29:5: undefined: sort

    /tmp/tmpb752eii1_test.go:30:5: undefined: sort

    /tmp/tmpb752eii1_test.go:35:9: result declared but not used

    /tmp/tmpb752eii1_test.go:41:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    sort.Ints(arr)\n    reverse(arr)\n\
    \    result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcikj0v_9_test.go:28:5: undefined: sort

    /tmp/tmpcikj0v_9_test.go:29:5: undefined: reverse

    /tmp/tmpcikj0v_9_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i, v := range arr {\n        result[i]\
    \ = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qaui7vo_test.go:28:5: undefined: sort

    /tmp/tmp9qaui7vo_test.go:29:5: undefined: reverse

    /tmp/tmp9qaui7vo_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ make([]int, len(arr))\n    for i := range arr {\n        arr[i] = i\n    }\n\
    \    sort.Ints(arr)\n    arr := reverse(arr)\n    arr := replaceDigit(arr)\n \
    \   return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmlwrx1a3_test.go:25:9: no new variables on left side of :=

    /tmp/tmpmlwrx1a3_test.go:29:5: undefined: sort

    /tmp/tmpmlwrx1a3_test.go:30:9: no new variables on left side of :=

    /tmp/tmpmlwrx1a3_test.go:30:12: undefined: reverse

    /tmp/tmpmlwrx1a3_test.go:31:9: no new variables on left side of :=

    /tmp/tmpmlwrx1a3_test.go:31:12: undefined: replaceDigit

    /tmp/tmpmlwrx1a3_test.go:32:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdguv8nd3_test.go:28:5: undefined: sort

    /tmp/tmpdguv8nd3_test.go:29:5: undefined: reverse

    /tmp/tmpdguv8nd3_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    arr := []string{}\n    for _, v := range arr {\n      \
    \  if v >= 1 && v <= 9 {\n            arr = append(arr, fmt.Sprintf(\"%s\", v))\n\
    \        }\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnra20n13_test.go:25:5: undefined: sort

    /tmp/tmpnra20n13_test.go:26:5: undefined: reverse

    /tmp/tmpnra20n13_test.go:27:9: no new variables on left side of :=

    /tmp/tmpnra20n13_test.go:27:12: cannot use []string{} (value of type []string)
    as type []int in assignment

    /tmp/tmpnra20n13_test.go:30:31: cannot use fmt.Sprintf("%s", v) (value of type
    string) as type int in argument to append

    /tmp/tmpnra20n13_test.go:33:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    arr := reverse(arr)\n    arr :=\
    \ replace(arr)\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl78n7kp1_test.go:28:9: no new variables on left side of :=

    /tmp/tmpl78n7kp1_test.go:28:12: undefined: reverse

    /tmp/tmpl78n7kp1_test.go:29:9: no new variables on left side of :=

    /tmp/tmpl78n7kp1_test.go:29:12: undefined: replace

    /tmp/tmpl78n7kp1_test.go:30:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    arr := reverse(arr)\n\
    \    arr := replaceDigits(arr)\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjzhn8koq_test.go:28:5: undefined: sort

    /tmp/tmpjzhn8koq_test.go:29:9: no new variables on left side of :=

    /tmp/tmpjzhn8koq_test.go:29:12: undefined: reverse

    /tmp/tmpjzhn8koq_test.go:30:9: no new variables on left side of :=

    /tmp/tmpjzhn8koq_test.go:30:12: undefined: replaceDigits

    /tmp/tmpjzhn8koq_test.go:31:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{}, arr...)\n    for _,\
    \ v := range arr {\n        arr[len(arr)-1] = by_length_test.One[v]\n    }\n \
    \   return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprwj2xt0o_test.go:28:9: no new variables on left side of :=

    /tmp/tmprwj2xt0o_test.go:29:5: undefined: sort

    /tmp/tmprwj2xt0o_test.go:30:9: no new variables on left side of :=

    /tmp/tmprwj2xt0o_test.go:31:9: no new variables on left side of :=

    /tmp/tmprwj2xt0o_test.go:31:12: cannot use append([]string{}, arr...) (value of
    type []string) as type []int in assignment

    /tmp/tmprwj2xt0o_test.go:31:31: cannot use arr (variable of type []int) as type
    []string in argument to append

    /tmp/tmprwj2xt0o_test.go:33:27: undefined: by_length_test

    /tmp/tmprwj2xt0o_test.go:35:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := make([]int, len(arr))\n    for\
    \ i := range arr {\n        arr[i] = i\n    }\n    sort.Sort(arr)\n    arr :=\
    \ reverse(arr)\n    arr := replaceDigit(arr)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp5o3bzwl_test.go:28:9: no new variables on left side of :=

    /tmp/tmpp5o3bzwl_test.go:32:5: undefined: sort

    /tmp/tmpp5o3bzwl_test.go:33:9: no new variables on left side of :=

    /tmp/tmpp5o3bzwl_test.go:33:12: undefined: reverse

    /tmp/tmpp5o3bzwl_test.go:34:9: no new variables on left side of :=

    /tmp/tmpp5o3bzwl_test.go:34:12: undefined: replaceDigit

    /tmp/tmpp5o3bzwl_test.go:35:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := reverse(arr)\n    arr\
    \ := replaceDigits(arr)\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplg9p4sun_test.go:25:9: no new variables on left side of :=

    /tmp/tmplg9p4sun_test.go:26:5: undefined: sort

    /tmp/tmplg9p4sun_test.go:27:9: no new variables on left side of :=

    /tmp/tmplg9p4sun_test.go:27:12: undefined: reverse

    /tmp/tmplg9p4sun_test.go:28:9: no new variables on left side of :=

    /tmp/tmplg9p4sun_test.go:28:12: undefined: replaceDigits

    /tmp/tmplg9p4sun_test.go:29:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdguv8nd3_test.go:28:5: undefined: sort

    /tmp/tmpdguv8nd3_test.go:29:5: undefined: reverse

    /tmp/tmpdguv8nd3_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr := append([]string{},\
    \ by_length_test.One, by_length_test.Two, by_length_test.Three, by_length_test.Four,\
    \ by_length_test.Five, by_length_test.Six, by_length_test.Seven, by_length_test.Eight,\
    \ by_length_test.Nine...)\n    for i := 0; i < len(arr); i++ {\n        arr[i]\
    \ = by_length_test.Digits[arr[i]]\n    }\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgcuwk0rm_test.go:28:9: no new variables on left side of :=

    /tmp/tmpgcuwk0rm_test.go:29:5: undefined: sort

    /tmp/tmpgcuwk0rm_test.go:30:9: no new variables on left side of :=

    /tmp/tmpgcuwk0rm_test.go:31:9: no new variables on left side of :=

    /tmp/tmpgcuwk0rm_test.go:31:12: cannot use append([]string{}, by_length_test.One,
    by_length_test.Two, by_length_test.Three, by_length_test.Four, by_length_test.Five,
    by_length_test.Six, by_length_test.Seven, by_length_test.Eight, by_length_test.Nine...)
    (value of type []string) as type []int in assignment

    /tmp/tmpgcuwk0rm_test.go:31:31: undefined: by_length_test

    /tmp/tmpgcuwk0rm_test.go:33:18: undefined: by_length_test

    /tmp/tmpgcuwk0rm_test.go:35:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr),\
    \ \"\\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\
    \\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\\
    n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\"\
    )...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n\
    \    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n \
    \   arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n  \
    \  arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n   \
    \ arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr\
    \ := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr :=\
    \ append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr := append([]string{},\
    \ strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr),\
    \ \"\\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\
    \\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\\
    n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\"\
    )...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n\
    \    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n \
    \   arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n  \
    \  arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n   \
    \ arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr\
    \ := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr :=\
    \ append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr := append([]string{},\
    \ strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr),\
    \ \"\\n\")...)\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiswcbbaj_test.go:56:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075267
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n\n    sort.Ints(arr)\n    sort.Ints(arr[:len(arr)-1])\n\
    \    arr[len(arr)-1]--\n\n    var result []string\n    for _, v := range arr {\n\
    \        if v > 9 {\n            v = v - 10\n        }\n        result = append(result,\
    \ name[v])\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfsacv1zx_test.go:29:5: undefined: sort

    /tmp/tmpfsacv1zx_test.go:30:5: undefined: sort

    /tmp/tmpfsacv1zx_test.go:38:33: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n\n    arr := append([]int{}, arr...)\n  \
    \  sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu1vu_z_a_test.go:90:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075267
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        result[i] = names[arr[i]]\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmgp4dvis_test.go:25:5: undefined: sort

    /tmp/tmpmgp4dvis_test.go:26:5: undefined: reverse

    /tmp/tmpmgp4dvis_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i, v := range arr {\n        result[i]\
    \ = name[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm3xmt2da_test.go:28:5: undefined: sort

    /tmp/tmpm3xmt2da_test.go:29:5: undefined: reverse

    /tmp/tmpm3xmt2da_test.go:32:21: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n\
    \    arr := append(arr, \"One\")\n    arr := append(arr, \"Two\")\n    arr :=\
    \ append(arr, \"Three\")\n    arr := append(arr, \"Four\")\n    arr := append(arr,\
    \ \"Five\")\n    arr := append(arr, \"Six\")\n    arr := append(arr, \"Seven\"\
    )\n    arr := append(arr, \"Eight\")\n    arr := append(arr, \"Nine\")\n    arr\
    \ := append(arr, \"Ten\")\n    arr := append(arr, \"Eleven\")\n    arr := append(arr,\
    \ \"Twelve\")\n    arr := append(arr, \"Thirteen\")\n    arr := append(arr, \"\
    Fourteen\")\n    arr := append(arr, \"Fifteen\")\n    arr := append(arr, \"Sixteen\"\
    )\n    arr := append(arr, \"Seventeen\")\n    arr := append(arr, \"Eighteen\"\
    )\n    arr := append(arr, \"Nineteen\")\n    arr := append(arr, \"Twenty\")\n\
    \    arr := append(arr, \"Twenty One\")\n    arr := append(arr, \"Twenty Two\"\
    )\n    arr := append(arr, \"Twenty Three\")\n    arr := append(arr, \"Twenty Four\"\
    )\n    arr := append(arr, \"Twenty Five\")\n    arr := append(arr, \"Twenty Six\"\
    )\n    arr := append(arr, \"Twenty Seven\")\n    arr := append(arr, \"Twenty Eight\"\
    )\n    arr := append(arr, \"Twenty Nine\")\n    arr := append(arr, \"Twenty Ten\"\
    )\n    arr := append(arr, \"Twenty Eleven\")\n    arr := append(arr, \"Twenty\
    \ Twelve\")\n    arr := append(arr, \"Twenty Thirteen\")\n    arr := append(arr,\
    \ \"Twenty Fourteen\")\n    arr := append(arr, \"Twenty Fifteen\")\n    arr :=\
    \ append(arr, \"Twenty Sixteen\")\n    arr := append(arr, \"Twenty Seventeen\"\
    )\n    arr := append(arr, \"Twenty Eighteen\")\n    arr := append(arr, \"Twenty\
    \ Nine\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnc9zjrit_test.go:68:24: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075267
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \    sort.Ints(arr[:len(arr)-1])\n\n    var result []string\n    for _, v := range\
    \ arr {\n        if v < 1 || v > 9 {\n            continue\n        }\n      \
    \  result = append(result, fmt.Sprintf(\"%v\", v))\n    }\n\n    for _, v := range\
    \ result {\n        if v == \"One\" {\n            result[0] = \"Eight\"\n   \
    \     } else if v == \"Two\" {\n            result[1] = \"Five\"\n        } else\
    \ if v == \"Three\" {\n            result[2] = \"Four\"\n        } else if v ==\
    \ \"Four\" {\n            result[3] = \"Three\"\n        } else if v == \"Five\"\
    \ {\n            result[4] = \"Two\"\n        } else if v == \"Six\" {\n     \
    \       result[5] = \"Two\"\n        } else if v == \"Seven\" {\n            result[6]\
    \ = \"One\"\n        } else if v == \"Eight\" {\n            result[7] = \"One\"\
    \n        }\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy62pum57_test.go:29:5: undefined: sort

    /tmp/tmpy62pum57_test.go:30:5: undefined: sort

    /tmp/tmpy62pum57_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl8mosilp_test.go:84:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075266
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := reverse(arr)\n    arr := replaceDigits(arr)\n    return arr\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz6d8p19_test.go:28:9: no new variables on left side of :=

    /tmp/tmplz6d8p19_test.go:29:5: undefined: sort

    /tmp/tmplz6d8p19_test.go:30:9: no new variables on left side of :=

    /tmp/tmplz6d8p19_test.go:30:12: undefined: reverse

    /tmp/tmplz6d8p19_test.go:31:9: no new variables on left side of :=

    /tmp/tmplz6d8p19_test.go:31:12: undefined: replaceDigits

    /tmp/tmplz6d8p19_test.go:32:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \    sort.Sort(arr[:len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = replace_digit(arr[len(arr)-1])\n    return arr\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr93hh54n_test.go:28:5: undefined: sort

    /tmp/tmpr93hh54n_test.go:29:5: undefined: sort

    /tmp/tmpr93hh54n_test.go:30:5: undefined: sort

    /tmp/tmpr93hh54n_test.go:31:23: undefined: reverse

    /tmp/tmpr93hh54n_test.go:32:23: undefined: replace_digit

    /tmp/tmpr93hh54n_test.go:33:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    if len(arr) == 0 {\n        return result\n    }\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    for _, v := range arr {\n        result = append(result,\
    \ name[v])\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9phd2u98_test.go:29:5: undefined: sort

    /tmp/tmp9phd2u98_test.go:30:5: undefined: reverse

    /tmp/tmp9phd2u98_test.go:32:33: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i := 0; i <\
    \ len(arr); i++ {\n        result[i] = names[arr[i]]\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps7do1ihp_test.go:25:5: undefined: sort

    /tmp/tmps7do1ihp_test.go:26:5: undefined: reverse

    /tmp/tmps7do1ihp_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        result[i] = names[arr[i]]\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmgp4dvis_test.go:25:5: undefined: sort

    /tmp/tmpmgp4dvis_test.go:26:5: undefined: reverse

    /tmp/tmpmgp4dvis_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{}, names[:len(arr)-1]...)\n\
    \    for _, v := range arr {\n        arr[len(arr)-1] = names[v]\n    }\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy81wtinr_test.go:28:9: no new variables on left side of :=

    /tmp/tmpy81wtinr_test.go:29:5: undefined: sort

    /tmp/tmpy81wtinr_test.go:30:9: no new variables on left side of :=

    /tmp/tmpy81wtinr_test.go:31:9: no new variables on left side of :=

    /tmp/tmpy81wtinr_test.go:31:12: cannot use append([]string{}, names[:len(arr)
    - 1]...) (value of type []string) as type []int in assignment

    /tmp/tmpy81wtinr_test.go:31:31: undefined: names

    /tmp/tmpy81wtinr_test.go:33:27: undefined: names

    /tmp/tmpy81wtinr_test.go:35:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075269
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[:len(arr)-1])\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphiks39po_test.go:28:5: undefined: sort

    /tmp/tmphiks39po_test.go:29:5: undefined: sort

    /tmp/tmphiks39po_test.go:30:5: undefined: reverse

    /tmp/tmphiks39po_test.go:33:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075269
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    arr := reverse(arr)\n\
    \    result := make([]string, len(arr))\n    for i, v := range arr {\n       \
    \ result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsjic8hn5_test.go:28:5: undefined: sort

    /tmp/tmpsjic8hn5_test.go:29:9: no new variables on left side of :=

    /tmp/tmpsjic8hn5_test.go:29:12: undefined: reverse

    /tmp/tmpsjic8hn5_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075269
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    arr := append([]int{}, arr...)\n    arr := append([]string{},\
    \ arr...)\n    for _, i := range arr {\n        if i >= 1 && i <= 9 {\n      \
    \      arr[i] = \"One\"\n        } else if i >= 10 && i <= 99 {\n            arr[i]\
    \ = \"Two\"\n        } else if i >= 100 && i <= 999 {\n            arr[i] = \"\
    Three\"\n        } else if i >= 1000 && i <= 9999 {\n            arr[i] = \"Four\"\
    \n        } else if i >= 10000 && i <= 99999 {\n            arr[i] = \"Five\"\n\
    \        } else if i >= 100000 && i <= 999999 {\n            arr[i] = \"Six\"\n\
    \        } else if i >= 1000000 && i <= 9999999 {\n            arr[i] = \"Seven\"\
    \n        } else if i >= 10000000 && i <= 99999999 {\n            arr[i] = \"\
    Eight\"\n        } else if i >= 100000000 && i <= 999999999 {\n            arr[i]\
    \ = \"Nine\"\n        }\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ak3hk08_test.go:28:9: no new variables on left side of :=

    /tmp/tmp0ak3hk08_test.go:29:5: undefined: sort

    /tmp/tmp0ak3hk08_test.go:30:5: undefined: reverse

    /tmp/tmp0ak3hk08_test.go:31:9: no new variables on left side of :=

    /tmp/tmp0ak3hk08_test.go:32:9: no new variables on left side of :=

    /tmp/tmp0ak3hk08_test.go:32:12: cannot use append([]string{}, arr...) (value of
    type []string) as type []int in assignment

    /tmp/tmp0ak3hk08_test.go:32:31: cannot use arr (variable of type []int) as type
    []string in argument to append

    /tmp/tmp0ak3hk08_test.go:35:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmp0ak3hk08_test.go:37:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmp0ak3hk08_test.go:39:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmp0ak3hk08_test.go:39:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075269
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr2 := make([]int, len(arr))\n    for\
    \ i := range arr2 {\n        arr2[i] = arr[i]\n    }\n    sort.Sort(arr2)\n  \
    \  arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n    return arr2\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphj9_ok7q_test.go:32:5: undefined: sort

    /tmp/tmphj9_ok7q_test.go:33:12: undefined: reverse

    /tmp/tmphj9_ok7q_test.go:34:12: undefined: replaceDigits

    /tmp/tmphj9_ok7q_test.go:35:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \    reverse(arr)\n    var result []string\n    for _, v := range arr {\n    \
    \    if v > 9 {\n            v = v - 10\n        }\n        result = append(result,\
    \ name[v])\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxvbdl30_test.go:28:5: undefined: sort

    /tmp/tmpbxvbdl30_test.go:29:5: undefined: sort

    /tmp/tmpbxvbdl30_test.go:30:5: undefined: reverse

    /tmp/tmpbxvbdl30_test.go:36:33: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdguv8nd3_test.go:28:5: undefined: sort

    /tmp/tmpdguv8nd3_test.go:29:5: undefined: reverse

    /tmp/tmpdguv8nd3_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_mhrz1r2_test.go:100:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075269
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n\n    sort.Ints(arr)\n    sort.Ints(arr[:len(arr)-1])\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    \nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzy3_ccf1_test.go:101:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)/2]\n    arr.reverse()\n    arr :=\
    \ append([]string{}, arr...)\n    for _, v := range arr {\n        arr[v-1] =\
    \ by_length_test.One\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplwehfna6_test.go:28:9: no new variables on left side of :=

    /tmp/tmplwehfna6_test.go:29:5: undefined: sort

    /tmp/tmplwehfna6_test.go:30:9: no new variables on left side of :=

    /tmp/tmplwehfna6_test.go:31:9: arr.reverse undefined (type []int has no field
    or method reverse)

    /tmp/tmplwehfna6_test.go:32:9: no new variables on left side of :=

    /tmp/tmplwehfna6_test.go:32:12: cannot use append([]string{}, arr...) (value of
    type []string) as type []int in assignment

    /tmp/tmplwehfna6_test.go:32:31: cannot use arr (variable of type []int) as type
    []string in argument to append

    /tmp/tmplwehfna6_test.go:34:20: undefined: by_length_test

    /tmp/tmplwehfna6_test.go:36:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Sort(sort.Reverse(arr))\n\
    \    result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm2fm9xfy_test.go:25:5: undefined: sort

    /tmp/tmpm2fm9xfy_test.go:28:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n     \
    \       result = append(result, fmt.Sprintf(\"%v\", v))\n        } else {\n  \
    \          result = append(result, \"One\")\n        }\n    }\n    return reverse(result)\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcjj5rpgn_test.go:33:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    sort.Ints(arr[:len(arr)-1])\n    reverse(arr)\n    arr2 := make([]string,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        arr2[i] = names[arr[i]]\n\
    \    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm_c8ly8d_test.go:25:5: undefined: sort

    /tmp/tmpm_c8ly8d_test.go:26:5: undefined: sort

    /tmp/tmpm_c8ly8d_test.go:27:5: undefined: reverse

    /tmp/tmpm_c8ly8d_test.go:30:19: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\n    arr := append([]int{},\
    \ arr...)\n    sort.Int\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpztoo5jt6_test.go:112:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = name[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmq4eog3g_test.go:28:9: no new variables on left side of :=

    /tmp/tmpmq4eog3g_test.go:29:5: undefined: sort

    /tmp/tmpmq4eog3g_test.go:30:5: undefined: reverse

    /tmp/tmpmq4eog3g_test.go:33:21: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr2 := make([]int, len(arr))\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n       \
    \     continue\n        }\n        arr2[i] = arr[i]\n    }\n    sort.Ints(arr2)\n\
    \    arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n    return arr2\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp35evfn05_test.go:35:5: undefined: sort

    /tmp/tmp35evfn05_test.go:36:12: undefined: reverse

    /tmp/tmp35evfn05_test.go:37:12: undefined: replaceDigits

    /tmp/tmp35evfn05_test.go:38:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i, v := range arr {\n        result[i]\
    \ = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qaui7vo_test.go:28:5: undefined: sort

    /tmp/tmp9qaui7vo_test.go:29:5: undefined: reverse

    /tmp/tmp9qaui7vo_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    arr := append(arr,\
    \ 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr, 0)\n \
    \   sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr, 0)\n    sort.Ints(arr)\n\
    \    arr[len(arr)-1]--\n    arr := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n\
    \    arr := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr\
    \ := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr,\
    \ 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr, 0)\n \
    \   sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr, 0)\n    sort.Ints(arr)\n\
    \    arr[len(arr)-1]--\n    arr := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n\
    \    arr := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr\
    \ := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr,\
    \ 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr, 0)\n \
    \   sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr, 0)\n    sort.Ints(arr)\n\
    \    arr[len(arr)-1]--\n    arr := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n\
    \    arr := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr\
    \ := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr,\
    \ 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr, 0)\n \
    \   sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := append(arr, 0)\n    sort.Ints(arr)\n\
    \    arr[len(arr)-1]--\n    arr := append(arr, 0)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n\
    \    arr := append(arr, 0)\n    sort.\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpftwb_qqj_test.go:97:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \    sort.Ints(arr[:len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzqslpva__test.go:71:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075264
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \    sort.Sort(arr[:len(arr)-1])\n\n    var result []string\n    for _, v := range\
    \ arr {\n        if v > 9 {\n            v = v - 10\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%v\", v))\n    }\n\n    for _, v := range arr\
    \ {\n        if v < 1 {\n            v = v + 10\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%v\", v))\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl2987j18_test.go:29:5: undefined: sort

    /tmp/tmpl2987j18_test.go:30:5: undefined: sort

    /tmp/tmpl2987j18_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075271
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n \
    \   arr := append([]string{}, arr...)\n    for _, v := range arr {\n        if\
    \ v < 1 || v > 9 {\n            continue\n        }\n        arr[v-1] = names[v-1]\n\
    \    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfgs9u_vr_test.go:25:9: no new variables on left side of :=

    /tmp/tmpfgs9u_vr_test.go:26:5: undefined: sort

    /tmp/tmpfgs9u_vr_test.go:27:9: no new variables on left side of :=

    /tmp/tmpfgs9u_vr_test.go:28:9: no new variables on left side of :=

    /tmp/tmpfgs9u_vr_test.go:28:12: cannot use append([]string{}, arr...) (value of
    type []string) as type []int in assignment

    /tmp/tmpfgs9u_vr_test.go:28:31: cannot use arr (variable of type []int) as type
    []string in argument to append

    /tmp/tmpfgs9u_vr_test.go:33:20: undefined: names

    /tmp/tmpfgs9u_vr_test.go:35:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr),\
    \ \"\\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(reverse(arr)),\
    \ \"\\n\")...)\n    for _, v := range arr {\n        arr[v] = map[int]string{\n\
    \            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n\
    \            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n\
    \            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\"\
    ,\n        }[v]\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq3ky497g_test.go:28:9: no new variables on left side of :=

    /tmp/tmpq3ky497g_test.go:29:5: undefined: sort

    /tmp/tmpq3ky497g_test.go:30:9: no new variables on left side of :=

    /tmp/tmpq3ky497g_test.go:31:9: no new variables on left side of :=

    /tmp/tmpq3ky497g_test.go:31:12: cannot use append([]string{}, strings.Split(fmt.Sprint(arr),
    "\n")...) (value of type []string) as type []int in assignment

    /tmp/tmpq3ky497g_test.go:31:31: undefined: strings

    /tmp/tmpq3ky497g_test.go:32:9: no new variables on left side of :=

    /tmp/tmpq3ky497g_test.go:32:12: cannot use append([]string{}, strings.Split(fmt.Sprint(reverse(arr)),
    "\n")...) (value of type []string) as type []int in assignment

    /tmp/tmpq3ky497g_test.go:32:31: undefined: strings

    /tmp/tmpq3ky497g_test.go:32:56: undefined: reverse

    /tmp/tmpq3ky497g_test.go:32:9: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    sort.Ints(arr)\n    reverse(arr)\n\
    \    result := make([]string, len(arr))\n    for i, v := range arr {\n       \
    \ result[i] = name[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp98g90txr_test.go:28:5: undefined: sort

    /tmp/tmp98g90txr_test.go:29:5: undefined: reverse

    /tmp/tmp98g90txr_test.go:32:21: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075271
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdguv8nd3_test.go:28:5: undefined: sort

    /tmp/tmpdguv8nd3_test.go:29:5: undefined: reverse

    /tmp/tmpdguv8nd3_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n \
    \   arr := append([]string{\"One\"}, arr...)\n    sort.Strings(arr)\n    arr :=\
    \ arr[:len(arr)-1]\n    arr := append([]string{\"Two\"}, arr...)\n    sort.Strings(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"Three\"}, arr...)\n\
    \    sort.Strings(arr)\n    arr := arr[:len(arr)-1]\n    arr := append([]string{\"\
    Four\"}, arr...)\n    sort.Strings(arr)\n    arr := arr[:len(arr)-1]\n    arr\
    \ := append([]string{\"Five\"}, arr...)\n    sort.Strings(arr)\n    arr := arr[:len(arr)-1]\n\
    \    arr := append([]string{\"Six\"}, arr...)\n    sort.Strings(arr)\n    arr\
    \ := arr[:len(arr)-1]\n    arr := append([]string{\"Seven\"}, arr...)\n    sort.Strings(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"Eight\"}, arr...)\n\
    \    sort.Strings(arr)\n    arr := arr[:len(arr)-1]\n    arr := append([]string{\"\
    Nine\"}, arr...)\n    sort.Strings(arr)\n    arr := arr[:len(arr)-1]\n    arr\
    \ := append([]string{}, arr...)\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxrkr0rn2_test.go:25:9:\
    \ no new variables on left side of :=\n/tmp/tmpxrkr0rn2_test.go:26:5: undefined:\
    \ sort\n/tmp/tmpxrkr0rn2_test.go:27:9: no new variables on left side of :=\n/tmp/tmpxrkr0rn2_test.go:28:9:\
    \ no new variables on left side of :=\n/tmp/tmpxrkr0rn2_test.go:28:12: cannot\
    \ use append([]string{\u2026}, arr...) (value of type []string) as type []int\
    \ in assignment\n/tmp/tmpxrkr0rn2_test.go:28:36: cannot use arr (variable of type\
    \ []int) as type []string in argument to append\n/tmp/tmpxrkr0rn2_test.go:29:5:\
    \ undefined: sort\n/tmp/tmpxrkr0rn2_test.go:30:9: no new variables on left side\
    \ of :=\n/tmp/tmpxrkr0rn2_test.go:31:12: cannot use append([]string{\u2026}, arr...)\
    \ (value of type []string) as type []int in assignment\n/tmp/tmpxrkr0rn2_test.go:31:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpxrkr0rn2_test.go:31:12: too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{}, arr...)\n    arr :=\
    \ reverse(arr)\n    for i := range arr {\n        arr[i] = names[arr[i]]\n   \
    \ }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4x8xnrr7_test.go:28:9: no new variables on left side of :=

    /tmp/tmp4x8xnrr7_test.go:29:5: undefined: sort

    /tmp/tmp4x8xnrr7_test.go:30:9: no new variables on left side of :=

    /tmp/tmp4x8xnrr7_test.go:31:9: no new variables on left side of :=

    /tmp/tmp4x8xnrr7_test.go:31:12: cannot use append([]string{}, arr...) (value of
    type []string) as type []int in assignment

    /tmp/tmp4x8xnrr7_test.go:31:31: cannot use arr (variable of type []int) as type
    []string in argument to append

    /tmp/tmp4x8xnrr7_test.go:32:9: no new variables on left side of :=

    /tmp/tmp4x8xnrr7_test.go:32:12: undefined: reverse

    /tmp/tmp4x8xnrr7_test.go:34:18: undefined: names

    /tmp/tmp4x8xnrr7_test.go:36:12: cannot use arr (variable of type []int) as type
    []string in return statement

    /tmp/tmp4x8xnrr7_test.go:36:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075271
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i, v := range arr {\n        result[i]\
    \ = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qaui7vo_test.go:28:5: undefined: sort

    /tmp/tmp9qaui7vo_test.go:29:5: undefined: reverse

    /tmp/tmp9qaui7vo_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1]\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv9v1g1nz_test.go:71:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i, v := range arr {\n        result[i]\
    \ = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qaui7vo_test.go:28:5: undefined: sort

    /tmp/tmp9qaui7vo_test.go:29:5: undefined: reverse

    /tmp/tmp9qaui7vo_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7yn09nh_test.go:25:5: undefined: sort

    /tmp/tmpz7yn09nh_test.go:26:5: undefined: reverse

    /tmp/tmpz7yn09nh_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    if len(arr) == 0 {\n        return result\n    }\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    for _, v := range arr {\n        result = append(result,\
    \ name[v])\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9phd2u98_test.go:29:5: undefined: sort

    /tmp/tmp9phd2u98_test.go:30:5: undefined: reverse

    /tmp/tmp9phd2u98_test.go:32:33: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  var result []string\n    for _, v := range arr {\n        if v > 9 {\n    \
    \        v = v - 10\n        }\n        result = append(result, name[v])\n   \
    \ }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy4j3g2wn_test.go:28:5: undefined: sort

    /tmp/tmpy4j3g2wn_test.go:29:5: undefined: reverse

    /tmp/tmpy4j3g2wn_test.go:35:33: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075271
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = arr[len(arr)-1].String()\n\
    \    arr[len(arr)-1] = arr[len(arr)-1].Replace(\"1\", \"One\")\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1].Replace(\"2\", \"Two\")\n    arr[len(arr)-1] = arr[len(arr)-1].Replace(\"\
    3\", \"Three\")\n    arr[len(arr)-1] = arr[len(arr)-1].Replace(\"4\", \"Four\"\
    )\n    arr[len(arr)-1] = arr[len(arr)-1].Replace(\"5\", \"Five\")\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1].Replace(\"6\", \"Six\")\n    arr[len(arr)-1] = arr[len(arr)-1].Replace(\"\
    7\", \"Seven\")\n    arr[len(arr)-1] = arr[len(arr)-1].Replace(\"8\", \"Eight\"\
    )\n    arr[len(arr)-1] = arr[len(arr)-1].Replace(\"9\", \"Nine\")\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnly2w3yo_test.go:28:5: undefined: sort

    /tmp/tmpnly2w3yo_test.go:29:5: undefined: sort

    /tmp/tmpnly2w3yo_test.go:30:23: undefined: reverse

    /tmp/tmpnly2w3yo_test.go:31:39: arr[len(arr) - 1].String undefined (type int has
    no field or method String)

    /tmp/tmpnly2w3yo_test.go:32:39: arr[len(arr) - 1].Replace undefined (type int
    has no field or method Replace)

    /tmp/tmpnly2w3yo_test.go:33:39: arr[len(arr) - 1].Replace undefined (type int
    has no field or method Replace)

    /tmp/tmpnly2w3yo_test.go:34:39: arr[len(arr) - 1].Replace undefined (type int
    has no field or method Replace)

    /tmp/tmpnly2w3yo_test.go:35:39: arr[len(arr) - 1].Replace undefined (type int
    has no field or method Replace)

    /tmp/tmpnly2w3yo_test.go:36:39: arr[len(arr) - 1].Replace undefined (type int
    has no field or method Replace)

    /tmp/tmpnly2w3yo_test.go:37:39: arr[len(arr) - 1].Replace undefined (type int
    has no field or method Replace)

    /tmp/tmpnly2w3yo_test.go:37:39: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075272
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n \
    \   arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n  \
    \  arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n   \
    \ arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr\
    \ := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr :=\
    \ append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr := append([]string{},\
    \ strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr),\
    \ \"\\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\
    \\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\\
    n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\"\
    )...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n\
    \    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n \
    \   arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n  \
    \  arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n   \
    \ arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr\
    \ := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr :=\
    \ append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr := append([]string{},\
    \ strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr),\
    \ \"\\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\
    \\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\\
    n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\"\
    )...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n\
    \    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n \
    \   arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n  \
    \  arr := append([]string{}, strings.\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpog99gsd0_test.go:54:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075271
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    sort.Ints(arr[len(arr)-1])\n    sort.Ints(arr[:len(arr)-1])\n    arr[len(arr)-1]\
    \ = reverse(arr[len(arr)-1])\n    arr[:len(arr)-1] = reverse(arr[:len(arr)-1])\n\
    \    arr := []string{}\n    for _, v := range arr {\n        if v >= 1 && v <=\
    \ 9 {\n            arr = append(arr, name[v-1])\n        }\n    }\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphz4yclvk_test.go:25:5: undefined: sort

    /tmp/tmphz4yclvk_test.go:26:5: undefined: sort

    /tmp/tmphz4yclvk_test.go:27:5: undefined: sort

    /tmp/tmphz4yclvk_test.go:28:23: undefined: reverse

    /tmp/tmphz4yclvk_test.go:29:24: undefined: reverse

    /tmp/tmphz4yclvk_test.go:30:9: no new variables on left side of :=

    /tmp/tmphz4yclvk_test.go:30:12: cannot use []string{} (value of type []string)
    as type []int in assignment

    /tmp/tmphz4yclvk_test.go:33:31: undefined: name

    /tmp/tmphz4yclvk_test.go:36:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075272
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    sort.Sort(sort.Reverse(arr))\n    arr2 := make([]string, len(arr))\n    for\
    \ i := range arr {\n        arr2[i] = names[arr[i]]\n    }\n    return arr2\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyq_ole8r_test.go:25:5: undefined: sort

    /tmp/tmpyq_ole8r_test.go:26:5: undefined: sort

    /tmp/tmpyq_ole8r_test.go:29:19: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075272
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl8mosilp_test.go:84:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075266
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[:len(arr)-1])\n\
    \    reverse(arr)\n    arr[len(arr)-1] = arr[len(arr)-1] % 10\n    arr[len(arr)-1]\
    \ = arr[len(arr)-1] / 10\n    arr[len(arr)-1] = by_length_test.One[arr[len(arr)-1]]\n\
    \    arr[len(arr)-1] = by_length_test.Two[arr[len(arr)-1]]\n    arr[len(arr)-1]\
    \ = by_length_test.Three[arr[len(arr)-1]]\n    arr[len(arr)-1] = by_length_test.Four[arr[len(arr)-1]]\n\
    \    arr[len(arr)-1] = by_length_test.Five[arr[len(arr)-1]]\n    arr[len(arr)-1]\
    \ = by_length_test.Six[arr[len(arr)-1]]\n    arr[len(arr)-1] = by_length_test.Seven[arr[len(arr)-1]]\n\
    \    arr[len(arr)-1] = by_length_test.Eight[arr[len(arr)-1]]\n    arr[len(arr)-1]\
    \ = by_length_test.Nine[arr[len(arr)-1]]\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpix1fhoeu_test.go:28:5: undefined: sort

    /tmp/tmpix1fhoeu_test.go:29:5: undefined: sort

    /tmp/tmpix1fhoeu_test.go:30:5: undefined: reverse

    /tmp/tmpix1fhoeu_test.go:33:23: undefined: by_length_test

    /tmp/tmpix1fhoeu_test.go:34:23: undefined: by_length_test

    /tmp/tmpix1fhoeu_test.go:35:23: undefined: by_length_test

    /tmp/tmpix1fhoeu_test.go:36:23: undefined: by_length_test

    /tmp/tmpix1fhoeu_test.go:37:23: undefined: by_length_test

    /tmp/tmpix1fhoeu_test.go:38:23: undefined: by_length_test

    /tmp/tmpix1fhoeu_test.go:39:23: undefined: by_length_test

    /tmp/tmpix1fhoeu_test.go:39:23: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075272
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    arr := reverse(arr)\n\
    \    arr := replaceDigit(arr)\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdkn8ax4o_test.go:28:5: undefined: sort

    /tmp/tmpdkn8ax4o_test.go:29:9: no new variables on left side of :=

    /tmp/tmpdkn8ax4o_test.go:29:12: undefined: reverse

    /tmp/tmpdkn8ax4o_test.go:30:9: no new variables on left side of :=

    /tmp/tmpdkn8ax4o_test.go:30:12: undefined: replaceDigit

    /tmp/tmpdkn8ax4o_test.go:31:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075272
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigit(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa98d5f24_test.go:29:5: undefined: sort

    /tmp/tmpa98d5f24_test.go:30:12: undefined: reverse

    /tmp/tmpa98d5f24_test.go:31:12: undefined: replaceDigit

    /tmp/tmpa98d5f24_test.go:32:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i, v := range arr {\n        result[i]\
    \ = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qaui7vo_test.go:28:5: undefined: sort

    /tmp/tmp9qaui7vo_test.go:29:5: undefined: reverse

    /tmp/tmp9qaui7vo_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        result[i] = names[arr[i]]\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmgp4dvis_test.go:25:5: undefined: sort

    /tmp/tmpmgp4dvis_test.go:26:5: undefined: reverse

    /tmp/tmpmgp4dvis_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr),\
    \ \"\\n\")...)\n    for i := range arr {\n        arr[i] = by_length_test.One[arr[i]]\n\
    \    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk0x0cv7z_test.go:28:9: no new variables on left side of :=

    /tmp/tmpk0x0cv7z_test.go:29:5: undefined: sort

    /tmp/tmpk0x0cv7z_test.go:30:9: no new variables on left side of :=

    /tmp/tmpk0x0cv7z_test.go:31:9: no new variables on left side of :=

    /tmp/tmpk0x0cv7z_test.go:31:12: cannot use append([]string{}, strings.Split(fmt.Sprint(arr),
    "\n")...) (value of type []string) as type []int in assignment

    /tmp/tmpk0x0cv7z_test.go:31:31: undefined: strings

    /tmp/tmpk0x0cv7z_test.go:33:18: undefined: by_length_test

    /tmp/tmpk0x0cv7z_test.go:35:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075272
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    sort.Ints(arr)\n    reverse(arr)\n\
    \    var result []string\n    for _, v := range arr {\n        if v > 9 {\n  \
    \          v = v - 10\n        }\n        result = append(result, name[v])\n \
    \   }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpark5bf24_test.go:28:5: undefined: sort

    /tmp/tmpark5bf24_test.go:29:5: undefined: reverse

    /tmp/tmpark5bf24_test.go:35:33: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075272
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ make([]int, len(arr))\n    for i := range arr {\n        arr[i] = i\n    }\n\
    \    sort.Ints(arr)\n    reverse(arr)\n    result := make([]string, len(arr))\n\
    \    for i := range arr {\n        result[i] = names[arr[i]]\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_vegegrz_test.go:25:9: no new variables on left side of :=

    /tmp/tmp_vegegrz_test.go:29:5: undefined: sort

    /tmp/tmp_vegegrz_test.go:30:5: undefined: reverse

    /tmp/tmp_vegegrz_test.go:33:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075272
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{}, names[:len(arr)])\n\
    \    for _, v := range arr {\n        arr[len(arr)-1] = names[v]\n    }\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxc3msi45_test.go:28:9: no new variables on left side of :=

    /tmp/tmpxc3msi45_test.go:29:5: undefined: sort

    /tmp/tmpxc3msi45_test.go:30:9: no new variables on left side of :=

    /tmp/tmpxc3msi45_test.go:31:9: no new variables on left side of :=

    /tmp/tmpxc3msi45_test.go:31:12: cannot use append([]string{}, names[:len(arr)])
    (value of type []string) as type []int in assignment

    /tmp/tmpxc3msi45_test.go:31:31: undefined: names

    /tmp/tmpxc3msi45_test.go:33:27: undefined: names

    /tmp/tmpxc3msi45_test.go:35:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075272
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7yn09nh_test.go:25:5: undefined: sort

    /tmp/tmpz7yn09nh_test.go:26:5: undefined: reverse

    /tmp/tmpz7yn09nh_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl8mosilp_test.go:84:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075266
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = name[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1sc9p6m8_test.go:28:5: undefined: sort

    /tmp/tmp1sc9p6m8_test.go:29:5: undefined: reverse

    /tmp/tmp1sc9p6m8_test.go:32:21: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075273
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        result[i] = names[arr[i]]\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmgp4dvis_test.go:25:5: undefined: sort

    /tmp/tmpmgp4dvis_test.go:26:5: undefined: reverse

    /tmp/tmpmgp4dvis_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    sort.Ints(arr[:len(arr)-1])\n    sort.Ints(arr[len(arr)-1:])\n    arr :=\
    \ reverse(arr)\n    arr := replaceDigit(arr)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpul36zmmw_test.go:25:5: undefined: sort

    /tmp/tmpul36zmmw_test.go:26:5: undefined: sort

    /tmp/tmpul36zmmw_test.go:27:5: undefined: sort

    /tmp/tmpul36zmmw_test.go:28:9: no new variables on left side of :=

    /tmp/tmpul36zmmw_test.go:28:12: undefined: reverse

    /tmp/tmpul36zmmw_test.go:29:9: no new variables on left side of :=

    /tmp/tmpul36zmmw_test.go:29:12: undefined: replaceDigit

    /tmp/tmpul36zmmw_test.go:30:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075273
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[:len(arr)-1])\n\
    \    reverse(arr)\n    arr2 := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        arr2[i] = name[v]\n    }\n    return arr2\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4g4f8lc_test.go:28:5: undefined: sort

    /tmp/tmpu4g4f8lc_test.go:29:5: undefined: sort

    /tmp/tmpu4g4f8lc_test.go:30:5: undefined: reverse

    /tmp/tmpu4g4f8lc_test.go:33:19: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075273
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := 0; i < len(arr); i++ {\n \
    \       result[i] = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpamo0fdpd_test.go:28:5: undefined: sort

    /tmp/tmpamo0fdpd_test.go:29:5: undefined: reverse

    /tmp/tmpamo0fdpd_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075273
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    sort.Ints(arr[:len(arr)-1])\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi8fursk__test.go:97:17: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075272
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdguv8nd3_test.go:28:5: undefined: sort

    /tmp/tmpdguv8nd3_test.go:29:5: undefined: reverse

    /tmp/tmpdguv8nd3_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{}, arr...)\n    for _,\
    \ v := range arr {\n        if v < 1 || v > 9 {\n            continue\n      \
    \  }\n        arr[v-1] = by_length_test.One[v-1]\n    }\n    return arr\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3g5jymqh_test.go:28:9: no new variables on left side of :=

    /tmp/tmp3g5jymqh_test.go:29:5: undefined: sort

    /tmp/tmp3g5jymqh_test.go:30:9: no new variables on left side of :=

    /tmp/tmp3g5jymqh_test.go:31:9: no new variables on left side of :=

    /tmp/tmp3g5jymqh_test.go:31:12: cannot use append([]string{}, arr...) (value of
    type []string) as type []int in assignment

    /tmp/tmp3g5jymqh_test.go:31:31: cannot use arr (variable of type []int) as type
    []string in argument to append

    /tmp/tmp3g5jymqh_test.go:36:20: undefined: by_length_test

    /tmp/tmp3g5jymqh_test.go:38:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075273
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        result[i] = names[arr[i]]\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmgp4dvis_test.go:25:5: undefined: sort

    /tmp/tmpmgp4dvis_test.go:26:5: undefined: reverse

    /tmp/tmpmgp4dvis_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        result[i] = names[arr[i]]\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmgp4dvis_test.go:25:5: undefined: sort

    /tmp/tmpmgp4dvis_test.go:26:5: undefined: reverse

    /tmp/tmpmgp4dvis_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    if len(arr) == 0 {\n        return result\n    }\n    sort.Ints(arr)\n\
    \    sort.Ints(arr[:len(arr)-1])\n    for i := 0; i < len(arr); i++ {\n      \
    \  if arr[i] < 1 || arr[i] > 9 {\n            continue\n        }\n        result\
    \ := append(result, fmt.Sprintf(\"%s\", arr[i]))\n    }\n    return result\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,go |>\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwz2szc1w_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075272
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = by_length_test.map[v]\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl3uyk9q0_test.go:33:36: expected selector or type assertion, found ''map''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075272
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdguv8nd3_test.go:28:5: undefined: sort

    /tmp/tmpdguv8nd3_test.go:29:5: undefined: reverse

    /tmp/tmpdguv8nd3_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    sort.Ints(arr[:len(arr)-1])\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi8fursk__test.go:97:17: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075272
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7yn09nh_test.go:25:5: undefined: sort

    /tmp/tmpz7yn09nh_test.go:26:5: undefined: reverse

    /tmp/tmpz7yn09nh_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, 0, len(arr))\n    for _, v :=\
    \ range arr {\n        result = append(result, names[v])\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmmnuy3_1_test.go:28:9: no new variables on left side of :=

    /tmp/tmpmmnuy3_1_test.go:29:5: undefined: sort

    /tmp/tmpmmnuy3_1_test.go:30:5: undefined: reverse

    /tmp/tmpmmnuy3_1_test.go:33:33: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075273
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = name[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1sc9p6m8_test.go:28:5: undefined: sort

    /tmp/tmp1sc9p6m8_test.go:29:5: undefined: reverse

    /tmp/tmp1sc9p6m8_test.go:32:21: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075273
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdguv8nd3_test.go:28:5: undefined: sort

    /tmp/tmpdguv8nd3_test.go:29:5: undefined: reverse

    /tmp/tmpdguv8nd3_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n \
    \   arr := append([]string{}, arr...)\n    arr := reverse(arr)\n    for _, v :=\
    \ range arr {\n        arr[v] = names[v]\n    }\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkbytpa_5_test.go:25:9: no new variables on left side of :=

    /tmp/tmpkbytpa_5_test.go:26:5: undefined: sort

    /tmp/tmpkbytpa_5_test.go:27:9: no new variables on left side of :=

    /tmp/tmpkbytpa_5_test.go:28:9: no new variables on left side of :=

    /tmp/tmpkbytpa_5_test.go:28:12: cannot use append([]string{}, arr...) (value of
    type []string) as type []int in assignment

    /tmp/tmpkbytpa_5_test.go:28:31: cannot use arr (variable of type []int) as type
    []string in argument to append

    /tmp/tmpkbytpa_5_test.go:29:9: no new variables on left side of :=

    /tmp/tmpkbytpa_5_test.go:29:12: undefined: reverse

    /tmp/tmpkbytpa_5_test.go:31:18: undefined: names

    /tmp/tmpkbytpa_5_test.go:33:12: cannot use arr (variable of type []int) as type
    []string in return statement

    /tmp/tmpkbytpa_5_test.go:33:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075273
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \    sort.Ints(arr[:len(arr)-1])\n\n    var result []string\n    for _, v := range\
    \ arr {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        } else {\n            result = append(result, \"One\")\n  \
    \      }\n    }\n\n    return reverseArray(result)\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp379cgijx_test.go:29:5: undefined: sort

    /tmp/tmp379cgijx_test.go:30:5: undefined: sort

    /tmp/tmp379cgijx_test.go:31:5: undefined: sort

    /tmp/tmp379cgijx_test.go:42:12: undefined: reverseArray

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075273
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    sort.Ints(arr)\n    reverse(arr)\n\
    \    result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcikj0v_9_test.go:28:5: undefined: sort

    /tmp/tmpcikj0v_9_test.go:29:5: undefined: reverse

    /tmp/tmpcikj0v_9_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    sort.Ints(arr[:len(arr)-1])\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n    arr[len(arr)-1]--\n\
    \    arr[len(arr)\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi8fursk__test.go:97:17: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075272
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \    sort.Ints(arr[:len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzqslpva__test.go:71:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075264
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append(arr, 0)\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        result[i] = names[arr[i]]\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprjmfuzrj_test.go:28:9: no new variables on left side of :=

    /tmp/tmprjmfuzrj_test.go:29:5: undefined: sort

    /tmp/tmprjmfuzrj_test.go:30:5: undefined: reverse

    /tmp/tmprjmfuzrj_test.go:33:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075273
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := reverse(arr)\n    arr := replaceDigit(arr)\n    return arr\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmj1goqqp_test.go:28:9: no new variables on left side of :=

    /tmp/tmpmj1goqqp_test.go:29:5: undefined: sort

    /tmp/tmpmj1goqqp_test.go:30:9: no new variables on left side of :=

    /tmp/tmpmj1goqqp_test.go:30:12: undefined: reverse

    /tmp/tmpmj1goqqp_test.go:31:9: no new variables on left side of :=

    /tmp/tmpmj1goqqp_test.go:31:12: undefined: replaceDigit

    /tmp/tmpmj1goqqp_test.go:32:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075273
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr2 := make([]int, len(arr))\n    for\
    \ i := 0; i < len(arr); i++ {\n        arr2[i] = arr[i]\n    }\n    sort.Ints(arr2)\n\
    \    arr2 = reverse(arr2)\n    arr2 = replaceDigit(arr2)\n    return arr2\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpof1z7zrg_test.go:32:5: undefined: sort

    /tmp/tmpof1z7zrg_test.go:33:12: undefined: reverse

    /tmp/tmpof1z7zrg_test.go:34:12: undefined: replaceDigit

    /tmp/tmpof1z7zrg_test.go:35:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075273
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdguv8nd3_test.go:28:5: undefined: sort

    /tmp/tmpdguv8nd3_test.go:29:5: undefined: reverse

    /tmp/tmpdguv8nd3_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr := append([]string{\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"}, arr...)\n    arr := reverse(arr)\n    arr := arr[:len(arr)-1]\n \
    \   return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfe5taebo_test.go:28:9:\
    \ no new variables on left side of :=\n/tmp/tmpfe5taebo_test.go:29:5: undefined:\
    \ sort\n/tmp/tmpfe5taebo_test.go:30:9: no new variables on left side of :=\n/tmp/tmpfe5taebo_test.go:31:9:\
    \ no new variables on left side of :=\n/tmp/tmpfe5taebo_test.go:31:12: cannot\
    \ use append([]string{\u2026}, arr...) (value of type []string) as type []int\
    \ in assignment\n/tmp/tmpfe5taebo_test.go:31:101: cannot use arr (variable of\
    \ type []int) as type []string in argument to append\n/tmp/tmpfe5taebo_test.go:32:9:\
    \ no new variables on left side of :=\n/tmp/tmpfe5taebo_test.go:32:12: undefined:\
    \ reverse\n/tmp/tmpfe5taebo_test.go:33:9: no new variables on left side of :=\n\
    /tmp/tmpfe5taebo_test.go:34:12: cannot use arr (variable of type []int) as type\
    \ []string in return statement\n/tmp/tmpfe5taebo_test.go:34:12: too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := arr[:len(arr)/2]\n \
    \   arr.reverse()\n    arr := append([]string{}, arr...)\n    for _, v := range\
    \ arr {\n        if v < 1 || v > 9 {\n            continue\n        }\n      \
    \  arr[v-1] = name[v-1]\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo9mrhac0_test.go:25:9: no new variables on left side of :=

    /tmp/tmpo9mrhac0_test.go:26:5: undefined: sort

    /tmp/tmpo9mrhac0_test.go:27:9: no new variables on left side of :=

    /tmp/tmpo9mrhac0_test.go:28:9: arr.reverse undefined (type []int has no field
    or method reverse)

    /tmp/tmpo9mrhac0_test.go:29:9: no new variables on left side of :=

    /tmp/tmpo9mrhac0_test.go:29:12: cannot use append([]string{}, arr...) (value of
    type []string) as type []int in assignment

    /tmp/tmpo9mrhac0_test.go:29:31: cannot use arr (variable of type []int) as type
    []string in argument to append

    /tmp/tmpo9mrhac0_test.go:34:20: undefined: name

    /tmp/tmpo9mrhac0_test.go:36:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    sort.Ints(arr[len(arr)-1])\n    sort.Sort(arr)\n    sort.Sort(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpepr70cyh_test.go:68:43: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075273
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n\n    arr2 := make([]int, len(arr))\n   \
    \ for i := range arr2 {\n        arr2[i] = arr[i]\n    }\n\n    sort.Ints(arr2)\n\
    \n    arr3 = reverse(arr2)\n\n    arr4 = make([]string, len(arr))\n    for i :=\
    \ range arr4 {\n        arr4[i] = name[arr3[i]]\n    }\n\n    return arr4\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpda9x4z0j_test.go:34:5: undefined: sort

    /tmp/tmpda9x4z0j_test.go:36:5: undefined: arr3

    /tmp/tmpda9x4z0j_test.go:36:12: undefined: reverse

    /tmp/tmpda9x4z0j_test.go:38:5: undefined: arr4

    /tmp/tmpda9x4z0j_test.go:39:20: undefined: arr4

    /tmp/tmpda9x4z0j_test.go:40:9: undefined: arr4

    /tmp/tmpda9x4z0j_test.go:40:19: undefined: name

    /tmp/tmpda9x4z0j_test.go:40:24: undefined: arr3

    /tmp/tmpda9x4z0j_test.go:43:12: undefined: arr4

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7yn09nh_test.go:25:5: undefined: sort

    /tmp/tmpz7yn09nh_test.go:26:5: undefined: reverse

    /tmp/tmpz7yn09nh_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1]\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv9v1g1nz_test.go:71:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075270
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{}, names[:len(arr)])\n\
    \    for _, v := range arr {\n        if v < 1 || v > 9 {\n            continue\n\
    \        }\n        arr[v-1] = names[v-1]\n    }\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaqujibes_test.go:28:9: no new variables on left side of :=

    /tmp/tmpaqujibes_test.go:29:5: undefined: sort

    /tmp/tmpaqujibes_test.go:30:9: no new variables on left side of :=

    /tmp/tmpaqujibes_test.go:31:9: no new variables on left side of :=

    /tmp/tmpaqujibes_test.go:31:12: cannot use append([]string{}, names[:len(arr)])
    (value of type []string) as type []int in assignment

    /tmp/tmpaqujibes_test.go:31:31: undefined: names

    /tmp/tmpaqujibes_test.go:36:20: undefined: names

    /tmp/tmpaqujibes_test.go:38:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7yn09nh_test.go:25:5: undefined: sort

    /tmp/tmpz7yn09nh_test.go:26:5: undefined: reverse

    /tmp/tmpz7yn09nh_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Int\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5vi9nw0l_test.go:84:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075273
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr),\
    \ \"\\n\")...)\n    arr := reverse(arr)\n    arr := map[int]string{1: \"One\"\
    , 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\"\
    , 8: \"Eight\", 9: \"Nine\"}\n    arr := []string{}\n    for _, v := range arr\
    \ {\n        arr = append(arr, arr[v])\n    }\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn1_1mnv9_test.go:28:9:\
    \ no new variables on left side of :=\n/tmp/tmpn1_1mnv9_test.go:29:5: undefined:\
    \ sort\n/tmp/tmpn1_1mnv9_test.go:30:9: no new variables on left side of :=\n/tmp/tmpn1_1mnv9_test.go:31:9:\
    \ no new variables on left side of :=\n/tmp/tmpn1_1mnv9_test.go:31:12: cannot\
    \ use append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...) (value of\
    \ type []string) as type []int in assignment\n/tmp/tmpn1_1mnv9_test.go:31:31:\
    \ undefined: strings\n/tmp/tmpn1_1mnv9_test.go:32:9: no new variables on left\
    \ side of :=\n/tmp/tmpn1_1mnv9_test.go:32:12: undefined: reverse\n/tmp/tmpn1_1mnv9_test.go:33:9:\
    \ no new variables on left side of :=\n/tmp/tmpn1_1mnv9_test.go:33:12: cannot\
    \ use map[int]string{\u2026} (value of type map[int]string) as type []int in assignment\n\
    /tmp/tmpn1_1mnv9_test.go:33:9: too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    arr := []string{}\n    for _, v := range arr {\n      \
    \  arr := append(arr, fmt.Sprintf(\"%s\", map[int]string{1: \"One\", 2: \"Two\"\
    , 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\"\
    , 9: \"Nine\"}[v]))\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz8udzj9o_test.go:25:5:\
    \ undefined: sort\n/tmp/tmpz8udzj9o_test.go:26:5: undefined: reverse\n/tmp/tmpz8udzj9o_test.go:27:9:\
    \ no new variables on left side of :=\n/tmp/tmpz8udzj9o_test.go:27:12: cannot\
    \ use []string{} (value of type []string) as type []int in assignment\n/tmp/tmpz8udzj9o_test.go:29:9:\
    \ arr declared but not used\n/tmp/tmpz8udzj9o_test.go:29:28: cannot use fmt.Sprintf(\"\
    %s\", map[int]string{\u2026}[v]) (value of type string) as type int in argument\
    \ to append\n/tmp/tmpz8udzj9o_test.go:31:12: cannot use arr (variable of type\
    \ []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i, v := range arr {\n        result[i]\
    \ = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qaui7vo_test.go:28:5: undefined: sort

    /tmp/tmp9qaui7vo_test.go:29:5: undefined: reverse

    /tmp/tmp9qaui7vo_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl8mosilp_test.go:84:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075266
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr2\
    \ := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ > 9 {\n            arr2[i] = arr[i]\n        } else {\n            arr2[i] =\
    \ arr[arr[i]-1]\n        }\n    }\n    arr2 = append(arr2, arr2...)\n    arr2\
    \ = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2,\
    \ arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2\
    \ = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2,\
    \ arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2\
    \ = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2,\
    \ arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2\
    \ = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2,\
    \ arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2\
    \ = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2,\
    \ arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2\
    \ = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2,\
    \ arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2\
    \ = append(arr2, arr2...)\n    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2,\
    \ arr2...)\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwrxp1nxj_test.go:80:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := reverse(arr)\n    arr := replaceDigit(arr)\n    return arr\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmj1goqqp_test.go:28:9: no new variables on left side of :=

    /tmp/tmpmj1goqqp_test.go:29:5: undefined: sort

    /tmp/tmpmj1goqqp_test.go:30:9: no new variables on left side of :=

    /tmp/tmpmj1goqqp_test.go:30:12: undefined: reverse

    /tmp/tmpmj1goqqp_test.go:31:9: no new variables on left side of :=

    /tmp/tmpmj1goqqp_test.go:31:12: undefined: replaceDigit

    /tmp/tmpmj1goqqp_test.go:32:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075273
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    if len(arr) == 0 {\n        return result\n    }\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    for i := 0; i < len(arr); i++ {\n        result := append(result,\
    \ name[arr[i]])\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0h0qikcp_test.go:29:5: undefined: sort

    /tmp/tmp0h0qikcp_test.go:30:5: undefined: reverse

    /tmp/tmp0h0qikcp_test.go:32:9: result declared but not used

    /tmp/tmp0h0qikcp_test.go:32:34: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ append([]int{}, arr...)\n    sort.Ints(arr)\n    reverse(arr)\n    result :=\
    \ make([]string, len(arr))\n    for i, v := range arr {\n        result[i] = names[v]\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_d52rifn_test.go:25:9: no new variables on left side of :=

    /tmp/tmp_d52rifn_test.go:26:5: undefined: sort

    /tmp/tmp_d52rifn_test.go:27:5: undefined: reverse

    /tmp/tmp_d52rifn_test.go:30:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ append([]int{}, arr...)\n    sort.Ints(arr)\n    reverse(arr)\n    result :=\
    \ make([]string, len(arr))\n    for i := range arr {\n        result[i] = names[arr[i]]\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo4phlulx_test.go:25:9: no new variables on left side of :=

    /tmp/tmpo4phlulx_test.go:26:5: undefined: sort

    /tmp/tmpo4phlulx_test.go:27:5: undefined: reverse

    /tmp/tmpo4phlulx_test.go:30:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i, v := range arr {\n        result[i]\
    \ = name[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm3xmt2da_test.go:28:5: undefined: sort

    /tmp/tmpm3xmt2da_test.go:29:5: undefined: reverse

    /tmp/tmpm3xmt2da_test.go:32:21: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdguv8nd3_test.go:28:5: undefined: sort

    /tmp/tmpdguv8nd3_test.go:29:5: undefined: reverse

    /tmp/tmpdguv8nd3_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n \
    \   arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n  \
    \  arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n   \
    \ arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr\
    \ := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr :=\
    \ append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr := append([]string{},\
    \ strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr),\
    \ \"\\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\
    \\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\\
    n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\"\
    )...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n\
    \    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n \
    \   arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n  \
    \  arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n   \
    \ arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr\
    \ := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr :=\
    \ append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr := append([]string{},\
    \ strings.Split(fmt.Sprint(arr), \"\\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr),\
    \ \"\\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\
    \\n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\\
    n\")...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\"\
    )...)\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n\
    \    arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n \
    \   arr := append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...)\n  \
    \  arr := append([]string{}, strings.\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpog99gsd0_test.go:54:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075271
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    if len(arr) == 0 {\n        return result\n    }\n    sort.Ints(arr)\n\
    \    sort.Ints(arr[len(arr)-1])\n    for i := 0; i < len(arr); i++ {\n       \
    \ if arr[i] < 1 || arr[i] > 9 {\n            continue\n        }\n        result\
    \ := append(result, fmt.Sprintf(\"%v\", arr[i]))\n    }\n    for i := len(arr)\
    \ - 1; i >= 0; i-- {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n\
    \        }\n        result := append(result, fmt.Sprintf(\"%v\", arr[i]))\n  \
    \  }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvm2i4h_u_test.go:29:5: undefined: sort

    /tmp/tmpvm2i4h_u_test.go:30:5: undefined: sort

    /tmp/tmpvm2i4h_u_test.go:35:9: result declared but not used

    /tmp/tmpvm2i4h_u_test.go:41:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr),\
    \ \"\\n\")...)\n    for _, v := range arr {\n        if v < 1 || v > 9 {\n   \
    \         continue\n        }\n        arr[v-1] = names[v-1]\n    }\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63kbbdxs_test.go:28:9: no new variables on left side of :=

    /tmp/tmp63kbbdxs_test.go:29:5: undefined: sort

    /tmp/tmp63kbbdxs_test.go:30:9: no new variables on left side of :=

    /tmp/tmp63kbbdxs_test.go:31:9: no new variables on left side of :=

    /tmp/tmp63kbbdxs_test.go:31:12: cannot use append([]string{}, strings.Split(fmt.Sprint(arr),
    "\n")...) (value of type []string) as type []int in assignment

    /tmp/tmp63kbbdxs_test.go:31:31: undefined: strings

    /tmp/tmp63kbbdxs_test.go:36:20: undefined: names

    /tmp/tmp63kbbdxs_test.go:38:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    if len(arr) == 0 {\n        return result\n    }\n    for i :=\
    \ 0; i < len(arr); i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n          \
    \  result = append(result, by_length_test.One[arr[i]-1])\n        } else {\n \
    \           result = append(result, by_length_test.Other[arr[i]-1])\n        }\n\
    \    }\n    for i := len(result) - 1; i >= 0; i-- {\n        result[i] = by_length_test.Reverse[result[i]]\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiyagpqiu_test.go:31:37: undefined: by_length_test

    /tmp/tmpiyagpqiu_test.go:33:37: undefined: by_length_test

    /tmp/tmpiyagpqiu_test.go:37:21: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  arr := make([]string, len(arr))\n    for i, v := range arr {\n        arr[i]\
    \ = name[v]\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi8ajn9iy_test.go:28:5: undefined: sort

    /tmp/tmpi8ajn9iy_test.go:29:5: undefined: reverse

    /tmp/tmpi8ajn9iy_test.go:30:9: no new variables on left side of :=

    /tmp/tmpi8ajn9iy_test.go:30:12: cannot use make([]string, len(arr)) (value of
    type []string) as type []int in assignment

    /tmp/tmpi8ajn9iy_test.go:32:18: undefined: name

    /tmp/tmpi8ajn9iy_test.go:34:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdguv8nd3_test.go:28:5: undefined: sort

    /tmp/tmpdguv8nd3_test.go:29:5: undefined: reverse

    /tmp/tmpdguv8nd3_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \n    arr[len(arr)\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp04yrup7__test.go:92:17: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    if len(arr) == 0 {\n        return result\n    }\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    for _, v := range arr {\n        result = append(result,\
    \ name[v])\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9phd2u98_test.go:29:5: undefined: sort

    /tmp/tmp9phd2u98_test.go:30:5: undefined: reverse

    /tmp/tmp9phd2u98_test.go:32:33: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ make([]int, len(arr))\n    for i := range arr {\n        arr[i] = i\n    }\n\
    \    sort.Sort(arr)\n    reverse(arr)\n    result := make([]string, len(arr))\n\
    \    for i := range arr {\n        result[i] = names[arr[i]]\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl9zlnf5_test.go:25:9: no new variables on left side of :=

    /tmp/tmpzl9zlnf5_test.go:29:5: undefined: sort

    /tmp/tmpzl9zlnf5_test.go:30:5: undefined: reverse

    /tmp/tmpzl9zlnf5_test.go:33:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    sort.Sort(sort.Reverse(arr))\n    result := make([]string, len(arr))\n  \
    \  for i := range arr {\n        result[i] = names[arr[i]]\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2qx__5fw_test.go:25:5: undefined: sort

    /tmp/tmp2qx__5fw_test.go:26:5: undefined: sort

    /tmp/tmp2qx__5fw_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr),\
    \ \"\\n\")...)\n    arr := reverse(arr)\n    arr := map[int]string{1: \"One\"\
    , 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\"\
    , 8: \"Eight\", 9: \"Nine\"}\n    for _, v := range arr {\n        arr[v] = arr[v][:1]\
    \ + arr[v][1:]\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkvn99fo3_test.go:28:9:\
    \ no new variables on left side of :=\n/tmp/tmpkvn99fo3_test.go:29:5: undefined:\
    \ sort\n/tmp/tmpkvn99fo3_test.go:30:9: no new variables on left side of :=\n/tmp/tmpkvn99fo3_test.go:31:9:\
    \ no new variables on left side of :=\n/tmp/tmpkvn99fo3_test.go:31:12: cannot\
    \ use append([]string{}, strings.Split(fmt.Sprint(arr), \"\\n\")...) (value of\
    \ type []string) as type []int in assignment\n/tmp/tmpkvn99fo3_test.go:31:31:\
    \ undefined: strings\n/tmp/tmpkvn99fo3_test.go:32:9: no new variables on left\
    \ side of :=\n/tmp/tmpkvn99fo3_test.go:32:12: undefined: reverse\n/tmp/tmpkvn99fo3_test.go:33:9:\
    \ no new variables on left side of :=\n/tmp/tmpkvn99fo3_test.go:33:12: cannot\
    \ use map[int]string{\u2026} (value of type map[int]string) as type []int in assignment\n\
    /tmp/tmpkvn99fo3_test.go:33:9: too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        result[i] = names[arr[i]]\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmgp4dvis_test.go:25:5: undefined: sort

    /tmp/tmpmgp4dvis_test.go:26:5: undefined: reverse

    /tmp/tmpmgp4dvis_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdguv8nd3_test.go:28:5: undefined: sort

    /tmp/tmpdguv8nd3_test.go:29:5: undefined: reverse

    /tmp/tmpdguv8nd3_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdguv8nd3_test.go:28:5: undefined: sort

    /tmp/tmpdguv8nd3_test.go:29:5: undefined: reverse

    /tmp/tmpdguv8nd3_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    sort.Ints(arr)\n    reverse(arr)\n\
    \    result := make([]string, len(arr))\n    for i, v := range arr {\n       \
    \ result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7wh8zzr_test.go:28:5: undefined: sort

    /tmp/tmpl7wh8zzr_test.go:29:5: undefined: reverse

    /tmp/tmpl7wh8zzr_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = names(arr[len(arr)-1])\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ngdh4oz_test.go:28:5: undefined: sort

    /tmp/tmp7ngdh4oz_test.go:29:5: undefined: sort

    /tmp/tmp7ngdh4oz_test.go:30:23: undefined: reverse

    /tmp/tmp7ngdh4oz_test.go:31:23: undefined: names

    /tmp/tmp7ngdh4oz_test.go:32:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)/2]\n    reverse(arr)\n    arr := append([]string{},\
    \ One, Two, Three, Four, Five, Six,\n        Seven, Eight, Nine, arr...)\n   \
    \ return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnphflwc8_test.go:28:9: no new variables on left side of :=

    /tmp/tmpnphflwc8_test.go:29:5: undefined: sort

    /tmp/tmpnphflwc8_test.go:30:9: no new variables on left side of :=

    /tmp/tmpnphflwc8_test.go:31:5: undefined: reverse

    /tmp/tmpnphflwc8_test.go:32:31: undefined: One

    /tmp/tmpnphflwc8_test.go:32:36: undefined: Two

    /tmp/tmpnphflwc8_test.go:32:41: undefined: Three

    /tmp/tmpnphflwc8_test.go:32:48: undefined: Four

    /tmp/tmpnphflwc8_test.go:32:54: undefined: Five

    /tmp/tmpnphflwc8_test.go:32:60: undefined: Six

    /tmp/tmpnphflwc8_test.go:32:60: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \    sort.Ints(arr[:len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n    arr[len(arr)-1] = reverse(arr[len(arr)-1])\n\
    \    arr[len(arr)-1] = \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzqslpva__test.go:71:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{}, strings.Split(fmt.Sprint(arr),\
    \ \"\\n\")...)\n    for i := range arr {\n        arr[i] = by_length_test.map[arr[i]]\n\
    \    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbwh1qn_s_test.go:33:33: expected selector or type assertion, found ''map''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075274
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = name[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz3xk4stc_test.go:25:5: undefined: sort

    /tmp/tmpz3xk4stc_test.go:26:5: undefined: reverse

    /tmp/tmpz3xk4stc_test.go:29:21: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    if len(arr) == 0 {\n        return result\n    }\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    for _, v := range arr {\n        result = append(result,\
    \ name[v])\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9phd2u98_test.go:29:5: undefined: sort

    /tmp/tmp9phd2u98_test.go:30:5: undefined: reverse

    /tmp/tmp9phd2u98_test.go:32:33: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := make([]int, len(arr))\n    copy(arr,\
    \ arr)\n    sort.Sort(arr)\n    reverse(arr)\n    result := make([]string, len(arr))\n\
    \    for i, v := range arr {\n        result[i] = names[v]\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_t21s53_test.go:28:9: no new variables on left side of :=

    /tmp/tmpp_t21s53_test.go:30:5: undefined: sort

    /tmp/tmpp_t21s53_test.go:31:5: undefined: reverse

    /tmp/tmpp_t21s53_test.go:34:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)/2]\n    arr.reverse()\n    arr := append([]string{},\
    \ arr...)\n    for _, v := range arr {\n        arr[v] = names[v]\n    }\n   \
    \ return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp81a__11x_test.go:28:9: no new variables on left side of :=

    /tmp/tmp81a__11x_test.go:29:5: undefined: sort

    /tmp/tmp81a__11x_test.go:30:9: no new variables on left side of :=

    /tmp/tmp81a__11x_test.go:31:9: arr.reverse undefined (type []int has no field
    or method reverse)

    /tmp/tmp81a__11x_test.go:32:9: no new variables on left side of :=

    /tmp/tmp81a__11x_test.go:32:12: cannot use append([]string{}, arr...) (value of
    type []string) as type []int in assignment

    /tmp/tmp81a__11x_test.go:32:31: cannot use arr (variable of type []int) as type
    []string in argument to append

    /tmp/tmp81a__11x_test.go:34:18: undefined: names

    /tmp/tmp81a__11x_test.go:36:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Int\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5vi9nw0l_test.go:84:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075273
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    sort.Ints(arr)\n    reverse(arr)\n\
    \    result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcikj0v_9_test.go:28:5: undefined: sort

    /tmp/tmpcikj0v_9_test.go:29:5: undefined: reverse

    /tmp/tmpcikj0v_9_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075268
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n \
    \   arr := append([]string{}, arr...)\n    for _, v := range arr {\n        if\
    \ v >= 1 && v <= 9 {\n            arr[v-1] = names[v-1]\n        }\n    }\n  \
    \  return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tl8vy2t_test.go:25:9: no new variables on left side of :=

    /tmp/tmp8tl8vy2t_test.go:26:5: undefined: sort

    /tmp/tmp8tl8vy2t_test.go:27:9: no new variables on left side of :=

    /tmp/tmp8tl8vy2t_test.go:28:9: no new variables on left side of :=

    /tmp/tmp8tl8vy2t_test.go:28:12: cannot use append([]string{}, arr...) (value of
    type []string) as type []int in assignment

    /tmp/tmp8tl8vy2t_test.go:28:31: cannot use arr (variable of type []int) as type
    []string in argument to append

    /tmp/tmp8tl8vy2t_test.go:31:24: undefined: names

    /tmp/tmp8tl8vy2t_test.go:34:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := reverse(arr)\n    arr\
    \ := replaceDigit(arr)\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpus9c7jpo_test.go:25:9: no new variables on left side of :=

    /tmp/tmpus9c7jpo_test.go:26:5: undefined: sort

    /tmp/tmpus9c7jpo_test.go:27:9: no new variables on left side of :=

    /tmp/tmpus9c7jpo_test.go:27:12: undefined: reverse

    /tmp/tmpus9c7jpo_test.go:28:9: no new variables on left side of :=

    /tmp/tmpus9c7jpo_test.go:28:12: undefined: replaceDigit

    /tmp/tmpus9c7jpo_test.go:29:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        result[i] = names[arr[i]]\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmgp4dvis_test.go:25:5: undefined: sort

    /tmp/tmpmgp4dvis_test.go:26:5: undefined: reverse

    /tmp/tmpmgp4dvis_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    arr :=\
    \ append([]int{}, arr...)\n    sort.Ints(arr)\n    reverse(arr)\n    result :=\
    \ make([]string, len(arr))\n    for i, v := range arr {\n        result[i] = name[v]\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps_d_w2c5_test.go:25:9: no new variables on left side of :=

    /tmp/tmps_d_w2c5_test.go:26:5: undefined: sort

    /tmp/tmps_d_w2c5_test.go:27:5: undefined: reverse

    /tmp/tmps_d_w2c5_test.go:30:21: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    sort.Ints(arr[len(arr)-1])\n\
    \    sort.Ints(arr[:len(arr)-1])\n    var result []string\n    for _, v := range\
    \ arr {\n        if v >= 1 && v <= 9 {\n            result := append(result, name[v-1])\n\
    \        }\n    }\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n\
    \            result := append(result, name[v-1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo4nwbf7n_test.go:28:5: undefined: sort

    /tmp/tmpo4nwbf7n_test.go:29:5: undefined: sort

    /tmp/tmpo4nwbf7n_test.go:30:5: undefined: sort

    /tmp/tmpo4nwbf7n_test.go:34:13: result declared but not used

    /tmp/tmpo4nwbf7n_test.go:34:38: undefined: name

    /tmp/tmpo4nwbf7n_test.go:39:13: result declared but not used

    /tmp/tmpo4nwbf7n_test.go:39:38: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i, v := range arr {\n        result[i]\
    \ = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qaui7vo_test.go:28:5: undefined: sort

    /tmp/tmp9qaui7vo_test.go:29:5: undefined: reverse

    /tmp/tmp9qaui7vo_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    arr := append([]int{}, arr...)\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr := append([]string{},\
    \ arr...)\n    for i := range arr {\n        if arr[i] < 1 || arr[i] > 9 {\n \
    \           continue\n        }\n        arr[i] = \"One\"\n        arr[i+1] =\
    \ \"Two\"\n        arr[i+2] = \"Three\"\n        arr[i+3] = \"Four\"\n       \
    \ arr[i+4] = \"Five\"\n        arr[i+5] = \"Six\"\n        arr[i+6] = \"Seven\"\
    \n        arr[i+7] = \"Eight\"\n        arr[i+8] = \"Nine\"\n        arr[i+9]\
    \ = \"Ten\"\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptip6ehgj_test.go:28:9: no new variables on left side of :=

    /tmp/tmptip6ehgj_test.go:29:5: undefined: sort

    /tmp/tmptip6ehgj_test.go:30:9: no new variables on left side of :=

    /tmp/tmptip6ehgj_test.go:31:9: no new variables on left side of :=

    /tmp/tmptip6ehgj_test.go:31:12: cannot use append([]string{}, arr...) (value of
    type []string) as type []int in assignment

    /tmp/tmptip6ehgj_test.go:31:31: cannot use arr (variable of type []int) as type
    []string in argument to append

    /tmp/tmptip6ehgj_test.go:36:18: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmptip6ehgj_test.go:37:20: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmptip6ehgj_test.go:38:20: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmptip6ehgj_test.go:39:20: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmptip6ehgj_test.go:39:20: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    sort.Ints(arr)\n\
    \    reverse(arr)\n    result := make([]string, len(arr))\n    for i, v := range\
    \ arr {\n        result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7yn09nh_test.go:25:5: undefined: sort

    /tmp/tmpz7yn09nh_test.go:26:5: undefined: reverse

    /tmp/tmpz7yn09nh_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    arr := make([]int, len(arr))\n    for\
    \ i := range arr {\n        arr[i] = i\n    }\n    sort.Ints(arr)\n    reverse(arr)\n\
    \    result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjaeo58ly_test.go:28:9: no new variables on left side of :=

    /tmp/tmpjaeo58ly_test.go:32:5: undefined: sort

    /tmp/tmpjaeo58ly_test.go:33:5: undefined: reverse

    /tmp/tmpjaeo58ly_test.go:36:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075275
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i, v := range arr {\n        result[i]\
    \ = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qaui7vo_test.go:28:5: undefined: sort

    /tmp/tmp9qaui7vo_test.go:29:5: undefined: reverse

    /tmp/tmp9qaui7vo_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075265
