name: HumanEval_24_largest_divisor
language: go_test.go
prompt: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int) int {\n"
tests: "func TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
  \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n \
  \    { actual: candidate(100), expected: 50 },\n     { actual: candidate(49), expected:\
  \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n      \
    \  if n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n", "    divisor := 1\n    max := n\n    for divisor\
    \ < n / 2 {\n        divisor *= 2\n        if divisor > max {\n            max\
    \ = divisor\n        }\n    }\n    return max\n}\n", "    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n", " \
    \   divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if n % divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n", "    divisor := 1\n    max := n\n    for divisor <= n / 2\
    \ {\n        if n % divisor == 0 {\n            max = divisor\n        }\n   \
    \     divisor++\n    }\n    return max\n}\n", "    divisor := 1\n    max := n\n\
    \    for divisor <= n / 2 {\n        if n%divisor == 0 {\n            max = divisor\n\
    \        }\n        divisor++\n    }\n    return max\n}\n", "    divisor := 1\n\
    \    max := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n   \
    \         max = divisor\n        }\n        divisor++\n    }\n    return max\n\
    }\n", "    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,math,language-agnostic\
    \ |>\n<code>\npublic int largestDivisor(int n) {\n    int maxDivisor = 1;\n  \
    \  int maxNumber = n;\n    for(int i = 1; i < n; i++) {\n        if(n % i == 0)\
    \ {\n            maxDivisor = i;\n            maxNumber = n;\n        }\n    }\n\
    \    return maxDivisor;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    public int largestDivisor(int n) {\n    int maxDivisor = 1;\n    int maxNumber\
    \ = n;\n    for(int i = 1; i < n; i++) {\n        if(n % i == 0) {\n         \
    \   maxDivisor = i;\n            maxNumber = n;\n        }\n    }\n    return\
    \ maxDivisor;\n}\n</code>\n<|/ a tags=algorithm,math,language-agnostic |>\n<|\
    \ a tags=algorithm,math,language-agnostic |>\n<code>\npublic int largestDivisor(int\
    \ n) {\n    int maxDivisor = 1;\n    int maxNumber = n;\n    for(int i = 1; i\
    \ < n; i++) {\n        if(n % i == 0) {\n            maxDivisor = i;\n       \
    \     maxNumber = n;\n        }\n    }\n    return maxDivisor;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic int largestDivisor(int n) {\n\
    \    int maxDivisor = 1;\n    int maxNumber = n;\n    for(int i = 1; i < n; i++)\
    \ {\n        if(n % i == 0) {\n            maxDivisor = i;\n            maxNumber\
    \ = n;\n        }\n    }\n    return maxDivisor;\n}\n</code>\n<|/ a tags=algorithm,math,language-agnostic\
    \ |>\n<| a dscore=1 |>\n<code>\npublic int largestDivisor(int n) {\n    int maxDivisor\
    \ = 1;\n    int maxNumber = n;\n    for(int i = 1; i < n; i++) {\n        if(n\
    \ % i == 0) {\n            maxDivisor = i;\n            maxNumber = n;\n     \
    \   }\n    }\n    return maxDivisor;\n}\n</code>\n<|/ a tags=algorithm,math,language-agnostic\
    \ |>\n<| a |>\n<code>\npublic int largestDivisor(int n) {\n    int maxDivisor\
    \ = 1;\n    int maxNumber = n;\n    for(int i = 1; i < n; i++) {\n        if(n\
    \ % i == 0) {\n            maxDivisor = i;\n            maxNumber = n;\n", " \
    \   divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor ==\
    \ 0 {\n            max = divisor\n        }\n        divisor++\n    }\n    return\
    \ max\n}\n", "    divisor := 1\n    max := n\n    for divisor < n {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n", "    divisor := 1\n    max := n\n    for divisor\
    \ <= n / 2 {\n        if n%divisor == 0 {\n            max = divisor\n       \
    \ }\n        divisor++\n    }\n    return max\n}\n", "    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n", "    divisor\
    \ := 1\n    max := n\n    for divisor <= n / 2 {\n        if n % divisor == 0\
    \ {\n            max = divisor\n        }\n        divisor++\n    }\n    return\
    \ max\n}\n", "    divisor := 1\n    max := n\n    for divisor < n / 2 {\n    \
    \    divisor *= 2\n        if divisor > max {\n            max = divisor\n   \
    \     }\n    }\n    return max\n}\n", "    divisor := 1\n    max := n\n\n    for\
    \ divisor <= n / 2 {\n        if n % divisor == 0 {\n            max = divisor\n\
    \        }\n        divisor++\n    }\n\n    return max\n}\n", "    divisor :=\
    \ 1\n    max := n\n    for divisor < n {\n        if n%divisor == 0 {\n      \
    \      max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n",
  "    divisor := 1\n    max := n\n    for divisor <= max / 2; divisor++ {\n     \
    \   if n%divisor == 0 {\n            return divisor\n        }\n    }\n    return\
    \ max\n}\n", "    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n   \
    \     if n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n", "    if n < 2 {\n        return n\n    }\n    max\
    \ := n\n    max /= 2\n    for i := 3; i <= max; i++ {\n        if n%i == 0 {\n\
    \            max /= i\n        }\n    }\n    return max\n}\n", "    divisor :=\
    \ 1\n    max := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if\
    \ divisor > max {\n            max = divisor\n        }\n    }\n    return max\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
