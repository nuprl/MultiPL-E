name: HumanEval_122_add_elements
language: go_test.go
prompt: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a non-empty array of integers arr and an integer k, return\n// the sum\
  \ of the elements with at most two digits from the first k elements of arr.\n//\
  \ Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum\
  \ of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
  func add_elements(arr []int, k int) int {\n"
tests: "func TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
  \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
  \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
  \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
  \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
  \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := 0\n    for i := 0; i < k; i++ {\n        result += arr[i]\n\
    \    }\n    return result\n}\n", "    var sum int = 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - arr[i-k-1]\n    }\n    return sum\n}\n", "    sum := 0\n\
    \    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n", "    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n   \
    \ }\n    return sum\n}\n", "    sum := 0\n    for i := 0; i < k; i++ {\n     \
    \   sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        sum +=\
    \ arr[i-k]\n    }\n    return sum\n}\n", "    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n", "    sum := 0\n \
    \   for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n",
  "    result := 0\n    for i := 0; i < k; i++ {\n        result += arr[i]\n    }\n\
    \    return result\n}\n", "    sum := 0\n    for i := 0; i < k; i++ {\n      \
    \  sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        sum += arr[i]\
    \ - 10\n    }\n    return sum\n}\n", "    sum := 0\n    for i := 0; i < k; i++\
    \ {\n        sum += arr[i]\n    }\n    return sum\n}\n", "    sum := 0\n    for\
    \ i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n", "    sum :=\
    \ 0\n    i := 0\n    for i < k {\n        sum += arr[i]\n        i++\n    }\n\
    \    return sum\n}\n", "    sum := 0\n    for i := 0; i < k; i++ {\n        sum\
    \ += arr[i]\n    }\n    return sum\n}\n", "    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n", "    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n", "    var sum =\
    \ 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n", "    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n   \
    \ }\n    for i := k; i < len(arr); i++ {\n        sum += arr[i-k-1]\n    }\n \
    \   return sum\n}\n", "    result := 0\n    start := 0\n    end := k\n    for\
    \ start < len(arr) {\n        if end > len(arr) {\n            end = len(arr)\n\
    \        }\n        result += arr[start]\n        start += k\n        end -= k\n\
    \    }\n    return result\n}\n", "    sum := 0\n    for i := 0; i < k; i++ {\n\
    \        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        sum\
    \ += arr[i] - 10\n    }\n    return sum\n}\n", "    sum := 0\n    for i := 0;\
    \ i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
