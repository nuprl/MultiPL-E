language: go_test.go
name: HumanEval_33_sort_third
results:
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(third(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjexdl1xd_test.go:16:7: no new variables on left side of :=

    /tmp/tmpjexdl1xd_test.go:18:5: undefined: sort

    /tmp/tmpjexdl1xd_test.go:18:15: undefined: third

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      j := i\n            for ; j < len(l) && l[j] % 3 == 0; j++ {\n        \
    \    }\n            l[i] = l[j]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjxsxaq30_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        l[i] = v\n        i++\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwobbqvu_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(thirdSort(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo19dlnde_test.go:16:7: no new variables on left side of :=

    /tmp/tmpo19dlnde_test.go:18:5: undefined: sort

    /tmp/tmpo19dlnde_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcylssph_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]/2\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq97lszfx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    i := 0\n    for _, v\
    \ := range l {\n        if i%3 != 0 {\n            result[i] = v\n           \
    \ i++\n        }\n    }\n    for _, v := range l {\n        if i%3 != 0 {\n  \
    \          result[i] = v\n            i++\n        }\n    }\n    for _, v := range\
    \ l {\n        if i%3 != 0 {\n            result[i] = v\n            i++\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp8e1h5rf6_test.go:55: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp8e1h5rf6_test.go:55: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp8e1h5rf6_test.go:55: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp8e1h5rf6_test.go:55: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073727
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      j := i\n            for ; j < len(l) && l[j] % 3 == 0; j++ {\n        \
    \    }\n            l[i] = l[j]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjxsxaq30_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    index := 0\n    for i\
    \ := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[index] =\
    \ l[i]\n            index++\n        }\n    }\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            result[index] = l[i]\n            index++\n\
    \        }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n\
    \            result[index] = l[i]\n            index++\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third({0xc0000c4620, 0x7, 0x0?})\n\t\
    /tmp/tmpcml0phgb_test.go:32 +0x134\ncommand-line-arguments_test.TestSort_Third(0x0?)\n\
    \t/tmp/tmpcml0phgb_test.go:46 +0xc9\ntesting.tRunner(0xc0001924e0, 0x529000)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073727
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]\n        }\n    }\n    for i := 0; i < len(l); i++ {\n\
    \        if l[i] > l[i+1] {\n            l := append(l, l[i+1])\n            copy(l[i+1:],\
    \ l[i:])\n            l := append(l, l[i])\n        }\n    }\n    return l\n}\n\
    \nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc4ssrskt_test.go:16:7: no new variables on left side of :=

    /tmp/tmpc4ssrskt_test.go:28:15: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\
    \ else {\n            l[i] = v\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l2m1nkd_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr64sqsxh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + 3\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jfxh5i0_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      j := i\n            for {\n                if j%3 == 0 {\n            \
    \        l[i] = l[j]\n                    break\n                }\n         \
    \       j++\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbigpnqpm_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + 3\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpot0eqhtm_test.go:16:7: no new variables on left side of :=

    /tmp/tmpot0eqhtm_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      j := i\n            for {\n                j--\n                if j%3\
    \ == 0 {\n                    break\n                }\n            }\n      \
    \      l[i], l[j] = l[j], l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl5gui5vx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(thirdSort(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo19dlnde_test.go:16:7: no new variables on left side of :=

    /tmp/tmpo19dlnde_test.go:18:5: undefined: sort

    /tmp/tmpo19dlnde_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 != 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 != 0 {\n            l[i], l[v]\
    \ = l[v], l[i]\n            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw1nacbap_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    i := 0\n    for _, j := range l {\n        if j%3 == 0 {\n            copy(l[i:],\
    \ l[i:j])\n            copy(l[i:j], l[j:])\n            i += j\n        }\n  \
    \  }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdjzp_s36_test.go:16:7: no new variables on left side of :=

    /tmp/tmpdjzp_s36_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      j := i\n            for {\n                j--\n                if j%3\
    \ == 0 {\n                    l[i] = l[j]\n                    break\n       \
    \         }\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9lx3o7z_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      j := i\n            for ; j < len(l) && l[j] % 3 == 0; j++ {\n        \
    \    }\n            l[i] = l[j]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjxsxaq30_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr64sqsxh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 != 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            j := i\n\
    \            for ; j < len(l) && l[j] == v; j++ {\n            }\n           \
    \ l[i], l[j] = l[j], l[i]\n            i++\n        }\n    }\n    return l\n}\n\
    \nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5eb5yru_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    sort.Ints(l)\n    n := len(l)\n    result := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        if i%3 == 0 {\n            result[i]\
    \ = l[i]\n        } else {\n            j := i\n            for j--; j >= 0 &&\
    \ l[j] == l[i]; j-- {\n            }\n            result[i] = l[j]\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8i2pizu3_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    i := 0\n    for _, v\
    \ := range l {\n        if v%3 == 0 {\n            result[i] = v\n           \
    \ i++\n        } else {\n            result[i] = v\n            i++\n        \
    \    result[i] = v\n            i++\n        }\n    }\n    return result\n}\n\n\
    func TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmp8ssdf46m_test.go:25\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmp8ssdf46m_test.go:39\
    \ +0x8b2\ntesting.tRunner(0xc0001924e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073727
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    result :=\
    \ make([]int, len(l))\n    for i := range l {\n        result[i] = l[i]\n    }\n\
    \    for i := range l {\n        if i%3 == 0 {\n            result[i] = l[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm6hpwou7_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr64sqsxh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := range l {\n     \
    \   l[i] = l[i]\n    }\n    sort.Sort(thirdSort(l))\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxc3jeaog_test.go:16:7: no new variables on left side of :=

    /tmp/tmpxc3jeaog_test.go:20:5: undefined: sort

    /tmp/tmpxc3jeaog_test.go:20:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%3 == 0 {\n            l[i], l[(i+1)%3] = l[(i+1)%3],\
    \ l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_vncth9_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := range l {\n     \
    \   l[i] = l[i]\n    }\n    for i := range l {\n        if i%3 == 0 {\n      \
    \      continue\n        }\n        j := i\n        for {\n            j += 1\n\
    \            if j%3 == 0 {\n                break\n            }\n           \
    \ l[i], l[j] = l[j], l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppa56tid4_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]\n        }\n    }\n    sort.Ints(l)\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpykmklq2l_test.go:16:7: no new variables on left side of :=

    /tmp/tmpykmklq2l_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\
    \ else {\n            j := i\n            for ; j < len(l) && l[j] == v; j++ {\n\
    \            }\n            l[i], l[j] = v, l[j]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cle91u2_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\
    \ else {\n            l[i] = v\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l2m1nkd_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(thirdSort(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo19dlnde_test.go:16:7: no new variables on left side of :=

    /tmp/tmpo19dlnde_test.go:18:5: undefined: sort

    /tmp/tmpo19dlnde_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    index := 0\n    for _,\
    \ value := range l {\n        if index%3 != 0 {\n            result[index] = value\n\
    \        }\n        index++\n    }\n    return result\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp55xwkus1_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=0) %!s(int=6) %!s(int=3)\
    \ %!s(int=0) %!s(int=8) %!s(int=9) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp55xwkus1_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=0) %!s(int=8) %!s(int=3)\
    \ %!s(int=0) %!s(int=6) %!s(int=9) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp55xwkus1_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=6) %!s(int=9)\
    \ %!s(int=0) %!s(int=8) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp55xwkus1_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=3) %!s(int=0) %!s(int=8) %!s(int=9) %!s(int=0) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073729
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    result :=\
    \ make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0\
    \ {\n            result[i] = l[i]\n        } else {\n            result[i] = l[i*3\
    \ + 1]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk03_ixuf_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    lenL := len(l)\n    lenL2 := lenL * 2\n    lenL3 := lenL\
    \ * 3\n    l := make([]int, lenL)\n    j := 0\n    for i := 0; i < lenL; i++ {\n\
    \        if i%3 != 0 {\n            l[i] = l[j]\n            j++\n        }\n\
    \    }\n    for i := 0; i < lenL; i++ {\n        if i%3 != 0 {\n            l[i]\
    \ = l[j]\n            j++\n        }\n    }\n    for i := 0; i < lenL; i++ {\n\
    \        if i%3 != 0 {\n            l[i] = l[j]\n            j++\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp797g_4vq_test.go:17:5: lenL2 declared but not used

    /tmp/tmp797g_4vq_test.go:18:5: lenL3 declared but not used

    /tmp/tmp797g_4vq_test.go:19:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    k := 0\n    for i := 0; i\
    \ < len(l); i++ {\n        if i%3 == 0 {\n            l[k] = l[i]\n          \
    \  k++\n        }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 ==\
    \ 0 {\n            l[k] = l[i]\n            k++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8y3xf_97_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\
    \ else {\n            l[i] = v\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l2m1nkd_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(thirdSort(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo19dlnde_test.go:16:7: no new variables on left side of :=

    /tmp/tmpo19dlnde_test.go:18:5: undefined: sort

    /tmp/tmpo19dlnde_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%3 == 0 {\n            copy(l[i:], l[i:])\n \
    \           copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n        }\n  \
    \  }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp01nwp7rv_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        l[i] = v\n        i++\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwobbqvu_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%3 == 0 {\n            l[i], l[(i+1)%3] = l[(i+1)%3],\
    \ l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_vncth9_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    lenL := len(l)\n    lenL2 := lenL * 2\n    lenL3 := lenL\
    \ * 3\n    l := make([]int, lenL)\n    j := 0\n    for i := 0; i < lenL; i++ {\n\
    \        if j == lenL3 {\n            j = 0\n        }\n        if j == lenL2\
    \ {\n            j = 0\n        }\n        if j == lenL {\n            j = i\n\
    \        }\n        l[i] = l[j]\n        j++\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp995s160q_test.go:19:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\
    \ else {\n            l[i] = v\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l2m1nkd_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      j := i\n            for {\n                j--\n                if j%3\
    \ == 0 {\n                    l[i] = l[j]\n                    break\n       \
    \         }\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9lx3o7z_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    lenL := len(l)\n    lenL2 := lenL * 2\n    lenL3 := lenL\
    \ * 3\n    l := make([]int, lenL)\n    i := 0\n    for i < lenL {\n        l[i]\
    \ = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n     \
    \   i++\n    }\n    for i < lenL3 {\n        l[i] = l[i]\n        i++\n    }\n\
    \    for i < lenL {\n        if l[i] % 3 == 0 {\n            j := i\n        \
    \    for j < lenL2 {\n                if l[j] % 3 == 0 {\n                   \
    \ l[j] = l[j]\n                    j++\n                }\n            }\n   \
    \         for j < lenL3 {\n                if l[j] % 3 == 0 {\n              \
    \      l[j] = l[j]\n                    j++\n                }\n            }\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy7qobvnd_test.go:19:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := range l {\n     \
    \   if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n            l[i]\
    \ = l[i] + 3\n        }\n    }\n    sort.Ints(l)\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppgqftn8l_test.go:16:7: no new variables on left side of :=

    /tmp/tmppgqftn8l_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + 3\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jfxh5i0_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        l[i] = v\n        i++\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwobbqvu_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + 3\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jfxh5i0_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    sort.Ints(l)\n    n := len(l)\n    m := n / 3\n    l :=\
    \ make([]int, m)\n    for i := 0; i < m; i++ {\n        l[i] = l[i+3]\n    }\n\
    \    for i := m; i < n; i++ {\n        l[i] = l[i-3]\n    }\n    return l\n}\n\
    \nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzwuiwz4j_test.go:16:5: undefined: sort

    /tmp/tmpzwuiwz4j_test.go:19:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      j := i\n            for ; j < len(l) && l[j] % 3 == 0; j++ {\n        \
    \    }\n            l[i], l[j] = l[j], l[i]\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqs3v5m7_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    lenL := len(l)\n    lenL2 := lenL * 2\n    l := make([]int,\
    \ lenL2)\n    i := 0\n    for i < lenL {\n        l[i] = l[i]\n        i++\n \
    \   }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i\
    \ < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n  \
    \      l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n\
    \        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n \
    \   }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i\
    \ < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n  \
    \      l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n\
    \        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n \
    \   }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i\
    \ < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n  \
    \      l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n\
    \        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n \
    \   }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i\
    \ < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n  \
    \      l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n\
    \        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n \
    \   }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i\
    \ < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n  \
    \      l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n\
    \        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n \
    \   }\n    for i < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i\
    \ < lenL2 {\n        l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n  \
    \      l[i] = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n\
    \        i++\n    }\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzs1xy_py_test.go:140:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := range l {\n     \
    \   l[i] = l[i]\n    }\n    sort.Sort(third(l))\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jh1_okx_test.go:16:7: no new variables on left side of :=

    /tmp/tmp1jh1_okx_test.go:20:5: undefined: sort

    /tmp/tmp1jh1_okx_test.go:20:15: undefined: third

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    sort.Ints(l)\n    result := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[i] = l[i]\n\
    \        } else {\n            j := i\n            for j--; j >= 0 && l[j] % 3\
    \ != 0; j-- {\n            }\n            result[i] = l[j]\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmv633wrk_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr64sqsxh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr64sqsxh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    k := 0\n    for i := 0; i\
    \ < len(l); i++ {\n        if i%3 == 0 {\n            l[k] = l[i]\n          \
    \  k++\n        }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 ==\
    \ 0 {\n            l[k] = l[i]\n            k++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8y3xf_97_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr64sqsxh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        l[i] = v\n        i++\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwobbqvu_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    index := 0\n    for i\
    \ := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[index] =\
    \ l[i]\n            index++\n        }\n    }\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            result[index] = l[i]\n            index++\n\
    \        }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n\
    \            result[index] = l[i]\n            index++\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third({0xc0000c4620, 0x7, 0x0?})\n\t\
    /tmp/tmpcml0phgb_test.go:32 +0x134\ncommand-line-arguments_test.TestSort_Third(0x0?)\n\
    \t/tmp/tmpcml0phgb_test.go:46 +0xc9\ntesting.tRunner(0xc0001924e0, 0x529000)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073727
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]\n        }\n    }\n    sort.Ints(l)\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpykmklq2l_test.go:16:7: no new variables on left side of :=

    /tmp/tmpykmklq2l_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    lenL := len(l)\n    lenL2 := lenL * 2\n    lenL3 := lenL\
    \ * 3\n    lenL4 := lenL * 4\n    lenL5 := lenL * 5\n    lenL6 := lenL * 6\n \
    \   lenL7 := lenL * 7\n    lenL8 := lenL * 8\n    lenL9 := lenL * 9\n    lenL10\
    \ := lenL * 10\n    lenL11 := lenL * 11\n    lenL12 := lenL * 12\n    lenL13 :=\
    \ lenL * 13\n    lenL14 := lenL * 14\n    lenL15 := lenL * 15\n    lenL16 := lenL\
    \ * 16\n    lenL17 := lenL * 17\n    lenL18 := lenL * 18\n    lenL19 := lenL *\
    \ 19\n    lenL20 := lenL * 20\n    lenL21 := lenL * 21\n    lenL22 := lenL * 22\n\
    \    lenL23 := lenL * 23\n    lenL24 := lenL * 24\n    lenL25 := lenL * 25\n \
    \   lenL26 := lenL * 26\n    lenL27 := lenL * 27\n    lenL28 := lenL * 28\n  \
    \  lenL29 := lenL * 29\n    lenL30 := lenL * 30\n    lenL31 := lenL * 31\n   \
    \ lenL32 := lenL * 32\n    lenL33 := lenL * 33\n    lenL34 := lenL * 34\n    lenL35\
    \ := lenL * 35\n    lenL36 := lenL * 36\n    lenL37 := lenL * 37\n    lenL38 :=\
    \ lenL * 38\n    lenL39 := lenL * 39\n    lenL40 := lenL * 40\n    lenL41 := lenL\
    \ * 41\n    lenL42 := lenL * 42\n    lenL43 := lenL * 43\n    lenL44 := lenL *\
    \ 44\n    lenL45 := lenL * 45\n    lenL46 := lenL * 46\n    lenL47 := lenL * 47\n\
    \    lenL48 := lenL * 48\n    lenL49 := lenL * 49\n    lenL50 := lenL * 50\n \
    \   lenL51 := \nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9m9tr8_h_test.go:67:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]\n        }\n    }\n    for i := 0; i < len(l); i++ {\n\
    \        if l[i]%3 != 0 {\n            l[i] = l[i] - l[i]\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7cei8dly_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    result := append(result,\
    \ l...)\n    sort.Ints(result)\n    return result\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyd6241hv_test.go:17:12: no new variables on left side of :=

    /tmp/tmpyd6241hv_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073729
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(thirdSort(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo19dlnde_test.go:16:7: no new variables on left side of :=

    /tmp/tmpo19dlnde_test.go:18:5: undefined: sort

    /tmp/tmpo19dlnde_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    index := 0\n    for _,\
    \ value := range l {\n        if index % 3 == 0 {\n            result[index] =\
    \ value\n        }\n        index++\n    }\n    return result\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp_s7o46ty_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp_s7o46ty_test.go:43: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp_s7o46ty_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp_s7o46ty_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073729
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\
    \ else {\n            l[i] = v\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l2m1nkd_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr64sqsxh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    k := 0\n    for i := 0; i\
    \ < len(l); i++ {\n        if i%3 == 0 {\n            l[k] = l[i]\n          \
    \  k++\n        }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 ==\
    \ 0 {\n            l[k] = l[i]\n            k++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8y3xf_97_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    index := 0\n    for i\
    \ := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[index] =\
    \ l[i]\n            index++\n        }\n    }\n    for i := 0; i < index; i++\
    \ {\n        result[i] = l[i]\n    }\n    return result\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmptpeyzrwx_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmptpeyzrwx_test.go:46: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmptpeyzrwx_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmptpeyzrwx_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073729
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(thirdSort(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo19dlnde_test.go:16:7: no new variables on left side of :=

    /tmp/tmpo19dlnde_test.go:18:5: undefined: sort

    /tmp/tmpo19dlnde_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      j := i\n            for ; j < len(l) && l[j] % 3 == 0; j++ {\n        \
    \    }\n            l[i], l[j] = l[j], l[i]\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqs3v5m7_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]\n        }\n    }\n    for i := 0; i < len(l); i++ {\n\
    \        if l[i] > l[i+1] {\n            l := append(l, l[i])\n            l :=\
    \ append(l, l[i+1])\n            l := append(l, l[i+2])\n            l := append(l,\
    \ l[i+3])\n            l := append(l, l[i+4])\n            l := append(l, l[i+5])\n\
    \            l := append(l, l[i+6])\n            l := append(l, l[i+7])\n    \
    \        l := append(l, l[i+8])\n            l := append(l, l[i+9])\n        \
    \    l := append(l, l[i+10])\n            l := append(l, l[i+11])\n          \
    \  l := append(l, l[i+12])\n            l := append(l, l[i+13])\n            l\
    \ := append(l, l[i+14])\n            l := append(l, l[i+15])\n            l :=\
    \ append(l, l[i+16])\n            l := append(l, l[i+17])\n            l := append(l,\
    \ l[i+18])\n            l := append(l, l[i+19])\n            l := append(l, l[i+20])\n\
    \            l := append(l, l[i+21])\n            l := append(l, l[i+22])\n  \
    \          l := append(l, l[i+23])\n            l := append(l, l[i+24])\n    \
    \        l := append(l, l[i+25])\n            l := append(l, l[i+26])\n      \
    \      l := append(l, l[i+27])\n            l := append(l, l[i+28])\n        \
    \    l := append(l, l[i+29])\n            l := append(l, l[i+30])\n          \
    \  l := append(l, l[i+31])\n            l := append(l, l[i+32])\n            l\
    \ := append(l, l[i+33])\n            l := append(l, l[i+34])\n            l :=\
    \ append(l, l[i+35])\n            l := append(l, l[i+36])\n            l := append(l,\
    \ l[i+37])\n            l := append(l, l[i+38])\n            l := append(l, l[i+39])\n\
    \            l := append(l, l[i+40])\n            l := append(l, l[i+41])\n  \
    \          l := append(l, l[i+42])\n            l := append(l, l[i+43])\n    \
    \        l := append(l, l[i+44])\n            l := append(l, l\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpip3sx8uh_test.go:71:29: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073729
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    i := 0\n    for _, v\
    \ := range l {\n        if i%3 != 0 {\n            result[i] = v\n           \
    \ i++\n        }\n    }\n    for _, v := range l {\n        if i%3 == 0 {\n  \
    \          result[i] = v\n            i++\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp9opy2g6w_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp9opy2g6w_test.go:49: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp9opy2g6w_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp9opy2g6w_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcylssph_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]\n        }\n    }\n    sort.Ints(l)\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpykmklq2l_test.go:16:7: no new variables on left side of :=

    /tmp/tmpykmklq2l_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    index := 0\n    for _,\
    \ value := range l {\n        if index%3 != 0 {\n            result[index] = value\n\
    \            index++\n        } else {\n            index += 1\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp109x4bps_test.go:45: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=0) %!s(int=6) %!s(int=3)\
    \ %!s(int=0) %!s(int=8) %!s(int=9) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp109x4bps_test.go:45: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=0) %!s(int=8) %!s(int=3)\
    \ %!s(int=0) %!s(int=6) %!s(int=9) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp109x4bps_test.go:45: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=6) %!s(int=9)\
    \ %!s(int=0) %!s(int=8) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp109x4bps_test.go:45: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=3) %!s(int=0) %!s(int=8) %!s(int=9) %!s(int=0) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073730
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    index := 0\n    for i\
    \ := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[index] =\
    \ l[i]\n            index++\n        }\n    }\n    for i := 0; i < index; i++\
    \ {\n        result[i] = result[i+1]\n    }\n    return result\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpdiucs59q_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpdiucs59q_test.go:46: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpdiucs59q_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpdiucs59q_test.go:46: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=4) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 != 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            j := 0\n\
    \            for _, v2 := range l {\n                if v2%3 != 0 {\n        \
    \            l[j] = v2\n                    j++\n                }\n         \
    \   }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3n8jxl5j_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\
    \ else {\n            l[i] = v\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l2m1nkd_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    lenL := len(l)\n    lenL2 := lenL * 2\n    result := make([]int,\
    \ lenL2)\n    index := 0\n    for i := 0; i < lenL; i++ {\n        index += 1\n\
    \        result[index] = l[i]\n        if index == lenL2 {\n            index\
    \ = 0\n        }\n    }\n    for i := 0; i < lenL; i++ {\n        index += 1\n\
    \        if index % 3 == 0 {\n            result[index] = l[i]\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpn5nn44mz_test.go:52: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=0) %!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=0) %!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpn5nn44mz_test.go:52: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=0) %!s(int=5) %!s(int=8)\
    \ %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2) %!s(int=0) %!s(int=8)\
    \ %!s(int=0) %!s(int=0) %!s(int=6) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpn5nn44mz_test.go:52: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=5) %!s(int=6)\
    \ %!s(int=9) %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpn5nn44mz_test.go:52: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=0) %!s(int=5)\
    \ %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(thirdSort(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo19dlnde_test.go:16:7: no new variables on left side of :=

    /tmp/tmpo19dlnde_test.go:18:5: undefined: sort

    /tmp/tmpo19dlnde_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(thirdSort(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo19dlnde_test.go:16:7: no new variables on left side of :=

    /tmp/tmpo19dlnde_test.go:18:5: undefined: sort

    /tmp/tmpo19dlnde_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := range l {\n     \
    \   l[i] = l[i]\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0\
    \ {\n            l[i], l[(i+1)%3] = l[(i+1)%3], l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpusbyx_9e_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    i := 0\n    for _, v\
    \ := range l {\n        if v%3 == 0 {\n            result[i] = v\n           \
    \ i++\n        }\n    }\n    for _, v := range l {\n        if v%3 == 0 {\n  \
    \          result[i] = v\n            i++\n        }\n    }\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            result[i] = v\n            i++\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpbc8vaqo0_test.go:32\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpbc8vaqo0_test.go:46\
    \ +0xac5\ntesting.tRunner(0xc0001a0340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    sort.Ints(l)\n    i := 0\n    j := len(l) - 1\n    k :=\
    \ 0\n    l := make([]int, len(l))\n    for i < j {\n        if l[i] % 3 == 0 &&\
    \ l[j] % 3 == 0 {\n            l[k] = l[i]\n            i++\n            j--\n\
    \            k++\n        } else if l[i] % 3 == 0 {\n            l[k] = l[i]\n\
    \            i++\n            k++\n        } else if l[j] % 3 == 0 {\n       \
    \     l[k] = l[j]\n            j--\n            k++\n        } else {\n      \
    \      l[k] = l[i]\n            i++\n            j--\n            k++\n      \
    \  }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpumwto9dq_test.go:16:5: undefined: sort

    /tmp/tmpumwto9dq_test.go:20:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := range l {\n     \
    \   l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    for\
    \ i := range l {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else\
    \ {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsh_3lox0_test.go:16:7: no new variables on left side of :=

    /tmp/tmpsh_3lox0_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      j := i\n            for ; j < len(l) && l[j] % 3 == 0; j++ {\n        \
    \    }\n            l[i], l[j] = l[j], l[i]\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqs3v5m7_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    i := 0\n    for _, v\
    \ := range l {\n        if v%3 == 0 {\n            result[i] = v\n           \
    \ i++\n        }\n    }\n    for _, v := range l {\n        if v%3 == 0 {\n  \
    \          result[i] = v\n            i++\n        }\n    }\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            result[i] = v\n            i++\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmpbc8vaqo0_test.go:32\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmpbc8vaqo0_test.go:46\
    \ +0xac5\ntesting.tRunner(0xc0001a0340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073730
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    i := 0\n    for _, v\
    \ := range l {\n        if v%3 == 0 {\n            result[i] = v\n           \
    \ i++\n        } else {\n            result[i] = v\n            i++\n        \
    \    result[i] = v\n            i++\n        }\n    }\n    return result\n}\n\n\
    func TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmp8ssdf46m_test.go:25\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmp8ssdf46m_test.go:39\
    \ +0x8b2\ntesting.tRunner(0xc0001924e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073727
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%3 == 0 {\n            copy(l[i:], l[i:])\n \
    \           copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n        }\n  \
    \  }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp01nwp7rv_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\
    \ else {\n            l[i] = v\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l2m1nkd_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        l[i] = v\n        i++\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwobbqvu_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcylssph_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    index := 0\n    for i\
    \ := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[index] =\
    \ l[i]\n            index++\n        }\n    }\n    for i := 0; i < index; i++\
    \ {\n        result[i] = result[i]\n    }\n    for i := index; i < len(l); i++\
    \ {\n        result[i] = l[i]\n    }\n    return result\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmpkh2yd8h2_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmpkh2yd8h2_test.go:49: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmpkh2yd8h2_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmpkh2yd8h2_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=4)\
    \ %!s(int=2) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    k := 0\n    for i := 0; i\
    \ < len(l); i++ {\n        if i%3 == 0 {\n            l[k] = l[i]\n          \
    \  k++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcm7vlc5d_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]/2\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq97lszfx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr64sqsxh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\
    \ else {\n            l[i] = v\n            i++\n            l[i] = v\n      \
    \      i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfm1rh4qq_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    k := 0\n    for i := 0; i\
    \ < len(l); i++ {\n        if i%3 == 0 {\n            l[k] = l[i]\n          \
    \  k++\n        }\n    }\n    for i := 0; i < k; i++ {\n        l[i], l[i+1] =\
    \ l[i+1], l[i]\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwuhyfe9b_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\
    \ else {\n            l[i] = v\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l2m1nkd_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\
    \ else {\n            l[i] = v\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l2m1nkd_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\
    \ else {\n            l[i] = v\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l2m1nkd_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    lenL := len(l)\n    lenL2 := lenL * 2\n    lenL3 := lenL\
    \ * 3\n    l := make([]int, lenL)\n    i := 0\n    for i < lenL {\n        l[i]\
    \ = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n     \
    \   i++\n    }\n    for i < lenL3 {\n        l[i] = l[i]\n        i++\n    }\n\
    \    for i < lenL {\n        if l[i] % 3 != 0 {\n            l[i] = l[i] + l[i]\
    \ / 3\n        }\n        i++\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppdcm16kh_test.go:19:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr64sqsxh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcylssph_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    lenL := len(l)\n    lenL2 := lenL * 2\n    lenL3 := lenL\
    \ * 3\n    l := make([]int, lenL)\n    i := 0\n    for i < lenL {\n        l[i]\
    \ = l[i]\n        i += 1\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n  \
    \      i += 1\n    }\n    for i < lenL3 {\n        l[i] = l[i]\n        i += 1\n\
    \    }\n    for i < lenL {\n        if l[i] % 3 != 0 {\n            j := i\n \
    \           j += 1\n            for j < lenL {\n                if l[j] % 3 ==\
    \ 0 {\n                    l[i], l[j] = l[j], l[i]\n                    j += 1\n\
    \                }\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp53wxfcva_test.go:19:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(thirdSort(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo19dlnde_test.go:16:7: no new variables on left side of :=

    /tmp/tmpo19dlnde_test.go:18:5: undefined: sort

    /tmp/tmpo19dlnde_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\
    \ else {\n            l[i] = v\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l2m1nkd_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := range l {\n     \
    \   l[i] = l[i]\n    }\n    for i := range l {\n        if i%3 == 0 {\n      \
    \      continue\n        }\n        j := i\n        for j--; j >= 0; j-- {\n \
    \           if l[j] != l[j] {\n                break\n            }\n        }\n\
    \        l[i], l[j] = l[j], l[i]\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpol920ofv_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073730
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    for i := 0; i < len(l);\
    \ i++ {\n        if i%3 == 0 {\n            result[i] = l[i]\n        } else {\n\
    \            j := i\n            for j > 0 && l[j-1]%3 == 0 {\n              \
    \  j--\n            }\n            result[i] = l[j]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp32gn3yo2_test.go:47: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=6)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp32gn3yo2_test.go:47: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=6) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp32gn3yo2_test.go:47: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=6) %!s(int=6)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp32gn3yo2_test.go:47: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=6)\
    \ %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\
    \ else {\n            l[i] = v\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l2m1nkd_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + 3\n        }\n    }\n    sort.Sort(l)\n    return l\n}\n\n\
    func TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxu3pwlgq_test.go:16:7: no new variables on left side of :=

    /tmp/tmpxu3pwlgq_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(thirdSort(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo19dlnde_test.go:16:7: no new variables on left side of :=

    /tmp/tmpo19dlnde_test.go:18:5: undefined: sort

    /tmp/tmpo19dlnde_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(thirdSort(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo19dlnde_test.go:16:7: no new variables on left side of :=

    /tmp/tmpo19dlnde_test.go:18:5: undefined: sort

    /tmp/tmpo19dlnde_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    lenL := len(l)\n    lenL3 := lenL / 3\n    lenL3 += lenL\
    \ % 3 == 0\n    lenL2 := lenL / 2\n    lenL2 += lenL % 2 == 0\n    lenL1 := lenL\
    \ - lenL3\n    lenL1 += lenL2 != 0\n    lenL1 += lenL3 != 0\n    lenL1 += lenL3\
    \ != 0\n    lenL1 += lenL2 != 0\n    lenL1 += lenL3 != 0\n    lenL1 += lenL2 !=\
    \ 0\n    lenL1 += lenL3 != 0\n    lenL1 += lenL2 != 0\n    lenL1 += lenL3 != 0\n\
    \    lenL1 += lenL2 != 0\n    lenL1 += lenL3 != 0\n    lenL1 += lenL2 != 0\n \
    \   lenL1 += lenL3 != 0\n    lenL1 += lenL2 != 0\n    lenL1 += lenL3 != 0\n  \
    \  lenL1 += lenL2 != 0\n    lenL1 += lenL3 != 0\n    lenL1 += lenL2 != 0\n   \
    \ lenL1 += lenL3 != 0\n    lenL1 += lenL2 != 0\n    lenL1 += lenL3 != 0\n    lenL1\
    \ += lenL2 != 0\n    lenL1 += lenL3 != 0\n    lenL1 += lenL2 != 0\n    lenL1 +=\
    \ lenL3 != 0\n    lenL1 += lenL2 != 0\n    lenL1 += lenL3 != 0\n    lenL1 += lenL2\
    \ != 0\n    lenL1 += lenL3 != 0\n    lenL1 += lenL2 != 0\n    lenL1 += lenL3 !=\
    \ 0\n    lenL1 += lenL2 != 0\n    lenL1 += lenL3 != 0\n    lenL1 += lenL2 != 0\n\
    \    lenL1 += lenL3 != 0\n    lenL1 += lenL2 != 0\n    lenL1 += lenL3 != 0\n \
    \   lenL1 += lenL2 != 0\n    lenL1 += lenL3 != 0\n    lenL1 += lenL2 != 0\n  \
    \  lenL1 += lenL3 != 0\n\nfunc TestSort_Third(t *testing.T) {\n  candidate :=\
    \ sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8,\
    \ 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphgee8ptf_test.go:64:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(thirdSort(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo19dlnde_test.go:16:7: no new variables on left side of :=

    /tmp/tmpo19dlnde_test.go:18:5: undefined: sort

    /tmp/tmpo19dlnde_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + 3\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jfxh5i0_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    for i := 0;\
    \ i < len(l); i++ {\n        if l[i] % 3 == 0 {\n            j := i\n        \
    \    for {\n                if j == len(l) {\n                    break\n    \
    \            }\n                if l[j] % 3 == 0 {\n                    l[j],\
    \ l[i] = l[i], l[j]\n                } else {\n                    break\n   \
    \             }\n                j++\n            }\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0m9708b9_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    lenL := len(l)\n    lenL2 := lenL * 2\n    lenL3 := lenL\
    \ * 3\n    l := make([]int, lenL)\n    i := 0\n    for i < lenL {\n        l[i]\
    \ = l[i]\n        i++\n    }\n    for i < lenL2 {\n        l[i] = l[i]\n     \
    \   i++\n    }\n    for i < lenL3 {\n        l[i] = l[i]\n        i++\n    }\n\
    \    for i < lenL {\n        if l[i] % 3 != 0 {\n            l[i] = l[i] + l[i]\n\
    \        }\n    }\n    for i < lenL2 {\n        if l[i] % 3 != 0 {\n         \
    \   l[i] = l[i] + l[i]\n        }\n    }\n    for i < lenL3 {\n        if l[i]\
    \ % 3 != 0 {\n            l[i] = l[i] + l[i]\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfb21tzbh_test.go:19:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073730
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    result := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n      \
    \  if i%3 == 0 {\n            result[i] = l[i]\n        } else {\n           \
    \ result[i] = l[i]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4axhc8xt_test.go:16:7: no new variables on left side of :=

    /tmp/tmp4axhc8xt_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073731
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + 3\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jfxh5i0_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    index := 0\n    for i\
    \ := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[index] =\
    \ l[i]\n            index++\n        }\n    }\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            result[index] = l[i]\n            index++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n\
    \  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\n    --- FAIL: TestSort_Third/test_num__0\
    \ (0.00s)\n        tmp93667hvx_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__1\
    \ (0.00s)\n        tmp93667hvx_test.go:49: expected '[%!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__2\
    \ (0.00s)\n        tmp93667hvx_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=9)\
    \ %!s(int=4) %!s(int=8) %!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)\
    \ %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Third/test_num__3\
    \ (0.00s)\n        tmp93667hvx_test.go:49: expected '[%!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1)]', got '[%!s(int=5) %!s(int=4)\
    \ %!s(int=2) %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073731
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(thirdSort(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo19dlnde_test.go:16:7: no new variables on left side of :=

    /tmp/tmpo19dlnde_test.go:18:5: undefined: sort

    /tmp/tmpo19dlnde_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      j := i\n            for {\n                j--\n                if j%3\
    \ == 0 {\n                    l[i] = l[j]\n                    break\n       \
    \         }\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9lx3o7z_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(third(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjexdl1xd_test.go:16:7: no new variables on left side of :=

    /tmp/tmpjexdl1xd_test.go:18:5: undefined: sort

    /tmp/tmpjexdl1xd_test.go:18:15: undefined: third

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        l[i] = v\n        i++\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwobbqvu_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%3 == 0 {\n            l[i], l[(i+1)%3] = l[(i+1)%3],\
    \ l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_vncth9_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    k := 0\n    for i := 0; i\
    \ < len(l); i++ {\n        if i%3 == 0 {\n            l[k] = l[i]\n          \
    \  k++\n        }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 ==\
    \ 0 {\n            l[k] = l[i]\n            k++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8y3xf_97_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    result := append(result,\
    \ l...)\n    sort.Ints(result)\n    for i := 0; i < len(result); i++ {\n     \
    \   if i%3 == 0 {\n            result[i] = result[i]\n        } else {\n     \
    \       result[i] = result[i+1]\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptbt09r3g_test.go:17:12: no new variables on left side of :=

    /tmp/tmptbt09r3g_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073731
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    lenL := len(l)\n    lenL3 := lenL/3\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += \nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgl039o42_test.go:68:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073731
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr64sqsxh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 != 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 != 0 {\n            l[i], l[v]\
    \ = l[v], l[i]\n            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw1nacbap_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    i := 0\n    for _, v\
    \ := range l {\n        if v%3 == 0 {\n            result[i] = v\n           \
    \ i++\n        } else {\n            result[i] = v\n            i++\n        \
    \    result[i] = v\n            i++\n        }\n    }\n    return result\n}\n\n\
    func TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3,\
    \ 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected:\
    \ []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8,\
    \ 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Third (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_third(...)\n\t/tmp/tmp8ssdf46m_test.go:25\n\
    command-line-arguments_test.TestSort_Third(0x0?)\n\t/tmp/tmp8ssdf46m_test.go:39\
    \ +0x8b2\ntesting.tRunner(0xc0001924e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073727
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := range l {\n     \
    \   l[i] = l[i]\n    }\n    for i := range l {\n        if i%3 == 0 {\n      \
    \      continue\n        }\n        j := i\n        for {\n            j += 1\n\
    \            if j%3 == 0 {\n                break\n            }\n           \
    \ l[i], l[j] = l[j], l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppa56tid4_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    sort.Ints(l)\n    result := make([]int, len(l))\n    for\
    \ i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[i] = l[i]\n\
    \        } else {\n            j := i\n            for {\n                if j%3\
    \ == 0 {\n                    result[i] = l[j]\n                    break\n  \
    \              } else {\n                    j++\n                }\n        \
    \    }\n        }\n    }\n    return result\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdvsggg9m_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073731
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := range l {\n     \
    \   l[i] = l[i]\n    }\n    sort.Sort(third(l))\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jh1_okx_test.go:16:7: no new variables on left side of :=

    /tmp/tmp1jh1_okx_test.go:20:5: undefined: sort

    /tmp/tmp1jh1_okx_test.go:20:15: undefined: third

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    lenL := len(l)\n    lenL2 := lenL * 2\n    lenL3 := lenL\
    \ * 3\n    lenL4 := lenL * 4\n    lenL5 := lenL * 5\n    lenL6 := lenL * 6\n \
    \   lenL7 := lenL * 7\n    lenL8 := lenL * 8\n    lenL9 := lenL * 9\n    lenL10\
    \ := lenL * 10\n    lenL11 := lenL * 11\n    lenL12 := lenL * 12\n    lenL13 :=\
    \ lenL * 13\n    lenL14 := lenL * 14\n    lenL15 := lenL * 15\n    lenL16 := lenL\
    \ * 16\n    lenL17 := lenL * 17\n    lenL18 := lenL * 18\n    lenL19 := lenL *\
    \ 19\n    lenL20 := lenL * 20\n    lenL21 := lenL * 21\n    lenL22 := lenL * 22\n\
    \    lenL23 := lenL * 23\n    lenL24 := lenL * 24\n    lenL25 := lenL * 25\n \
    \   lenL26 := lenL * 26\n    lenL27 := lenL * 27\n    lenL28 := lenL * 28\n  \
    \  lenL29 := lenL * 29\n    lenL30 := lenL * 30\n    lenL31 := lenL * 31\n   \
    \ lenL32 := lenL * 32\n    lenL33 := lenL * 33\n    lenL34 := lenL * 34\n    lenL35\
    \ := lenL * 35\n    lenL36 := lenL * 36\n    lenL37 := lenL * 37\n    lenL38 :=\
    \ lenL * 38\n    lenL39 := lenL * 39\n    lenL40 := lenL * 40\n    lenL41 := lenL\
    \ * 41\n    lenL42 := lenL * 42\n    lenL43 := lenL * 43\n    lenL44 := lenL *\
    \ 44\n    lenL45 := lenL * 45\n    lenL46 := lenL * 46\n    lenL47 := lenL * 47\n\
    \    lenL48 := lenL * 48\n    lenL49 := lenL * 49\n    lenL50 := lenL * 50\n \
    \   lenL51 := \nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9m9tr8_h_test.go:67:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      j := i\n            for ; j < len(l) && l[j] % 3 == 0; j++ {\n        \
    \    }\n            l[i], l[j] = l[j], l[i]\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqs3v5m7_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := range l {\n     \
    \   l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    i :=\
    \ 0\n    for j := range l {\n        if j%3 != 0 {\n            l[i] = l[j]\n\
    \            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvtoaqb8l_test.go:16:7: no new variables on left side of :=

    /tmp/tmpvtoaqb8l_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073731
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(thirdSort(l))\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo19dlnde_test.go:16:7: no new variables on left side of :=

    /tmp/tmpo19dlnde_test.go:18:5: undefined: sort

    /tmp/tmpo19dlnde_test.go:18:15: undefined: thirdSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]/2\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq97lszfx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\
    \ else {\n            copy(l[i:], l[i:])\n            l[i] = v\n            i\
    \ += len(l[i:])\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsbse3_3s_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073731
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := range l {\n     \
    \   l[i] = l[i]\n    }\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0\
    \ {\n            l[i] = l[i]\n        } else {\n            j := i\n         \
    \   for ; j < len(l) && l[j] % 3 == 0; j++ {\n            }\n            l[i],\
    \ l[j] = l[j], l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7nje7o14_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073731
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        l[i] = l[i]\n    }\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%3 == 0 {\n            l[i] = l[i]\n        } else {\n            j := i\n\
    \            for {\n                j--\n                if j%3 == 0 {\n     \
    \               l[i] = l[j]\n                    break\n                }\n  \
    \          }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T)\
    \ {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2,\
    \ 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}),\
    \ expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63z0igkp_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073731
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        l[i] = l[i]\n    }\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%3 == 0 {\n            l[i] = l[i]\n        }\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        }\n    }\n  \
    \  for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            l[i] = l[i]\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate\
    \ := sort_third\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 8, 3, 4, 6, 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2,\
    \ 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxwg7spug_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073731
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    for i := 0;\
    \ i < len(l); i++ {\n        if l[i] % 3 == 0 {\n            copy(l[i:], l[i:])\n\
    \            copy(l[i:], l[i+1:])\n            copy(l[i+1:], l[i:])\n        \
    \    copy(l[i:], l[i+1:])\n            copy(l[i+1:], l[i:])\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxk1s1wf0_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073731
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%3 == 0 {\n            copy(l[i:], l[i:])\n \
    \           copy(l[i:], l[i:])\n            copy(l[i:], l[i:])\n        }\n  \
    \  }\n    return l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp01nwp7rv_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073728
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    copy(l, l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    i := 0\n    for _, j := range l {\n        if j%3 == 0 {\n            l[i]\
    \ = j\n            i++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu6kmu15l_test.go:16:7: no new variables on left side of :=

    /tmp/tmpu6kmu15l_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073731
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    result :=\
    \ make([]int, len(l))\n    for i := range l {\n        result[i] = l[i]\n    }\n\
    \    for i := range l {\n        if i%3 == 0 {\n            result[i] = result[i]\n\
    \        } else {\n            result[i] = result[i] + 3\n        }\n    }\n \
    \   return result\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpibvjf9c0_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073731
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    i := 0\n    for _, v := range\
    \ l {\n        if v%3 == 0 {\n            l[i] = v\n            i++\n        }\n\
    \    }\n    for _, v := range l {\n        if v%3 == 0 {\n            l[i] = v\n\
    \            i++\n        }\n    }\n    for _, v := range l {\n        if v%3\
    \ == 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz7xr32w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if i%3 == 0 {\n            l[i] = l[i]\n        } else {\n      \
    \      l[i] = l[i] + l[i]/2\n        }\n    }\n    return l\n}\n\nfunc TestSort_Third(t\
    \ *testing.T) {\n  candidate := sort_third\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected: []int{2, 6, 3, 4, 8, 9, 5}\
    \ },\n     { actual: candidate([]int{5, 8, 3, 4, 6, 9, 2}), expected: []int{2,\
    \ 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5, 6, 9, 4, 8, 3, 2}),\
    \ expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual: candidate([]int{5, 6,\
    \ 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9, 5, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq97lszfx_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073726
- exit_code: 2
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    sort.Ints(l)\n    result := make([]int, len(l))\n    index\
    \ := 0\n    for _, value := range l {\n        if index % 3 == 0 {\n         \
    \   result[index] = value\n        }\n        index++\n    }\n    return result\n\
    }\n\nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg2wjzz0__test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073731
- exit_code: 1
  program: "package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n// to the values of the corresponding\
    \ indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l\
    \ []int) []int {\n    lenL := len(l)\n    lenL3 := lenL/3\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3 == 0\n    lenL3 += lenL%3\
    \ == 0\n    lenL3 += \nfunc TestSort_Third(t *testing.T) {\n  candidate := sort_third\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 6, 3, 4, 8, 9, 2}), expected:\
    \ []int{2, 6, 3, 4, 8, 9, 5} },\n     { actual: candidate([]int{5, 8, 3, 4, 6,\
    \ 9, 2}), expected: []int{2, 8, 3, 4, 6, 9, 5} },\n     { actual: candidate([]int{5,\
    \ 6, 9, 4, 8, 3, 2}), expected: []int{2, 6, 9, 4, 8, 3, 5} },\n     { actual:\
    \ candidate([]int{5, 6, 3, 4, 8, 9, 2, 1}), expected: []int{2, 6, 3, 4, 8, 9,\
    \ 5, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgl039o42_test.go:68:6: expected ''('', found TestSort_Third

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073731
