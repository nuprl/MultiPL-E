language: go_test.go
name: HumanEval_88_sort_array
results:
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm_d4vgt9_test.go:25:9: undefined: sort

    /tmp/tmpm_d4vgt9_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy2gb1bih_test.go:24:9: undefined: sort

    /tmp/tmpy2gb1bih_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy2gb1bih_test.go:24:9: undefined: sort

    /tmp/tmpy2gb1bih_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu23ig_x__test.go:274:6: expected ''('', found TestSort_Array

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075211
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    sum := 0\n    for\
    \ _, v := range array {\n        sum += v\n    }\n    if sum%2 == 1 {\n      \
    \  sort.Sort(sort.Reverse(array))\n    } else {\n        sort.Sort(array)\n  \
    \  }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7qigdyz9_test.go:20:5: undefined: sort

    /tmp/tmp7qigdyz9_test.go:26:9: undefined: sort

    /tmp/tmp7qigdyz9_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wnfmgyl_test.go:25:9: undefined: sort

    /tmp/tmp4wnfmgyl_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    sort.Ints(array)\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf27of8u4_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_m4u2qi_test.go:24:9: undefined: sort

    /tmp/tmp8_m4u2qi_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 1 {\n        for i := range\
    \ result {\n            result[i] = array[len(result)-i-1]\n        }\n    } else\
    \ {\n        for i := range result {\n            result[i] = array[len(result)+i-1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpiys5kyn__test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpiys5kyn__test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpiys5kyn__test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpiys5kyn__test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wnfmgyl_test.go:25:9: undefined: sort

    /tmp/tmp4wnfmgyl_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Ints(array)\n    } else {\n        sort.Ints(array[:len(array)-1])\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfrfgr3rx_test.go:24:9: undefined: sort

    /tmp/tmpfrfgr3rx_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    result := append(result, array...)\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcigr7t79_test.go:20:12: no new variables on left side of :=

    /tmp/tmpcigr7t79_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqjmgtq__test.go:25:9: undefined: sort

    /tmp/tmpfqjmgtq__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 != 0 {\n        for i := range\
    \ result {\n            result[i] = array[len(array)-1-i]\n        }\n    } else\
    \ {\n        for i := range result {\n            result[i] = array[len(array)-1-i-1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpltd8nema_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpltd8nema_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpltd8nema_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpltd8nema_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Ints(array)\n    } else {\n        sort.Ints(array[:len(array)-1])\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfrfgr3rx_test.go:24:9: undefined: sort

    /tmp/tmpfrfgr3rx_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 1 {\n        for _, v := range\
    \ array {\n            result[len(result)-1] = v\n        }\n    } else {\n  \
    \      for _, v := range array {\n            result[len(result)-1] = v\n    \
    \    }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = array[i]\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpz74uj_q5_test.go:58: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpz74uj_q5_test.go:58: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpz74uj_q5_test.go:58: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpz74uj_q5_test.go:58: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpz74uj_q5_test.go:58: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy2gb1bih_test.go:24:9: undefined: sort

    /tmp/tmpy2gb1bih_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, value := range array {\n        sum += value\n \
    \   }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsys5sheu_test.go:24:9: undefined: sort

    /tmp/tmpsys5sheu_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wnfmgyl_test.go:25:9: undefined: sort

    /tmp/tmp4wnfmgyl_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wnfmgyl_test.go:25:9: undefined: sort

    /tmp/tmp4wnfmgyl_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy2gb1bih_test.go:24:9: undefined: sort

    /tmp/tmpy2gb1bih_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqjmgtq__test.go:25:9: undefined: sort

    /tmp/tmpfqjmgtq__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Sort(sort.Reverse(array))\n    } else {\n   \
    \     sort.Sort(sort.IntSlice(array))\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmeczk2dm_test.go:24:9: undefined: sort

    /tmp/tmpmeczk2dm_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    sort.Ints(array)\n    sum := 0\n    for\
    \ _, v := range array {\n        sum += v\n    }\n    if sum%2 == 1 {\n      \
    \  sort.Sort(sort.Reverse(array))\n    } else {\n        sort.Sort(array)\n  \
    \  }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqgt4u17_test.go:20:5: undefined: sort

    /tmp/tmpeqgt4u17_test.go:26:9: undefined: sort

    /tmp/tmpeqgt4u17_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    sum := 0\n    for _, v := range array {\n    \
    \    sum += v\n    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i, j\
    \ int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4_zf7jr7_test.go:25:9: undefined: sort

    /tmp/tmp4_zf7jr7_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1vqa2jnj_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqjmgtq__test.go:25:9: undefined: sort

    /tmp/tmpfqjmgtq__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd5xuq0r8_test.go:25:9: undefined: sort

    /tmp/tmpd5xuq0r8_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1vqa2jnj_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    var sum int\n    for _, v := range array {\n  \
    \      sum += v\n    }\n    if sum%2 == 0 {\n        for _, v := range array {\n\
    \            result = append(result, v)\n        }\n    } else {\n        for\
    \ _, v := range array {\n            result = append(result, v)\n        }\n \
    \       for i := len(array) - 1; i >= 0; i-- {\n            sum += array[i]\n\
    \            if sum%2 == 0 {\n                result = append(result, array[i])\n\
    \            } else {\n                result = append(result, array[i+1])\n \
    \           }\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000c45e8, 0x7, 0x37930?})\n\
    \t/tmp/tmp2nq5lyi1_test.go:37 +0x1ee\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmp2nq5lyi1_test.go:54 +0x1c8\ntesting.tRunner(0xc0001924e0, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    var sum int\n    for _, v := range array {\n  \
    \      sum += v\n    }\n    if sum%2 == 1 {\n        for _, v := range array {\n\
    \            result = append(result, v)\n        }\n    } else {\n        for\
    \ _, v := range array {\n            result = append(result, v)\n        }\n \
    \       for i := len(array) - 1; i > 0; i-- {\n            sum += array[i]\n \
    \           if sum%2 == 1 {\n                for _, v := range array[:i] {\n \
    \                   result = append(result, v)\n                }\n          \
    \      break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp6h_vi4pz_test.go:64: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp6h_vi4pz_test.go:64: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6h_vi4pz_test.go:64: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp6h_vi4pz_test.go:64: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp6h_vi4pz_test.go:64: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, value := range array {\n        sum += value\n \
    \   }\n    if sum%2 == 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1wy5vuzz_test.go:24:9: undefined: sort

    /tmp/tmp1wy5vuzz_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    sort.Ints(array)\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf27of8u4_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu23ig_x__test.go:274:6: expected ''('', found TestSort_Array

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075211
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy2gb1bih_test.go:24:9: undefined: sort

    /tmp/tmpy2gb1bih_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 != 0 {\n        for i := range\
    \ result {\n            result[i] = array[len(array)-1-i]\n        }\n    } else\
    \ {\n        for i := range result {\n            result[i] = array[len(array)-1-len(array)-1-i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpkuu_y2_x_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpkuu_y2_x_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpkuu_y2_x_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpkuu_y2_x_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqjmgtq__test.go:25:9: undefined: sort

    /tmp/tmpfqjmgtq__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wnfmgyl_test.go:25:9: undefined: sort

    /tmp/tmp4wnfmgyl_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvz7_f50j_test.go:25:9: undefined: sort

    /tmp/tmpvz7_f50j_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wnfmgyl_test.go:25:9: undefined: sort

    /tmp/tmp4wnfmgyl_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    sort.Ints(array)\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf27of8u4_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    sum := 0\n    for _, v := range array {\n     \
    \   sum += v\n    }\n    if sum%2 == 1 {\n        result = append(result, array...)\n\
    \    } else {\n        result = append(result, array[len(array)-1]...)\n    }\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4zjkt84_test.go:27:33: cannot use array[len(array) - 1] (variable of
    type int) as type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 1 {\n        for _, v := range\
    \ array {\n            result[len(result)-1] = v\n        }\n    } else {\n  \
    \      for _, v := range array {\n            result[len(result)-1] = v\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp3sqhg1pi_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp3sqhg1pi_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp3sqhg1pi_test.go:55: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp3sqhg1pi_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp3sqhg1pi_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, value := range array {\n        sum += value\n \
    \   }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsys5sheu_test.go:24:9: undefined: sort

    /tmp/tmpsys5sheu_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqjmgtq__test.go:25:9: undefined: sort

    /tmp/tmpfqjmgtq__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, value :=\
    \ range array {\n        sum += value\n    }\n    if sum%2 == 0 {\n        for\
    \ i := 0; i < len(array); i++ {\n            j := i\n            for ; j < len(array)\
    \ && sum > 0; j++ {\n                if array[j-1] > array[j] {\n            \
    \        result[i] = array[j-1]\n                    sum -= array[j-1]\n     \
    \           } else {\n                    result[i] = array[j]\n             \
    \       sum -= array[j]\n                }\n            }\n            result[i]\
    \ = array[j]\n            sum -= array[j]\n        }\n    } else {\n        for\
    \ i := 0; i < len(array); i++ {\n            j := i\n            for ; j < len(array)\
    \ && sum > 0; j++ {\n                if array[j-1] < array[j] {\n            \
    \        result[i] = array[j-1]\n                    sum -= array[j-1]\n     \
    \           } else {\n                    result[i] = array[j]\n             \
    \       sum -= array[j]\n                }\n            }\n            result[i]\
    \ = array[j]\n            sum -= array[j]\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000c4550, 0x1, 0x37930?})\n\
    \t/tmp/tmpg_1iolfo_test.go:43 +0xf8\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpg_1iolfo_test.go:66 +0x9b\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    sort.Ints(array)\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf27of8u4_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hf47gb8_test.go:24:9: undefined: sort

    /tmp/tmp8hf47gb8_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    var sum int\n    for _, v := range array {\n  \
    \      sum += v\n    }\n    if sum%2 != 0 {\n        result = append(result, array...)\n\
    \    } else {\n        result = append(result, array...)\n        result = append(result,\
    \ array...)\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpxels8_uj_test.go:52: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpxels8_uj_test.go:52: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpxels8_uj_test.go:52: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpxels8_uj_test.go:52: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpxels8_uj_test.go:52: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpifndtu81_test.go:24:9: undefined: sort

    /tmp/tmpifndtu81_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    var sum int\n    for _, value := range array {\n\
    \        sum += value\n    }\n    if sum%2 != 0 {\n        result = append(result,\
    \ array...)\n    } else {\n        result = append(result, array...)\n       \
    \ result = append(result, array...)\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmptvcapeth_test.go:52: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmptvcapeth_test.go:52: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmptvcapeth_test.go:52: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmptvcapeth_test.go:52: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmptvcapeth_test.go:52: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, value :=\
    \ range array {\n        sum += value\n    }\n    if sum%2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    for index,\
    \ value := range array {\n        result[index] = value\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpipkbs7h4_test.go:25:9: undefined: sort

    /tmp/tmpipkbs7h4_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 0 {\n        sort.Ints(array)\n    }\
    \ else {\n        sort.Ints(array[:len(array)-1])\n    }\n    return array\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsh2lpyhu_test.go:25:9: undefined: sort

    /tmp/tmpsh2lpyhu_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_m4u2qi_test.go:24:9: undefined: sort

    /tmp/tmp8_m4u2qi_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, value :=\
    \ range array {\n        sum += value\n    }\n    if sum%2 == 1 {\n        for\
    \ _, value := range array {\n            result[sum-value : sum] = value\n   \
    \     }\n    } else {\n        for _, value := range array {\n            result[sum-value\
    \ : sum] = result[sum-value : sum][::-1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjl4671wk_test.go:30:63: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sort.Ints(array)\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbcutjdy3_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_m4u2qi_test.go:24:9: undefined: sort

    /tmp/tmp8_m4u2qi_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_m4u2qi_test.go:24:9: undefined: sort

    /tmp/tmp8_m4u2qi_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqjmgtq__test.go:25:9: undefined: sort

    /tmp/tmpfqjmgtq__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy2gb1bih_test.go:24:9: undefined: sort

    /tmp/tmpy2gb1bih_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqjmgtq__test.go:25:9: undefined: sort

    /tmp/tmpfqjmgtq__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqjmgtq__test.go:25:9: undefined: sort

    /tmp/tmpfqjmgtq__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    result := append(result, array...)\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcigr7t79_test.go:20:12: no new variables on left side of :=

    /tmp/tmpcigr7t79_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ruzj6jr_test.go:25:9: undefined: sort

    /tmp/tmp_ruzj6jr_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sort.Ints(array)\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbcutjdy3_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    for _, v := range array {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpilo8zdrb_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqjmgtq__test.go:25:9: undefined: sort

    /tmp/tmpfqjmgtq__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy2gb1bih_test.go:24:9: undefined: sort

    /tmp/tmpy2gb1bih_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqjmgtq__test.go:25:9: undefined: sort

    /tmp/tmpfqjmgtq__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 != 0 {\n        for i := range\
    \ result {\n            result[i] = array[len(array)-1-i]\n        }\n    } else\
    \ {\n        for i := range result {\n            result[i] = array[len(array)-1-(i+1)]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpdyga9wol_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpdyga9wol_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpdyga9wol_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpdyga9wol_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    for _, v := range array {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpilo8zdrb_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    result := append(result, array...)\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcigr7t79_test.go:20:12: no new variables on left side of :=

    /tmp/tmpcigr7t79_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_m4u2qi_test.go:24:9: undefined: sort

    /tmp/tmp8_m4u2qi_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqjmgtq__test.go:25:9: undefined: sort

    /tmp/tmpfqjmgtq__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    sort.Ints(array)\n    sum := 0\n    for\
    \ _, v := range array {\n        sum += v\n    }\n    if sum%2 == 1 {\n      \
    \  sort.Sort(sort.Reverse(array))\n    } else {\n        sort.Sort(array)\n  \
    \  }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqgt4u17_test.go:20:5: undefined: sort

    /tmp/tmpeqgt4u17_test.go:26:9: undefined: sort

    /tmp/tmpeqgt4u17_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1vqa2jnj_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, value := range array {\n        sum += value\n \
    \   }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsys5sheu_test.go:24:9: undefined: sort

    /tmp/tmpsys5sheu_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1vqa2jnj_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 != 0 {\n        for i := 0; i\
    \ < len(array); i++ {\n            result [i] = array[i]\n        }\n        sort.Sort(result)\n\
    \    } else {\n        for i := 0; i < len(array); i++ {\n            result [i]\
    \ = array[len(array)-i-1]\n        }\n        sort.Sort(result)\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsd6h925__test.go:28:9: undefined: sort

    /tmp/tmpsd6h925__test.go:33:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpifndtu81_test.go:24:9: undefined: sort

    /tmp/tmpifndtu81_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 != 0 {\n        for i := 0; i\
    \ < len(array); i++ {\n            result[i] = array[len(array)-1-i]\n       \
    \ }\n    } else {\n        for i := 0; i < len(array); i++ {\n            result[i]\
    \ = array[len(array)-1-i-1]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpbp72nkls_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpbp72nkls_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpbp72nkls_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpbp72nkls_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wnfmgyl_test.go:25:9: undefined: sort

    /tmp/tmp4wnfmgyl_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_m4u2qi_test.go:24:9: undefined: sort

    /tmp/tmp8_m4u2qi_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 0 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ffvobf5_test.go:25:9: undefined: sort

    /tmp/tmp_ffvobf5_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvz7_f50j_test.go:25:9: undefined: sort

    /tmp/tmpvz7_f50j_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hf47gb8_test.go:24:9: undefined: sort

    /tmp/tmp8hf47gb8_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    var sum int\n    for _, v := range array {\n  \
    \      sum += v\n    }\n    if sum%2 == 1 {\n        result = append(result, array...)\n\
    \    } else {\n        result = append(result, array...)\n        result = append(result,\
    \ array...)\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpddac42mq_test.go:52: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpddac42mq_test.go:52: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpddac42mq_test.go:52: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpddac42mq_test.go:52: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpddac42mq_test.go:52: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075215
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wnfmgyl_test.go:25:9: undefined: sort

    /tmp/tmp4wnfmgyl_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wnfmgyl_test.go:25:9: undefined: sort

    /tmp/tmp4wnfmgyl_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy2gb1bih_test.go:24:9: undefined: sort

    /tmp/tmpy2gb1bih_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy2gb1bih_test.go:24:9: undefined: sort

    /tmp/tmpy2gb1bih_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy2gb1bih_test.go:24:9: undefined: sort

    /tmp/tmpy2gb1bih_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 1 {\n        for i := range\
    \ result {\n            result[i] = array[len(array)-1-i]\n        }\n    } else\
    \ {\n        for i := range result {\n            result[i] = array[len(array)-1-(i+1)]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpp0uq4cq2_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpp0uq4cq2_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpp0uq4cq2_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpp0uq4cq2_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 0 {\n        for i := range\
    \ result {\n            result[i] = array[len(array)-1-i]\n        }\n    } else\
    \ {\n        for i := range result {\n            result[i] = array[len(array)-1-i-1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpa3gk_7f9_test.go:30\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpa3gk_7f9_test.go:44\
    \ +0xa52\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075215
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, value := range array {\n        sum += value\n \
    \   }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i, j int) bool {\n\
    \            return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps56pnszu_test.go:24:9: undefined: sort

    /tmp/tmps56pnszu_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy2gb1bih_test.go:24:9: undefined: sort

    /tmp/tmpy2gb1bih_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    sum := 0\n    for _, v := range array {\n    \
    \    sum += v\n    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i, j\
    \ int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4_zf7jr7_test.go:25:9: undefined: sort

    /tmp/tmp4_zf7jr7_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, value :=\
    \ range array {\n        sum += value\n    }\n    if sum%2 != 0 {\n        for\
    \ _, value := range array {\n            temp = value\n            value := array[len(array)-1]\n\
    \            array[len(array)-1] = temp\n            temp = value\n          \
    \  value := array[0]\n            array[0] = temp\n        }\n    } else {\n \
    \       for _, value := range array {\n            temp = value\n            value\
    \ := array[0]\n            array[0] = temp\n        }\n    }\n    for _, value\
    \ := range array {\n        result[len(result)-1] = value\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22efu0v2_test.go:26:13: undefined: temp

    /tmp/tmp22efu0v2_test.go:28:35: undefined: temp

    /tmp/tmp22efu0v2_test.go:29:13: undefined: temp

    /tmp/tmp22efu0v2_test.go:30:19: no new variables on left side of :=

    /tmp/tmp22efu0v2_test.go:31:24: undefined: temp

    /tmp/tmp22efu0v2_test.go:35:13: undefined: temp

    /tmp/tmp22efu0v2_test.go:36:13: value declared but not used

    /tmp/tmp22efu0v2_test.go:37:24: undefined: temp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, value :=\
    \ range array {\n        sum += value\n    }\n    if sum%2 != 0 {\n        for\
    \ i := range result {\n            result[i] = array[len(array)-1-i]\n       \
    \ }\n    } else {\n        for i := range result {\n            result[i] = array[len(array)-1-(i+1)]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpscjm9ruv_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpscjm9ruv_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpscjm9ruv_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpscjm9ruv_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    result := append(result, array...)\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcigr7t79_test.go:20:12: no new variables on left side of :=

    /tmp/tmpcigr7t79_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hf47gb8_test.go:24:9: undefined: sort

    /tmp/tmp8hf47gb8_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    sum := 0\n    for\
    \ _, v := range array {\n        sum += v\n    }\n    if sum%2 != 0 {\n      \
    \  sort.Sort(sort.Reverse(array))\n    } else {\n        sort.Sort(array)\n  \
    \  }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpak52vmlk_test.go:20:5: undefined: sort

    /tmp/tmpak52vmlk_test.go:26:9: undefined: sort

    /tmp/tmpak52vmlk_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 1 {\n        for i := 0; i\
    \ < len(array); i++ {\n            j := i\n            for ; j < len(array) &&\
    \ sum > 0; j++ {\n                sum += array[j]\n            }\n           \
    \ result[i] = array[j]\n        }\n    } else {\n        for i := 0; i < len(array);\
    \ i++ {\n            j := len(array) - i - 1\n            for ; j >=0; j-- {\n\
    \                sum += array[j]\n            }\n            result[i] = array[j]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000c4550, 0x1, 0x37930?})\n\
    \t/tmp/tmpj_szfph3_test.go:30 +0xf7\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpj_szfph3_test.go:52 +0x9b\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1vqa2jnj_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 0 {\n        for i := range\
    \ result {\n            result[i] = array[len(array)-1-i]\n        }\n    } else\
    \ {\n        for i := range result {\n            result[i] = array[len(array)-1-i-1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpa3gk_7f9_test.go:30\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpa3gk_7f9_test.go:44\
    \ +0xa52\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 != 0 {\n        for i := range\
    \ result {\n            result[i] = array[len(array)-1-i]\n        }\n    } else\
    \ {\n        for i := range result {\n            result[i] = array[len(array)-1-i-1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpltd8nema_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpltd8nema_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpltd8nema_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpltd8nema_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] > array[j]\n        })\n\
    \    } else {\n        sort.Slice(array, func(i, j int) bool {\n            return\
    \ array[i] < array[j]\n        })\n    }\n    for _, v := range array {\n    \
    \    result[len(result)-1] = v\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6xv22b6d_test.go:25:9: undefined: sort

    /tmp/tmp6xv22b6d_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_m4u2qi_test.go:24:9: undefined: sort

    /tmp/tmp8_m4u2qi_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    var sum int\n    for _, v := range array {\n  \
    \      sum += v\n    }\n    if sum%2 == 1 {\n        for _, v := range array {\n\
    \            result = append(result, v)\n        }\n    } else {\n        for\
    \ _, v := range array {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpcwhbhply_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpcwhbhply_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpcwhbhply_test.go:55: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpcwhbhply_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpcwhbhply_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 1 {\n        for i := range\
    \ result {\n            result[i] = array[len(array)-1-i]\n        }\n    } else\
    \ {\n        for i := range result {\n            result[i] = array[len(array)-1-i-1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpsq7y4__h_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpsq7y4__h_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpsq7y4__h_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpsq7y4__h_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    sort.Ints(array)\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf27of8u4_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1vqa2jnj_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    result := append(result, array...)\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcigr7t79_test.go:20:12: no new variables on left side of :=

    /tmp/tmpcigr7t79_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wnfmgyl_test.go:25:9: undefined: sort

    /tmp/tmp4wnfmgyl_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_m4u2qi_test.go:24:9: undefined: sort

    /tmp/tmp8_m4u2qi_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, value := range array\
    \ {\n        sum += value\n    }\n    if sum%2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwa8d9u_e_test.go:25:9: undefined: sort

    /tmp/tmpwa8d9u_e_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqjmgtq__test.go:25:9: undefined: sort

    /tmp/tmpfqjmgtq__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 0 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ffvobf5_test.go:25:9: undefined: sort

    /tmp/tmp_ffvobf5_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    var sum int\n    for _, value := range array {\n\
    \        sum += value\n    }\n    if sum%2 == 1 {\n        for _, value := range\
    \ array {\n            result = append(result, value)\n        }\n    } else {\n\
    \        for _, value := range array {\n            result = append(result, value)\n\
    \        }\n        for i := len(array) - 1; i > 0; i-- {\n            value :=\
    \ array[i-1]\n            index := i\n            for j := 0; j < i; j++ {\n \
    \               if array[j] > value {\n                    value = array[j]\n\
    \                    index = j\n                }\n            }\n           \
    \ array[index] = value\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_fd33eva_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_fd33eva_test.go:66: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_fd33eva_test.go:66: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_fd33eva_test.go:66: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_fd33eva_test.go:66: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    sum := 0\n    for _, v := range array {\n     \
    \   sum += v\n    }\n    if sum%2 != 0 {\n        result = append(result, array...)\n\
    \    } else {\n        result = append(result, array...)\n        result = append(result,\
    \ array...)\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpr67xp1mh_test.go:52: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpr67xp1mh_test.go:52: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpr67xp1mh_test.go:52: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpr67xp1mh_test.go:52: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpr67xp1mh_test.go:52: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, value :=\
    \ range array {\n        sum += value\n    }\n    if sum%2 != 0 {\n        for\
    \ _, value := range array {\n            result[len(result)-1] = value\n     \
    \   }\n    } else {\n        for _, value := range array {\n            result[len(result)-1]\
    \ = value\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i]\
    \ = array[i]\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpqnu5k3e1_test.go:58: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpqnu5k3e1_test.go:58: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpqnu5k3e1_test.go:58: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpqnu5k3e1_test.go:58: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpqnu5k3e1_test.go:58: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqjmgtq__test.go:25:9: undefined: sort

    /tmp/tmpfqjmgtq__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, value :=\
    \ range array {\n        sum += value\n    }\n    if sum%2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    for index,\
    \ value := range array {\n        result[index] = value\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpipkbs7h4_test.go:25:9: undefined: sort

    /tmp/tmpipkbs7h4_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm_d4vgt9_test.go:25:9: undefined: sort

    /tmp/tmpm_d4vgt9_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, value :=\
    \ range array {\n        sum += value\n    }\n    if sum%2 != 0 {\n        for\
    \ i := range result {\n            result[i] = array[len(array)-1-i]\n       \
    \ }\n    } else {\n        for i := range result {\n            result[i] = array[len(array)-1-(i+1)]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpscjm9ruv_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpscjm9ruv_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpscjm9ruv_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpscjm9ruv_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu23ig_x__test.go:274:6: expected ''('', found TestSort_Array

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075211
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    sum := 0\n    for _, v := range array {\n     \
    \   sum += v\n    }\n    if sum%2 == 0 {\n        for _, v := range array {\n\
    \            result = append(result, v)\n        }\n    } else {\n        for\
    \ _, v := range array {\n            result = append(result, v)\n        }\n \
    \       for i := len(array)-1; i >= 0; i-- {\n            result := append(result,\
    \ array[i])\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc5v4ni3t_test.go:33:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy2gb1bih_test.go:24:9: undefined: sort

    /tmp/tmpy2gb1bih_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 0 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphqcvpeaa_test.go:24:9: undefined: sort

    /tmp/tmphqcvpeaa_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    var sum int\n    for _, v := range array {\n  \
    \      sum += v\n    }\n    if sum%2 == 1 {\n        for _, v := range array {\n\
    \            result = append(result, v)\n        }\n    } else {\n        for\
    \ _, v := range array {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpcwhbhply_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpcwhbhply_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpcwhbhply_test.go:55: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpcwhbhply_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpcwhbhply_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqjmgtq__test.go:25:9: undefined: sort

    /tmp/tmpfqjmgtq__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, value :=\
    \ range array {\n        sum += value\n    }\n    if sum%2 == 1 {\n        for\
    \ _, value := range array {\n            result[len(result)-1] = value\n     \
    \   }\n    } else {\n        for _, value := range array {\n            result[len(result)-1]\
    \ = value\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpolnu3p9b_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpolnu3p9b_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpolnu3p9b_test.go:55: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpolnu3p9b_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpolnu3p9b_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075217
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvz7_f50j_test.go:25:9: undefined: sort

    /tmp/tmpvz7_f50j_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 1 {\n        for _, v := range\
    \ array {\n            result[len(result)-1] = v\n        }\n    } else {\n  \
    \      for _, v := range array {\n            result[len(result)-1] = v\n    \
    \    }\n    }\n    for i := 0; i < len(result); i++ {\n        for j := 0; j <\
    \ len(result) - i - 1; j++ {\n            if result[j] > result[j+1] {\n     \
    \           tmp := result[j]\n                result[j] = result[j+1]\n      \
    \          result[j+1] = tmp\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpd97fulye_test.go:64: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpd97fulye_test.go:64: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpd97fulye_test.go:64: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpd97fulye_test.go:64: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpd97fulye_test.go:64: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075217
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, value :=\
    \ range array {\n        sum += value\n    }\n    if sum%2 != 0 {\n        for\
    \ _, value := range array {\n            result[sum-int(value)] = value\n    \
    \    }\n    } else {\n        for _, value := range array {\n            result[sum-int(value)]\
    \ = -value\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [13] with length 6 [recovered]\n\tpanic: runtime error: index out of range [13]\
    \ with length 6\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpb3b374y7_test.go:26\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpb3b374y7_test.go:45\
    \ +0xa6b\ntesting.tRunner(0xc00019b040, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075217
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, value :=\
    \ range array {\n        sum += value\n    }\n    if sum%2 != 0 {\n        for\
    \ _, value := range array {\n            result[len(result)-1] = value\n     \
    \   }\n    } else {\n        for _, value := range array {\n            result[len(result)-1]\
    \ = result[len(result)-1]-value\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmppgdfnezo_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmppgdfnezo_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmppgdfnezo_test.go:55: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmppgdfnezo_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmppgdfnezo_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075217
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 1 {\n        for _, v := range\
    \ array {\n            result[sum-v] = v\n        }\n    } else {\n        for\
    \ _, v := range array {\n            result[sum-v] = v\n        }\n        for\
    \ _, v := range result {\n            v = -v\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [13] with length 6 [recovered]\n\tpanic: runtime error: index out of range [13]\
    \ with length 6\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpv6ecpmkd_test.go:26\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpv6ecpmkd_test.go:48\
    \ +0xb2b\ntesting.tRunner(0xc0001036c0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075217
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Ints(result)\n\
    \    } else {\n        sort.Ints(result[::-1])\n    }\n    return result\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz1snt8z7_test.go:27:26: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 0 {\n        for i := 0; i\
    \ < len(array); i++ {\n            j := i\n            for j > 0 && array[j-1]\
    \ > array[j] {\n                array[j] = array[j-1]\n                j--\n \
    \           }\n            array[j] = i\n        }\n    } else {\n        for\
    \ i := 0; i < len(array); i++ {\n            j := i\n            for j > 0 &&\
    \ array[j-1] < array[j] {\n                array[j] = array[j-1]\n           \
    \     j--\n            }\n            array[j] = i\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__1\
    \ (0.00s)\n        tmp435ba58j_test.go:65: expected '[%!s(int=5)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n        tmp435ba58j_test.go:65:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n        tmp435ba58j_test.go:65:\
    \ expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=0)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmp435ba58j_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__5 (0.00s)\n        tmp435ba58j_test.go:65: expected\
    \ '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmp435ba58j_test.go:65:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075217
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqjmgtq__test.go:25:9: undefined: sort

    /tmp/tmpfqjmgtq__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hf47gb8_test.go:24:9: undefined: sort

    /tmp/tmp8hf47gb8_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    sum := 0\n    for _, value := range array\
    \ {\n        sum += value\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl3waq8a5_test.go:25:9: undefined: sort

    /tmp/tmpl3waq8a5_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_m4u2qi_test.go:24:9: undefined: sort

    /tmp/tmp8_m4u2qi_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, value := range array\
    \ {\n        sum += value\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdxxcl8y_test.go:25:9: undefined: sort

    /tmp/tmphdxxcl8y_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    sort.Ints(array)\n    sum := 0\n    for _, v :=\
    \ range array {\n        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(array))\n\
    \    } else {\n        sort.Sort(array)\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpynsdrbep_test.go:20:5: undefined: sort

    /tmp/tmpynsdrbep_test.go:26:9: undefined: sort

    /tmp/tmpynsdrbep_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wnfmgyl_test.go:25:9: undefined: sort

    /tmp/tmp4wnfmgyl_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpifndtu81_test.go:24:9: undefined: sort

    /tmp/tmpifndtu81_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm_d4vgt9_test.go:25:9: undefined: sort

    /tmp/tmpm_d4vgt9_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(array))\n\
    \    } else {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    }\n\
    \    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp14ryfi7i_test.go:25:9: undefined: sort

    /tmp/tmp14ryfi7i_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, value := range array {\n        sum += value\n \
    \   }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n\
    \            return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8v3x1bnq_test.go:24:9: undefined: sort

    /tmp/tmp8v3x1bnq_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 != 0 {\n        for i := 0; i\
    \ < len(array); i++ {\n            result [i] = array[i]\n        }\n        for\
    \ i := 0; i < len(array); i++ {\n            result [i] = array[len(array)-1-i]\n\
    \        }\n    } else {\n        for i := 0; i < len(array); i++ {\n        \
    \    result [i] = array[len(array)-1-i]\n        }\n        for i := 0; i < len(array);\
    \ i++ {\n            result [i] = array[i]\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpgd1wbtkg_test.go:61: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpgd1wbtkg_test.go:61: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpgd1wbtkg_test.go:61: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpgd1wbtkg_test.go:61: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    var sum int\n    for _, v := range array {\n  \
    \      sum += v\n    }\n    if sum%2 != 0 {\n        result = append(result, array...)\n\
    \    } else {\n        result = append(result, array[len(array)-1])\n    }\n \
    \   for _, v := range result {\n        array[v], array[len(array)-1] = array[len(array)-1],\
    \ array[v]\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmp25v7oxh8_test.go:27\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmp25v7oxh8_test.go:42\
    \ +0x1c\ntesting.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 1 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hf47gb8_test.go:24:9: undefined: sort

    /tmp/tmp8hf47gb8_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 1 {\n        for i := 0; i\
    \ < len(array); i++ {\n            result[i] = array[len(array)-1-i]\n       \
    \ }\n    } else {\n        for i := 0; i < len(array); i++ {\n            result[i]\
    \ = array[len(array)-1-i-1]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpsuo98yre_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpsuo98yre_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpsuo98yre_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpsuo98yre_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, value := range array\
    \ {\n        sum += value\n    }\n    if sum%2 != 0 {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] > array[j]\n        })\n\
    \    } else {\n        sort.Slice(array, func(i, j int) bool {\n            return\
    \ array[i] < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0_m44b6__test.go:25:9: undefined: sort

    /tmp/tmp0_m44b6__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, value := range array {\n        sum += value\n \
    \   }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n\
    \            return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8v3x1bnq_test.go:24:9: undefined: sort

    /tmp/tmp8v3x1bnq_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    \n    sum := 0\n    for _, v := range array\
    \ {\n        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvgjm9jlz_test.go:26:9: undefined: sort

    /tmp/tmpvgjm9jlz_test.go:30:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm_d4vgt9_test.go:25:9: undefined: sort

    /tmp/tmpm_d4vgt9_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    result := append(result, array...)\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcigr7t79_test.go:20:12: no new variables on left side of :=

    /tmp/tmpcigr7t79_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    result := append(result, array...)\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcigr7t79_test.go:20:12: no new variables on left side of :=

    /tmp/tmpcigr7t79_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpifndtu81_test.go:24:9: undefined: sort

    /tmp/tmpifndtu81_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp68bmjf2r_test.go:25:9: undefined: sort

    /tmp/tmp68bmjf2r_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    sum := 0\n    for _, v := range array {\n    \
    \    sum += v\n    }\n    if sum%2 == 0 {\n        sort.Slice(array, func(i, j\
    \ int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfvqohpi9_test.go:25:9: undefined: sort

    /tmp/tmpfvqohpi9_test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] > array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqjmgtq__test.go:25:9: undefined: sort

    /tmp/tmpfqjmgtq__test.go:29:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, value :=\
    \ range array {\n        sum += value\n    }\n    if sum%2 == 1 {\n        for\
    \ _, value := range array {\n            result[len(result)-1] = value\n     \
    \   }\n    } else {\n        for _, value := range array {\n            result[len(result)-1]\
    \ = value\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpolnu3p9b_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpolnu3p9b_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpolnu3p9b_test.go:55: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpolnu3p9b_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpolnu3p9b_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075217
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 1 {\n        for i := 0; i\
    \ < len(array); i++ {\n            result[i] = array[len(array)-1-i]\n       \
    \ }\n    } else {\n        for i := 0; i < len(array); i++ {\n            result[i]\
    \ = array[len(array)-1-i-1]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpsuo98yre_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpsuo98yre_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpsuo98yre_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpsuo98yre_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_m4u2qi_test.go:24:9: undefined: sort

    /tmp/tmp8_m4u2qi_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_m4u2qi_test.go:24:9: undefined: sort

    /tmp/tmp8_m4u2qi_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    for _, v := range array {\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpilo8zdrb_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 1 {\n        for i := 0; i\
    \ < len(array); i++ {\n            result[i] = array[i]\n        }\n        for\
    \ i := 0; i < len(array); i++ {\n            j := i + 1\n            for j < len(array)\
    \ && array[j-1] > array[j] {\n                result[j] = array[j-1]\n       \
    \         j++\n            }\n            result[j] = array[i]\n        }\n  \
    \  } else {\n        for i := 0; i < len(array); i++ {\n            result[i]\
    \ = array[len(array)-1-i]\n        }\n        for i := 0; i < len(array); i++\
    \ {\n            j := len(array)-1-i\n            for j > 0 && array[j-1] > array[j]\
    \ {\n                result[j] = array[j-1]\n                j--\n           \
    \ }\n            result[j] = array[i]\n        }\n    }\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000c4550, 0x1, 0x37930?})\n\
    \t/tmp/tmpob1d46x7_test.go:34 +0x1a5\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpob1d46x7_test.go:60 +0x9b\ntesting.tRunner(0xc0001924e0, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 0 {\n        for _, v := range\
    \ array {\n            result[sum-v] = v\n        }\n    } else {\n        for\
    \ _, v := range array {\n            result[sum-v] = v\n        }\n        for\
    \ _, v := range array {\n            result[sum-v-1] = v\n        }\n    }\n \
    \   return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmptp8e4sij_test.go:33\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmptp8e4sij_test.go:47\
    \ +0xc05\ntesting.tRunner(0xc0001a01a0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_m4u2qi_test.go:24:9: undefined: sort

    /tmp/tmp8_m4u2qi_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Sort(sort.Reverse(array))\n    } else {\n   \
    \     sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp931m7ozy_test.go:24:9: undefined: sort

    /tmp/tmp931m7ozy_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, value := range array {\n        sum += value\n \
    \   }\n    if sum%2 == 1 {\n        sort.Slice(array, func(i, j int) bool {\n\
    \            return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps56pnszu_test.go:24:9: undefined: sort

    /tmp/tmps56pnszu_test.go:28:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    var sum int\n    for _, v := range array {\n  \
    \      sum += v\n    }\n    if sum%2 == 1 {\n        for _, v := range array {\n\
    \            result = append(result, v)\n        }\n    } else {\n        for\
    \ _, v := range array {\n            result = append(result, v)\n        }\n \
    \       for i := len(array)-1; i >= 0; i-- {\n            sum += array[i]\n  \
    \          if sum%2 == 1 {\n                result = append(result, array[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp0x62im_f_test.go:61: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp0x62im_f_test.go:61: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp0x62im_f_test.go:61: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp0x62im_f_test.go:61: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp0x62im_f_test.go:61: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, value := range array {\n        sum += value\n \
    \   }\n    if sum%2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzcotgmoj_test.go:24:9: undefined: sort

    /tmp/tmpzcotgmoj_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sort.Ints(array)\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy7iemm2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    var sum int\n    for _, v := range array {\n  \
    \      sum += v\n    }\n    if sum%2 != 0 {\n        result = append(result, array...)\n\
    \    } else {\n        result = append(result, array...)\n        result = append(result,\
    \ array...)\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpxels8_uj_test.go:52: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpxels8_uj_test.go:52: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpxels8_uj_test.go:52: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpxels8_uj_test.go:52: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpxels8_uj_test.go:52: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n  \
    \  } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpifndtu81_test.go:24:9: undefined: sort

    /tmp/tmpifndtu81_test.go:26:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075214
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    var sum int\n    for _, v := range array {\n  \
    \      sum += v\n    }\n    if sum%2 == 1 {\n        result = append(result, array...)\n\
    \    } else {\n        result = append(result, array[len(array)-1]...)\n    }\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_20k1gpu_test.go:27:33: cannot use array[len(array) - 1] (variable of
    type int) as type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    sum := 0\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm_d4vgt9_test.go:25:9: undefined: sort

    /tmp/tmpm_d4vgt9_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075212
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
    \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 == 0 {\n        sort.Ints(array)\n    } else {\n        sort.Ints(reverseInts(array))\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi9ypgvew_test.go:24:9: undefined: sort

    /tmp/tmpi9ypgvew_test.go:26:9: undefined: sort

    /tmp/tmpi9ypgvew_test.go:26:19: undefined: reverseInts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075218
