language: go_test.go
name: HumanEval_101_words_string
results:
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    \n    \n    return []string{}\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpix5x3nvj_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpix5x3nvj_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpix5x3nvj_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpix5x3nvj_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpix5x3nvj_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074031
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, _ := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbevjxjdi_test.go:14:14: undefined: strings

    /tmp/tmpbevjxjdi_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Split the string into words\n    words := strings.Split(s,\
    \ \", \")\n    // Return an array of words\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaj5f4ckf_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    words := strings.Split(s, \"\
    ,\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqw_xblw8_test.go:15:11: no new variables on left side of :=

    /tmp/tmpqw_xblw8_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwjluyw7_test.go:14:14: undefined: strings

    /tmp/tmpnwjluyw7_test.go:15:11: no new variables on left side of :=

    /tmp/tmpnwjluyw7_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i := 0; i < len(words); i++ {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpder2z4wv_test.go:14:14: undefined: strings

    /tmp/tmpder2z4wv_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0g_ugv_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    for _, word := range words {\n        word = strings.TrimSpace(word)\n\
    \    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzs_qfd6_test.go:15:14: undefined: strings

    /tmp/tmpdzs_qfd6_test.go:17:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwjluyw7_test.go:14:14: undefined: strings

    /tmp/tmpnwjluyw7_test.go:15:11: no new variables on left side of :=

    /tmp/tmpnwjluyw7_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \", \")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oa04smq_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    words := strings.Split(s, \"\
    ,\")\n    for _, word := range words {\n        words = append(words, strings.Split(word,\
    \ \" \")...)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphy3ndi4o_test.go:15:11: no new variables on left side of :=

    /tmp/tmphy3ndi4o_test.go:15:14: undefined: strings

    /tmp/tmphy3ndi4o_test.go:17:31: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your logic here\n    words := strings.Split(s,\
    \ \",\")\n    words2 := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdbmgg4hb_test.go:15:14: undefined: strings

    /tmp/tmpdbmgg4hb_test.go:16:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    words := strings.Split(s, \"\
    ,\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqw_xblw8_test.go:15:11: no new variables on left side of :=

    /tmp/tmpqw_xblw8_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0g_ugv_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0g_ugv_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i := 0; i < len(words); i++ {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpder2z4wv_test.go:14:14: undefined: strings

    /tmp/tmpder2z4wv_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Split the string into words and return an array of\
    \ words\n    words := strings.Split(s, \",\")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp60ahqt9y_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    \n    return []string{}\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp3_821rql_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmp3_821rql_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp3_821rql_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp3_821rql_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmp3_821rql_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074031
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \", \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3n9_c50__test.go:15:11: no new variables on left side of :=

    /tmp/tmp3n9_c50__test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwjluyw7_test.go:14:14: undefined: strings

    /tmp/tmpnwjluyw7_test.go:15:11: no new variables on left side of :=

    /tmp/tmpnwjluyw7_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Split the string into words by commas\n    words\
    \ := strings.Split(s, \",\")\n    // Remove empty words\n    words = filterWords(words)\n\
    \    // Split the string into words by spaces\n    words = strings.Split(s, \"\
    \ \")\n    // Remove empty words\n    words = filterWords(words)\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcw43fqnr_test.go:15:14: undefined: strings

    /tmp/tmpcw43fqnr_test.go:17:13: undefined: filterWords

    /tmp/tmpcw43fqnr_test.go:19:13: undefined: strings

    /tmp/tmpcw43fqnr_test.go:21:13: undefined: filterWords

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, _ := range words {\n        result[i] = words[i]\n \
    \   }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplpqjcyc_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \", \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3n9_c50__test.go:15:11: no new variables on left side of :=

    /tmp/tmp3n9_c50__test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \", \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3n9_c50__test.go:15:11: no new variables on left side of :=

    /tmp/tmp3n9_c50__test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwjluyw7_test.go:14:14: undefined: strings

    /tmp/tmpnwjluyw7_test.go:15:11: no new variables on left side of :=

    /tmp/tmpnwjluyw7_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6fnemrv1_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    words := strings.Split(s, \"\
    ,\")\n    for _, word := range words {\n        words = strings.Split(word, \"\
    \ \")\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n \
    \ candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy1h3ttl2_test.go:15:11: no new variables on left side of :=

    /tmp/tmpy1h3ttl2_test.go:15:14: undefined: strings

    /tmp/tmpy1h3ttl2_test.go:17:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, _ := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbevjxjdi_test.go:14:14: undefined: strings

    /tmp/tmpbevjxjdi_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \", \")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjzb30y6s_test.go:14:14: undefined: strings

    /tmp/tmpjzb30y6s_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1zdofpaz_test.go:15:14: undefined: strings

    /tmp/tmp1zdofpaz_test.go:16:11: no new variables on left side of :=

    /tmp/tmp1zdofpaz_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \", \")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oa04smq_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, _ := range words {\n        result[i] = words[i]\n \
    \   }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplpqjcyc_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1gdfj8m8_test.go:14:14: undefined: strings

    /tmp/tmp1gdfj8m8_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \", \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3n9_c50__test.go:15:11: no new variables on left side of :=

    /tmp/tmp3n9_c50__test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Split the string into words\n    words := strings.Split(s,\
    \ \" \")\n    // Return an array of words\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6ydcxr2_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Split the string into words and return an array of\
    \ words.\n    return strings.Split(s, \",\")\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph7etjq8a_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwjluyw7_test.go:14:14: undefined: strings

    /tmp/tmpnwjluyw7_test.go:15:11: no new variables on left side of :=

    /tmp/tmpnwjluyw7_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0g_ugv_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \", \")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oa04smq_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0g_ugv_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwjluyw7_test.go:14:14: undefined: strings

    /tmp/tmpnwjluyw7_test.go:15:11: no new variables on left side of :=

    /tmp/tmpnwjluyw7_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, _ := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbevjxjdi_test.go:14:14: undefined: strings

    /tmp/tmpbevjxjdi_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i := 0; i < len(words); i++ {\n        result[i] = words[i]\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm882ozmx_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your logic here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp287_2uz8_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Split the string into words\n    words := strings.Split(s,\
    \ \",\")\n    // Return an array of words\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9sboqovf_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, _ := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbevjxjdi_test.go:14:14: undefined: strings

    /tmp/tmpbevjxjdi_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwjluyw7_test.go:14:14: undefined: strings

    /tmp/tmpnwjluyw7_test.go:15:11: no new variables on left side of :=

    /tmp/tmpnwjluyw7_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    words := strings.Split(s, \"\
    ,\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqw_xblw8_test.go:15:11: no new variables on left side of :=

    /tmp/tmpqw_xblw8_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    words := strings.Split(s, \"\
    ,\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqw_xblw8_test.go:15:11: no new variables on left side of :=

    /tmp/tmpqw_xblw8_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i := 0; i < len(words); i++ {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpder2z4wv_test.go:14:14: undefined: strings

    /tmp/tmpder2z4wv_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    words := strings.Split(s, \"\
    , \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcdj8r7rg_test.go:15:11: no new variables on left side of :=

    /tmp/tmpcdj8r7rg_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0g_ugv_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwjluyw7_test.go:14:14: undefined: strings

    /tmp/tmpnwjluyw7_test.go:15:11: no new variables on left side of :=

    /tmp/tmpnwjluyw7_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i := 0; i < len(words); i++ {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpder2z4wv_test.go:14:14: undefined: strings

    /tmp/tmpder2z4wv_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0g_ugv_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your logic here\n    return strings.Split(s,\
    \ \",\")\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbcwwxz3y_test.go:15:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your solution here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn9dt6y2t_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \", \")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oa04smq_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \", \")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oa04smq_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, _ := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbevjxjdi_test.go:14:14: undefined: strings

    /tmp/tmpbevjxjdi_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, _ := range words {\n        result[i] = words[i]\n \
    \   }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplpqjcyc_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Split the string into words\n    words := strings.Split(s,\
    \ \", \")\n    // Return an array of words\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaj5f4ckf_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    words := strings.Split(s, \"\
    ,\")\n    for _, word := range words {\n        words = append(words, strings.Split(word,\
    \ \" \")...)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphy3ndi4o_test.go:15:11: no new variables on left side of :=

    /tmp/tmphy3ndi4o_test.go:15:14: undefined: strings

    /tmp/tmphy3ndi4o_test.go:17:31: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6fnemrv1_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0g_ugv_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \", \")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oa04smq_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0g_ugv_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \", \")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oa04smq_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, _ := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbevjxjdi_test.go:14:14: undefined: strings

    /tmp/tmpbevjxjdi_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \", \")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oa04smq_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6fnemrv1_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1gdfj8m8_test.go:14:14: undefined: strings

    /tmp/tmp1gdfj8m8_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, v := range words {\n        result[i] = strings.TrimSpace(v)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvlyted23_test.go:14:14: undefined: strings

    /tmp/tmpvlyted23_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0g_ugv_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, v := range words {\n        result[i] = strings.TrimSpace(v)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvlyted23_test.go:14:14: undefined: strings

    /tmp/tmpvlyted23_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = word\n  \
    \  }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw4ir4ip_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Split the string into words\n    words := strings.Split(s,\
    \ \" \")\n    // Return an array of words\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6ydcxr2_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, _ := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbevjxjdi_test.go:14:14: undefined: strings

    /tmp/tmpbevjxjdi_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, _ := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbevjxjdi_test.go:14:14: undefined: strings

    /tmp/tmpbevjxjdi_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, _ := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbevjxjdi_test.go:14:14: undefined: strings

    /tmp/tmpbevjxjdi_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \", \")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oa04smq_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i := 0; i < len(words); i++ {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpder2z4wv_test.go:14:14: undefined: strings

    /tmp/tmpder2z4wv_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpww9bgdpe_test.go:15:14: undefined: strings

    /tmp/tmpww9bgdpe_test.go:18:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0g_ugv_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    words := strings.Split(s, \"\
    ,\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqw_xblw8_test.go:15:11: no new variables on left side of :=

    /tmp/tmpqw_xblw8_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \", \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3n9_c50__test.go:15:11: no new variables on left side of :=

    /tmp/tmp3n9_c50__test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, _ := range words {\n        result[i] = words[i]\n \
    \   }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplpqjcyc_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, _ := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbevjxjdi_test.go:14:14: undefined: strings

    /tmp/tmpbevjxjdi_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwjluyw7_test.go:14:14: undefined: strings

    /tmp/tmpnwjluyw7_test.go:15:11: no new variables on left side of :=

    /tmp/tmpnwjluyw7_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    words := strings.Split(s, \"\
    ,\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqw_xblw8_test.go:15:11: no new variables on left side of :=

    /tmp/tmpqw_xblw8_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    words := strings.Split(s, \"\
    ,\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqw_xblw8_test.go:15:11: no new variables on left side of :=

    /tmp/tmpqw_xblw8_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i := range words {\n        result[i] = words[i]\n    }\n\
    \    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate :=\
    \ words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyr7yexvw_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    words := strings.Split(s, \"\
    ,\")\n    for _, word := range words {\n        words = append(words, strings.Split(word,\
    \ \" \")...)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphy3ndi4o_test.go:15:11: no new variables on left side of :=

    /tmp/tmphy3ndi4o_test.go:15:14: undefined: strings

    /tmp/tmphy3ndi4o_test.go:17:31: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your logic here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp287_2uz8_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1gdfj8m8_test.go:14:14: undefined: strings

    /tmp/tmp1gdfj8m8_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \", \")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oa04smq_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    for _, word := range words {\n        word = strings.TrimSpace(word)\n\
    \        if word != \"\" {\n            words = append(words, word)\n        }\n\
    \    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaeoa1_7r_test.go:15:14: undefined: strings

    /tmp/tmpaeoa1_7r_test.go:17:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6fnemrv1_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, v := range words {\n        result[i] = strings.TrimSpace(v)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvlyted23_test.go:14:14: undefined: strings

    /tmp/tmpvlyted23_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6fnemrv1_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1gdfj8m8_test.go:14:14: undefined: strings

    /tmp/tmp1gdfj8m8_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1gdfj8m8_test.go:14:14: undefined: strings

    /tmp/tmp1gdfj8m8_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwjluyw7_test.go:14:14: undefined: strings

    /tmp/tmpnwjluyw7_test.go:15:11: no new variables on left side of :=

    /tmp/tmpnwjluyw7_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \", \")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oa04smq_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwjluyw7_test.go:14:14: undefined: strings

    /tmp/tmpnwjluyw7_test.go:15:11: no new variables on left side of :=

    /tmp/tmpnwjluyw7_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Split the string into words by splitting on commas\n\
    \    // or spaces.\n    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n\n    // Return the words\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0tyvssus_test.go:16:14: undefined: strings

    /tmp/tmp0tyvssus_test.go:17:11: no new variables on left side of :=

    /tmp/tmp0tyvssus_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwjluyw7_test.go:14:14: undefined: strings

    /tmp/tmpnwjluyw7_test.go:15:11: no new variables on left side of :=

    /tmp/tmpnwjluyw7_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, _ := range words {\n        result[i] = words[i]\n \
    \   }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplpqjcyc_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Split the string into words\n    words := strings.Split(s,\
    \ \",\")\n    // Return an array of words\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9sboqovf_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1gdfj8m8_test.go:14:14: undefined: strings

    /tmp/tmp1gdfj8m8_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    words := strings.Split(s, \"\
    ,\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqw_xblw8_test.go:15:11: no new variables on left side of :=

    /tmp/tmpqw_xblw8_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0g_ugv_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    words := strings.Split(s, \"\
    ,\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqw_xblw8_test.go:15:11: no new variables on left side of :=

    /tmp/tmpqw_xblw8_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwjluyw7_test.go:14:14: undefined: strings

    /tmp/tmpnwjluyw7_test.go:15:11: no new variables on left side of :=

    /tmp/tmpnwjluyw7_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \", \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3n9_c50__test.go:15:11: no new variables on left side of :=

    /tmp/tmp3n9_c50__test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Split the string into words\n    words := strings.Split(s,\
    \ \",\")\n    // Return an array of words\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9sboqovf_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    var words []string\n    words := strings.Split(s, \"\
    ,\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqw_xblw8_test.go:15:11: no new variables on left side of :=

    /tmp/tmpqw_xblw8_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6fnemrv1_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i := 0; i < len(words); i++ {\n        result[i] = words[i]\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm882ozmx_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \", \")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oa04smq_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Split the string into words\n    words := strings.Split(s,\
    \ \",\")\n    // Return an array of words\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9sboqovf_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = w\n    }\n    return result\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmply2q3uhl_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \", \")\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ule_33__test.go:14:14: undefined: strings

    /tmp/tmp9ule_33__test.go:15:11: no new variables on left side of :=

    /tmp/tmp9ule_33__test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074032
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0g_ugv_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0g_ugv_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, word := range words {\n        result[i] = strings.TrimSpace(word)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yh78oav_test.go:14:14: undefined: strings

    /tmp/tmp5yh78oav_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \", \")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oa04smq_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0g_ugv_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \", \")\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oa04smq_test.go:14:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    // Write your code here\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0g_ugv_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := make([]string, 0)\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdndishoc_test.go:15:11: no new variables on left side of :=

    /tmp/tmpdndishoc_test.go:15:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\",\
    \ \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s\
    \ string) []string {\n    words := strings.Split(s, \",\")\n    result := make([]string,\
    \ len(words))\n    for i, w := range words {\n        result[i] = strings.TrimSpace(w)\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo_md2j3_test.go:14:14: undefined: strings

    /tmp/tmplo_md2j3_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074030
