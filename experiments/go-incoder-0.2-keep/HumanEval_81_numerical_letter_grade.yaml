name: HumanEval_81_numerical_letter_grade
language: go_test.go
prompt: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"\
  fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the\
  \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
  // The only problem is, she has lost the code she used for grading.\n// She has\
  \ given you a list of GPAs for some students and you have to write \n// a function\
  \ that can output a list of letter grades using the following table:\n// GPA   \
  \    |    Letter grade\n// 4.0                A+\n// > 3.7                A \n//\
  \ > 3.3                A- \n// > 3.0                B+\n// > 2.7               \
  \ B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7         \
  \       C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7   \
  \             D \n// > 0.0                D-\n// 0.0                E\n// Example:\n\
  // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc\
  \ numerical_letter_grade(grades []float64) []string {\n"
tests: "func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
  \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
  \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
  \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
  E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
  \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
  \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    for i := 0; i < grades_len; i++ {\n        if grades[i] >=\
    \ 4.0 {\n            letter_grades[i] = \"A+\"\n        } else if grades[i] >=\
    \ 3.7 && grades[i] < 4.0 {\n            letter_grades[i] = \"A\"\n        } else\
    \ if grades[i] >= 3.3 && grades[i] < 3.7 {\n            letter_grades[i] = \"\
    A-\"\n        } else if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letter_grades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n        \
    \    letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 && grades[i]\
    \ < 2.7 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 && grades[i] < 2.3 {\n            letter_grades[i] = \"C+\"\n       \
    \ } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n         \
    \   letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ < 1.3 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.7 && grades[i] < 1.0 {\n            letter_grades[i] = \"D\"\n        }\
    \ else if grades[i] >= 0.0 {\n            letter_grades[i] = \"D-\"\n        }\
    \ else {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n\
    }\n", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    for\
    \ i := 1; i < gradesLen; i++ {\n        if grades[i] > grades[i-1] {\n       \
    \     letterGrades[i] = \"D+\"\n        } else if grades[i] < grades[i-1] {\n\
    \            letterGrades[i] = \"D-\"\n        } else if grades[i] == grades[i-1]\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i] > grades[i-1]\
    \ && grades[i] < grades[i+1] {\n            letterGrades[i] = \"B+\"\n       \
    \ } else if grades[i] > grades[i-1] && grades[i] != grades[i+1] {\n          \
    \  letterGrades[i] = \"B\"\n        } else if grades[i] < grades[i-1] && grades[i]\
    \ != grades[i+1] {\n            letterGrades[i] = \"B-\"\n        } else if grades[i]\
    \ > grades[i-1] && grades[i] == grades[i+1] {\n            letterGrades[i] = \"\
    A+\"\n        } else if grades[i] < grades[i-1] && grades[i] == grades[i+1] {\n\
    \            letterGrades[i] = \"A\"\n        } else if grades[i] == grades[i-1]\
    \ && grades[i] > grades[i+1] {\n            letterGrades[i] = \"A+\"\n       \
    \ } else if grades[i] == grades[i-1] && grades[i] < grades[i+1] {\n          \
    \  letterGrades[i] = \"A-\"\n        }\n    }\n    return letterGrades\n}\n",
  "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // The first letter grade is always A+\n    letter_grades[0] = \"A+\"\
    \n    \n    // The last letter grade is always E\n    letter_grades[grades_len-1]\
    \ = \"E\"\n    \n    // The rest of the letter grades are calculated using the\
    \ formula above\n    for i := 1; i < grades_len; i++ {\n        letter_grades[i]\
    \ = letter_grades[i-1] + \"-\" + letter_grades[i]\n    }\n    \n    return letter_grades\n\
    }\n", "    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := range grades {\n        gradesSorted[i] = grades[i]\n    }\n   \
    \ gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    grades", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    \n    //\
    \ Loop through each grade and add it to the letter grades array\n    for i :=\
    \ 0; i < gradesLen; i++ {\n        letterGrades[i] = letterGrade(grades[i])\n\
    \    }\n    \n    return letterGrades\n}\n", "    grades_sum := 0.0\n    grades_count\
    \ := 0\n    for _, grade := range grades {\n        grades_sum += grade\n    \
    \    grades_count++\n    }\n    grades_avg := grades_sum / float64(grades_count)\n\
    \    grades_diff := grades_avg - float64(grades[0])\n    grades_diff_abs := math.Abs(grades_diff)\n\
    \    grades_diff_sign := grades_diff_abs > 0.0 ? 1.0 : -1.0\n    grades_diff_abs\
    \ *= grades_diff_sign\n    grades_diff_abs /= 2.0\n    grades_diff_abs *= grades_count\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs *= grades_avg\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs *= grades_avg\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    ", "    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count == 0 {\n        return grades_letter\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_letter := []string{}\n   \
    \ for _, grade := range grades {\n        if grade >= grades_avg {\n         \
    \   grades_letter = append(grades_letter, \"A+\")\n        } else if grade < grades_avg\
    \ {\n            grades_letter = append(grades_letter, \"A-\")\n        } else\
    \ {\n            grades_letter = append(grades_letter, \"B+\")\n        }\n  \
    \  }\n    return grades_letter\n}\n", "    result := []string{}\n    for _, grade\
    \ := range grades {\n        if grade > 3.0 {\n            grade = grade - 3.0\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 3.0\n      \
    \  }\n        if grade < 2.0 {\n            grade = grade - 2.0\n        }\n \
    \       if grade < 1.7 {\n            grade = grade - 1.7\n        }\n       \
    \ if grade < 1.0 {\n            grade = grade - 1.0\n        }\n        if grade\
    \ < 0.7 {\n            grade = grade - 0.7\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade > 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade > 1.0 {\n        \
    \    grade = grade + 1.0\n        }\n        if grade > 1.7 {\n            grade\
    \ = grade + 1.7\n        }\n        if grade > 2.0 {\n            grade = grade\
    \ + 2.0\n        }\n        if grade > 2.3 {\n            grade = grade + 2.3\n\
    \        }\n        if grade > 2.7 {\n            grade = grade + 2.7\n      \
    \  }\n        if grade > 3.0 {\n            grade = grade + 3.0\n        }\n \
    \       if grade > 3.3 {\n            grade = grade + 3.3\n        }\n       \
    \ if grade > 3.7 {\n            grade = grade + 3.7\n        }\n        if grade\
    \ > 4.0 {\n            grade = grade + 4.0\n        }\n        if grade > 4.3\
    \ {\n            grade = grade + 4.3\n        }\n        if grade > 4.7 {\n  \
    \          grade = grade + 4.7\n        }\n        if grade > 5.0 {\n        \
    \    grade = grade + 5.0\n        }\n        if grade > 5.3 {\n            grade\
    \ = grade + 5.3\n        }\n        if grade > 5.7 {\n            grade = grade\
    \ + 5.7\n        }\n        if grade > 6.0 {\n            grade = grade + 6.0\n\
    \        }\n        if grade > 6.3 {\n            grade = grade + 6.3\n      \
    \  }\n        if grade > 6.7 {\n            grade = grade + 6.7\n        }\n \
    \       if grade > 7.0 {\n            grade = grade + 7.0\n        }\n       \
    \ if grade > 7.3 {\n            grade = grade + 7.3\n        }\n        if grade\
    \ > 7.7 {\n            grade = grade + 7.7\n        }\n        if ", "    grades\
    \ := append([]float64{}, grades...)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(", "    var result []string\n    var gpa, letter float64\n\
    \    for _, grade := range grades {\n        gpa = grade\n        letter = math.Pow(gpa,\
    \ 1.0/3.0)\n        if letter > 3.0 {\n            letter = 3.0\n        } else\
    \ if letter < 3.0 {\n            letter = 3.0\n        }\n        if letter <\
    \ 2.0 {\n            letter = 2.0\n        }\n        if letter > 2.0 {\n    \
    \        letter = 2.0\n        }\n        if letter < 1.0 {\n            letter\
    \ = 1.0\n        }\n        if letter > 1.0 {\n            letter = 1.0\n    \
    \    }\n        if letter < 0.7 {\n            letter = 0.7\n        }\n     \
    \   if letter > 0.7 {\n            letter = 0.7\n        }\n        if letter\
    \ < 0.3 {\n            letter = 0.3\n        }\n        if letter > 0.3 {\n  \
    \          letter = 0.3\n        }\n        if letter < 0.1 {\n            letter\
    \ = 0.1\n        }\n        if letter > 0.1 {\n            letter = 0.1\n    \
    \    }\n        if letter < 0.01 {\n            letter = 0.01\n        }\n   \
    \     if letter > 0.01 {\n            letter = 0.01\n        }\n        if letter\
    \ < 0.001 {\n            letter = 0.001\n        }\n        if letter > 0.001\
    \ {\n            letter = 0.001\n        }\n        if letter < 0.0001 {\n   \
    \         letter = 0.0001 \n        }\n        if letter > 0.0001 {\n        \
    \    letter = 0.0001 \n        }\n        if letter < 0.00001 {\n            letter\
    \ = 0.00001 \n        }\n        if letter > 0.00001 {\n            letter = 0.00001\
    \ \n        }\n        if letter < 0.0000001 {\n            letter = 0.0000001\
    \ \n        }\n        if letter > 0.0000001 {\n            letter = 0.0000001\
    \ \n        }\n        if letter < 0.000000001 {\n            letter = 0.000000001\
    \ \n        }\n        if letter > 0.000000001 {\n            letter = 0.000000001\
    \ \n        }\n        if letter < 0.0000000001 {\n            letter = 0.0000000001\
    \ \n        }\n        if letter > 0.0000000001 {\n            letter = 0.0000000001\
    \ \n        }\n        if letter < 0.00000000001 {\n            letter = 0.00000000001\
    \ \n        }\n        if letter > 0.00000000001 {\n            letter = 0.00000000001\
    \ \n        }\n        if letter < 0.000000000001 {\n            letter = 0.000000000001\
    \ \n        }\n        if letter > 0.000000000001 {\n            letter = 0.000000000001\
    \ \n        }\n        if letter < 0.0000000000001 {\n            letter = 0.0000000000001\
    \ \n        }\n        if letter > 0.0000000000001 {\n            letter = 0.0000000000001\
    \ \n        }\n        if letter < 0.000000000000001 {\n            letter = 0.000000000000001\
    \ \n        }\n        if ", "    gradesSorted := make([]float64, len(grades))\n\
    \    sort.Float64s(grades)\n    for i := range gradesSorted {\n        gradesSorted[i]\
    \ = grades[i]\n    }\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted\
    \ = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = \"\"\n    }\n\
    \    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = letterGrades[i]\
    \ + letterGrade(grades[i])\n    }\n    return letterGrades\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, grade", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    letterGrades[0]\
    \ = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n\
    \        } else if grades[i] >= 3.7 {\n            letterGrades[i] = \"A\"\n \
    \       } else if grades[i] >= 3.3 {\n            letterGrades[i] = \"A-\"\n \
    \       } else if grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n \
    \       } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n  \
    \      } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n  \
    \      } else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\n  \
    \      } else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n   \
    \     } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n   \
    \     } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n   \
    \     } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n    \
    \    } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n    \
    \    } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    for i := 0; i < grades_len; i++ {\n        if grades[i]\
    \ >= 4.0 {\n            letter_grades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 3.7 {\n            letter_grades[i] = \"A\"\n        } else if grades[i]\
    \ >= 3.3 {\n            letter_grades[i] = \"A-\"\n        } else if grades[i]\
    \ >= 3.0 {\n            letter_grades[i] = \"B+\"\n        } else if grades[i]\
    \ >= 2.7 {\n            letter_grades[i] = \"B\"\n        } else if grades[i]\
    \ >= 2.3 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 {\n            letter_grades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.7 {\n            letter_grades[i] = \"C\"\n        } else if grades[i]\
    \ >= 1.3 {\n            letter_grades[i] = \"C-\"\n        } else if grades[i]\
    \ >= 1.0 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.7 {\n            letter_grades[i] = \"D\"\n        } else if grades[i]\
    \ >= 0.0 {\n            letter_grades[i] = \"D-\"\n        } else {\n        \
    \    letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n}\n",
  "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n\
    \            letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 &&\
    \ grades[i] <= 4.0 {\n            letter_grades[i] = \"A\"\n        } else if\
    \ grades[i] >= 3.3 && grades[i] <= 3.7 {\n            letter_grades[i] = \"A-\"\
    \n        } else if grades[i] >= 3.0 && grades[i] <= 3.3 {\n            letter_grades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i] <= 3.0 {\n       \
    \     letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 && grades[i]\
    \ <= 2.7 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 && grades[i] <= 2.3 {\n            letter_grades[i] = \"C+\"\n      \
    \  } else if grades[i] >= 1.7 && grades[i] <= 2.0 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] <= 1.7 {\n        \
    \    letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ <= 1.3 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.7 && grades[i] <= 1.0 {\n            letter_grades[i] = \"D\"\n       \
    \ } else if grades[i] >= 0.0 {\n            letter_grades[i] = \"D-\"\n      \
    \  } else {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return\
    \ letter_grades\n}\n", "    result := []string{}\n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            grade = grade - 3.0\n        }\n  \
    \      if grade < 0.0 {\n            grade = grade + 3.0\n        }\n        if\
    \ grade < 2.0 {\n            grade = grade + 2.0\n        }\n        if grade\
    \ < 1.7 {\n            grade = grade + 1.7\n        }\n        if grade < 1.0\
    \ {\n            grade = grade + 1.0\n        }\n        if grade < 0.7 {\n  \
    \          grade = grade + 0.7\n        }\n        if grade < 0.3 {\n        \
    \    grade = grade + 0.3\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade < -3.0 {\n            grade = grade\
    \ + 3.0\n        }\n        if grade < -2.7 {\n            grade = grade + 2.7\n\
    \        }\n        if grade < -2.3 {\n            grade = grade + 2.3\n     \
    \   }\n        if grade < -2.0 {\n            grade = grade + 2.0\n        }\n\
    \        if grade < -1.7 {\n            grade = grade + 1.7\n        }\n     \
    \   if grade < -1.3 {\n            grade = grade + 1.3\n        }\n        if\
    \ grade < -1.0 {\n            grade = grade + 1.0\n        }\n        if grade\
    \ < -0.7 {\n            grade = grade + 0.7\n        }\n        if grade < -0.3\
    \ {\n            grade = grade + 0.3\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade < 3.0 {\n        \
    \    grade = grade + 3.0\n        }\n        if grade < 2.7 {\n            grade\
    \ = grade + 2.7\n        }\n        if grade < 2.3 {\n            grade = grade\
    \ + 2.3\n        }\n        if grade < 2.0 {\n            grade = grade + 2.0\n\
    \        }\n        if grade < 1.7 {\n            grade = grade + 1.7\n      \
    \  }\n        if grade < 1.3 {\n            grade = grade + 1.3\n        }\n \
    \       if grade < 1.0 {\n            grade = grade + 1.0\n        }\n       \
    \ if grade < 0.7 {\n            grade = grade + 0.7\n        }\n        if grade\
    \ < 0.3 {\n            grade = grade + 0.3\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade < 3.0 {\n  \
    \          grade = grade ", "    grades_sum := 0.0\n    grades_count := 0\n  \
    \  grades_letter := []string{}\n    for _, grade := range grades {\n        grades_sum\
    \ += grade\n        grades_count++\n    }\n    if grades_count > 0 {\n       \
    \ grades_avg := grades_sum / float64(grades_count)\n        grades_letter := []string{}\n\
    \        for _, grade := range grades {\n            if grade > grades_avg {\n\
    \                grades_letter = append(grades_letter, \"A+\")\n            }\
    \ else if grade > grades_avg - 0.3 {\n                grades_letter = append(grades_letter,\
    \ \"A-\")\n            } else if grade > grades_avg - 0.2 {\n                grades_letter\
    \ = append(grades_letter, \"B+\")\n            } else if grade > grades_avg -\
    \ 0.1 {\n                grades_letter = append(grades_letter, \"B\")\n      \
    \      } else if grade > grades_avg - 0.07 {\n                grades_letter =\
    \ append(grades_letter, \"B-\")\n            } else if grade > grades_avg - 0.06\
    \ {\n                grades_letter = append(grades_letter, \"C+\")\n         \
    \   } else if grade > grades_avg - 0.05 {\n                grades_letter = append(grades_letter,\
    \ \"C\")\n            } else if grade > grades_avg - 0.04 {\n                grades_letter\
    \ = append(grades_letter, \"C-\")\n            } else if grade > grades_avg -\
    \ 0.03 {\n                grades_letter = append(grades_letter, \"D+\")\n    \
    \        } else if grade > grades_avg - 0.02 {\n                grades_letter\
    \ = append(grades_letter, \"D\")\n            } else if grade > grades_avg - 0.01\
    \ {\n                grades_letter = append(grades_letter, \"D-\")\n         \
    \   } else if grade > grades_avg - 0.007 {\n                grades_letter = append(grades_letter,\
    \ \"E\")\n            } else {\n                grades_letter = append(grades_letter,\
    \ \"F\")\n            }\n        }\n    }\n    return grades_letter\n}\n", " \
    \   grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        grades_letter := []string{}\n        for _, grade := range grades {\n\
    \            if grade >= grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A+\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"A-\")\n            } else if grade >= grades_avg+0.7\
    \ && grade < grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"B+\")\n            } else if grade >= grades_avg+1.0 && grade < grades_avg+1.3\
    \ {\n                grades_letter = append(grades_letter, \"B\")\n          \
    \  } else if grade >= grades_avg+1.3 && grade < grades_avg+1.7 {\n           \
    \     grades_letter = append(grades_letter, \"B-\")\n            } else if grade\
    \ >= grades_avg+1.7 {\n                grades_letter = append(grades_letter, \"\
    C+\")\n            } else if grade < grades_avg+1.7 {\n                grades_letter\
    \ = append(grades_letter, \"C\")\n            } else if grade >= grades_avg+1.3\
    \ && grade < grades_avg+1.7 && grade < grades_avg+1.1 {\n                grades_letter\
    \ = append(grades_letter, \"C-\")\n            } else if grade >= grades_avg+1.7\
    \ && grade < grades_avg+1.1 {\n                grades_letter = append(grades_letter,\
    \ \"D+\")\n            } else if grade >= grades_avg+1.1 && grade < grades_avg+0.7\
    \ {\n                grades_letter = append(grades_letter, \"D\")\n          \
    \  } else if grade >= grades_avg+0.7 {\n                grades_letter = append(grades_letter,\
    \ \"D-\")\n            } else {\n                grades_letter = append(grades_letter,\
    \ \"E\")\n            }\n        }\n    }\n    return grades_letter\n}\n", " \
    \   var letters []string\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            letters = append(letters, \"B+\")\n        } else if grade\
    \ > 2.7 {\n            letters = append(letters, \"B\")\n        } else if grade\
    \ > 2.3 {\n            letters = append(letters, \"B-\")\n        } else if grade\
    \ > 2.0 {\n            letters = append(letters, \"C+\")\n        } else if grade\
    \ > 1.7 {\n            letters = append(letters, \"C\")\n        } else if grade\
    \ > 1.3 {\n            letters = append(letters, \"C-\")\n        } else if grade\
    \ > 1.0 {\n            letters = append(letters, \"D+\")\n        } else if grade\
    \ > 0.7 {\n            letters = append(letters, \"D\")\n        } else if grade\
    \ > 0.0 {\n            letters = append(letters, \"D-\")\n        } else {\n \
    \           letters = append(letters, \"E\")\n        }\n    }\n    return letters\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
