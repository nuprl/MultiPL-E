name: HumanEval_81_numerical_letter_grade
language: go_test.go
prompt: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"\
  fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the\
  \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
  // The only problem is, she has lost the code she used for grading.\n// She has\
  \ given you a list of GPAs for some students and you have to write \n// a function\
  \ that can output a list of letter grades using the following table:\n// GPA   \
  \    |    Letter grade\n// 4.0                A+\n// > 3.7                A \n//\
  \ > 3.3                A- \n// > 3.0                B+\n// > 2.7               \
  \ B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7         \
  \       C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7   \
  \             D \n// > 0.0                D-\n// 0.0                E\n// Example:\n\
  // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc\
  \ numerical_letter_grade(grades []float64) []string {\n"
tests: "func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
  \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
  \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
  \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
  E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
  \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
  \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    for i := 0; i < grades_len; i++ {\n        if grades[i] >=\
    \ 4.0 {\n            letter_grades[i] = \"A+\"\n        } else if grades[i] >=\
    \ 3.7 && grades[i] < 4.0 {\n            letter_grades[i] = \"A\"\n        } else\
    \ if grades[i] >= 3.3 && grades[i] < 3.7 {\n            letter_grades[i] = \"\
    A-\"\n        } else if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letter_grades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n        \
    \    letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 && grades[i]\
    \ < 2.7 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 && grades[i] < 2.3 {\n            letter_grades[i] = \"C+\"\n       \
    \ } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n         \
    \   letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ < 1.3 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.7 && grades[i] < 1.0 {\n            letter_grades[i] = \"D\"\n        }\
    \ else if grades[i] >= 0.0 {\n            letter_grades[i] = \"D-\"\n        }\
    \ else {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n\
    }\n", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    for\
    \ i := 1; i < gradesLen; i++ {\n        if grades[i] > grades[i-1] {\n       \
    \     letterGrades[i] = \"D+\"\n        } else if grades[i] < grades[i-1] {\n\
    \            letterGrades[i] = \"D-\"\n        } else if grades[i] == grades[i-1]\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i] > grades[i-1]\
    \ && grades[i] < grades[i+1] {\n            letterGrades[i] = \"B+\"\n       \
    \ } else if grades[i] > grades[i-1] && grades[i] != grades[i+1] {\n          \
    \  letterGrades[i] = \"B\"\n        } else if grades[i] < grades[i-1] && grades[i]\
    \ != grades[i+1] {\n            letterGrades[i] = \"B-\"\n        } else if grades[i]\
    \ > grades[i-1] && grades[i] == grades[i+1] {\n            letterGrades[i] = \"\
    A+\"\n        } else if grades[i] < grades[i-1] && grades[i] == grades[i+1] {\n\
    \            letterGrades[i] = \"A\"\n        } else if grades[i] == grades[i-1]\
    \ && grades[i] > grades[i+1] {\n            letterGrades[i] = \"A+\"\n       \
    \ } else if grades[i] == grades[i-1] && grades[i] < grades[i+1] {\n          \
    \  letterGrades[i] = \"A-\"\n        }\n    }\n    return letterGrades\n}\n",
  "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // The first letter grade is always A+\n    letter_grades[0] = \"A+\"\
    \n    \n    // The last letter grade is always E\n    letter_grades[grades_len-1]\
    \ = \"E\"\n    \n    // The rest of the letter grades are calculated using the\
    \ formula above\n    for i := 1; i < grades_len; i++ {\n        letter_grades[i]\
    \ = letter_grades[i-1] + \"-\" + letter_grades[i]\n    }\n    \n    return letter_grades\n\
    }\n", "    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := range grades {\n        gradesSorted[i] = grades[i]\n    }\n   \
    \ gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    grades", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    \n    //\
    \ Loop through each grade and add it to the letter grades array\n    for i :=\
    \ 0; i < gradesLen; i++ {\n        letterGrades[i] = letterGrade(grades[i])\n\
    \    }\n    \n    return letterGrades\n}\n", "    grades_sum := 0.0\n    grades_count\
    \ := 0\n    for _, grade := range grades {\n        grades_sum += grade\n    \
    \    grades_count++\n    }\n    grades_avg := grades_sum / float64(grades_count)\n\
    \    grades_diff := grades_avg - float64(grades[0])\n    grades_diff_abs := math.Abs(grades_diff)\n\
    \    grades_diff_sign := grades_diff_abs > 0.0 ? 1.0 : -1.0\n    grades_diff_abs\
    \ *= grades_diff_sign\n    grades_diff_abs /= 2.0\n    grades_diff_abs *= grades_count\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs *= grades_avg\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs *= grades_avg\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs /= float64(len(grades))\n    grades_diff_abs /= float64(len(grades))\n\
    \    ", "    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count == 0 {\n        return grades_letter\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_letter := []string{}\n   \
    \ for _, grade := range grades {\n        if grade >= grades_avg {\n         \
    \   grades_letter = append(grades_letter, \"A+\")\n        } else if grade < grades_avg\
    \ {\n            grades_letter = append(grades_letter, \"A-\")\n        } else\
    \ {\n            grades_letter = append(grades_letter, \"B+\")\n        }\n  \
    \  }\n    return grades_letter\n}\n", "    result := []string{}\n    for _, grade\
    \ := range grades {\n        if grade > 3.0 {\n            grade = grade - 3.0\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 3.0\n      \
    \  }\n        if grade < 2.0 {\n            grade = grade - 2.0\n        }\n \
    \       if grade < 1.7 {\n            grade = grade - 1.7\n        }\n       \
    \ if grade < 1.0 {\n            grade = grade - 1.0\n        }\n        if grade\
    \ < 0.7 {\n            grade = grade - 0.7\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade > 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade > 1.0 {\n        \
    \    grade = grade + 1.0\n        }\n        if grade > 1.7 {\n            grade\
    \ = grade + 1.7\n        }\n        if grade > 2.0 {\n            grade = grade\
    \ + 2.0\n        }\n        if grade > 2.3 {\n            grade = grade + 2.3\n\
    \        }\n        if grade > 2.7 {\n            grade = grade + 2.7\n      \
    \  }\n        if grade > 3.0 {\n            grade = grade + 3.0\n        }\n \
    \       if grade > 3.3 {\n            grade = grade + 3.3\n        }\n       \
    \ if grade > 3.7 {\n            grade = grade + 3.7\n        }\n        if grade\
    \ > 4.0 {\n            grade = grade + 4.0\n        }\n        if grade > 4.3\
    \ {\n            grade = grade + 4.3\n        }\n        if grade > 4.7 {\n  \
    \          grade = grade + 4.7\n        }\n        if grade > 5.0 {\n        \
    \    grade = grade + 5.0\n        }\n        if grade > 5.3 {\n            grade\
    \ = grade + 5.3\n        }\n        if grade > 5.7 {\n            grade = grade\
    \ + 5.7\n        }\n        if grade > 6.0 {\n            grade = grade + 6.0\n\
    \        }\n        if grade > 6.3 {\n            grade = grade + 6.3\n      \
    \  }\n        if grade > 6.7 {\n            grade = grade + 6.7\n        }\n \
    \       if grade > 7.0 {\n            grade = grade + 7.0\n        }\n       \
    \ if grade > 7.3 {\n            grade = grade + 7.3\n        }\n        if grade\
    \ > 7.7 {\n            grade = grade + 7.7\n        }\n        if ", "    grades\
    \ := append([]float64{}, grades...)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(", "    var result []string\n    var gpa, letter float64\n\
    \    for _, grade := range grades {\n        gpa = grade\n        letter = math.Pow(gpa,\
    \ 1.0/3.0)\n        if letter > 3.0 {\n            letter = 3.0\n        } else\
    \ if letter < 3.0 {\n            letter = 3.0\n        }\n        if letter <\
    \ 2.0 {\n            letter = 2.0\n        }\n        if letter > 2.0 {\n    \
    \        letter = 2.0\n        }\n        if letter < 1.0 {\n            letter\
    \ = 1.0\n        }\n        if letter > 1.0 {\n            letter = 1.0\n    \
    \    }\n        if letter < 0.7 {\n            letter = 0.7\n        }\n     \
    \   if letter > 0.7 {\n            letter = 0.7\n        }\n        if letter\
    \ < 0.3 {\n            letter = 0.3\n        }\n        if letter > 0.3 {\n  \
    \          letter = 0.3\n        }\n        if letter < 0.1 {\n            letter\
    \ = 0.1\n        }\n        if letter > 0.1 {\n            letter = 0.1\n    \
    \    }\n        if letter < 0.01 {\n            letter = 0.01\n        }\n   \
    \     if letter > 0.01 {\n            letter = 0.01\n        }\n        if letter\
    \ < 0.001 {\n            letter = 0.001\n        }\n        if letter > 0.001\
    \ {\n            letter = 0.001\n        }\n        if letter < 0.0001 {\n   \
    \         letter = 0.0001 \n        }\n        if letter > 0.0001 {\n        \
    \    letter = 0.0001 \n        }\n        if letter < 0.00001 {\n            letter\
    \ = 0.00001 \n        }\n        if letter > 0.00001 {\n            letter = 0.00001\
    \ \n        }\n        if letter < 0.0000001 {\n            letter = 0.0000001\
    \ \n        }\n        if letter > 0.0000001 {\n            letter = 0.0000001\
    \ \n        }\n        if letter < 0.000000001 {\n            letter = 0.000000001\
    \ \n        }\n        if letter > 0.000000001 {\n            letter = 0.000000001\
    \ \n        }\n        if letter < 0.0000000001 {\n            letter = 0.0000000001\
    \ \n        }\n        if letter > 0.0000000001 {\n            letter = 0.0000000001\
    \ \n        }\n        if letter < 0.00000000001 {\n            letter = 0.00000000001\
    \ \n        }\n        if letter > 0.00000000001 {\n            letter = 0.00000000001\
    \ \n        }\n        if letter < 0.000000000001 {\n            letter = 0.000000000001\
    \ \n        }\n        if letter > 0.000000000001 {\n            letter = 0.000000000001\
    \ \n        }\n        if letter < 0.0000000000001 {\n            letter = 0.0000000000001\
    \ \n        }\n        if letter > 0.0000000000001 {\n            letter = 0.0000000000001\
    \ \n        }\n        if letter < 0.000000000000001 {\n            letter = 0.000000000000001\
    \ \n        }\n        if ", "    gradesSorted := make([]float64, len(grades))\n\
    \    sort.Float64s(grades)\n    for i := range gradesSorted {\n        gradesSorted[i]\
    \ = grades[i]\n    }\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted\
    \ = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = \"\"\n    }\n\
    \    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = letterGrades[i]\
    \ + letterGrade(grades[i])\n    }\n    return letterGrades\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, grade", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    letterGrades[0]\
    \ = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n\
    \        } else if grades[i] >= 3.7 {\n            letterGrades[i] = \"A\"\n \
    \       } else if grades[i] >= 3.3 {\n            letterGrades[i] = \"A-\"\n \
    \       } else if grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n \
    \       } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n  \
    \      } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n  \
    \      } else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\n  \
    \      } else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n   \
    \     } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n   \
    \     } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n   \
    \     } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n    \
    \    } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n    \
    \    } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    for i := 0; i < grades_len; i++ {\n        if grades[i]\
    \ >= 4.0 {\n            letter_grades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 3.7 {\n            letter_grades[i] = \"A\"\n        } else if grades[i]\
    \ >= 3.3 {\n            letter_grades[i] = \"A-\"\n        } else if grades[i]\
    \ >= 3.0 {\n            letter_grades[i] = \"B+\"\n        } else if grades[i]\
    \ >= 2.7 {\n            letter_grades[i] = \"B\"\n        } else if grades[i]\
    \ >= 2.3 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 {\n            letter_grades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.7 {\n            letter_grades[i] = \"C\"\n        } else if grades[i]\
    \ >= 1.3 {\n            letter_grades[i] = \"C-\"\n        } else if grades[i]\
    \ >= 1.0 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.7 {\n            letter_grades[i] = \"D\"\n        } else if grades[i]\
    \ >= 0.0 {\n            letter_grades[i] = \"D-\"\n        } else {\n        \
    \    letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n}\n",
  "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n\
    \            letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 &&\
    \ grades[i] <= 4.0 {\n            letter_grades[i] = \"A\"\n        } else if\
    \ grades[i] >= 3.3 && grades[i] <= 3.7 {\n            letter_grades[i] = \"A-\"\
    \n        } else if grades[i] >= 3.0 && grades[i] <= 3.3 {\n            letter_grades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i] <= 3.0 {\n       \
    \     letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 && grades[i]\
    \ <= 2.7 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 && grades[i] <= 2.3 {\n            letter_grades[i] = \"C+\"\n      \
    \  } else if grades[i] >= 1.7 && grades[i] <= 2.0 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] <= 1.7 {\n        \
    \    letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ <= 1.3 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.7 && grades[i] <= 1.0 {\n            letter_grades[i] = \"D\"\n       \
    \ } else if grades[i] >= 0.0 {\n            letter_grades[i] = \"D-\"\n      \
    \  } else {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return\
    \ letter_grades\n}\n", "    result := []string{}\n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            grade = grade - 3.0\n        }\n  \
    \      if grade < 0.0 {\n            grade = grade + 3.0\n        }\n        if\
    \ grade < 2.0 {\n            grade = grade + 2.0\n        }\n        if grade\
    \ < 1.7 {\n            grade = grade + 1.7\n        }\n        if grade < 1.0\
    \ {\n            grade = grade + 1.0\n        }\n        if grade < 0.7 {\n  \
    \          grade = grade + 0.7\n        }\n        if grade < 0.3 {\n        \
    \    grade = grade + 0.3\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade < -3.0 {\n            grade = grade\
    \ + 3.0\n        }\n        if grade < -2.7 {\n            grade = grade + 2.7\n\
    \        }\n        if grade < -2.3 {\n            grade = grade + 2.3\n     \
    \   }\n        if grade < -2.0 {\n            grade = grade + 2.0\n        }\n\
    \        if grade < -1.7 {\n            grade = grade + 1.7\n        }\n     \
    \   if grade < -1.3 {\n            grade = grade + 1.3\n        }\n        if\
    \ grade < -1.0 {\n            grade = grade + 1.0\n        }\n        if grade\
    \ < -0.7 {\n            grade = grade + 0.7\n        }\n        if grade < -0.3\
    \ {\n            grade = grade + 0.3\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade < 3.0 {\n        \
    \    grade = grade + 3.0\n        }\n        if grade < 2.7 {\n            grade\
    \ = grade + 2.7\n        }\n        if grade < 2.3 {\n            grade = grade\
    \ + 2.3\n        }\n        if grade < 2.0 {\n            grade = grade + 2.0\n\
    \        }\n        if grade < 1.7 {\n            grade = grade + 1.7\n      \
    \  }\n        if grade < 1.3 {\n            grade = grade + 1.3\n        }\n \
    \       if grade < 1.0 {\n            grade = grade + 1.0\n        }\n       \
    \ if grade < 0.7 {\n            grade = grade + 0.7\n        }\n        if grade\
    \ < 0.3 {\n            grade = grade + 0.3\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade < 3.0 {\n  \
    \          grade = grade ", "    grades_sum := 0.0\n    grades_count := 0\n  \
    \  grades_letter := []string{}\n    for _, grade := range grades {\n        grades_sum\
    \ += grade\n        grades_count++\n    }\n    if grades_count > 0 {\n       \
    \ grades_avg := grades_sum / float64(grades_count)\n        grades_letter := []string{}\n\
    \        for _, grade := range grades {\n            if grade > grades_avg {\n\
    \                grades_letter = append(grades_letter, \"A+\")\n            }\
    \ else if grade > grades_avg - 0.3 {\n                grades_letter = append(grades_letter,\
    \ \"A-\")\n            } else if grade > grades_avg - 0.2 {\n                grades_letter\
    \ = append(grades_letter, \"B+\")\n            } else if grade > grades_avg -\
    \ 0.1 {\n                grades_letter = append(grades_letter, \"B\")\n      \
    \      } else if grade > grades_avg - 0.07 {\n                grades_letter =\
    \ append(grades_letter, \"B-\")\n            } else if grade > grades_avg - 0.06\
    \ {\n                grades_letter = append(grades_letter, \"C+\")\n         \
    \   } else if grade > grades_avg - 0.05 {\n                grades_letter = append(grades_letter,\
    \ \"C\")\n            } else if grade > grades_avg - 0.04 {\n                grades_letter\
    \ = append(grades_letter, \"C-\")\n            } else if grade > grades_avg -\
    \ 0.03 {\n                grades_letter = append(grades_letter, \"D+\")\n    \
    \        } else if grade > grades_avg - 0.02 {\n                grades_letter\
    \ = append(grades_letter, \"D\")\n            } else if grade > grades_avg - 0.01\
    \ {\n                grades_letter = append(grades_letter, \"D-\")\n         \
    \   } else if grade > grades_avg - 0.007 {\n                grades_letter = append(grades_letter,\
    \ \"E\")\n            } else {\n                grades_letter = append(grades_letter,\
    \ \"F\")\n            }\n        }\n    }\n    return grades_letter\n}\n", " \
    \   grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        grades_letter := []string{}\n        for _, grade := range grades {\n\
    \            if grade >= grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A+\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"A-\")\n            } else if grade >= grades_avg+0.7\
    \ && grade < grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"B+\")\n            } else if grade >= grades_avg+1.0 && grade < grades_avg+1.3\
    \ {\n                grades_letter = append(grades_letter, \"B\")\n          \
    \  } else if grade >= grades_avg+1.3 && grade < grades_avg+1.7 {\n           \
    \     grades_letter = append(grades_letter, \"B-\")\n            } else if grade\
    \ >= grades_avg+1.7 {\n                grades_letter = append(grades_letter, \"\
    C+\")\n            } else if grade < grades_avg+1.7 {\n                grades_letter\
    \ = append(grades_letter, \"C\")\n            } else if grade >= grades_avg+1.3\
    \ && grade < grades_avg+1.7 && grade < grades_avg+1.1 {\n                grades_letter\
    \ = append(grades_letter, \"C-\")\n            } else if grade >= grades_avg+1.7\
    \ && grade < grades_avg+1.1 {\n                grades_letter = append(grades_letter,\
    \ \"D+\")\n            } else if grade >= grades_avg+1.1 && grade < grades_avg+0.7\
    \ {\n                grades_letter = append(grades_letter, \"D\")\n          \
    \  } else if grade >= grades_avg+0.7 {\n                grades_letter = append(grades_letter,\
    \ \"D-\")\n            } else {\n                grades_letter = append(grades_letter,\
    \ \"E\")\n            }\n        }\n    }\n    return grades_letter\n}\n", " \
    \   var letters []string\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            letters = append(letters, \"B+\")\n        } else if grade\
    \ > 2.7 {\n            letters = append(letters, \"B\")\n        } else if grade\
    \ > 2.3 {\n            letters = append(letters, \"B-\")\n        } else if grade\
    \ > 2.0 {\n            letters = append(letters, \"C+\")\n        } else if grade\
    \ > 1.7 {\n            letters = append(letters, \"C\")\n        } else if grade\
    \ > 1.3 {\n            letters = append(letters, \"C-\")\n        } else if grade\
    \ > 1.0 {\n            letters = append(letters, \"D+\")\n        } else if grade\
    \ > 0.7 {\n            letters = append(letters, \"D\")\n        } else if grade\
    \ > 0.0 {\n            letters = append(letters, \"D-\")\n        } else {\n \
    \           letters = append(letters, \"E\")\n        }\n    }\n    return letters\n\
    }\n", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    for i\
    \ := 0; i < gradesLen; i++ {\n        letter := \"\"\n        switch {\n     \
    \   case grades[i] >= 4.0:\n            letter = \"A+\"\n        case grades[i]\
    \ >= 3.7:\n            letter = \"A\"\n        case grades[i] >= 3.3:\n      \
    \      letter = \"A-\"\n        case grades[i] >= 3.0:\n            letter = \"\
    B+\"\n        case grades[i] >= 2.7:\n            letter = \"B\"\n        case\
    \ grades[i] >= 2.3:\n            letter = \"B-\"\n        case grades[i] >= 2.0:\n\
    \            letter = \"C+\"\n        case grades[i] >= 1.7:\n            letter\
    \ = \"C\"\n        case grades[i] >= 1.3:\n            letter = \"C-\"\n     \
    \   case grades[i] >= 1.0:\n            letter = \"D+\"\n        case grades[i]\
    \ >= 0.7:\n            letter = \"D\"\n        case grades[i] >= 0.0:\n      \
    \      letter = \"D-\"\n        default:\n            letter = \"E\"\n       \
    \ }\n        letterGrades[i] = letter\n    }\n    return letterGrades\n}\n", " \
    \   gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSor", "    grades := append([]float64{},\
    \ grades...)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(",
  "    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n \
    \   for i := range gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n", "    gradesSorted :=\
    \ make([]float64, len(grades))\n    sort.Float64s(grades)\n    gradesSorted =\
    \ grades\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n", "    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    // The first letter grade is always A+\n    letter_grades[0]\
    \ = \"A+\"\n    \n    // The last letter grade is always D-\n    letter_grades[grades_len-1]\
    \ = \"D-\"\n    \n    // The rest of the letter grades are calculated using the\
    \ formula\n    // letter_grade = GPA - letter_grade\n    for i := 1; i < grades_len;\
    \ i++ {\n        letter_grades[i] = fmt.Sprintf(\"%+.2f\", grades[i] - letter_grades[i-1])\n\
    \    }\n    \n    return letter_grades\n}\n", "    grades_sum := 0.0\n    grades_count\
    \ := 0\n    grades_letter := []string{}\n    for _, grade := range grades {\n\
    \        grades_sum += grade\n        grades_count++\n    }\n    \n    if grades_count\
    \ > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n        \n\
    \        if grades_avg > 3.0 {\n            grades_letter = append(grades_letter,\
    \ \"D+\")\n        } else if grades_avg > 2.0 {\n            grades_letter = append(grades_letter,\
    \ \"D-\")\n        } else if grades_avg > 1.0 {\n            grades_letter = append(grades_letter,\
    \ \"C+\")\n        } else if grades_avg > 0.7 { \n            grades_letter =\
    \ append(grades_letter, \"C\")\n        } else if grades_avg > 0.0 {\n       \
    \     grades_letter = append(grades_letter, \"B+\")\n        } else if grades_avg\
    \ > 0.3 { \n            grades_letter = append(grades_letter, \"B\")\n       \
    \ } else if grades_avg > 0.2 { \n            grades_letter = append(grades_letter,\
    \ \"A-\")\n        } else if grades_avg > 0.1 { \n            grades_letter =\
    \ append(grades_letter, \"A\")\n        } else if grades_avg > 0.0 {\n       \
    \     grades_letter = append(grades_letter, \"A+\")\n        } else {\n      \
    \      grades_letter = append(grades_letter, \"E\")\n        }\n    }\n    return\
    \ grades_letter\n}\n", "    grades_sum := 0.0\n    grades_count := 0\n    grades_letter\
    \ := []string{}\n    for _, grade := range grades {\n        grades_sum += grade\n\
    \        grades_count++\n    }\n    if grades_count > 0 {\n        grades_avg\
    \ := grades_sum / float64(grades_count)\n        for _, grade := range grades\
    \ {\n            if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A+\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"A-\")\n            } else if grade == grades_avg {\n\
    \                grades_letter = append(grades_letter, \"A\")\n            } else\
    \ if grade > grades_avg+0.7 && grade < grades_avg+1.0 {\n                grades_letter\
    \ = append(grades_letter, \"B+\")\n            } else if grade > grades_avg+1.0\
    \ {\n                grades_letter = append(grades_letter, \"B\")\n          \
    \  } else if grade < grades_avg+0.7 && grade > grades_avg+1.0 {\n            \
    \    grades_letter = append(grades_letter, \"B-\")\n            } else if grade\
    \ > grades_avg+0.7 && grade < grades_avg+1.0 {\n                grades_letter\
    \ = append(grades_letter, \"C+\")\n            } else if grade > grades_avg+1.0\
    \ {\n                grades_letter = append(grades_letter, \"C\")\n          \
    \  } else if grade < grades_avg+0.7 && grade > grades_avg+1.0 {\n            \
    \    grades_letter = append(grades_letter, \"C-\")\n            } else if grade\
    \ > grades_avg+0.7 && grade < grades_avg+1.0 {\n                grades_letter\
    \ = append(grades_letter, \"D+\")\n            } else if grade > grades_avg+1.0\
    \ {\n                grades_letter = append(grades_letter, \"D\")\n          \
    \  } else if grade < grades_avg+0.7 && grade > grades_avg+1.0 {\n            \
    \    grades_letter = append(grades_letter, \"D-\")\n            } else if grade\
    \ > grades_avg+0.7 && grade < grades_avg+1.0 {\n                grades_letter\
    \ = append(grades_letter, \"E\")\n            }\n        }\n    }\n    return\
    \ grades_letter\n}\n", "    var grades_string []string\n    var gpas []float64\n\
    \    var letter string\n    var i int\n    var j int\n    for i = 0; i < len(grades);\
    \ i++ {\n        gpas = append(gpas, grades[i])\n    }\n    for i = 0; i < len(gpas);\
    \ i++ {\n        letter = \"\"\n        for j = 0; j < len(gpas)-1; j++ {\n  \
    \          if gpas[j] > gpas[j+1] {\n                letter = letter + \"+\"\n\
    \            } else {\n                letter = letter + \"-\"\n            }\n\
    \        }\n        grades_string = append(grades_string, letter)\n    }\n   \
    \ return grades_string\n}\n", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n       \
    \ if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else\
    \ if grades[i] >= 3.7 {\n            letterGrades[i] = \"A\"\n        } else if\
    \ grades[i] >= 3.3 {\n            letterGrades[i] = \"A-\"\n        } else if\
    \ grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if\
    \ grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i]\
    \ >= 2.3 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.7 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >=\
    \ 1.0 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] >=\
    \ 0.7 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0\
    \ {\n            letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    grades_len :=\
    \ len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    // The\
    \ first letter grade is A+\n    letter_grades[0] = \"A+\"\n    \n    // The last\
    \ letter grade is D-\n    letter_grades[grades_len-1] = \"D-\"\n    \n    // The\
    \ middle letter grades are A, B, C and D\n    for i := 0; i < grades_len/2; i++\
    \ {\n        letter_grades[i] = \"A+\"\n        if i < grades_len/2 {\n      \
    \      letter_grades[i+1] = \"A\"\n        }\n        if i < grades_len/2 {\n\
    \            letter_grades[i+2] = \"A-\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+3] = \"B+\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+4] = \"B\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+5] = \"B-\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+6] = \"C+\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+7] = \"C\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+8] = \"C-\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+9] = \"D+\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+10] = \"D\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+11] = \"D-\"\n        }\n        if i < grades_len/2\
    \ {\n            letter_grades[i+12] = \"E\"\n        }\n    }\n    \n    return\
    \ letter_grades\n}\n", "    grades_sum := 0.0\n    grades_count := 0\n    grades_letter\
    \ := []string{}\n    for _, grade := range grades {\n        grades_sum += grade\n\
    \        grades_count++\n    }\n    if grades_count > 0 {\n        grades_avg\
    \ := grades_sum / float64(grades_count)\n        grades_letter := []string{}\n\
    \        for _, grade := range grades {\n            if grade >= grades_avg {\n\
    \                grades_letter = append(grades_letter, \"A+\")\n            }\
    \ else {\n                grades_letter = append(grades_letter, \"A\")\n     \
    \       }\n            if grade > grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"A-\")\n            } else {\n                grades_letter\
    \ = append(grades_letter, \"B+\")\n            }\n            if grade > grades_avg\
    \ {\n                grades_letter = append(grades_letter, \"B\")\n          \
    \  } else {\n                grades_letter = append(grades_letter, \"B-\")\n \
    \           }\n            if grade > grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"C+\")\n            } else {\n                grades_letter\
    \ = append(grades_letter, \"C\")\n            }\n            if grade > grades_avg\
    \ {\n                grades_letter = append(grades_letter, \"C-\")\n         \
    \   } else {\n                grades_letter = append(grades_letter, \"D+\")\n\
    \            }\n            if grade > grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"D\")\n            } else {\n                grades_letter\
    \ = append(grades_letter, \"D-\")\n            }\n            if grade > grades_avg\
    \ {\n                grades_letter = append(grades_letter, \"E\")\n          \
    \  }\n        }\n    }\n    return grades_letter\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    sort.Float64s(grades)\n    for i := 0; i < len(grades); i++\
    \ {\n        gradesSorted[i] = grades[i]\n    }\n    gradesSorted := gradesSorted[:len(gradesSorted)-1]\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(grade", "    grades_len := len(grades)\n    letter_grades\
    \ := make([]string, grades_len)\n    \n    for i := 0; i < grades_len; i++ {\n\
    \        if grades[i] >= 3.0 {\n            letter_grades[i] = \"A+\"\n      \
    \  } else if grades[i] >= 2.7 {\n            letter_grades[i] = \"B+\"\n     \
    \   } else if grades[i] >= 2.3 {\n            letter_grades[i] = \"B\"\n     \
    \   } else if grades[i] >= 1.7 {\n            letter_grades[i] = \"C+\"\n    \
    \    } else if grades[i] >= 1.3 {\n            letter_grades[i] = \"C\"\n    \
    \    } else if grades[i] >= 1.0 {\n            letter_grades[i] = \"D+\"\n   \
    \     } else if grades[i] >= 0.7 {\n            letter_grades[i] = \"D\"\n   \
    \     } else if grades[i] >= 0.0 {\n            letter_grades[i] = \"D-\"\n  \
    \      } else {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return\
    \ letter_grades\n}\n", "    gradesSorted := append([]float64{}, grades...)\n \
    \   sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, grades", "    grades_sum := 0.0\n    grades_count\
    \ := 0\n    for _, grade := range grades {\n        grades_sum += grade\n    \
    \    grades_count++\n    }\n    \n    grades_avg := grades_sum / float64(grades_count)\n\
    \    \n    grades_diff := grades_avg - float64(grades[0])\n    \n    grades_diff_sum\
    \ := 0.0\n    for _, grade := range grades[1:] {\n        grades_diff_sum += grade\
    \ - grades[0]\n    }\n    \n    grades_diff_avg := grades_diff_sum / float64(len(grades)-1)\n\
    \    \n    grades_diff_diff_sum := 0.0\n    for _, grade := range grades[1:] {\n\
    \        grades_diff_diff_sum += grade - grades_avg\n    }\n    \n    grades_diff_diff_avg\
    \ := grades_diff_diff_sum / float64(len(grades)-1)\n    \n    grades_diff_diff_diff_sum\
    \ := 0.0\n    for _, grade := range grades[1:] {\n        grades_diff_diff_diff_sum\
    \ += grade - grades_diff_avg\n    }\n    \n    grades_diff_diff_diff_avg := grades_diff_diff_diff_sum\
    \ / float64(len(grades)-1)\n    \n    grades_diff_diff_diff_diff_sum := 0.0\n\
    \    for _, grade := range grades[1:] {\n        grades_diff_diff_diff_diff_sum\
    \ += grade - grades_diff_diff_avg\n    }\n    \n    grades_diff_diff_diff_diff_avg\
    \ := grades_diff_diff_diff_diff_sum / float64(len(grades)-1)\n    \n    grades_diff_diff_diff_diff_diff_sum\
    \ := 0.0\n    for _, grade := range grades[1:] {\n        grades_diff_diff_diff_diff_diff_sum\
    \ += grade - grades_diff_diff_diff_diff_avg\n    }\n    \n    grades_diff_diff_diff_diff_diff_avg\
    \ := grades_diff_diff_diff_diff_diff_sum / float64(len(grades)-1)\n    \n    grades_diff_diff_diff_diff_diff_diff_sum\
    \ := 0.0\n    for _, grade := range grades[1:] {\n        grades_diff_diff_diff_diff_diff_diff_sum\
    \ += grade - grades_diff_diff_diff_diff_diff_avg\n    }\n    \n    grades_diff_diff_diff_diff_diff_diff_avg\
    \ := grades_diff_diff_diff_diff_diff_diff_diff_sum / float64(len(grades)-1)\n\
    \    \n    grades_diff_diff_diff_diff_diff_diff_diff_sum := 0.0\n    for _, grade\
    \ := range grades[1:] {\n        grades_diff_diff_diff_diff_diff_diff_diff_sum\
    \ += grade - grades_diff_diff_diff_diff_", "    grades_len := len(grades)\n  \
    \  letter_grades := make([]string, grades_len)\n    for i := 0; i < grades_len;\
    \ i++ {\n        if grades[i] >= 4.0 {\n            letter_grades[i] = \"A+\"\n\
    \        } else if grades[i] >= 3.7 {\n            letter_grades[i] = \"A\"\n\
    \        } else if grades[i] >= 3.3 {\n            letter_grades[i] = \"A-\"\n\
    \        } else if grades[i] >= 3.0 {\n            letter_grades[i] = \"B+\"\n\
    \        } else if grades[i] >= 2.7 {\n            letter_grades[i] = \"B\"\n\
    \        } else if grades[i] >= 2.3 {\n            letter_grades[i] = \"B-\"\n\
    \        } else if grades[i] >= 2.0 {\n            letter_grades[i] = \"C+\"\n\
    \        } else if grades[i] >= 1.7 {\n            letter_grades[i] = \"C\"\n\
    \        } else if grades[i] >= 1.3 {\n            letter_grades[i] = \"C-\"\n\
    \        } else if grades[i] >= 1.0 {\n            letter_grades[i] = \"D+\"\n\
    \        } else if grades[i] >= 0.7 {\n            letter_grades[i] = \"D\"\n\
    \        } else if grades[i] >= 0.0 {\n            letter_grades[i] = \"D-\"\n\
    \        } else {\n            letter_grades[i] = \"E\"\n        }\n    }\n  \
    \  return letter_grades\n}\n", "    result := make([]string, len(grades))\n  \
    \  \n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n \
    \           result[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n       \
    \     result[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n            result[i]\
    \ = \"A-\"\n        } else if grades[i] >= 3.0 {\n            result[i] = \"B+\"\
    \n        } else if grades[i] >= 2.7 {\n            result[i] = \"B\"\n      \
    \  } else if grades[i] >= 2.3 {\n            result[i] = \"B-\"\n        } else\
    \ if grades[i] >= 2.0 {\n            result[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.7 {\n            result[i] = \"C\"\n        } else if grades[i] >= 1.3\
    \ {\n            result[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n  \
    \          result[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n        \
    \    result[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n            result[i]\
    \ = \"D-\"\n        } else {\n            result[i] = \"E\"\n        }\n    }\n\
    \    \n    return result\n}\n", "    grades_len := len(grades)\n    grades_sum\
    \ := 0.0\n    grades_avg := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for i := 0; i < grades_len; i++ {\n        grades_sum += grades[i]\n    \
    \    grades_count++\n    }\n    grades_avg = grades_sum / float64(grades_count)\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] >= grades_avg {\n\
    \            grades_letter = append(grades_letter, \"A+\")\n        } else if\
    \ grades[i] < grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"A-\")\n        } else if grades[i] == grades_avg {\n            grades_letter\
    \ = append(grades_letter, \"A\")\n        }\n    }\n    for i := 0; i < grades_len;\
    \ i++ {\n        if grades[i] >= grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"B+\")\n        } else if grades[i] < grades_avg {\n            grades_letter\
    \ = append(grades_letter, \"B-\")\n        } else if grades[i] == grades_avg {\n\
    \            grades_letter = append(grades_letter, \"B\")\n        }\n    }\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] >= grades_avg {\n\
    \            grades_letter = append(grades_letter, \"C+\")\n        } else if\
    \ grades[i] < grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"C-\")\n        } else if grades[i] == grades_avg {\n            grades_letter\
    \ = append(grades_letter, \"C\")\n        }\n    }\n    for i := 0; i < grades_len;\
    \ i++ {\n        if grades[i] >= grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"D+\")\n        } else if grades[i] < grades_avg {\n            grades_letter\
    \ = append(grades_letter, \"D-\")\n        } else if grades[i] == grades_avg {\n\
    \            grades_letter = append(grades_letter, \"D\")\n        }\n    }\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] >= grades_avg {\n\
    \            grades_letter = append(grades_letter, \"E\")\n        } else if grades[i]\
    \ < grades_avg {\n            grades_letter = append(grades_letter, \"E\")\n \
    \       }\n    }\n    return grades_letter\n}\n", "    var grades_string []string\n\
    \    for _, grade := range grades {\n        if grade > 3.0 {\n            grades_string\
    \ = append(grades_string, \"B+\")\n        } else if grade > 2.7 {\n         \
    \   grades_string = append(grades_string, \"B\")\n        } else if grade > 2.3\
    \ {\n            grades_string = append(grades_string, \"B-\")\n        } else\
    \ if grade > 2.0 {\n            grades_string = append(grades_string, \"C+\")\n\
    \        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    grades_sum :=\
    \ 0.0\n    grades_count := 0\n    grades_letter := []string{}\n    for _, grade\
    \ := range grades {\n        grades_sum += grade\n        grades_count++\n   \
    \ }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        grades_letter := []string{}\n        for _, grade := range grades {\n\
    \            if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A+\")\n            } else if grade > grades_avg - 0.3 {\n                grades_letter\
    \ = append(grades_letter, \"A-\")\n            } else if grade > grades_avg -\
    \ 0.1 {\n                grades_letter = append(grades_letter, \"B+\")\n     \
    \       } else if grade > grades_avg - 0.05 {\n                grades_letter =\
    \ append(grades_letter, \"B\")\n            } else if grade > grades_avg - 0.01\
    \ {\n                grades_letter = append(grades_letter, \"B-\")\n         \
    \   } else if grade > grades_avg - 0.005 {\n                grades_letter = append(grades_letter,\
    \ \"C+\")\n            } else if grade > grades_avg - 0.001 {\n              \
    \  grades_letter = append(grades_letter, \"C\")\n            } else if grade >\
    \ grades_avg - 0.0005 {\n                grades_letter = append(grades_letter,\
    \ \"C-\")\n            } else if grade > grades_avg - 0.0001 {\n             \
    \   grades_letter = append(grades_letter, \"D+\")\n            } else if grade\
    \ > grades_avg - 0.00005 {\n                grades_letter = append(grades_letter,\
    \ \"D\")\n            } else if grade > grades_avg - 0.00001 {\n             \
    \   grades_letter = append(grades_letter, \"D-\")\n            } else {\n    \
    \            grades_letter = append(grades_letter, \"E\")\n            }\n   \
    \     }\n    }\n    return grades_letter\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        letter_grades[i] = \"\"\n\
    \    }\n    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0\
    \ {\n            letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7\
    \ {\n            letter_grades[i] = \"A\"\n        } else if grades[i] >= 3.3\
    \ {\n            letter_grades[i] = \"A-\"\n        } else if grades[i] >= 3.0\
    \ {\n            letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.7\
    \ {\n            letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3\
    \ {\n            letter_grades[i] = \"B-\"\n        } else if grades[i] >= 2.0\
    \ {\n            letter_grades[i] = \"C+\"\n        } else if grades[i] >= 1.7\
    \ {\n            letter_grades[i] = \"C\"\n        } else if grades[i] >= 1.3\
    \ {\n            letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0\
    \ {\n            letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7\
    \ {\n            letter_grades[i] = \"D\"\n        } else if grades[i] >= 0.0\
    \ {\n            letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    \n    return letter_grades\n}\n", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    for i :=\
    \ 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 1.7 {\n            letterGrades[i] =\
    \ \"C+\"\n        } else if grades[i] >= 1.3 {\n            letterGrades[i] =\
    \ \"C\"\n        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"\
    D+\"\n        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\
    \n        } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n\
    \        } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n   \
    \ return letterGrades\n}\n", "    grades_len := len(grades)\n    letter_grades\
    \ := make([]string, grades_len)\n    \n    // Loop through each grade and determine\
    \ letter grade\n    for i := 0; i < grades_len; i++ {\n        grade := grades[i]\n\
    \        if grade > 3.0 {\n            letter_grades[i] = \"B+\"\n        } else\
    \ if grade > 2.7 {\n            letter_grades[i] = \"B\"\n        } else if grade\
    \ > 2.3 {\n            letter_grades[i] = \"B-\"\n        } else if grade > 1.7\
    \ && grade < 2.3 {\n            letter_grades[i] = \"C+\"\n        } else if grade\
    \ > 1.3 && grade < 1.7 {\n            letter_grades[i] = \"C\"\n        } else\
    \ if grade > 1.0 {\n            letter_grades[i] = \"C-\"\n        } else if grade\
    \ > 0.7 {\n            letter_grades[i] = \"D+\"\n        } else if grade > 0.3\
    \ {\n            letter_grades[i] = \"D\"\n        } else if grade > 0.0 {\n \
    \           letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n", "    result := make([]string,\
    \ len(grades))\n    for i := range grades {\n        if grades[i] < 3.0 {\n  \
    \          result[i] = \"E\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.7 {\n            result[i] = \"D+\"\n        } else if grades[i] >= 3.7\
    \ && grades[i] < 4.0 {\n            result[i] = \"D-\"\n        } else if grades[i]\
    \ >= 4.0 && grades[i] < 4.3 {\n            result[i] = \"C+\"\n        } else\
    \ if grades[i] >= 4.3 && grades[i] < 4.6 {\n            result[i] = \"C\"\n  \
    \      } else if grades[i] >= 4.6 && grades[i] < 4.9 {\n            result[i]\
    \ = \"B-\"\n        } else if grades[i] >= 4.9 && grades[i] < 5.2 {\n        \
    \    result[i] = \"B\"\n        } else if grades[i] >= 5.2 && grades[i] < 5.5\
    \ {\n            result[i] = \"A-\"\n        } else if grades[i] >= 5.5 && grades[i]\
    \ < 5.8 {\n            result[i] = \"A\"\n        } else if grades[i] >= 5.8 &&\
    \ grades[i] < 6.1 {\n            result[i] = \"A+\"\n        } else if grades[i]\
    \ >= 6.1 && grades[i] < 6.4 {\n            result[i] = \"B+\"\n        } else\
    \ if grades[i] >= 6.4 && grades[i] < 6.7 {\n            result[i] = \"B\"\n  \
    \      } else if grades[i] >= 6.7 && grades[i] < 7 {\n            result[i] =\
    \ \"C+\"\n        } else if grades[i] >= 7 && grades[i] < 7.3 {\n            result[i]\
    \ = \"C\"\n        } else if grades[i] >= 7.3 && grades[i] < 7.6 {\n         \
    \   result[i] = \"C-\"\n        } else if grades[i] >= 7.6 && grades[i] < 7.9\
    \ {\n            result[i] = \"C\"\n        } else if grades[i] >= 7.9 && grades[i]\
    \ < 8.2 {\n            result[i] = \"D+\"\n        } else if grades[i] >= 8.2\
    \ && grades[i] < 8.5 {\n            result[i] = \"D\"\n        } else if grades[i]\
    \ >= 8.5 && grades[i] < 8.8 {\n            result[i] = \"D-\"\n        } else\
    \ if grades[i] >= 8.8 && grades[i] < 9.1 {\n            result[i] = \"D\"\n  \
    \      } else if grades[i] >= 9.1 && grades[i] < 9.4 {\n            result[i]\
    \ = \"D+\"\n        } else if grades[i] >= 9.4 && grades[i] < 9.7 {\n        \
    \    result[i] = \"D+\"\n        } else if grades[i] >= 9.7 && grades[i] < 10\
    \ {\n            result[i] = \"D+\"\n        } else {\n            result[i] =\
    \ \"D+\"\n        }\n    }\n    return result\n}", "    grades_len := len(grades)\n\
    \    letter_grades := make([]string, grades_len)\n    for i := 0; i < grades_len;\
    \ i++ {\n        if grades[i] >= 4.0 {\n            letter_grades[i] = \"A+\"\n\
    \        } else if grades[i] >= 3.7 {\n            letter_grades[i] = \"A\"\n\
    \        } else if grades[i] >= 3.3 {\n            letter_grades[i] = \"A-\"\n\
    \        } else if grades[i] >= 3.0 {\n            letter_grades[i] = \"B+\"\n\
    \        } else if grades[i] >= 2.7 {\n            letter_grades[i] = \"B\"\n\
    \        } else if grades[i] >= 2.3 {\n            letter_grades[i] = \"B-\"\n\
    \        } else if grades[i] >= 2.0 {\n            letter_grades[i] = \"C+\"\n\
    \        } else if grades[i] >= 1.7 {\n            letter_grades[i] = \"C\"\n\
    \        } else if grades[i] >= 1.3 {\n            letter_grades[i] = \"C-\"\n\
    \        } else if grades[i] >= 1.0 {\n            letter_grades[i] = \"D+\"\n\
    \        } else if grades[i] >= 0.7 {\n            letter_grades[i] = \"D\"\n\
    \        } else if grades[i] >= 0.0 {\n            letter_grades[i] = \"D-\"\n\
    \        } else {\n            letter_grades[i] = \"E\"\n        }\n    }\n  \
    \  return letter_grades\n}\n", "    grades_sum := 0.0\n    grades_count := 0\n\
    \    grades_letter := []string{}\n    for _, grade := range grades {\n       \
    \ grades_sum += grade\n        grades_count++\n    }\n    if grades_count > 0\
    \ {\n        grades_avg := grades_sum / float64(grades_count)\n        grades_letter\
    \ := []string{}\n        for _, grade := range grades {\n            if grade\
    \ >= grades_avg {\n                grades_letter = append(grades_letter, \"A+\"\
    )\n            } else if grade < grades_avg {\n                grades_letter =\
    \ append(grades_letter, \"A-\")\n            } else if grade > grades_avg {\n\
    \                grades_letter = append(grades_letter, \"B+\")\n            }\
    \ else if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"B\")\n            } else if grade > grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"B-\")\n            } else if grade < grades_avg {\n\
    \                grades_letter = append(grades_letter, \"C+\")\n            }\
    \ else if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"C\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"C-\")\n            } else if grade > grades_avg {\n\
    \                grades_letter = append(grades_letter, \"D+\")\n            }\
    \ else if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"D\")\n            } else if grade > grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"D-\")\n            } else {\n                grades_letter\
    \ = append(grades_letter, \"E\")\n            }\n        }\n    }\n    return\
    \ grades_letter\n}\n", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i]\
    \ >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"A\"\n        }\
    \ else if grades[i] >= 3.3 && grades[i] < 3.7 {\n            letterGrades[i] =\
    \ \"A-\"\n        } else if grades[i] >= 3.0 && grades[i] < 3.3 {\n          \
    \  letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i] <\
    \ 3.0 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3\
    \ && grades[i] < 2.7 {\n            letterGrades[i] = \"B-\"\n        } else if\
    \ grades[i] >= 2.0 && grades[i] < 2.3 {\n            letterGrades[i] = \"C+\"\n\
    \        } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n         \
    \   letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ < 1.3 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] >=\
    \ 0.7 && grades[i] < 1.0 {\n            letterGrades[i] = \"D\"\n        } else\
    \ if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n        } else\
    \ {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    \n \
    \   for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n         \
    \   letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.7 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 4.0 && grades[i] < 4.3 {\n            letterGrades[i] = \"B+\"\
    \n        } else if grades[i] >= 4.3 && grades[i] < 4.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 4.7 && grades[i] < 5.0 {\n         \
    \   letterGrades[i] = \"B-\"\n        } else if grades[i] >= 5.0 && grades[i]\
    \ < 5.3 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >=\
    \ 5.3 && grades[i] < 5.7 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 5.7 && grades[i] < 6.0 {\n            letterGrades[i] = \"C-\"\
    \n        } else if grades[i] >= 6.0 && grades[i] < 6.3 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 6.3 && grades[i] < 6.7 {\n        \
    \    letterGrades[i] = \"D\"\n        } else if grades[i] >= 6.7 && grades[i]\
    \ < 7.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n          \
    \  letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n}\n", " \
    \   gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(grade", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSor",
  "    var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade >= 3.0 {\n            grades_string = append(grades_string, \"A+\")\n\
    \        } else if grade >= 2.7 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade >= 1.7 && grade < 2.3 {\n            grades_string\
    \ = append(grades_string, \"C+\")\n        } else if grade >= 1.3 && grade < 1.7\
    \ {\n            grades_string = append(grades_string, \"C\")\n        } else\
    \ if grade >= 1.0 {\n            grades_string = append(grades_string, \"D+\"\
    )\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    var result []string\n\
    \    for _, grade := range grades {\n        if grade > 3.0 {\n            grade\
    \ = grade - 3.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 3.0\n        }\n        if grade < 2.0 {\n            grade = grade + 2.0\n\
    \        }\n        if grade < 1.7 {\n            grade = grade + 1.7\n      \
    \  }\n        if grade < 1.0 {\n            grade = grade + 1.0\n        }\n \
    \       if grade < 0.7 {\n            grade = grade + 0.7\n        }\n       \
    \ if grade < 0.3 {\n            grade = grade + 0.3\n        }\n        if grade\
    \ < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade < -3.0\
    \ {\n            grade = grade - 3.0\n        }\n        if grade < -2.0 {\n \
    \           grade = grade - 2.0\n        }\n        if grade < -1.7 {\n      \
    \      grade = grade - 1.7\n        }\n        if grade < -1.0 {\n           \
    \ grade = grade - 1.0\n        }\n        if grade < -0.7 {\n            grade\
    \ = grade - 0.7\n        }\n        if grade < -0.3 {\n            grade = grade\
    \ - 0.3\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade < 3.0 {\n            grade = grade + 3.0\n      \
    \  }\n        if grade < 2.0 {\n            grade = grade + 2.0\n        }\n \
    \       if grade < 1.7 {\n            grade = grade + 1.7\n        }\n       \
    \ if grade < 1.0 {\n            grade = grade + 1.0\n        }\n        if grade\
    \ < 0.7 {\n            grade = grade + 0.7\n        }\n        if grade < 0.3\
    \ {\n            grade = grade + 0.3\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade < 3.0 {\n        \
    \    grade = grade + 3.0\n        }\n        if grade < 2.0 {\n            grade\
    \ = grade + 2.0\n        }\n        if grade < 1.7 {\n            grade = grade\
    \ + 1.7\n        }\n        if grade < 1.0 {\n            grade = grade + 1.0\n\
    \        }\n        if grade < 0.7 {\n            grade = grade + 0.7\n      \
    \  }\n        if grade < 0.3 {\n            grade = grade + 0.3\n        }\n \
    \       if grade < 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade ", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7\
    \ {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.3\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 1.7 &&\
    \ grades[i] < 3.0 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"C\"\n        }\
    \ else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n        }\
    \ else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n        } else\
    \ if grades[i] < 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    for i\
    \ := 0; i < gradesLen; i++ {\n        letterGrades[i] = \"-\"\n    }\n    for\
    \ i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 1.7 {\n            letterGrades[i] =\
    \ \"C+\"\n        } else if grades[i] >= 1.3 {\n            letterGrades[i] =\
    \ \"C\"\n        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"\
    D+\"\n        } else if grades[i] >= 0.3 {\n            letterGrades[i] = \"D\"\
    \n        } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n\
    \        } else if grades[i] < 0.0 {\n            letterGrades[i] = \"E\"\n  \
    \      }\n    }\n    return letterGrades\n}\n", "    grades_len := len(grades)\n\
    \    letter_grades := make([]string, grades_len)\n    for i := 0; i < grades_len;\
    \ i++ {\n        if grades[i] < 3.0 {\n            letter_grades[i] = \"E\"\n\
    \        } else if grades[i] < 3.3 {\n            letter_grades[i] = \"D-\"\n\
    \        } else if grades[i] < 3.7 {\n            letter_grades[i] = \"C+\"\n\
    \        } else if grades[i] < 4.0 {\n            letter_grades[i] = \"B-\"\n\
    \        } else if grades[i] < 4.3 {\n            letter_grades[i] = \"B+\"\n\
    \        } else if grades[i] < 4.7 {\n            letter_grades[i] = \"B\"\n \
    \       } else if grades[i] < 5.0 {\n            letter_grades[i] = \"A-\"\n \
    \       } else if grades[i] < 5.3 {\n            letter_grades[i] = \"A+\"\n \
    \       } else if grades[i] < 5.7 {\n            letter_grades[i] = \"A\"\n  \
    \      } else if grades[i] < 6.0 {\n            letter_grades[i] = \"A+\"\n  \
    \      } else if grades[i] < 6.3 {\n            letter_grades[i] = \"A\"\n   \
    \     } else if grades[i] < 6.7 {\n            letter_grades[i] = \"A+\"\n   \
    \     } else if grades[i] < 7.0 {\n            letter_grades[i] = \"A\"\n    \
    \    } else if grades[i] < 7.3 {\n            letter_grades[i] = \"A+\"\n    \
    \    } else if grades[i] < 7.7 {\n            letter_grades[i] = \"A\"\n     \
    \   } else if grades[i] < 8.0 {\n            letter_grades[i] = \"A+\"\n     \
    \   } else if grades[i] < 8.3 {\n            letter_grades[i] = \"A\"\n      \
    \  } else if grades[i] < 8.7 {\n            letter_grades[i] = \"A+\"\n      \
    \  } else if grades[i] < 9.0 {\n            letter_grades[i] = \"A\"\n       \
    \ } else if grades[i] < 9.3 {\n            letter_grades[i] = \"A+\"\n       \
    \ } else if grades[i] < 9.7 {\n            letter_grades[i] = \"A\"\n        }\
    \ else if grades[i] < 10.0 {\n            letter_grades[i] = \"A+\"\n        }\
    \ else if grades[i] < 10.3 {\n            letter_grades[i] = \"A\"\n        }\
    \ else if grades[i] < 10.7 {\n            letter_grades[i] = \"A+\"\n        }\
    \ else if grades[i] < 11.0 {\n            letter_grades[i] = \"A\"\n        }\
    \ else if grades[i] < 11.3 {\n            letter_grades[i] = \"A+\"\n        }\
    \ else if grades[i] < 11.7 {\n            letter_grades[i] = \"A\"\n        }\
    \ else if grades[i] < 12.0 {\n            letter_grade", "    grades := append([]float64{},\
    \ grades...)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(",
  "    var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n\
    \        } else if grade >= 3.7 {\n            grades_string = append(grades_string,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            grades_string = append(grades_string,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    grades_len :=\
    \ len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    for\
    \ i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n            letter_grades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n        \
    \    letter_grades[i] = \"A\"\n        } else if grades[i] >= 3.3 && grades[i]\
    \ < 3.7 {\n            letter_grades[i] = \"A-\"\n        } else if grades[i]\
    \ >= 3.0 && grades[i] < 3.3 {\n            letter_grades[i] = \"B+\"\n       \
    \ } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letter_grades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n         \
    \   letter_grades[i] = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ < 2.3 {\n            letter_grades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.7 && grades[i] < 2.0 {\n            letter_grades[i] = \"C\"\n        }\
    \ else if grades[i] >= 1.3 && grades[i] < 1.7 {\n            letter_grades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i] < 1.3 {\n        \
    \    letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i]\
    \ < 1.0 {\n            letter_grades[i] = \"D\"\n        } else if grades[i] >=\
    \ 0.0 {\n            letter_grades[i] = \"D-\"\n        } else {\n           \
    \ letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n}\n",
  "    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n \
    \   for i := range gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    \n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n\
    \        } else if grades[i] >= 3.7 {\n            letterGrades[i] = \"A\"\n \
    \       } else if grades[i] >= 3.3 {\n            letterGrades[i] = \"A-\"\n \
    \       } else if grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n \
    \       } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n  \
    \      } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n  \
    \      } else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\n  \
    \      } else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n   \
    \     } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n   \
    \     } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n   \
    \     } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n    \
    \    } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n    \
    \    } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    grades_sum := 0.0\n    grades_count := 0\n    grades_letter\
    \ := []string{}\n    for _, grade := range grades {\n        grades_sum += grade\n\
    \        grades_count++\n    }\n    grades_avg := grades_sum / float64(grades_count)\n\
    \    for _, grade := range grades {\n        if grade >= grades_avg {\n      \
    \      grades_letter = append(grades_letter, \"A+\")\n        } else if grade\
    \ < grades_avg {\n            grades_letter = append(grades_letter, \"A-\")\n\
    \        } else if grade > grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"B+\")\n        } else if grade < grades_avg {\n            grades_letter =\
    \ append(grades_letter, \"B\")\n        } else if grade > grades_avg {\n     \
    \       grades_letter = append(grades_letter, \"B-\")\n        } else if grade\
    \ < grades_avg {\n            grades_letter = append(grades_letter, \"C+\")\n\
    \        } else if grade > grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"C\")\n        } else if grade < grades_avg {\n            grades_letter =\
    \ append(grades_letter, \"C-\")\n        } else if grade > grades_avg {\n    \
    \        grades_letter = append(grades_letter, \"D+\")\n        } else if grade\
    \ < grades_avg {\n            grades_letter = append(grades_letter, \"D\")\n \
    \       } else if grade > grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"D-\")\n        } else {\n            grades_letter = append(grades_letter,\
    \ \"E\")\n        }\n    }\n    return grades_letter\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    var letterGrades []string\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            letterGrades = append(letterGrades, \"B+\")\n        }\
    \ else if grade > 2.7 {\n            letterGrades = append(letterGrades, \"B\"\
    )\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    grades_sum := 0.0\n\
    \    grades_count := 0\n    grades_letter := []string{}\n    for _, grade := range\
    \ grades {\n        grades_sum += grade\n        grades_count++\n    }\n    if\
    \ grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        for _, grade := range grades {\n            if grade > grades_avg {\n\
    \                grades_letter = append(grades_letter, \"A+\")\n            }\
    \ else if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A-\")\n            } else if grade == grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"A\")\n            } else if grade > grades_avg+0.7\
    \ && grade < grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"B+\")\n            } else if grade > grades_avg+1.0 {\n                grades_letter\
    \ = append(grades_letter, \"B\")\n            } else if grade < grades_avg+0.7\
    \ && grade > grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"B-\")\n            } else if grade > grades_avg+0.7 && grade < grades_avg+1.0\
    \ {\n                grades_letter = append(grades_letter, \"C+\")\n         \
    \   } else if grade > grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"C\")\n            } else if grade < grades_avg+0.7 && grade > grades_avg+1.0\
    \ {\n                grades_letter = append(grades_letter, \"C-\")\n         \
    \   } else if grade > grades_avg+0.7 && grade < grades_avg+1.0 {\n           \
    \     grades_letter = append(grades_letter, \"D+\")\n            } else if grade\
    \ > grades_avg+1.0 {\n                grades_letter = append(grades_letter, \"\
    D\")\n            } else if grade < grades_avg+0.7 && grade > grades_avg+1.0 {\n\
    \                grades_letter = append(grades_letter, \"D-\")\n            }\
    \ else if grade > grades_avg+0.7 && grade < grades_avg+1.0 {\n               \
    \ grades_letter = append(grades_letter, \"E\")\n            } else {\n       \
    \         grades_letter = append(grades_letter, \"F\")\n            }\n      \
    \  }\n    }\n    return grades_letter\n}\n", "    gradesLen := len(grades)\n \
    \   letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n \
    \   letterGrades[gradesLen-1] = \"D-\"\n    for i := 0; i < gradesLen; i++ {\n\
    \        if grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n       \
    \ } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n        }\
    \ else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n        }\
    \ else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\n        }\
    \ else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n        } else if\
    \ grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n\
    \            letterGrades[i] = \"A+\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    gradesSorted = grades\n    gradesSorted = append(gradesSorted, grades[0])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-1])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-2])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-3])\n    gradesSorted = append(gradesSorted, grades[len(grades)-4])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-5])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-6])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-7])\n    gradesSorted = append(gradesSorted, grades[len(grades)-8])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-9])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-10])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-11])\n    gradesSorted = append(gradesSorted, grades[len(grades)-12])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-13])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-14])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-15])\n    gradesSorted = append(gradesSorted, grades[len(grades)-16])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-17])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-18])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-19])\n    gradesSorted = append(gradesSorted, grades[len(grades)-20])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-21])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-22])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-23])\n    gradesSorted = append(gradesSorted, grades[len(grades)-24])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-25])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grade", "    grades_len := len(grades)\n \
    \   letter_grades := make([]string, grades_len)\n    \n    // Loop through the\
    \ grades and find the letter grade\n    for i := 0; i < grades_len; i++ {\n  \
    \      if grades[i] >= 4.0 {\n            letter_grades[i] = \"A+\"\n        }\
    \ else if grades[i] >= 3.7 {\n            letter_grades[i] = \"A\"\n        }\
    \ else if grades[i] >= 3.3 {\n            letter_grades[i] = \"A-\"\n        }\
    \ else if grades[i] >= 3.0 {\n            letter_grades[i] = \"B+\"\n        }\
    \ else if grades[i] >= 2.7 {\n            letter_grades[i] = \"B\"\n        }\
    \ else if grades[i] >= 2.3 {\n            letter_grades[i] = \"B-\"\n        }\
    \ else if grades[i] >= 2.0 {\n            letter_grades[i] = \"C+\"\n        }\
    \ else if grades[i] >= 1.7 {\n            letter_grades[i] = \"C\"\n        }\
    \ else if grades[i] >= 1.3 {\n            letter_grades[i] = \"C-\"\n        }\
    \ else if grades[i] >= 1.0 {\n            letter_grades[i] = \"D+\"\n        }\
    \ else if grades[i] >= 0.7 {\n            letter_grades[i] = \"D\"\n        }\
    \ else if grades[i] >= 0.0 {\n            letter_grades[i] = \"D-\"\n        }\
    \ else {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n\
    }\n", "    grades := append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append(",
  "    var grades_string []string\n    \n    // Write your code here\n    \n    return\
    \ grades_string\n}\n", "    var grades_string []string\n    \n    // We will use\
    \ two for loops to iterate through the grades and \n    // the grades_string array\n\
    \    \n    // The first for loop will iterate through the grades array\n    for\
    \ i := 0; i < len(grades); i++ {\n        // The second for loop will iterate\
    \ through the grades_string array\n        for j := 0; j < len(grades_string);\
    \ j++ {\n            // If the current grade is greater than the previous grade\n\
    \            // then we will append the letter grade to the grades_string array\n\
    \            if grades[i] > grades[j] {\n                grades_string[j] = fmt.Sprintf(\"\
    %+.2f\", grades[i])\n            }\n            // If the current grade is less\
    \ than the previous grade\n            // then we will append the letter grade\
    \ to the grades_string array\n            if grades[i] < grades[j] {\n       \
    \         grades_string[j] = fmt.Sprintf(\"%+.2f\", grades[i])\n            }\n\
    \        }\n    }\n    \n    // We will return the grades_string array\n    return\
    \ grades_string\n}\n", "    grades_sum := 0.0\n    grades_count := 0\n    for\
    \ _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count == 0 {\n        return []string{\"E\"}\n    }\n  \
    \  if grades_sum == 0.0 {\n        return []string{\"E\"}\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_diff := grades_avg - float64(grades[0])\n\
    \    grades_diff_abs := math.Abs(grades_diff)\n    grades_diff_sign := grades_diff_abs\
    \ > 0.0 ? 1.0 : -1.0\n    grades_diff_abs_sign := grades_diff_abs * grades_diff_sign\n\
    \    grades_diff_abs_sign /= grades_diff_abs\n    grades_diff_abs_sign += 0.5\n\
    \    grades_diff_abs_sign *= grades_diff\n    grades_diff_abs_sign /= grades_diff\n\
    \    grades_diff_abs_sign *= grades_diff\n    grades_diff_abs_sign /= grades_diff\n\
    \    grades_diff_abs_sign *= grades_diff\n    grades_diff_abs_sign /= grades_diff\n\
    \    grades_diff_abs_sign *= grades_diff\n    grades_diff_abs_sign /= grades_diff\n\
    \    grades_diff_abs_sign *= grades_diff\n    grades_diff_abs_sign /= grades_diff\n\
    \    grades_diff_abs_sign *= grades_diff\n    grades_diff_abs_sign /= grades_diff\n\
    \    grades_diff_abs_sign *= grades_diff\n    grades_diff_abs_sign /= grades_diff\n\
    \    grades_diff_abs_sign *= grades_diff\n    grades_diff_abs_sign /= grades_diff\n\
    \    grades_diff_abs_sign *= grades_diff\n    grades_diff_abs_sign /= grades_diff\n\
    \    grades_diff_abs_sign *= grades_diff\n    grades_diff_abs_sign /= grades_diff\n\
    \    grades_diff_abs_sign *= grades_diff\n    grades_diff_abs_sign /= grades_diff\n\
    \    grades_diff_abs_sign *= grades_diff\n    grades_diff_abs_sign /= grades_diff\n\
    \    grades_diff_abs_sign *= grades_diff\n    grades_diff_abs_sign /= grades_diff\n\
    \    grades_diff_abs_sign *= grades_diff\n    grades_diff_abs_sign /= grades_diff\n\
    \    grades_diff_abs_sign *= grades_diff\n    grades_diff_abs_sign /= grades_diff\n\
    \    grades_diff_abs_sign *= grades_diff\n    grades_diff_abs_", "    grades_len\
    \ := len(grades)\n    letter_grades := make([]string, grades_len)\n    for i :=\
    \ 0; i < grades_len; i++ {\n        if grades[i] < 4.0 {\n            letter_grades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 4.0 && grades[i] < 3.7 {\n        \
    \    letter_grades[i] = \"A\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ < 3.3 {\n            letter_grades[i] = \"A-\"\n        } else if grades[i]\
    \ >= 3.3 && grades[i] < 3.0 {\n            letter_grades[i] = \"B+\"\n       \
    \ } else if grades[i] >= 3.0 && grades[i] < 2.7 {\n            letter_grades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.7 && grades[i] < 2.3 {\n         \
    \   letter_grades[i] = \"B-\"\n        } else if grades[i] >= 2.3 && grades[i]\
    \ < 2.0 {\n            letter_grades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 2.0 && grades[i] < 1.7 {\n            letter_grades[i] = \"C\"\n        }\
    \ else if grades[i] >= 1.7 && grades[i] < 1.3 {\n            letter_grades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.0 {\n        \
    \    letter_grades[i] = \"D+\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ < 0.7 {\n            letter_grades[i] = \"D\"\n        } else if grades[i] >=\
    \ 0.7 && grades[i] < 0.0 {\n            letter_grades[i] = \"D-\"\n        } else\
    \ {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n\
    }\n", "    result := make([]string, len(grades))\n    \n    for i := range grades\
    \ {\n        if grades[i] >= 3.0 {\n            result[i] = \"A+\"\n        }\
    \ else if grades[i] >= 2.7 {\n            result[i] = \"B+\"\n        } else if\
    \ grades[i] >= 2.3 {\n            result[i] = \"B\"\n        } else if grades[i]\
    \ >= 1.7 && grades[i] < 2.3 {\n            result[i] = \"C+\"\n        } else\
    \ if grades[i] >= 1.3 && grades[i] < 1.7 {\n            result[i] = \"C\"\n  \
    \      } else if grades[i] >= 1.0 {\n            result[i] = \"D+\"\n        }\
    \ else if grades[i] >= 0.7 {\n            result[i] = \"D\"\n        } else if\
    \ grades[i] < 0.7 {\n            result[i] = \"D-\"\n        } else {\n      \
    \      result[i] = \"E\"\n        }\n    }\n    \n    return result\n}\n", " \
    \   grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count == 0 {\n        return grades_letter\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_letter := []string{}\n   \
    \ for _, grade := range grades {\n        if grade > grades_avg {\n          \
    \  grades_letter = append(grades_letter, \"B-\")\n        } else if grade < grades_avg\
    \ {\n            grades_letter = append(grades_letter, \"B-\")\n        } else\
    \ if grade == grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"A+\")\n        } else {\n            grades_letter = append(grades_letter,\
    \ \"A-\")\n        }\n    }\n    return grades_letter\n}\n", "    grades_len :=\
    \ len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    for\
    \ i := 0; i < grades_len; i++ {\n        if grades[i] < 3.0 {\n            letter_grades[i]\
    \ = \"E\"\n        } else if grades[i] >= 3.0 && grades[i] < 3.7 {\n         \
    \   letter_grades[i] = \"D+\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ < 4.0 {\n            letter_grades[i] = \"D-\"\n        } else if grades[i]\
    \ >= 4.0 && grades[i] < 4.3 {\n            letter_grades[i] = \"C+\"\n       \
    \ } else if grades[i] >= 4.3 && grades[i] < 4.6 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 4.6 && grades[i] < 4.9 {\n         \
    \   letter_grades[i] = \"B-\"\n        } else if grades[i] >= 4.9 && grades[i]\
    \ < 5.2 {\n            letter_grades[i] = \"B\"\n        } else if grades[i] >=\
    \ 5.2 && grades[i] < 5.5 {\n            letter_grades[i] = \"B-\"\n        } else\
    \ if grades[i] >= 5.5 && grades[i] < 5.8 {\n            letter_grades[i] = \"\
    B\"\n        } else if grades[i] >= 5.8 && grades[i] < 6.1 {\n            letter_grades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 6.1 && grades[i] < 6.4 {\n        \
    \    letter_grades[i] = \"B\"\n        } else if grades[i] >= 6.4 && grades[i]\
    \ < 6.7 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 6.7 && grades[i] < 7 {\n            letter_grades[i] = \"B\"\n        } else\
    \ {\n            letter_grades[i] = \"A+\"\n        }\n    }\n    return letter_grades\n\
    }\n", "    var letters []string\n    for _, grade := range grades {\n        if\
    \ grade >= 3.0 {\n            letters = append(letters, \"A+\")\n        } else\
    \ if grade >= 2.7 {\n            letters = append(letters, \"B\")\n        } else\
    \ if grade >= 2.3 {\n            letters = append(letters, \"B-\")\n        }\
    \ else if grade >= 1.7 && grade < 2.3 {\n            letters = append(letters,\
    \ \"C\")\n        } else if grade >= 1.3 && grade < 1.7 {\n            letters\
    \ = append(letters, \"C-\")\n        } else if grade >= 1.0 {\n            letters\
    \ = append(letters, \"D+\")\n        } else if grade >= 0.7 {\n            letters\
    \ = append(letters, \"D\")\n        } else if grade >= 0.0 {\n            letters\
    \ = append(letters, \"D-\")\n        } else {\n            letters = append(letters,\
    \ \"E\")\n        }\n    }\n    return letters\n}\n", "    result := []string{}\n\
    \    for _, grade := range grades {\n        if grade > 3.0 {\n            grade\
    \ = grade - 3.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 3.0\n        }\n        if grade < 2.0 {\n            grade = grade - 2.0\n\
    \        }\n        if grade > 2.0 {\n            grade = grade - 2.0\n      \
    \  }\n        if grade < 1.7 {\n            grade = grade - 1.7\n        }\n \
    \       if grade > 1.7 {\n            grade = grade - 1.7\n        }\n       \
    \ if grade < 1.0 {\n            grade = grade - 1.0\n        }\n        if grade\
    \ > 1.0 {\n            grade = grade - 1.0\n        }\n        if grade < 0.7\
    \ {\n            grade = grade - 0.7\n        }\n        if grade > 0.7 {\n  \
    \          grade = grade - 0.7\n        }\n        if grade < 0.3 {\n        \
    \    grade = grade - 0.3\n        }\n        if grade > 0.3 {\n            grade\
    \ = grade - 0.3\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade > 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade < 3.0 {\n            grade = grade + 3.0\n      \
    \  }\n        if grade > 3.0 {\n            grade = grade + 3.0\n        }\n \
    \       if grade < 4.0 {\n            grade = grade + 4.0\n        }\n       \
    \ if grade > 4.0 {\n            grade = grade + 4.0\n        }\n        if grade\
    \ < 5.0 {\n            grade = grade + 5.0\n        }\n        if grade > 5.0\
    \ {\n            grade = grade + 5.0\n        }\n        if grade < 6.0 {\n  \
    \          grade = grade + 6.0\n        }\n        if grade > 6.0 {\n        \
    \    grade = grade + 6.0\n        }\n        if grade < 7.0 {\n            grade\
    \ = grade + 7.0\n        }\n        if grade > 7.0 {\n            grade = grade\
    \ + 7.0\n        }\n        if grade < 8.0 {\n            grade = grade + 8.0\n\
    \        }\n        if grade > 8.0 {\n            grade = grade + 8.0\n      \
    \  }\n        if grade < 9.0 {\n            grade = grade + 9.0\n        }\n \
    \       if grade > 9.0 {\n            grade = grade + 9.0\n        }\n       \
    \ if grade < 10.0 {\n            grade = grade + 10.0\n        }", "    grades_sum\
    \ := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n    for _, grade\
    \ := range grades {\n        grades_sum += grade\n        grades_count++\n   \
    \ }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        grades_letter := []string{}\n        for _, grade := range grades {\n\
    \            if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A+\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"A-\")\n            } else if grade == grades_avg {\n\
    \                grades_letter = append(grades_letter, \"A\")\n            } else\
    \ if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"B+\")\n            } else if grade > grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"B\")\n            } else if grade < grades_avg {\n\
    \                grades_letter = append(grades_letter, \"B-\")\n            }\
    \ else if grade == grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"B\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"C+\")\n            } else if grade > grades_avg {\n\
    \                grades_letter = append(grades_letter, \"C\")\n            } else\
    \ if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"C-\")\n            } else if grade == grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"C\")\n            } else if grade < grades_avg {\n\
    \                grades_letter = append(grades_letter, \"D+\")\n            }\
    \ else if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"D\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"D-\")\n            } else if grade == grades_avg {\n\
    \                grades_letter = append(grades_letter, \"D\")\n            } else\
    \ if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"E\")\n            } else if grade > grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"E\")\n            }\n        }\n    }\n    return\
    \ grades_letter\n}\n", "    result := make([]string, len(grades))\n    \n    max\
    \ := 0.0\n    for _, grade := range grades {\n        if grade > max {\n     \
    \       max = grade\n        }\n    }\n    \n    for i := range grades {\n   \
    \     if grades[i] > max {\n            grades[i] = max\n        }\n    }\n  \
    \  \n    for i := range grades {\n        if grades[i] < 0.0 {\n            grades[i]\
    \ = 0.0\n        }\n    }\n    \n    for i := range grades {\n        if grades[i]\
    \ == 0.0 {\n            grades[i] = \"E\"\n        }\n    }\n    \n    for i :=\
    \ range grades {\n        if grades[i] < 3.0 {\n            grades[i] = \"A+\"\
    \n        }\n        if grades[i] >= 3.0 && grades[i] < 3.7 {\n            grades[i]\
    \ = \"A\"\n        }\n        if grades[i] >= 3.7 && grades[i] < 4.0 {\n     \
    \       grades[i] = \"A-\"\n        }\n        if grades[i] >= 4.0 && grades[i]\
    \ < 4.3 {\n            grades[i] = \"B+\"\n        }\n        if grades[i] >=\
    \ 4.3 && grades[i] < 4.6 {\n            grades[i] = \"B\"\n        }\n       \
    \ if grades[i] >= 4.6 && grades[i] < 4.9 {\n            grades[i] = \"B-\"\n \
    \       }\n        if grades[i] >= 4.9 && grades[i] < 5.2 {\n            grades[i]\
    \ = \"C+\"\n        }\n        if grades[i] >= 5.2 && grades[i] < 5.5 {\n    \
    \        grades[i] = \"C\"\n        }\n        if grades[i] >= 5.5 && grades[i]\
    \ < 5.8 {\n            grades[i] = \"C-\"\n        }\n        if grades[i] >=\
    \ 5.8 && grades[i] < 6.1 {\n            grades[i] = \"D+\"\n        }\n      \
    \  if grades[i] >= 6.1 && grades[i] < 6.4 {\n            grades[i] = \"D\"\n \
    \       }\n        if grades[i] >= 6.4 && grades[i] < 6.7 {\n            grades[i]\
    \ = \"D-\"\n        }\n        if grades[i] >= 6.7 && grades[i] < 7.0 {\n    \
    \        grades[i] = \"E\"\n        }\n    }\n    \n    return result\n}\n", " \
    \   gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := range gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n", "    gradesSorted :=\
    \ make([]float64, len(grades))\n    sort.Float64s(grades)\n    for i := range\
    \ gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n    gradesSorted\
    \ = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n", "    grades_len := len(grades)\n\
    \    letter_grades := make([]string, grades_len)\n    \n    // The first letter\
    \ grade is always A+\n    letter_grades[0] = \"A+\"\n    \n    // The last letter\
    \ grade is always D-\n    letter_grades[grades_len-1] = \"D-\"\n    \n    // The\
    \ middle letter grades are the letter grades using the formula\n    // GPA * 10\
    \ / 100\n    for i := 1; i < grades_len; i++ {\n        letter_grades[i] = fmt.Sprintf(\"\
    %+.2f\", grades[i]*10/100)\n    }\n    \n    return letter_grades\n}\n", "   \
    \ var letter_grades []string\n    var gpas []float64\n    for _, grade := range\
    \ grades {\n        gpa := grade / 4.0\n        gpas = append(gpas, gpa)\n   \
    \ }\n    for _, gpa := range gpas{\n        if gpa > 3.7 {\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        } else if gpa > 3.3 {\n           \
    \ letter_grades = append(letter_grades, \"A-\")\n        } else if gpa > 3.0 {\n\
    \            letter_grades = append(letter_grades, \"B+\")\n        } else if\
    \ gpa > 2.7 {\n            letter_grades = append(letter_grades, \"B\")\n    \
    \    } else if gpa > 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if gpa > 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if gpa > 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if gpa > 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if gpa > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if gpa > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if gpa > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n", "    result := []string{}\n\
    \    for _, grade := range grades {\n        if grade > 3.0 {\n            grade\
    \ = grade - 3.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 3.0\n        }\n        if grade < 2.0 {\n            grade = grade - 2.0\n\
    \        }\n        if grade < 1.7 {\n            grade = grade - 1.7\n      \
    \  }\n        if grade < 1.0 {\n            grade = grade - 1.0\n        }\n \
    \       if grade < 0.7 {\n            grade = grade - 0.7\n        }\n       \
    \ if grade < 0.3 {\n            grade = grade - 0.3\n        }\n        if grade\
    \ < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade < 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade < 0.0 {\n            grade = grade + 0.0\n        }\n \
    \       if grade < 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade\
    \ < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade < 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade < 0.0 {\n            grade = grade + 0.0\n        }\n \
    \       if grade < 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade ",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n        \
    \    letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ < 4.0 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 && grades[i] < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\
    \n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n         \
    \   letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ < 2.3 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >=\
    \ 1.7 && grades[i] < 2.0 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\
    \n        } else if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n        \
    \    letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n         \
    \   letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i] =\
    \ \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted :=\
    \ make([]float64, len(grades))\n    sort.Float64s(grades)\n    gradesSorted =\
    \ grades\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    \n    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = \"\"\n\
    \    }\n    \n    letterGrades[0] = \"E\"\n    \n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i+1] = \"A+\"\
    \n        } else if grades[i] >= 3.7 {\n            letterGrades[i+1] = \"A\"\n\
    \        } else if grades[i] >= 3.3 {\n            letterGrades[i+1] = \"A-\"\n\
    \        } else if grades[i] >= 3.0 {\n            letterGrades[i+1] = \"B+\"\n\
    \        } else if grades[i] >= 2.7 {\n            letterGrades[i+1] = \"B\"\n\
    \        } else if grades[i] >= 2.3 {\n            letterGrades[i+1] = \"B-\"\n\
    \        } else if grades[i] >= 2.0 {\n            letterGrades[i+1] = \"C+\"\n\
    \        } else if grades[i] >= 1.7 {\n            letterGrades[i+1] = \"C\"\n\
    \        } else if grades[i] >= 1.3 {\n            letterGrades[i+1] = \"C-\"\n\
    \        } else if grades[i] >= 1.0 {\n            letterGrades[i+1] = \"D+\"\n\
    \        } else if grades[i] >= 0.7 {\n            letterGrades[i+1] = \"D\"\n\
    \        } else if grades[i] >= 0.0 {\n            letterGrades[i+1] = \"D-\"\n\
    \        } else {\n            letterGrades[i+1] = \"E\"\n        }\n    }\n \
    \   \n    return letterGrades\n}\n", "    var letter []string\n    var gpa, i\
    \ float64\n    for i = 0; i < len(grades); i++ {\n        gpa = grades[i]\n  \
    \      if gpa > 3.0 {\n            letter = append(letter, \"B+\")\n        }\
    \ else if gpa > 2.7 {\n            letter = append(letter, \"B\")\n        } else\
    \ if gpa > 2.3 {\n            letter = append(letter, \"B-\")\n        } else\
    \ if gpa > 1.7 {\n            letter = append(letter, \"C+\")\n        } else\
    \ if gpa > 1.3 {\n            letter = append(letter, \"C\")\n        } else if\
    \ gpa > 1.0 {\n            letter = append(letter, \"C-\")\n        } else if\
    \ gpa > 0.7 {\n            letter = append(letter, \"D+\")\n        } else if\
    \ gpa > 0.3 {\n            letter = append(letter, \"D\")\n        } else if gpa\
    \ > 0.0 {\n            letter = append(letter, \"D-\")\n        } else {\n   \
    \         letter = append(letter, \"E\")\n        }\n    }\n    return letter\n\
    }\n", "    grades_sum := 0.0\n    grades_count := 0\n    grades_list := make([]string,\
    \ len(grades))\n    for _, grade := range grades {\n        grades_sum += grade\n\
    \        grades_count++\n    }\n    if grades_count == 0 {\n        return grades_list\n\
    \    }\n    grades_avg := grades_sum / float64(grades_count)\n    grades_list\
    \ := make([]string, len(grades))\n    for _, grade := range grades {\n       \
    \ grades_avg = grade - grades_avg\n        if grades_avg < 0 {\n            grades_avg\
    \ += float64(grades_count) * float64(grades_count) - 1\n        }\n        grades_avg\
    \ /= float64(grades_count)\n        if grades_avg > 1.0 {\n            grades_avg\
    \ = 1.0\n        }\n        if grades_avg < 0.0 {\n            grades_avg += float64(grades_count)\
    \ * float64(grades_count) - 1\n        }\n        grades_avg /= float64(grades_count)\n\
    \        if grades_avg > 1.0 {\n            grades_avg = 1.0\n        }\n    \
    \    if grades_avg < 0.0 {\n            grades_avg += float64(grades_count) *\
    \ float64(grades_count) - 1\n        }\n        grades_avg /= float64(grades_count)\n\
    \        if grades_avg > 1.0 {\n            grades_avg = 1.0\n        }\n    \
    \    if grades_avg < 0.0 {\n            grades_avg += float64(grades_count) *\
    \ float64(grades_count) - 1\n        }\n        grades_avg /= float64(grades_count)\n\
    \        if grades_avg > 1.0 {\n            grades_avg = 1.0\n        }\n    \
    \    if grades_avg < 0.0 {\n            grades_avg += float64(grades_count) *\
    \ float64(grades_count) - 1\n        }\n        grades_avg /= float64(grades_count)\n\
    \        if grades_avg > 1.0 {\n            grades_avg = 1.0\n        }\n    \
    \    if grades_avg < 0.0 {\n            grades_avg += float64(grades_count) *\
    \ float64(grades_count) - 1\n        }\n        grades_avg /= float64(grades_count)\n\
    \        if grades_avg > 1.0 {\n            grades_avg = 1.0\n        }\n    \
    \    if grades_avg < 0.0 {\n            grades_avg += float64(grades_count) *\
    \ float64(grades_count) - 1\n        }\n        grades_avg /= float64(grades_count)\n\
    \        if grades_avg > 1.0 {\n            grades_avg = 1.0\n        }\n    \
    \    if grades_avg < 0.0 {\n            grades_avg += float64(grades_count", " \
    \   result := make([]string, len(grades))\n    for i := range grades {\n     \
    \   if grades[i] < 0 {\n            result[i] = \"E\"\n        } else {\n    \
    \        result := make([]string, len(grades))\n            if grades[i] < 3.0\
    \ {\n                result[0] = \"A+\"\n            } else if grades[i] < 3.3\
    \ {\n                result[1] = \"A\"\n            } else if grades[i] < 3.7\
    \ {\n                result[2] = \"A-\"\n            } else if grades[i] < 4.0\
    \ {\n                result[3] = \"B+\"\n            } else if grades[i] < 4.3\
    \ {\n                result[4] = \"B\"\n            } else if grades[i] < 4.7\
    \ {\n                result[5] = \"B-\"\n            } else if grades[i] < 5.0\
    \ {\n                result[6] = \"C+\"\n            } else if grades[i] < 5.3\
    \ {\n                result[7] = \"C\"\n            } else if grades[i] < 5.7\
    \ {\n                result[8] = \"C-\"\n            } else if grades[i] < 6.0\
    \ {\n                result[9] = \"D+\"\n            } else if grades[i] < 6.3\
    \ {\n                result[10] = \"D\"\n            } else if grades[i] < 6.7\
    \ {\n                result[11] = \"D-\"\n            } else if grades[i] < 7.0\
    \ {\n                result[12] = \"E\"\n            } else {\n              \
    \  result[13] = \"F\"\n            }\n        }\n    }\n    return result\n}\n",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted := append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted := append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ := append([]float64{0.0}, gradesSorted...)\n    gradesSorted := append([]float64{0.0},\
    \ gradesSorted...)\n    gradesSorted := append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted := append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ := append([]float64{0.0}, gradesSorted...)\n    gradesSorted := append([]float64{0.0},\
    \ gradesSorted...)\n    gradesSorted := append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted := append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ := append([]float64{0.0}, gradesSorted...)\n    gradesSorted := append([]float64{0.0},\
    \ gradesSorted...)\n    gradesSorted := append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted := append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ := append([]float64{0.0}, gradesSorted...)\n    gradesSorted := append([]float64{0.0},\
    \ gradesSorted...)\n    gradesSorted := append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted := append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ := append([]float64{0.0}, gradesSorted...)\n    gradesSorted := append([]float64{0.0},\
    \ gradesSorted...)\n    gradesSorted := append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted := append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ := append([]float64{0.0}, gradesSorted...)\n    gradesSorted := append([]float64{0.0},\
    \ gradesSorted...)\n    gradesSorted := append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted := append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ := append([]float64{0.0}, gradesSorted...)\n    gradesSorted := append([]float64{0.0},\
    \ gradesSorted...)\n    ", "    grades_len := len(grades)\n    letter_grades :=\
    \ make([]string, grades_len)\n    \n    for i := 0; i < grades_len; i++ {\n  \
    \      if grades[i] >= 3.0 {\n            letter_grades[i] = \"A+\"\n        }\
    \ else if grades[i] >= 2.7 {\n            letter_grades[i] = \"B\"\n        }\
    \ else if grades[i] >= 2.3 {\n            letter_grades[i] = \"B-\"\n        }\
    \ else if grades[i] >= 1.7 && grades[i] < 3.0 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 2.7 {\n         \
    \   letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n        \
    \    letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n       \
    \     letter_grades[i] = \"D\"\n        } else if grades[i] < 0.0 {\n        \
    \    letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n", "    grades_len :=\
    \ len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    for\
    \ i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n            letter_grades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 {\n            letter_grades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 {\n            letter_grades[i]\
    \ = \"A-\"\n        } else if grades[i] >= 3.0 {\n            letter_grades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 {\n            letter_grades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letter_grades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 2.0 {\n            letter_grades[i]\
    \ = \"C+\"\n        } else if grades[i] >= 1.7 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 {\n            letter_grades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.0 {\n            letter_grades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 {\n            letter_grades[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 {\n            letter_grades[i]\
    \ = \"D-\"\n        } else {\n            letter_grades[i] = \"E\"\n        }\n\
    \    }\n    return letter_grades\n}\n", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1]\
    \ = \"D-\"\n    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = \"\
    D-\"\n        if grades[i] >= 3.0 {\n            letterGrades[i] = \"C+\"\n  \
    \          if grades[i] > 2.7 {\n                letterGrades[i] = \"B+\"\n  \
    \              if grades[i] > 2.3 {\n                    letterGrades[i] = \"\
    B\"\n                    if grades[i] > 2.0 {\n                        letterGrades[i]\
    \ = \"A+\"\n                        if grades[i] > 1.7 {\n                   \
    \         letterGrades[i] = \"A\"\n                            if grades[i] >\
    \ 1.3 {\n                                letterGrades[i] = \"A-\"\n          \
    \                      if grades[i] > 1.0 {\n                                \
    \    letterGrades[i] = \"A\"\n                                    if grades[i]\
    \ > 0.7 {\n                                        letterGrades[i] = \"B\"\n \
    \                                       if grades[i] > 0.3 {\n               \
    \                             letterGrades[i] = \"B+\"\n                     \
    \                       if grades[i] > 0.0 {\n                               \
    \                 letterGrades[i] = \"C\"\n                                  \
    \              if grades[i] > -0.7 {\n                                       \
    \             letterGrades[i] = \"C+\"\n                                     \
    \               if grades[i] > -0.3 {\n                                      \
    \                  letterGrades[i] = \"C-\"\n                                \
    \                        if grades[i] > -0.0 {\n                             \
    \                               letterGrades[i] = \"D+\"\n                   \
    \                                         if grades[i] > -0.6 {\n            \
    \                                                    letterGrades[i] = \"D\"\n\
    \                                                                if grades[i]\
    \ > -0.2 {\n                                                                 \
    \   letterGrades[i] = \"D-\"\n                                               \
    \                     if grades[i] > 0.0 {\n                                 \
    \                                       letterGrades[i] = \"E\"\n            \
    \                                                        }\n                 \
    \                                               }\n                          \
    \                                  }\n                                       \
    \                 }\n                                                    }\n \
    \                                               }\n                          \
    \                  }\n                                        }\n            \
    \                        }\n                                }\n              \
    \              }\n                        }\n                    }\n         \
    \       }\n            }\n        }\n    }\n    return letterGrades\n}\n", " \
    \   result := make([]string, len(grades))\n    for i := range grades {\n     \
    \   if grades[i] < 3.0 {\n            result[i] = \"E\"\n            continue\n\
    \        }\n        result := []string{\"A\", \"B\", \"C\", \"D\", \"E\"}\n  \
    \      index := 0\n        for index < len(grades)-1 {\n            if grades[index]\
    \ <= grades[i+1] {\n                index++\n                continue\n      \
    \      }\n            if grades[index] > grades[i+1] {\n                index--\n\
    \                continue\n            }\n            if grades[index] == grades[i+1]\
    \ {\n                result[index] = \"A+\"\n                index++\n       \
    \         continue\n            }\n            if grades[index] < grades[i+1]\
    \ {\n                result[index] = \"A-\"\n                index--\n       \
    \         continue\n            }\n            if grades[index] > grades[i+1]\
    \ {\n                result[index] = \"B+\"\n                index++\n       \
    \         continue\n            }\n            if grades[index] == grades[i+1]\
    \ {\n                result[index] = \"B\"\n                index++\n        \
    \        continue\n            }\n            if grades[index] < grades[i+1] {\n\
    \                result[index] = \"B-\"\n                index--\n           \
    \     continue\n            }\n            if grades[index] > grades[i+1] {\n\
    \                result[index] = \"C+\"\n                index++\n           \
    \     continue\n            }\n            if grades[index] == grades[i+1] {\n\
    \                result[index] = \"C\"\n                index++\n            \
    \    continue\n            }\n            if grades[index] < grades[i+1] {\n \
    \               result[index] = \"C-\"\n                index--\n            \
    \    continue\n            }\n            if grades[index] > grades[i+1] {\n \
    \               result[index] = \"D+\"\n                index++\n            \
    \    continue\n            }\n            if grades[index] == grades[i+1] {\n\
    \                result[index] = \"D\"\n                index++\n            \
    \    continue\n            }\n            if grades[index] < grades[i+1] {\n \
    \               result[index] = \"D-\"\n                index--\n            \
    \    continue\n            }\n            if grades[index] > grades[i+1] {\n \
    \               result[index] = \"E\"\n                index++\n             \
    \   continue\n            }\n        }\n    }\n    return result\n}\n", "    grades_sum\
    \ := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n    for _, grade\
    \ := range grades {\n        grades_sum += grade\n        grades_count++\n   \
    \ }\n    if grades_count == 0 {\n        return grades_letter\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_letter := []string{}\n   \
    \ for _, grade := range grades {\n        if grade > grades_avg {\n          \
    \  grades_letter = append(grades_letter, \"B-\")\n        } else if grade < grades_avg\
    \ {\n            grades_letter = append(grades_letter, \"B-\")\n        } else\
    \ if grade == grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"A+\")\n        } else {\n            grades_letter = append(grades_letter,\
    \ \"A-\")\n        }\n    }\n    return grades_letter\n}\n", "    var result []string\n\
    \    for _, grade := range grades {\n        if grade > 3.0 {\n            grade\
    \ = grade - 3.0\n        }\n        if grade < 3.0 {\n            grade = grade\
    \ + 3.0\n        }\n        if grade < 2.0 {\n            grade = grade + 2.0\n\
    \        }\n        if grade < 1.7 {\n            grade = grade + 1.7\n      \
    \  }\n        if grade < 1.0 {\n            grade = grade + 1.0\n        }\n \
    \       if grade < 0.7 {\n            grade = grade + 0.7\n        }\n       \
    \ if grade < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade\
    \ < 4.0 {\n            grade = grade + 4.0\n        }\n        if grade > 4.0\
    \ {\n            grade = grade - 4.0\n        }\n        if grade > 3.7 {\n  \
    \          grade = grade - 3.7\n        }\n        if grade > 3.3 {\n        \
    \    grade = grade - 3.3\n        }\n        if grade > 3.0 {\n            grade\
    \ = grade - 3.0\n        }\n        if grade > 2.7 {\n            grade = grade\
    \ - 2.7\n        }\n        if grade > 2.3 {\n            grade = grade - 2.3\n\
    \        }\n        if grade > 2.0 {\n            grade = grade - 2.0\n      \
    \  }\n        if grade > 1.7 {\n            grade = grade - 1.7\n        }\n \
    \       if grade > 1.0 {\n            grade = grade - 1.0\n        }\n       \
    \ if grade > 0.7 {\n            grade = grade - 0.7\n        }\n        if grade\
    \ > 0.0 {\n            grade = grade - 0.0\n        }\n        if grade > 4.0\
    \ {\n            grade = grade - 4.0\n        }\n        if grade > 3.7 {\n  \
    \          grade = grade - 3.7\n        }\n        if grade > 3.3 {\n        \
    \    grade = grade - 3.3\n        }\n        if grade > 3.0 {\n            grade\
    \ = grade - 3.0\n        }\n        if grade > 2.7 {\n            grade = grade\
    \ - 2.7\n        }\n        if grade > 2.3 {\n            grade = grade - 2.3\n\
    \        }\n        if grade > 2.0 {\n            grade = grade - 2.0\n      \
    \  }\n        if grade > 1.7 {\n            grade = grade - 1.7\n        }\n \
    \       if grade > 1.0 {\n            grade = grade - 1.0\n        }\n       \
    \ if grade > 0.7 {\n            grade = ", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted", "    gradesSorted := make([]float64,\
    \ len(grades))\n    sort.Float64s(grades)\n    for i := 0; i < len(grades); i++\
    \ {\n        gradesSorted[i] = grades[i]\n    }\n    gradesSorted := gradesSorted[:len(gradesSorted)-1]\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[0])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[0])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[0])\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[0])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[0])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[0])\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[0])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[0])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[0])\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[0])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[0])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[0])\n    gradesSorted ", "    grades_sum := 0.0\n    grades_count\
    \ := 0\n    grades_letter := []string{}\n    for _, grade := range grades {\n\
    \        grades_sum += grade\n        grades_count++\n    }\n    if grades_count\
    \ > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n        grades_letter\
    \ := []string{}\n        for _, grade := range grades {\n            if grade\
    \ >= grades_avg {\n                grades_letter = append(grades_letter, \"A+\"\
    )\n            } else if grade < grades_avg {\n                grades_letter =\
    \ append(grades_letter, \"A-\")\n            } else if grade == grades_avg {\n\
    \                grades_letter = append(grades_letter, \"A\")\n            } else\
    \ if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"B+\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"B\")\n            } else if grade == grades_avg {\n\
    \                grades_letter = append(grades_letter, \"B-\")\n            }\
    \ else if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"C+\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"C\")\n            } else if grade == grades_avg {\n\
    \                grades_letter = append(grades_letter, \"C-\")\n            }\
    \ else if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"D+\")\n            } else if grade < grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"D\")\n            } else if grade == grades_avg {\n\
    \                grades_letter = append(grades_letter, \"D-\")\n            }\
    \ else if grade > grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"E\")\n            }\n        }\n    }\n    return grades_letter\n}\n", " \
    \   grades := append([]float64{}, grades...)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(", "    gradesSorted := make([]float64, len(grades))\n\
    \    sort.Float64s(grades)\n    for i := 0; i < len(grades); i++ {\n        gradesSorted[i]\
    \ = grades[i]\n    }\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(grade", " \
    \   gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(grade", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[2]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-3]\n    gradesSorted[0] -= gradesSorted[3]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-4]\n\
    \    gradesSorted[0] -= gradesSorted[4]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-5]\n    gradesSorted[0] -= gradesSorted[5]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-6]\n\
    \    gradesSorted[0] -= gradesSorted[6]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-7]\n    gradesSorted[0] -= gradesSorted[7]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-8]\n\
    \    gradesSorted[0] -= gradesSorted[8]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-9]\n    gradesSorted[0] -= gradesSorted[9]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-10]\n\
    \    gradesSorted[0] -= gradesSorted[10]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-11]\n    gradesSorted[0] -= gradesSorted[11]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-12]\n\
    \    gradesSorted[0] -= gradesSorted[12]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-13]\n    gradesSorted[0] -= gradesSorted[13]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-14]\n\
    \    gradesSorted[0] -= gradesSorted[14]\n    gradesSorted[len(grades", "    grades_len\
    \ := len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    for\
    \ i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n            letter_grades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 {\n            letter_grades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 {\n            letter_grades[i]\
    \ = \"A-\"\n        } else if grades[i] >= 3.0 {\n            letter_grades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 {\n            letter_grades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letter_grades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 2.0 {\n            letter_grades[i]\
    \ = \"C+\"\n        } else if grades[i] >= 1.7 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 {\n            letter_grades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.0 {\n            letter_grades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 {\n            letter_grades[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 {\n            letter_grades[i]\
    \ = \"D-\"\n        } else {\n            letter_grades[i] = \"E\"\n        }\n\
    \    }\n    return letter_grades\n}\n", "    grades_sum := 0.0\n    grades_count\
    \ := 0\n    grades_letter := []string{}\n    for _, grade := range grades {\n\
    \        grades_sum += grade\n        grades_count++\n    }\n    if grades_count\
    \ == 0 {\n        return grades_letter\n    }\n    grades_avg := grades_sum /\
    \ float64(grades_count)\n    grades_letter := []string{}\n    for _, grade :=\
    \ range grades {\n        if grade > grades_avg {\n            grades_letter =\
    \ append(grades_letter, \"B+\")\n        } else if grade < grades_avg {\n    \
    \        grades_letter = append(grades_letter, \"B-\")\n        } else if grade\
    \ == grades_avg {\n            grades_letter = append(grades_letter, \"C\")\n\
    \        } else if grade > grades_avg*1.5 {\n            grades_letter = append(grades_letter,\
    \ \"C+\")\n        } else if grade < grades_avg*1.5 {\n            grades_letter\
    \ = append(grades_letter, \"C-\")\n        } else if grade == grades_avg*1.5 {\n\
    \            grades_letter = append(grades_letter, \"D\")\n        } else if grade\
    \ > grades_avg*2.5 {\n            grades_letter = append(grades_letter, \"D+\"\
    )\n        } else if grade < grades_avg*2.5 {\n            grades_letter = append(grades_letter,\
    \ \"D-\")\n        } else if grade == grades_avg*2.5 {\n            grades_letter\
    \ = append(grades_letter, \"E\")\n        }\n    }\n    return grades_letter\n\
    }\n", "    var grades_string []string\n    for _, grade := range grades {\n  \
    \      if grade > 3.0 {\n            grades_string = append(grades_string, \"\
    B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    grades := append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(", "    grades := append([]float64{}, grades...)\n\
    \    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades =\
    \ append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(", "    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    // The first letter grade is always A+\n    letter_grades[0]\
    \ = \"A+\"\n    \n    // The last letter grade is always E\n    letter_grades[grades_len-1]\
    \ = \"E\"\n    \n    // The rest of the letter grades are calculated from the\
    \ GPA\n    for i := 1; i < grades_len; i++ {\n        letter_grades[i] = letter_grades[i-1]\
    \ + \n            fmt.Sprintf(\"%+.2f\", grades[i-1]/grades_len)\n    }\n    \n\
    \    return letter_grades\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    gradesSorted := append([]float64{}, grades...)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ grades", "    grades_sum := 0.0\n    grades_count := 0\n    grades_letter :=\
    \ []string{}\n    for _, grade := range grades {\n        grades_sum += grade\n\
    \        grades_count++\n    }\n    if grades_count == 0 {\n        return grades_letter\n\
    \    }\n    if grades_sum < 0.0 {\n        return grades_letter\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_letter := []string{}\n   \
    \ for _, grade := range grades {\n        if grade > grades_avg {\n          \
    \  grades_letter = append(grades_letter, \"B-\")\n        } else if grade < grades_avg\
    \ {\n            grades_letter = append(grades_letter, \"B-\")\n        } else\
    \ if grade == grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"A+\")\n        } else {\n            grades_letter = append(grades_letter,\
    \ \"A\")\n        }\n    }\n    return grades_letter\n}\n", "    grades_sum :=\
    \ 0.0\n    grades_count := 0\n    grades_letter := []string{}\n    for _, grade\
    \ := range grades {\n        grades_sum += grade\n        grades_count++\n   \
    \ }\n    if grades_count > 0 {\n        grades_avg := grades_sum / float64(grades_count)\n\
    \        for _, grade := range grades {\n            if grade > grades_avg {\n\
    \                grades_letter = append(grades_letter, \"A+\")\n            }\
    \ else if grade < grades_avg {\n                grades_letter = append(grades_letter,\
    \ \"A-\")\n            } else if grade == grades_avg {\n                grades_letter\
    \ = append(grades_letter, \"A\")\n            } else if grade > grades_avg+0.7\
    \ && grade < grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"B+\")\n            } else if grade > grades_avg+1.0 {\n                grades_letter\
    \ = append(grades_letter, \"B\")\n            } else if grade < grades_avg+0.7\
    \ && grade > grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"B-\")\n            } else if grade > grades_avg+0.7 && grade < grades_avg+1.0\
    \ {\n                grades_letter = append(grades_letter, \"C+\")\n         \
    \   } else if grade > grades_avg+1.0 {\n                grades_letter = append(grades_letter,\
    \ \"C\")\n            } else if grade < grades_avg+0.7 && grade > grades_avg+1.0\
    \ {\n                grades_letter = append(grades_letter, \"C-\")\n         \
    \   } else if grade > grades_avg+0.7 && grade < grades_avg+1.0 {\n           \
    \     grades_letter = append(grades_letter, \"D+\")\n            } else if grade\
    \ > grades_avg+1.0 {\n                grades_letter = append(grades_letter, \"\
    D\")\n            } else if grade < grades_avg+0.7 && grade > grades_avg+1.0 {\n\
    \                grades_letter = append(grades_letter, \"D-\")\n            }\
    \ else if grade > grades_avg+0.7 && grade < grades_avg+1.0 {\n               \
    \ grades_letter = append(grades_letter, \"E\")\n            }\n        }\n   \
    \ }\n    return grades_letter\n}\n", "    var grades_string []string\n    for\
    \ _, grade := range grades {\n        if grade > 3.0 {\n            grades_string\
    \ = append(grades_string, \"B+\")\n        } else if grade > 2.7 {\n         \
    \   grades_string = append(grades_string, \"B\")\n        } else if grade > 2.3\
    \ {\n            grades_string = append(grades_string, \"B-\")\n        } else\
    \ if grade > 2.0 {\n            grades_string = append(grades_string, \"C+\")\n\
    \        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    grade", "    grades := append([]float64{}, grades...)\n    grades =\
    \ append([]float64{}, grades...)\n    grades = append([]float64{}, grades...)\n\
    \    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]",
  "    gradesSorted := append([]float64{}, grades...)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append([]float64{},\
    \ grades", "    grades_len := len(grades)\n    grades_sum := 0.0\n    for i :=\
    \ 0; i < grades_len; i++ {\n        grades_sum += grades[i]\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_len)\n    grades_diff := grades_avg - grades[0]\n\
    \    grades_diff_len := len(grades_diff)\n    grades_diff_avg := 0.0\n    for\
    \ i := 0; i < grades_diff_len; i++ {\n        grades_diff_avg += grades_diff[i]\n\
    \    }\n    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /=\
    \ float64(grades_len)\n    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg\
    \ /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(grades_diff_len)\n\
    \    grades_diff_avg /= float64(grades_diff_len)\n    grades_diff_avg /= float64(",
  "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n      \
    \      letter_grades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n     \
    \       letter_grades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n     \
    \       letter_grades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n    \
    \        letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n   \
    \         letter_grades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n   \
    \         letter_grades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n  \
    \          letter_grades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n \
    \           letter_grades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n \
    \           letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n\
    \            letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letter_grades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n\
    \            letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    sort.Float64s(grades)\n    for i := 0;\
    \ i < len(grades); i++ {\n        gradesSorted[i] = grades[i]\n    }\n    gradesSorted\
    \ := gradesSorted[:len(gradesSorted)-1]\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, grades[0])\n    gradesSorted =\
    \ append(gradesSorted, grades[len(grades)-1])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-2])\n    gradesSorted = append(gradesSorted, grades[len(grades)-3])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-4])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-5])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-6])\n    gradesSorted = append(gradesSorted, grades[len(grades)-7])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-8])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-9])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-10])\n    gradesSorted = append(gradesSorted, grades[len(grades)-11])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-12])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-13])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-14])\n    gradesSorted = append(gradesSorted, grades[len(grades)-15])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-16])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-17])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-18])\n    gradesSorted = append(gradesSorted, grades[len(grades)-19])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-20])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-21])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-22])\n    gradesSorted = append(gradesSorted, grades[len(grades)-23])\n\
    \    gradesSorted = append(gradesSor", "    grades_len := len(grades)\n    letter_grades\
    \ := make([]string, grades_len)\n    for i := 0; i < grades_len; i++ {\n     \
    \   if grades[i] < 3.0 {\n            letter_grades[i] = \"E\"\n            continue\n\
    \        }\n        if grades[i] < 3.3 {\n            letter_grades[i] = \"D-\"\
    \n            continue\n        }\n        if grades[i] < 3.7 {\n            letter_grades[i]\
    \ = \"C+\"\n            continue\n        }\n        if grades[i] < 4.0 {\n  \
    \          letter_grades[i] = \"B-\"\n            continue\n        }\n      \
    \  if grades[i] < 4.3 {\n            letter_grades[i] = \"B+\"\n            continue\n\
    \        }\n        if grades[i] < 4.7 {\n            letter_grades[i] = \"B\"\
    \n            continue\n        }\n        if grades[i] < 5.0 {\n            letter_grades[i]\
    \ = \"A-\"\n            continue\n        }\n        if grades[i] < 5.3 {\n  \
    \          letter_grades[i] = \"A+\"\n            continue\n        }\n      \
    \  if grades[i] < 5.7 {\n            letter_grades[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 6.0 {\n            letter_grades[i] = \"A+\"\
    \n            continue\n        }\n        if grades[i] < 6.3 {\n            letter_grades[i]\
    \ = \"A\"\n            continue\n        }\n        if grades[i] < 6.7 {\n   \
    \         letter_grades[i] = \"A+\"\n            continue\n        }\n       \
    \ if grades[i] < 7.0 {\n            letter_grades[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 7.3 {\n            letter_grades[i] = \"A+\"\
    \n            continue\n        }\n        if grades[i] < 7.7 {\n            letter_grades[i]\
    \ = \"A\"\n            continue\n        }\n        if grades[i] < 8.0 {\n   \
    \         letter_grades[i] = \"A+\"\n            continue\n        }\n       \
    \ if grades[i] < 8.3 {\n            letter_grades[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 8.7 {\n            letter_grades[i] = \"A+\"\
    \n            continue\n        }\n        if grades[i] < 9.0 {\n            letter_grades[i]\
    \ = \"A\"\n            continue\n        }\n        if grades[i] < 9.3 {\n   \
    \         letter_grades[i] = \"A+\"\n            continue\n        }\n       \
    \ if grades[i] < 9.7 {\n            letter_grades[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 10.0 {\n            letter_grades[i] = \"A+\"\
    \n            continue\n        }\n        if grades[i] < 10.3 {\n           \
    \ letter_grades[i] = \"A\"\n            continue\n        }\n        if grades[i]\
    \ < 10.7 {\n            letter_grades[i] = \"A+\"\n            continue\n    \
    \    }\n        if grades[i] < 11.0 {\n            letter_grades[i] = \"A\"",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n        \
    \    letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n        \
    \    letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n         \
    \   letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n        } else if\
    \ grades[i] < 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[2]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-3]\n\
    \    gradesSorted[0] -= gradesSorted[3]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-4]\n    gradesSorted[0] -= gradesSorted[4]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-5]\n\
    \    gradesSorted[0] -= gradesSorted[5]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-6]\n    gradesSorted[0] -= gradesSorted[6]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-7]\n\
    \    gradesSorted[0] -= gradesSorted[7]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-8]\n    gradesSorted[0] -= gradesSorted[8]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-9]\n\
    \    gradesSorted[0] -= gradesSorted[9]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-10]\n    gradesSorted[0] -= gradesSorted[10]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-11]\n\
    \    gradesSorted[0] -= gradesSorted[11]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-12]\n    gradesSorted[0] -= gradesSorted[12]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-13]\n\
    \    gradesSorted[0] -= gradesSorted[13]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-14]\n    gradesSorted[0] -= gradesSorted[14]\n\
    \    gradesSorted[len(grades", "    gradesSorted := make([]float64, len(grades))\n\
    \    sort.Float64s(grades)\n    gradesSorted = grades\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n", "    grades := append([]float64{},\
    \ grades...)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(",
  "    var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n\
    \        } else if grade > 3.7 {\n            grades_string = append(grades_string,\
    \ \"A\")\n        } else if grade > 3.3 {\n            grades_string = append(grades_string,\
    \ \"A-\")\n        } else if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    grades_sum :=\
    \ 0.0\n    grades_count := 0\n    for _, grade := range grades {\n        grades_sum\
    \ += grade\n        grades_count++\n    }\n    if grades_count == 0 {\n      \
    \  return []string{\"E\"}\n    }\n    grades_avg := grades_sum / float64(grades_count)\n\
    \    grades_diff := grades_sum - grades_avg\n    grades_diff_sqr := grades_diff\
    \ * grades_diff\n    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr\
    \ /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n   \
    \ grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grades_diff_sqr /= float64(grades_count)\n\
    \    grades_diff_sqr /= float64(grades_count)\n    grade", "    grades := append([]float64{},\
    \ grades...)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n\
    \    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades =\
    \ append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(grades, 0)\n    grades = append(grades, 0)\n    grades\
    \ = append(grades, 0)\n    grades = append(grades, 0)\n    grades = append(grades,\
    \ 0)\n    grades = append(", "    var grades_string []string\n    \n    for _,\
    \ grade := range grades {\n        if grade > 3.0 {\n            grades_string\
    \ = append(grades_string, \"B+\")\n        } else if grade > 2.7 {\n         \
    \   grades_string = append(grades_string, \"B\")\n        } else if grade > 2.3\
    \ {\n            grades_string = append(grades_string, \"B-\")\n        } else\
    \ if grade > 1.3 {\n            grades_string = append(grades_string, \"C+\")\n\
    \        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    \n    return grades_string\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
