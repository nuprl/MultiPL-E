language: go_test.go
name: HumanEval_95_check_dict_case
results:
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" {\n            return false\n        }\n        if strings.ToLower(k) != k\
    \ {\n            return false\n        }\n        if strings.ToUpper(k) != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg83kyug6_test.go:21:12: v declared but not used

    /tmp/tmpg83kyug6_test.go:25:12: undefined: strings

    /tmp/tmpg83kyug6_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != strings.ToLower(key) || key != strings.ToUpper(key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxa0zz89_test.go:21:14: value declared but not used

    /tmp/tmpbxa0zz89_test.go:22:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if k != strings.ToUpper(k) {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1y8lwc7w_test.go:22:17: undefined: strings

    /tmp/tmp1y8lwc7w_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" {\n            return false\n        }\n        if strings.ToLower(k) != k\
    \ {\n            return false\n        }\n        if strings.ToUpper(k) != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg83kyug6_test.go:21:12: v declared but not used

    /tmp/tmpg83kyug6_test.go:25:12: undefined: strings

    /tmp/tmpg83kyug6_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k == \"\"\
    \ {\n            return false\n        }\n        if strings.ToLower(k) != k {\n\
    \            return false\n        }\n    }\n    for k := range dict {\n     \
    \   if k == \"\" {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppkirvzkh_test.go:25:12: undefined: strings

    /tmp/tmppkirvzkh_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return false\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiout90bn_test.go:21:12: v declared but not used

    /tmp/tmpiout90bn_test.go:22:12: undefined: strings

    /tmp/tmpiout90bn_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if strings.ToLower(k) == k {\n\
    \            return false\n        }\n        if strings.ToUpper(k) == k {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdiedg7si_test.go:21:12: v declared but not used

    /tmp/tmpdiedg7si_test.go:25:12: undefined: strings

    /tmp/tmpdiedg7si_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            continue\n        }\n        if strings.ToUpper(k) == k\
    \ {\n            continue\n        }\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuvtx80de_test.go:21:12: v declared but not used

    /tmp/tmpuvtx80de_test.go:22:12: undefined: strings

    /tmp/tmpuvtx80de_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpya_trt8t_test.go:121:6: expected ''('', found TestCheck_Dict_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074990
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if !isStringInLowerCase(k)\
    \ || !isStringInUpperCase(k) {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hpd8xhv_test.go:21:12: v declared but not used

    /tmp/tmp8hpd8xhv_test.go:22:13: undefined: isStringInLowerCase

    /tmp/tmp8hpd8xhv_test.go:22:40: undefined: isStringInUpperCase

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpya_trt8t_test.go:121:6: expected ''('', found TestCheck_Dict_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074990
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return false\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiout90bn_test.go:21:12: v declared but not used

    /tmp/tmpiout90bn_test.go:22:12: undefined: strings

    /tmp/tmpiout90bn_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if strings.ToLower(key)\
    \ == key {\n            return true\n        }\n        if strings.ToUpper(key)\
    \ == key {\n            return true\n        }\n    }\n    return false\n}\n\n\
    func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_4_vycta_test.go:21:14: value declared but not used

    /tmp/tmp_4_vycta_test.go:22:12: undefined: strings

    /tmp/tmp_4_vycta_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if k != strings.ToUpper(k) {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1y8lwc7w_test.go:22:17: undefined: strings

    /tmp/tmp1y8lwc7w_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if k != strings.ToUpper(k) {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1y8lwc7w_test.go:22:17: undefined: strings

    /tmp/tmp1y8lwc7w_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" {\n            return false\n        }\n        if strings.ToLower(k) != k\
    \ {\n            return false\n        }\n        if strings.ToUpper(k) != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg83kyug6_test.go:21:12: v declared but not used

    /tmp/tmpg83kyug6_test.go:25:12: undefined: strings

    /tmp/tmpg83kyug6_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k == \"\"\
    \ {\n            return false\n        }\n        if strings.ToLower(k) != k {\n\
    \            return false\n        }\n    }\n    for k := range dict {\n     \
    \   if k == \"\" {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppkirvzkh_test.go:25:12: undefined: strings

    /tmp/tmppkirvzkh_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if strings.ToLower(k) == k {\n\
    \            return false\n        }\n        if strings.ToUpper(k) == k {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdiedg7si_test.go:21:12: v declared but not used

    /tmp/tmpdiedg7si_test.go:25:12: undefined: strings

    /tmp/tmpdiedg7si_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k == strings.ToLower(k)\
    \ || k == strings.ToUpper(k) {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdifxior8_test.go:22:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return false\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiout90bn_test.go:21:12: v declared but not used

    /tmp/tmpiout90bn_test.go:22:12: undefined: strings

    /tmp/tmpiout90bn_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" || v == \"\" {\n            return false\n        }\n        if k == strings.ToLower(k)\
    \ || k == strings.ToUpper(k) {\n            continue\n        }\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdas35j9_test.go:25:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if k == strings.ToLower(k) {\n\
    \            return true\n        }\n        if k == strings.ToUpper(k) {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsqawzffk_test.go:21:12: v declared but not used

    /tmp/tmpsqawzffk_test.go:25:17: undefined: strings

    /tmp/tmpsqawzffk_test.go:28:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwnc4j50e_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k == \"\"\
    \ {\n            return false\n        }\n        if strings.ToLower(k) != k {\n\
    \            return false\n        }\n    }\n    for k := range dict {\n     \
    \   if k == \"\" {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppkirvzkh_test.go:25:12: undefined: strings

    /tmp/tmppkirvzkh_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k == \"\"\
    \ {\n            return false\n        }\n        if k[0] < 'A' || k[0] > 'Z'\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__0\
    \ (0.00s)\n        tmp1x8sogzf_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__3 (0.00s)\n        tmp1x8sogzf_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__5\
    \ (0.00s)\n        tmp1x8sogzf_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074992
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpya_trt8t_test.go:121:6: expected ''('', found TestCheck_Dict_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074990
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpya_trt8t_test.go:121:6: expected ''('', found TestCheck_Dict_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074990
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if k != strings.ToUpper(k) {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1y8lwc7w_test.go:22:17: undefined: strings

    /tmp/tmp1y8lwc7w_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if strings.ToLower(k) == k {\n\
    \            return false\n        }\n        if strings.ToUpper(k) == k {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdiedg7si_test.go:21:12: v declared but not used

    /tmp/tmpdiedg7si_test.go:25:12: undefined: strings

    /tmp/tmpdiedg7si_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if k == strings.ToLower(k) {\n\
    \            return true\n        }\n        if k == strings.ToUpper(k) {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsqawzffk_test.go:21:12: v declared but not used

    /tmp/tmpsqawzffk_test.go:25:17: undefined: strings

    /tmp/tmpsqawzffk_test.go:28:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if strings.ToLower(key)\
    \ != key {\n            return false\n        }\n        if strings.ToUpper(key)\
    \ != key {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpna2p5uxf_test.go:21:14: value declared but not used

    /tmp/tmpna2p5uxf_test.go:22:12: undefined: strings

    /tmp/tmpna2p5uxf_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwnc4j50e_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" {\n            if key != strings.ToLower(key) {\n                return\
    \ false\n            }\n            if key != strings.ToUpper(key) {\n       \
    \         return false\n            }\n        }\n    }\n    return true\n}\n\n\
    func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptiig_gva_test.go:21:14: value declared but not used

    /tmp/tmptiig_gva_test.go:23:23: undefined: strings

    /tmp/tmptiig_gva_test.go:26:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" {\n            if key != strings.ToLower(key) {\n                return\
    \ false\n            }\n        }\n        if value != \"\" {\n            if\
    \ value != strings.ToUpper(value) {\n                return false\n          \
    \  }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmux7ftxm_test.go:23:23: undefined: strings

    /tmp/tmpmux7ftxm_test.go:28:25: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" || v == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(v) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0luj1ytw_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" {\n            if key != strings.ToLower(key) {\n                return\
    \ false\n            }\n            if key != strings.ToUpper(key) {\n       \
    \         return false\n            }\n        }\n    }\n    return true\n}\n\n\
    func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptiig_gva_test.go:21:14: value declared but not used

    /tmp/tmptiig_gva_test.go:23:23: undefined: strings

    /tmp/tmptiig_gva_test.go:26:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpya_trt8t_test.go:121:6: expected ''('', found TestCheck_Dict_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074990
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" || v == \"\" {\n            return false\n        }\n        if k == strings.ToLower(k)\
    \ || k == strings.ToUpper(k) {\n            continue\n        }\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdas35j9_test.go:25:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" {\n            if key != strings.ToLower(key) {\n                return\
    \ false\n            }\n            if key != strings.ToUpper(key) {\n       \
    \         return false\n            }\n        }\n    }\n    return true\n}\n\n\
    func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptiig_gva_test.go:21:14: value declared but not used

    /tmp/tmptiig_gva_test.go:23:23: undefined: strings

    /tmp/tmptiig_gva_test.go:26:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != \"\"\
    \ {\n            if strings.ToLower(k) != k {\n                return false\n\
    \            }\n            if strings.ToUpper(k) != k {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbws99r45_test.go:23:16: undefined: strings

    /tmp/tmpbws99r45_test.go:26:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if k != strings.ToUpper(k) {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1y8lwc7w_test.go:22:17: undefined: strings

    /tmp/tmp1y8lwc7w_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k == strings.ToLower(k)\
    \ || k == strings.ToUpper(k) {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdifxior8_test.go:22:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" || v == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ == k {\n            return true\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpydurc_ta_test.go:25:12: undefined: strings

    /tmp/tmpydurc_ta_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k == strings.ToLower(k)\
    \ || k == strings.ToUpper(k) {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdifxior8_test.go:22:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return false\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiout90bn_test.go:21:12: v declared but not used

    /tmp/tmpiout90bn_test.go:22:12: undefined: strings

    /tmp/tmpiout90bn_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwnc4j50e_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpya_trt8t_test.go:121:6: expected ''('', found TestCheck_Dict_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074990
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" || v == \"\" {\n            return false\n        }\n        if k == strings.ToLower(k)\
    \ || k == strings.ToUpper(k) {\n            continue\n        }\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdas35j9_test.go:25:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpya_trt8t_test.go:121:6: expected ''('', found TestCheck_Dict_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074990
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptjxg0ye2_test.go:21:12: v declared but not used

    /tmp/tmptjxg0ye2_test.go:22:12: undefined: strings

    /tmp/tmptjxg0ye2_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074992
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if k > k {\n            return\
    \ false\n        }\n        if v > v {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__0\
    \ (0.00s)\n        tmpah6_vxlx_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__4 (0.00s)\n        tmpah6_vxlx_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Dict_Case/test_num__5\
    \ (0.00s)\n        tmpah6_vxlx_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if !isStringInLowerCase(k)\
    \ || !isStringInUpperCase(k) {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hpd8xhv_test.go:21:12: v declared but not used

    /tmp/tmp8hpd8xhv_test.go:22:13: undefined: isStringInLowerCase

    /tmp/tmp8hpd8xhv_test.go:22:40: undefined: isStringInUpperCase

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if k != strings.ToUpper(k) {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1y8lwc7w_test.go:22:17: undefined: strings

    /tmp/tmp1y8lwc7w_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k == \"\"\
    \ {\n            return false\n        }\n        if strings.ToLower(k) != k {\n\
    \            return false\n        }\n    }\n    for k := range dict {\n     \
    \   if k == \"\" {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppkirvzkh_test.go:25:12: undefined: strings

    /tmp/tmppkirvzkh_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" {\n            if key != strings.ToLower(key) {\n                return\
    \ false\n            }\n        }\n        if value != \"\" {\n            if\
    \ value != strings.ToUpper(value) {\n                return false\n          \
    \  }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmux7ftxm_test.go:23:23: undefined: strings

    /tmp/tmpmux7ftxm_test.go:28:25: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" {\n            return false\n        }\n        if strings.ToLower(k) != k\
    \ {\n            return false\n        }\n        if strings.ToUpper(k) != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg83kyug6_test.go:21:12: v declared but not used

    /tmp/tmpg83kyug6_test.go:25:12: undefined: strings

    /tmp/tmpg83kyug6_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != \"\"\
    \ && k[0] >= 'A' && k[0] <= 'Z' {\n            return false\n        }\n     \
    \   if k != \"\" && k[0] >= 'a' && k[0] <= 'z' {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__0\
    \ (0.00s)\n        tmpcesjszlt_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__4 (0.00s)\n        tmpcesjszlt_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Dict_Case/test_num__5\
    \ (0.00s)\n        tmpcesjszlt_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if strings.ToLower(k) == k {\n\
    \            return true\n        }\n        if strings.ToUpper(k) == k {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmh2ofcza_test.go:21:12: v declared but not used

    /tmp/tmpmh2ofcza_test.go:25:12: undefined: strings

    /tmp/tmpmh2ofcza_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptjxg0ye2_test.go:21:12: v declared but not used

    /tmp/tmptjxg0ye2_test.go:22:12: undefined: strings

    /tmp/tmptjxg0ye2_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074992
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwnc4j50e_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if !isStringInLowerCase(k)\
    \ || !isStringInUpperCase(k) {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hpd8xhv_test.go:21:12: v declared but not used

    /tmp/tmp8hpd8xhv_test.go:22:13: undefined: isStringInLowerCase

    /tmp/tmp8hpd8xhv_test.go:22:40: undefined: isStringInUpperCase

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return false\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiout90bn_test.go:21:12: v declared but not used

    /tmp/tmpiout90bn_test.go:22:12: undefined: strings

    /tmp/tmpiout90bn_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" || k == \"-\" {\n            return false\n        }\n        if v == \"\"\
    \ || v == \"-\" {\n            return false\n        }\n        if k == strings.ToLower(k)\
    \ || k == strings.ToUpper(k) {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6brgxtac_test.go:28:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpya_trt8t_test.go:121:6: expected ''('', found TestCheck_Dict_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074990
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k == strings.ToLower(k)\
    \ || k == strings.ToUpper(k) {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdifxior8_test.go:22:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k == \"\"\
    \ {\n            return false\n        }\n        if dict[k] == \"\" {\n     \
    \       return false\n        }\n        if k == strings.ToLower(k) || k == strings.ToUpper(k)\
    \ {\n            continue\n        }\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppqisffkx_test.go:28:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdl5igioi_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != strings.ToLower(key) || key != strings.ToUpper(key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxa0zz89_test.go:21:14: value declared but not used

    /tmp/tmpbxa0zz89_test.go:22:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            continue\n        }\n        if strings.ToUpper(k) == k\
    \ {\n            continue\n        }\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuvtx80de_test.go:21:12: v declared but not used

    /tmp/tmpuvtx80de_test.go:22:12: undefined: strings

    /tmp/tmpuvtx80de_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if k != strings.ToUpper(k) {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1y8lwc7w_test.go:22:17: undefined: strings

    /tmp/tmp1y8lwc7w_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" {\n            if key != strings.ToLower(key) {\n                return\
    \ false\n            }\n        }\n        if value != \"\" {\n            if\
    \ value != strings.ToUpper(value) {\n                return false\n          \
    \  }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmux7ftxm_test.go:23:23: undefined: strings

    /tmp/tmpmux7ftxm_test.go:28:25: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwnc4j50e_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            continue\n        }\n        if strings.ToLower(k) != k {\n \
    \           return false\n        }\n        if strings.ToUpper(k) != k {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprf_p7icw_test.go:21:12: v declared but not used

    /tmp/tmprf_p7icw_test.go:25:12: undefined: strings

    /tmp/tmprf_p7icw_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptjxg0ye2_test.go:21:12: v declared but not used

    /tmp/tmptjxg0ye2_test.go:22:12: undefined: strings

    /tmp/tmptjxg0ye2_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074992
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if strings.ToLower(k) == k {\n\
    \            return false\n        }\n        if strings.ToUpper(k) == k {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdiedg7si_test.go:21:12: v declared but not used

    /tmp/tmpdiedg7si_test.go:25:12: undefined: strings

    /tmp/tmpdiedg7si_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if k != strings.ToUpper(k) {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1y8lwc7w_test.go:22:17: undefined: strings

    /tmp/tmp1y8lwc7w_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != \"\"\
    \ && k[0] >= 'A' && k[0] <= 'Z' {\n            return false\n        }\n     \
    \   if k != \"\" && k[0] >= 'a' && k[0] <= 'z' {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__0\
    \ (0.00s)\n        tmpcesjszlt_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__4 (0.00s)\n        tmpcesjszlt_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Dict_Case/test_num__5\
    \ (0.00s)\n        tmpcesjszlt_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            continue\n        }\n        if strings.ToUpper(k) == k\
    \ {\n            continue\n        }\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuvtx80de_test.go:21:12: v declared but not used

    /tmp/tmpuvtx80de_test.go:22:12: undefined: strings

    /tmp/tmpuvtx80de_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return false\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiout90bn_test.go:21:12: v declared but not used

    /tmp/tmpiout90bn_test.go:22:12: undefined: strings

    /tmp/tmpiout90bn_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwnc4j50e_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != strings.ToLower(k)\
    \ || k != strings.ToUpper(k) {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpod48oyay_test.go:22:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" || v == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(v) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0luj1ytw_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" {\n            return false\n        }\n        if strings.ToLower(k) != k\
    \ {\n            return false\n        }\n        if strings.ToUpper(k) != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg83kyug6_test.go:21:12: v declared but not used

    /tmp/tmpg83kyug6_test.go:25:12: undefined: strings

    /tmp/tmpg83kyug6_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return true\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwla3hc1j_test.go:21:12: v declared but not used

    /tmp/tmpwla3hc1j_test.go:22:12: undefined: strings

    /tmp/tmpwla3hc1j_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if strings.ToLower(k) == k {\n\
    \            return false\n        }\n        if strings.ToUpper(k) == k {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdiedg7si_test.go:21:12: v declared but not used

    /tmp/tmpdiedg7si_test.go:25:12: undefined: strings

    /tmp/tmpdiedg7si_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if strings.ToLower(key)\
    \ == key {\n            return false\n        }\n        if strings.ToUpper(key)\
    \ == key {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpggtmrxut_test.go:21:14: value declared but not used

    /tmp/tmpggtmrxut_test.go:22:12: undefined: strings

    /tmp/tmpggtmrxut_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" {\n            return false\n        }\n        if strings.ToLower(k) != k\
    \ {\n            return false\n        }\n        if strings.ToUpper(k) != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg83kyug6_test.go:21:12: v declared but not used

    /tmp/tmpg83kyug6_test.go:25:12: undefined: strings

    /tmp/tmpg83kyug6_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if k == strings.ToLower(k) {\n\
    \            return true\n        }\n        if k == strings.ToUpper(k) {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsqawzffk_test.go:21:12: v declared but not used

    /tmp/tmpsqawzffk_test.go:25:17: undefined: strings

    /tmp/tmpsqawzffk_test.go:28:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwnc4j50e_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwnc4j50e_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpya_trt8t_test.go:121:6: expected ''('', found TestCheck_Dict_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074990
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k == strings.ToLower(k)\
    \ || k == strings.ToUpper(k) {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdifxior8_test.go:22:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k == \"\"\
    \ {\n            return false\n        }\n        if dict[k] == \"\" {\n     \
    \       return false\n        }\n        if dict[k] == k {\n            continue\n\
    \        }\n        if dict[k] == strings.ToLower(k) || dict[k] == strings.ToUpper(k)\
    \ {\n            continue\n        }\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8xntg5fj_test.go:31:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpya_trt8t_test.go:121:6: expected ''('', found TestCheck_Dict_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074990
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k == \"\"\
    \ {\n            return false\n        }\n        if strings.ToLower(k) != k {\n\
    \            return false\n        }\n    }\n    for k := range dict {\n     \
    \   if k == \"\" {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppkirvzkh_test.go:25:12: undefined: strings

    /tmp/tmppkirvzkh_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if k == strings.ToLower(k) {\n\
    \            return true\n        }\n        if k == strings.ToUpper(k) {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsqawzffk_test.go:21:12: v declared but not used

    /tmp/tmpsqawzffk_test.go:25:17: undefined: strings

    /tmp/tmpsqawzffk_test.go:28:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if strings.ToLower(k) == k {\n\
    \            return false\n        }\n        if strings.ToUpper(k) == k {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdiedg7si_test.go:21:12: v declared but not used

    /tmp/tmpdiedg7si_test.go:25:12: undefined: strings

    /tmp/tmpdiedg7si_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if strings.ToLower(k) == k {\n\
    \            return false\n        }\n        if strings.ToUpper(k) == k {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdiedg7si_test.go:21:12: v declared but not used

    /tmp/tmpdiedg7si_test.go:25:12: undefined: strings

    /tmp/tmpdiedg7si_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if strings.ToLower(k) == k {\n\
    \            return false\n        }\n        if strings.ToUpper(k) == k {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdiedg7si_test.go:21:12: v declared but not used

    /tmp/tmpdiedg7si_test.go:25:12: undefined: strings

    /tmp/tmpdiedg7si_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            continue\n        }\n        if strings.ToLower(k) != k {\n \
    \           return false\n        }\n        if strings.ToUpper(k) != k {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprf_p7icw_test.go:21:12: v declared but not used

    /tmp/tmprf_p7icw_test.go:25:12: undefined: strings

    /tmp/tmprf_p7icw_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if !isStringInLowerCase(k)\
    \ || !isStringInUpperCase(k) {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hpd8xhv_test.go:21:12: v declared but not used

    /tmp/tmp8hpd8xhv_test.go:22:13: undefined: isStringInLowerCase

    /tmp/tmp8hpd8xhv_test.go:22:40: undefined: isStringInUpperCase

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if k == strings.ToLower(k) {\n\
    \            return true\n        }\n        if k == strings.ToUpper(k) {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsqawzffk_test.go:21:12: v declared but not used

    /tmp/tmpsqawzffk_test.go:25:17: undefined: strings

    /tmp/tmpsqawzffk_test.go:28:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpya_trt8t_test.go:121:6: expected ''('', found TestCheck_Dict_Case

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074990
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n        if strings.ToUpper(k) !=\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptjxg0ye2_test.go:21:12: v declared but not used

    /tmp/tmptjxg0ye2_test.go:22:12: undefined: strings

    /tmp/tmptjxg0ye2_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074992
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if k == strings.ToLower(k) {\n\
    \            return true\n        }\n        if k == strings.ToUpper(k) {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsqawzffk_test.go:21:12: v declared but not used

    /tmp/tmpsqawzffk_test.go:25:17: undefined: strings

    /tmp/tmpsqawzffk_test.go:28:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            continue\n        }\n        if strings.ToLower(k) == k {\n \
    \           return false\n        }\n        if strings.ToUpper(k) == k {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpll8mv2vz_test.go:21:12: v declared but not used

    /tmp/tmpll8mv2vz_test.go:25:12: undefined: strings

    /tmp/tmpll8mv2vz_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if !isStringInLowerCase(k)\
    \ || !isStringInUpperCase(k) {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hpd8xhv_test.go:21:12: v declared but not used

    /tmp/tmp8hpd8xhv_test.go:22:13: undefined: isStringInLowerCase

    /tmp/tmp8hpd8xhv_test.go:22:40: undefined: isStringInUpperCase

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" {\n            return false\n        }\n        if strings.ToLower(k) != k\
    \ {\n            return false\n        }\n        if strings.ToUpper(k) != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg83kyug6_test.go:21:12: v declared but not used

    /tmp/tmpg83kyug6_test.go:25:12: undefined: strings

    /tmp/tmpg83kyug6_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdl5igioi_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return true\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwla3hc1j_test.go:21:12: v declared but not used

    /tmp/tmpwla3hc1j_test.go:22:12: undefined: strings

    /tmp/tmpwla3hc1j_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" || v == \"\" {\n            return false\n        }\n        if k == strings.ToLower(k)\
    \ || k == strings.ToUpper(k) {\n            continue\n        }\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdas35j9_test.go:25:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwnc4j50e_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return true\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwla3hc1j_test.go:21:12: v declared but not used

    /tmp/tmpwla3hc1j_test.go:22:12: undefined: strings

    /tmp/tmpwla3hc1j_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if strings.ToLower(key)\
    \ == key {\n            return false\n        }\n        if strings.ToUpper(key)\
    \ == key {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpggtmrxut_test.go:21:14: value declared but not used

    /tmp/tmpggtmrxut_test.go:22:12: undefined: strings

    /tmp/tmpggtmrxut_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" {\n            return false\n        }\n        if strings.ToLower(k) != k\
    \ {\n            return false\n        }\n        if strings.ToUpper(k) != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg83kyug6_test.go:21:12: v declared but not used

    /tmp/tmpg83kyug6_test.go:25:12: undefined: strings

    /tmp/tmpg83kyug6_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != string(k[0])\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpgtuf5zza_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpgtuf5zza_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__4\
    \ (0.00s)\n        tmpgtuf5zza_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__5 (0.00s)\n        tmpgtuf5zza_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if strings.ToLower(key)\
    \ == key {\n            return false\n        }\n        if strings.ToUpper(key)\
    \ == key {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpggtmrxut_test.go:21:14: value declared but not used

    /tmp/tmpggtmrxut_test.go:22:12: undefined: strings

    /tmp/tmpggtmrxut_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwnc4j50e_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return false\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiout90bn_test.go:21:12: v declared but not used

    /tmp/tmpiout90bn_test.go:22:12: undefined: strings

    /tmp/tmpiout90bn_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return false\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiout90bn_test.go:21:12: v declared but not used

    /tmp/tmpiout90bn_test.go:22:12: undefined: strings

    /tmp/tmpiout90bn_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if !isStringInLowerCase(k)\
    \ || !isStringInUpperCase(k) {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hpd8xhv_test.go:21:12: v declared but not used

    /tmp/tmp8hpd8xhv_test.go:22:13: undefined: isStringInLowerCase

    /tmp/tmp8hpd8xhv_test.go:22:40: undefined: isStringInUpperCase

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" || v == \"\" {\n            return false\n        }\n        if k[0] >= 'A'\
    \ && k[0] <= 'Z' {\n            return false\n        }\n        if k[0] >= 'a'\
    \ && k[0] <= 'z' {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__0\
    \ (0.00s)\n        tmpkdo6t1ug_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__4 (0.00s)\n        tmpkdo6t1ug_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Dict_Case/test_num__5\
    \ (0.00s)\n        tmpkdo6t1ug_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if strings.ToLower(k) == k {\n\
    \            return false\n        }\n        if strings.ToUpper(k) == k {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdiedg7si_test.go:21:12: v declared but not used

    /tmp/tmpdiedg7si_test.go:25:12: undefined: strings

    /tmp/tmpdiedg7si_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if strings.ToLower(k) != k {\n\
    \            return false\n        }\n        if strings.ToUpper(k) != k {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprzjaj_d8_test.go:21:12: v declared but not used

    /tmp/tmprzjaj_d8_test.go:25:12: undefined: strings

    /tmp/tmprzjaj_d8_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            continue\n        }\n        if strings.ToUpper(k) == k\
    \ {\n            continue\n        }\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuvtx80de_test.go:21:12: v declared but not used

    /tmp/tmpuvtx80de_test.go:22:12: undefined: strings

    /tmp/tmpuvtx80de_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if k != strings.ToUpper(k) {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1y8lwc7w_test.go:22:17: undefined: strings

    /tmp/tmp1y8lwc7w_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if strings.ToLower(k) == k {\n\
    \            return false\n        }\n        if strings.ToUpper(k) == k {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdiedg7si_test.go:21:12: v declared but not used

    /tmp/tmpdiedg7si_test.go:25:12: undefined: strings

    /tmp/tmpdiedg7si_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k == \"\"\
    \ {\n            return false\n        }\n        if dict[k] == \"\" {\n     \
    \       return false\n        }\n        if k == strings.ToLower(k) || k == strings.ToUpper(k)\
    \ {\n            continue\n        }\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppqisffkx_test.go:28:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if strings.ToLower(k) == k {\n\
    \            return true\n        }\n        if strings.ToUpper(k) == k {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmh2ofcza_test.go:21:12: v declared but not used

    /tmp/tmpmh2ofcza_test.go:25:12: undefined: strings

    /tmp/tmpmh2ofcza_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwnc4j50e_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if k > k {\n            return\
    \ false\n        }\n        if v > v {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__0\
    \ (0.00s)\n        tmpah6_vxlx_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__4 (0.00s)\n        tmpah6_vxlx_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Dict_Case/test_num__5\
    \ (0.00s)\n        tmpah6_vxlx_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074993
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != \"\"\
    \ && k[0] >= 'A' && k[0] <= 'Z' {\n            return false\n        }\n     \
    \   if k != \"\" && k[0] >= 'a' && k[0] <= 'z' {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__0\
    \ (0.00s)\n        tmpcesjszlt_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__4 (0.00s)\n        tmpcesjszlt_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Dict_Case/test_num__5\
    \ (0.00s)\n        tmpcesjszlt_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return false\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiout90bn_test.go:21:12: v declared but not used

    /tmp/tmpiout90bn_test.go:22:12: undefined: strings

    /tmp/tmpiout90bn_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" || v == \"\" {\n            return false\n        }\n        if strings.ToLower(k)\
    \ != strings.ToLower(k) {\n            return false\n        }\n        if strings.ToUpper(k)\
    \ != strings.ToUpper(k) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpciicqvs1_test.go:25:12: undefined: strings

    /tmp/tmpciicqvs1_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwnc4j50e_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if k != strings.ToUpper(k) {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1y8lwc7w_test.go:22:17: undefined: strings

    /tmp/tmp1y8lwc7w_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == \"\
    \" || k == v {\n            continue\n        }\n        if k == strings.ToLower(k)\
    \ || k == strings.ToUpper(k) {\n            continue\n        }\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_3wcnoew_test.go:25:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return false\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiout90bn_test.go:21:12: v declared but not used

    /tmp/tmpiout90bn_test.go:22:12: undefined: strings

    /tmp/tmpiout90bn_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdl5igioi_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return false\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiout90bn_test.go:21:12: v declared but not used

    /tmp/tmpiout90bn_test.go:22:12: undefined: strings

    /tmp/tmpiout90bn_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" {\n            if key != strings.ToLower(key) {\n                return\
    \ false\n            }\n        }\n        if value != \"\" {\n            if\
    \ value != strings.ToUpper(value) {\n                return false\n          \
    \  }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmux7ftxm_test.go:23:23: undefined: strings

    /tmp/tmpmux7ftxm_test.go:28:25: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for key, value := range dict {\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n        if key\
    \ != \"\" && key != key {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfr40f102_test.go:21:14: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k == \"\"\
    \ {\n            return false\n        }\n        if k[0] >= 'A' && k[0] <= 'Z'\
    \ {\n            return false\n        }\n        if k[0] >= 'a' && k[0] <= 'z'\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__0\
    \ (0.00s)\n        tmp0o1ij_6w_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__4 (0.00s)\n        tmp0o1ij_6w_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Dict_Case/test_num__5\
    \ (0.00s)\n        tmp0o1ij_6w_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if strings.ToLower(k)\
    \ != k {\n            return false\n        }\n    }\n    for k := range dict\
    \ {\n        if strings.ToUpper(k) != k {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6e2yfzq_test.go:22:12: undefined: strings

    /tmp/tmps6e2yfzq_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if strings.ToLower(k) != k {\n\
    \            return false\n        }\n        if strings.ToUpper(k) != k {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprzjaj_d8_test.go:21:12: v declared but not used

    /tmp/tmprzjaj_d8_test.go:25:12: undefined: strings

    /tmp/tmprzjaj_d8_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if strings.ToLower(k) != k {\n\
    \            return false\n        }\n        if strings.ToUpper(k) != k {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprzjaj_d8_test.go:21:12: v declared but not used

    /tmp/tmprzjaj_d8_test.go:25:12: undefined: strings

    /tmp/tmprzjaj_d8_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if k == k\
    \ {\n            return false\n        }\n        if k == strings.ToLower(k) {\n\
    \            return true\n        }\n        if k == strings.ToUpper(k) {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsqawzffk_test.go:21:12: v declared but not used

    /tmp/tmpsqawzffk_test.go:25:17: undefined: strings

    /tmp/tmpsqawzffk_test.go:28:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            return false\n        }\n    }\n    for k := range dict {\n \
    \       if k != strings.ToUpper(k) {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1y8lwc7w_test.go:22:17: undefined: strings

    /tmp/tmp1y8lwc7w_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074991
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    func check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n\
    \        return false\n    }\n    for k, v := range dict {\n        if strings.ToLower(k)\
    \ == k {\n            return true\n        }\n        if strings.ToUpper(k) ==\
    \ k {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwla3hc1j_test.go:21:12: v declared but not used

    /tmp/tmpwla3hc1j_test.go:22:12: undefined: strings

    /tmp/tmpwla3hc1j_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074993
