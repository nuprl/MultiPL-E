name: HumanEval_78_hex_key
language: go_test.go
prompt: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You\
  \ have been tasked to write a function that receives \n// a hexadecimal number as\
  \ a string and counts the number of hexadecimal \n// digits that are primes (prime\
  \ number, or a prime, is a natural number \n// greater than 1 that is not a product\
  \ of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5,\
  \ 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
  // So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B\
  \ (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct\
  \ or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
  // For num = \"AB\" the output should be 1.\n// For num = \"1077E\" the output should\
  \ be 2.\n// For num = \"ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\"\
  \ the output should be 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num\
  \ string) int {\n"
tests: "func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"\
  ), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4 },\n    \
  \ { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"\
  ), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
  ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    n := len(num)\n    prime := make([]int, n)\n    prime[0] = prime[1]\
    \ = 2\n    prime[2] = prime[3] = 5\n    prime[4] = prime[5] = 7\n    prime[6]\
    \ = prime[7] = 11\n    prime[8] = prime[9] = 13\n    prime[10] = prime[11] = 17\n\
    \    prime[12] = prime[13] = 19\n    prime[14] = prime[15] = 23\n    prime[16]\
    \ = prime[17] = 29\n    prime[18] = prime[19] = 31\n    prime[20] = prime[21]\
    \ = 37\n    prime[22] = prime[23] = 41\n    prime[24] = prime[25] = 43\n    prime[26]\
    \ = prime[27] = 47\n    prime[28] = prime[29] = 53\n    prime[30] = prime[31]\
    \ = 51\n    prime[32] = prime[33] = 59\n    prime[34] = prime[35] = 61\n    prime[36]\
    \ = prime[37] = 67\n    prime[38] = prime[39] = 71\n    prime[40] = prime[41]\
    \ = 73 \n    prime[42] = prime[43] = 79\n    prime[44] = prime[45] = 83\n    prime[46]\
    \ = prime[47] = 89\n    prime[48] = prime[49] = 97\n    prime[50] = prime[51]\n\
    \    prime[52] = prime[53] = 101\n    prime[54] = prime[55] = 107\n    prime[56]\
    \ = prime[57] = 113\n    prime[58] = prime[59] = 119\n    prime[60] = prime[61]\n\
    \    prime[62] = prime[63] = 121\n    prime[64] = prime[65] = 127\n    prime[66]\
    \ = prime[67] = 131\n    prime[68] = prime[69] = 137\n    prime[70] = prime[71]\n\
    \    prime[72] = prime[73] = 139\n    prime[74] = prime[75] = 141\n    prime[76]\
    \ = prime[77] = 147\n    prime[78] = prime[79] = 151\n    prime[80] = prime[81]\n\
    \    prime[82] = prime[83] = 157\n    prime[84] = prime[85] = 161\n    prime[86]\
    \ = prime[87] = 167\n    prime[88] = prime[89] = 173\n    prime[90] = prime[91]\n\
    \    prime[92] = prime[93] = 179\n    prime[94] = ", "    // Your code here\n\
    \    \n    \n    return 0\n}\n", "    var count int\n    \n    // Your code here\n\
    \    \n    return count\n}\n", "    num := strings.ToUpper(num)\n    count :=\
    \ 0\n    for _, char := range num {\n        if char == 'A' || char == 'B' ||\
    \ char == 'C' || char == 'D' || char == 'E' || char == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    n := 0\n    for _, r := range\
    \ num {\n        if r == 'A' || r == 'B' || r == 'C' || r == 'D' || r == 'E' ||\
    \ r == 'F' {\n            n += 2\n        } else {\n            n += 1\n     \
    \   }\n    }\n    return n\n}\n", "    num := strings.ToUpper(num)\n    count\
    \ := 0\n    for _, c := range num {\n        if c >= '0' && c <= '9' {\n     \
    \       count++\n        }\n    }\n    return count\n}\n", "    num := strings.ToUpper(num)\n\
    \    count := 0\n    for _, char := range num {\n        if char == 'A' || char\
    \ == 'B' || char == 'C' || char == 'D' || char == 'E' || char == 'F' {\n     \
    \       count++\n        }\n    }\n    return count\n}\n", "    count := 0\n \
    \   for _, r := range num {\n        if r == 'A' || r == 'B' || r == 'C' || r\
    \ == 'D' || r == 'E' || r == 'F' {\n            count++\n        }\n    }\n  \
    \  return count\n}\n", "    n := len(num)\n    hexDigits := []int{0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F}\n    primes := []int{2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\
    \    primesLen := len(primes)\n    result := 0\n    for i := 0; i < n; i++ {\n\
    \        c := num[i]\n        if c >= '0' && c <= '9' {\n            c -= '0'\n\
    \        } else {\n            c -= 'A'\n        }\n        if c >= '0' && c <=\
    \ '9' {\n            c -= '0'\n        } else {\n            c -= 'A'\n      \
    \  }\n        if c >= '0' && c <= '9' {\n            c -= '0'\n        } else\
    \ {\n            c -= 'A'\n        }\n        if c >= '0' && c <= '9' {\n    \
    \        c -= '0'\n        } else {\n            c -= 'A'\n        }\n       \
    \ if c >= '0' && c <= '9' {\n            c -= '0'\n        } else {\n        \
    \    c -= 'A'\n        }\n        if c >= '0' && c <= '9' {\n            c -=\
    \ '0'\n        } else {\n            c -= 'A'\n        }\n        if c >= '0'\
    \ && c <= '9' {\n            c -= '0'\n        } else {\n            c -= 'A'\n\
    \        }\n        if c >= '0' && c <= '9' {\n            c -= '0'\n        }\
    \ else {\n            c -= 'A'\n        }\n        if c >= '0' && c <= '9' {\n\
    \            c -= '0'\n        } else {\n            c -= 'A'\n        }\n   \
    \     if c >= '0' && c <= '9' {\n            c -= '0'\n        } else {\n    \
    \        c -= 'A'\n        }\n        if c >= '0' && c <= '9' {\n            c\
    \ -= '0'\n        } else {\n            c -= 'A'\n        }\n        if c >= '0'\
    \ && c <= '9' {\n            c -= '0'\n        } else {\n            c -= 'A'\n\
    \        }\n        if c >= '0' && c <= '9' {\n            c -= '0'\n        }\
    \ else {\n            c -= 'A'\n        }\n        if c >= '0' && c <= '9' {\n\
    \            c -= '0'\n        } else {\n            c -= 'A'", "    // Your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    var count int\n \
    \   for _, v := range num {\n        if v == 'A' || v == 'B' || v == 'C' || v\
    \ == 'D' || v == 'E' || v == 'F' {\n            count++\n        }\n    }\n  \
    \  return count\n}\n", "    var count int = 0\n    for _, v := range num {\n \
    \       if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    n :=\
    \ len(num)\n    prime := make([]int, n)\n    prime[0] = 2\n    prime[1] = 3\n\
    \    prime[2] = 5\n    prime[3] = 7\n    prime[4] = 11\n    prime[5] = 13\n  \
    \  prime[6] = 17\n    prime[7] = 19\n    prime[8] = 23\n    prime[9] = 29\n  \
    \  prime[10] = 31\n    prime[11] = 31\n    prime[12] = 37\n    prime[13] = 37\n\
    \    prime[14] = 37\n    prime[15] = 39\n    prime[16] = 41\n    prime[17] = 43\n\
    \    prime[18] = 47\n    prime[19] = 53\n    prime[20] = 59\n    prime[21] = 61\n\
    \    prime[22] = 67\n    prime[23] = 71\n    prime[24] = 73\n    prime[25] = 79\n\
    \    prime[26] = 83\n    prime[27] = 89\n    prime[28] = 97\n    prime[29] = 101\n\
    \    prime[30] = 103\n    prime[31] = 105\n    prime[32] = 107\n    prime[33]\
    \ = 109\n    prime[34] = 311\n    prime[35] = 313\n    prime[36] = 317\n    prime[37]\
    \ = 319\n    prime[38] = 329\n    prime[39] = 331\n    prime[40] = 333\n    prime[41]\
    \ = 339\n    prime[42] = 371\n    prime[43] = 373\n    prime[44] = 379\n    prime[45]\
    \ = 381\n    prime[46] = 383\n    prime[47] = 389\n    prime[48] = 401\n    prime[49]\
    \ = 403\n    prime[50] = 407\n    prime[51] = 409\n    prime[52] = 421\n    prime[53]\
    \ = 423\n    prime[54] = 427\n    prime[55] = 429\n    prime[56] = 431\n    prime[57]\
    \ = 433\n    prime[58] = 439\n    prime[59] = 443\n    prime[60] = 447\n    prime[61]\
    \ = 449\n    prime[62] = 479\n    prime[63] = 481\n    prime[64] = 483\n    prime[65]\
    \ = 487\n    prime[66] = 489\n    prime[67] = 493\n    prime[68] = 499\n    prime[69]\
    \ = ", "    num := strings.ToUpper(num)\n    result := 0\n    i := 0\n    for\
    \ ; i < len(num); i++ {\n        digit := num[i]\n        if digit == \"A\" ||\
    \ digit == \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit\
    \ == \"F\" {\n            result += 1\n        }\n    }\n    return result\n}\n",
  "    // Your code here\n    \n    return 0\n}\n", "    num := strings.ToUpper(num)\n\
    \    count := 0\n    for _, v := range num {\n        if v == 'A' || v == 'B'\
    \ || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n   \
    \     }\n    }\n    return count\n}\n", "    n := 0\n    for _, c := range num\
    \ {\n        switch c {\n        case 'A', 'B', 'C', 'D', 'E', 'F':\n        \
    \    n += 10\n        case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':\n\
    \            n += int(c - '0')\n        }\n    }\n    return n\n}\n", "    //\
    \ Your code here\n    \n    return 0\n}\n", "    // Your code here\n    \n   \
    \ \n    return 0\n}\n", "    num := strings.ToUpper(num)\n    n := len(num)\n\
    \    result := 0\n    i := 0\n    for i < n {\n        digit := num[i]\n     \
    \   switch digit {\n        case 'A', 'B', 'C', 'D', 'E', 'F':\n            result\
    \ += 1\n        default:\n            result += 2\n        }\n        i++\n  \
    \  }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
