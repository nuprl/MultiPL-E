language: go_test.go
name: HumanEval_44_change_base
results:
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"\
    Cannot change base of zero\")\n        return \"\"\n    }\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34g5a08p_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x == 0 {\n            return \"0\"\n        }\n        if x <\
    \ 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        if x < 100\
    \ {\n            return fmt.Sprintf(\"%d\", x/10)\n        }\n        if x < 1000\
    \ {\n            return fmt.Sprintf(\"%d\", x/100)\n        }\n        if x <\
    \ 10000 {\n            return fmt.Sprintf(\"%d\", x/1000)\n        }\n       \
    \ if x < 100000 {\n            return fmt.Sprintf(\"%d\", x/10000)\n        }\n\
    \        if x < 1000000 {\n            return fmt.Sprintf(\"%d\", x/100000)\n\
    \        }\n        if x < 10000000 {\n            return fmt.Sprintf(\"%d\",\
    \ x/1000000)\n        }\n        if x < 100000000 {\n            return fmt.Sprintf(\"\
    %d\", x/10000000)\n        }\n        if x < 1000000000 {\n            return\
    \ fmt.Sprintf(\"%d\", x/100000000)\n        }\n        if x < 10000000000 {\n\
    \            return fmt.Sprintf(\"%d\", x/1000000000)\n        }\n        if x\
    \ < 100000000000 {\n            return fmt.Sprintf(\"%d\", x/10000000000)\n  \
    \      }\n        if x < 1000000000000 {\n            return fmt.Sprintf(\"%d\"\
    , x/100000000000)\n        }\n        if x < 10000000000000 {\n            return\
    \ fmt.Sprintf(\"%d\", x/1000000000000)\n        }\n        if x < 100000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x/10000000000000)\n        }\n   \
    \     if x < 1000000000000000 {\n            return fmt.Sprintf(\"%d\", x/100000000000000)\n\
    \        }\n        if x < 10000000000000000 {\n            return fmt.Sprintf(\"\
    %d\", x/1000000000000000)\n        }\n        if x < 100000000000000000 {\n  \
    \          return fmt.Sprintf(\"%d\", x/10000000000000000)\n        }\n      \
    \  if x < 1000000000000000000 {\n            return fmt.Sprintf(\"%d\", x/100000000000000000)\n\
    \        }\n        if x < 10000000000000000000 {\n            return fmt.Sprintf(\"\
    %d\", x/1000000000000000000)\n        }\n        if x < 100000000000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x/10000000000000000000)\n        }\n\
    \        if x < 1000000000000000000000 {\n            return fmt.Sprintf(\"%d\"\
    , x/100000000000000000000)\n        }\n        if x < 10000000000000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x/1000000000000000000000)\n      \
    \  }\n        if x < 100000000000000000000000 {\n            return fmt.Sprintf(\"\
    %d\", x/10000000000000000000000)\n        }\n        if x < 1000000000000000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x/100000000000000000000000)\n    \
    \    }\n        if x < 10000000000000000000000000 {\n            return fmt.Sprintf(\"\
    %d\", x/1000000000000000000000000)\n        }\n        if x < 100000000000000000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x/10000000000000000000000000)\n  \
    \      }\n        if x < 1000000000000000000000000000 {\n            return fmt.Sprintf(\"\
    %d\", x/100000000000000000000000000)\n        }\n        if x < 10000000000000000000000000000\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzbvmh7fw_test.go:105:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x == 0 {\n            return \"0\"\n        }\n        if x <\
    \ 0 {\n            return \"-\" + change_base(-x, base)\n        }\n        if\
    \ x < 10 {\n            return strconv.Itoa(x)\n        }\n        if x < 100\
    \ {\n            return strconv.Itoa(x / 10) + strconv.Itoa(x % 10)\n        }\n\
    \        if x < 1000 {\n            return strconv.Itoa(x / 100) + strconv.Itoa(x\
    \ % 100) + strconv.Itoa(x % 10)\n        }\n        return \"error\"\n    case\
    \ 3:\n        if x == 0 {\n            return \"0\"\n        }\n        if x <\
    \ 0 {\n            return \"-\" + change_base(-x, base)\n        }\n        if\
    \ x < 10 {\n            return strconv.Itoa(x)\n        }\n        if x < 100\
    \ {\n            return strconv.Itoa(x / 10) + strconv.Itoa(x % 10)\n        }\n\
    \        if x < 1000 {\n            return strconv.Itoa(x / 100) + strconv.Itoa(x\
    \ % 100) + strconv.Itoa(x % 10) + strconv.Itoa(x % 100)\n        }\n        if\
    \ x < 10000 {\n            return strconv.Itoa(x / 1000) + strconv.Itoa(x % 1000)\
    \ + strconv.Itoa(x % 100) + strconv.Itoa(x % 10) + strconv.Itoa(x % 100)\n   \
    \     }\n        if x < 100000 {\n            return strconv.Itoa(x / 10000) +\
    \ strconv.Itoa(x % 10000) + strconv.Itoa(x % 100) + strconv.Itoa(x % 10) + strconv.Itoa(x\
    \ % 100)\n        }\n        if x < 1000000 {\n            return strconv.Itoa(x\
    \ / 100000) + strconv.Itoa(x % 100000) + strconv.Itoa(x % 100) + strconv.Itoa(x\
    \ % 10) + strconv.Itoa(x % 100)\n        }\n        if x < 10000000 {\n      \
    \      return strconv.Itoa(x / 1000000) + strconv.Itoa(x % 1000000) + strconv.Itoa(x\
    \ % 100) + strconv.Itoa(x % 10) + strconv.Itoa(x % 100)\n        }\n        if\
    \ x < 100000000 {\n            return strconv.Itoa(x / 10000000) + strconv.Itoa(x\
    \ % 10000000) + strconv.Itoa(x % 100) + strconv.Itoa(x % 10) + strconv.Itoa(x\
    \ % 100)\n        }\n        if x < 1000000000 {\n            return strconv.Itoa(x\
    \ / 100000000) + strconv.Itoa(x % 100000000) + strconv.Itoa(\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvpp8it7q_test.go:69:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x -= base\n    x /=\
    \ base\n    x += 1\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpw0v4g_md_test.go:49: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpw0v4g_md_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpw0v4g_md_test.go:49:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpw0v4g_md_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpw0v4g_md_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpw0v4g_md_test.go:49: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpw0v4g_md_test.go:49:\
    \ expected '2', got '1'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpw0v4g_md_test.go:49: expected '3', got '1'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpw0v4g_md_test.go:49: expected '4', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpw0v4g_md_test.go:49: expected\
    \ '5', got '1'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpw0v4g_md_test.go:49:\
    \ expected '6', got '1'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpw0v4g_md_test.go:49: expected '7', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x/100)\n    case\
    \ 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case 6:\n        return\
    \ fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return fmt.Sprintf(\"%d\"\
    , x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x/1000000)\n    case\
    \ 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000000)\n    default:\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpeyfarrje_test.go:66: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpeyfarrje_test.go:66: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpeyfarrje_test.go:66:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpeyfarrje_test.go:66: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpeyfarrje_test.go:66: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpeyfarrje_test.go:66: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpeyfarrje_test.go:66:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpeyfarrje_test.go:66: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpeyfarrje_test.go:66: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpeyfarrje_test.go:66: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpeyfarrje_test.go:66:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpeyfarrje_test.go:66: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 2 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        return fmt.Sprintf(\"%d\", x*x)\n    case 3:\n        if x < 3 {\n  \
    \          return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x*x*x)\n    case 4:\n        if x < 4 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x*x*x*x)\n    case 5:\n\
    \        if x < 5 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n  \
    \      return fmt.Sprintf(\"%d\", x*x*x*x*x)\n    case 6:\n        if x < 6 {\n\
    \            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x*x*x*x*x*x)\n    case 7:\n        if x < 7 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x*x*x*x*x*x*x)\n    case\
    \ 8:\n        if x < 8 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        return fmt.Sprintf(\"%d\", x*x*x*x*x*x*x*x)\n    case 9:\n        if\
    \ x < 9 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%d\", x*x*x*x*x*x*x*x*x)\n    case 10:\n        if x < 10 {\n\
    \            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x*x*x*x*x*x*x*x*x*x)\n    default:\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpwk4j83uk_test.go:93: expected '22', got '512'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpwk4j83uk_test.go:93: expected\
    \ '100', got '729'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n      \
    \  tmpwk4j83uk_test.go:93: expected '11101010', got '54756'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpwk4j83uk_test.go:93: expected '10000', got '256'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmpwk4j83uk_test.go:93: expected\
    \ '1000', got '64'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n      \
    \  tmpwk4j83uk_test.go:93: expected '111', got '49'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz7ukdx_5_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpax889761_test.go:53: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpax889761_test.go:53: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpax889761_test.go:53:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpax889761_test.go:53: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpax889761_test.go:53: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpax889761_test.go:53: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpax889761_test.go:53:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpax889761_test.go:53: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpax889761_test.go:53: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpax889761_test.go:53: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpax889761_test.go:53:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpax889761_test.go:53: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz7ukdx_5_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base must be less than 2\")\n        return \"\"\n    }\n \
    \   if base > 10 {\n        fmt.Println(\"base must be less than 10\")\n     \
    \   return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7cyrrhax_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10.\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgy3_fybt_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    \    switch base {\n    case 2:\n        return strconv.Itoa(base10(x))\n    case\
    \ 3:\n        return strconv.Itoa(base10(x*base))\n    case 4:\n        return\
    \ strconv.Itoa(base10(x*base*base))\n    case 5:\n        return strconv.Itoa(base10(x*base*base*base))\n\
    \    case 6:\n        return strconv.Itoa(base10(x*base*base*base*base))\n   \
    \ case 7:\n        return strconv.Itoa(base10(x*base*base*base*base*base))\n \
    \   case 8:\n        return strconv.Itoa(base10(x*base*base*base*base*base*base))\n\
    \    case 9:\n        return strconv.Itoa(base10(x*base*base*base*base*base*base*base))\n\
    \    case 10:\n        return strconv.Itoa(base10(x*base*base*base*base*base*base*base*base))\n\
    \    default:\n        fmt.Println(\"Base must be less than 10\")\n        return\
    \ \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbkw_bl21_test.go:24:16: undefined: strconv

    /tmp/tmpbkw_bl21_test.go:24:29: undefined: base10

    /tmp/tmpbkw_bl21_test.go:26:16: undefined: strconv

    /tmp/tmpbkw_bl21_test.go:26:29: undefined: base10

    /tmp/tmpbkw_bl21_test.go:28:16: undefined: strconv

    /tmp/tmpbkw_bl21_test.go:28:29: undefined: base10

    /tmp/tmpbkw_bl21_test.go:30:16: undefined: strconv

    /tmp/tmpbkw_bl21_test.go:30:29: undefined: base10

    /tmp/tmpbkw_bl21_test.go:32:16: undefined: strconv

    /tmp/tmpbkw_bl21_test.go:32:29: undefined: base10

    /tmp/tmpbkw_bl21_test.go:32:29: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base must be greater than 2\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt9ocbcxo_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(x)\n\
    \    case 3:\n        return strconv.Itoa(x / 10)\n    case 4:\n        return\
    \ strconv.Itoa(x / 100)\n    case 5:\n        return strconv.Itoa(x / 1000)\n\
    \    case 6:\n        return strconv.Itoa(x / 10000)\n    case 7:\n        return\
    \ strconv.Itoa(x / 100000)\n    case 8:\n        return strconv.Itoa(x / 1000000)\n\
    \    case 9:\n        return strconv.Itoa(x / 10000000)\n    case 10:\n      \
    \  return strconv.Itoa(x / 100000000)\n    case 11:\n        return strconv.Itoa(x\
    \ / 1000000000)\n    case 12:\n        return strconv.Itoa(x / 1000000000000)\n\
    \    case 13:\n        return strconv.Itoa(x / 10000000000000)\n    case 14:\n\
    \        return strconv.Itoa(x / 1000000000000000)\n    case 15:\n        return\
    \ strconv.Itoa(x / 10000000000000000)\n    case 16:\n        return strconv.Itoa(x\
    \ / 100000000000000000)\n    case 17:\n        return strconv.Itoa(x / 1000000000000000000)\n\
    \    case 18:\n        return strconv.Itoa(x / 10000000000000000000)\n    case\
    \ 19:\n        return strconv.Itoa(x / 100000000000000000000)\n    case 20:\n\
    \        return strconv.Itoa(x / 1000000000000000000000)\n    case 21:\n     \
    \   return strconv.Itoa(x / 10000000000000000000000)\n    case 22:\n        return\
    \ strconv.Itoa(x / 100000000000000000000000)\n    case 23:\n        return strconv.Itoa(x\
    \ / 1000000000000000000000000)\n    case 24:\n        return strconv.Itoa(x /\
    \ 10000000000000000000000000)\n    case 25:\n        return strconv.Itoa(x / 100000000000000000000000000)\n\
    \    case 26:\n        return strconv.Itoa(x / 1000000000000000000000000000)\n\
    \    case 27:\n        return strconv.Itoa(x / 10000000000000000000000000000)\n\
    \    case 28:\n        return strconv.Itoa(x / 100000000000000000000000000000)\n\
    \    case 29:\n        return strconv.Itoa(x / 1000000000000000000000000000000)\n\
    \    case 30:\n        return strconv.Itoa(x / 10000000000000000000000000000000)\n\
    \    case 31:\n        return strconv.Itoa(x / 100000000000000000000000000000000)\n\
    \    case 32:\n        return strconv.Itoa(x / 1000000000000000000000000000000000)\n\
    \    case 33:\n        return strconv.Itoa(x / 10000000000000000000000000000000000)\n\
    \    case 34:\n        return strconv.Itoa(x / 100000000000000000000000000000000000)\n\
    \    case 35:\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpziptdgzp_test.go:91:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10.\")\n        return \"\"\n    }\n    switch base {\n    case\
    \ 2:\n        return strconv.Itoa(x)\n    case 3:\n        return strconv.Itoa(x\
    \ / 10)\n    case 4:\n        return strconv.Itoa(x / 100)\n    case 5:\n    \
    \    return strconv.Itoa(x / 1000)\n    case 6:\n        return strconv.Itoa(x\
    \ / 10000)\n    case 7:\n        return strconv.Itoa(x / 100000)\n    case 8:\n\
    \        return strconv.Itoa(x / 1000000)\n    case 9:\n        return strconv.Itoa(x\
    \ / 10000000)\n    case 10:\n        return strconv.Itoa(x / 100000000)\n    default:\n\
    \        fmt.Println(\"Base must be 2, 3, 4, 5, 6, 7, 8, or 9.\")\n        return\
    \ \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdyodajpj_test.go:28:16: undefined: strconv

    /tmp/tmpdyodajpj_test.go:30:16: undefined: strconv

    /tmp/tmpdyodajpj_test.go:32:16: undefined: strconv

    /tmp/tmpdyodajpj_test.go:34:16: undefined: strconv

    /tmp/tmpdyodajpj_test.go:36:16: undefined: strconv

    /tmp/tmpdyodajpj_test.go:38:16: undefined: strconv

    /tmp/tmpdyodajpj_test.go:40:16: undefined: strconv

    /tmp/tmpdyodajpj_test.go:42:16: undefined: strconv

    /tmp/tmpdyodajpj_test.go:44:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 2 {\n            return \"\"\n        }\n        return strconv.Itoa(int(strconv.Itoa(x)))\n\
    \    case 3:\n        if x < 3 {\n            return \"\"\n        }\n       \
    \ return strconv.Itoa(int(strconv.Itoa(x/3)))\n    case 4:\n        if x < 4 {\n\
    \            return \"\"\n        }\n        return strconv.Itoa(int(strconv.Itoa(x/4)))\n\
    \    case 5:\n        if x < 5 {\n            return \"\"\n        }\n       \
    \ return strconv.Itoa(int(strconv.Itoa(x/5)))\n    case 6:\n        if x < 6 {\n\
    \            return \"\"\n        }\n        return strconv.Itoa(int(strconv.Itoa(x/6)))\n\
    \    case 7:\n        if x < 7 {\n            return \"\"\n        }\n       \
    \ return strconv.Itoa(int(strconv.Itoa(x/7)))\n    case 8:\n        if x < 8 {\n\
    \            return \"\"\n        }\n        return strconv.Itoa(int(strconv.Itoa(x/8)))\n\
    \    case 9:\n        if x < 9 {\n            return \"\"\n        }\n       \
    \ return strconv.Itoa(int(strconv.Itoa(x/9)))\n    case 10:\n        if x < 10\
    \ {\n            return \"\"\n        }\n        return strconv.Itoa(int(strconv.Itoa(x/10)))\n\
    \    default:\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6lnmw3p_test.go:23:16: undefined: strconv

    /tmp/tmpa6lnmw3p_test.go:28:16: undefined: strconv

    /tmp/tmpa6lnmw3p_test.go:33:16: undefined: strconv

    /tmp/tmpa6lnmw3p_test.go:38:16: undefined: strconv

    /tmp/tmpa6lnmw3p_test.go:43:16: undefined: strconv

    /tmp/tmpa6lnmw3p_test.go:48:16: undefined: strconv

    /tmp/tmpa6lnmw3p_test.go:53:16: undefined: strconv

    /tmp/tmpa6lnmw3p_test.go:58:16: undefined: strconv

    /tmp/tmpa6lnmw3p_test.go:63:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Printf(\"base must be less than 10\\n\")\n    }\n    x /= base\n   \
    \ x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpc2z8m0gm_test.go:50: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpc2z8m0gm_test.go:50: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpc2z8m0gm_test.go:50:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpc2z8m0gm_test.go:50: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpc2z8m0gm_test.go:50: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpc2z8m0gm_test.go:50: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpc2z8m0gm_test.go:50:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpc2z8m0gm_test.go:50: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpc2z8m0gm_test.go:50: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpc2z8m0gm_test.go:50: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpc2z8m0gm_test.go:50:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpc2z8m0gm_test.go:50: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 10 {\n            return strconv.Itoa(x)\n        }\n   \
    \     return strconv.Itoa(change_base(x / 10, base))\n    case 3:\n        if\
    \ x < 10 {\n            return strconv.Itoa(x * 3)\n        }\n        return\
    \ strconv.Itoa(change_base(x / 10, base) * 3)\n    case 4:\n        if x < 10\
    \ {\n            return strconv.Itoa(x * 4)\n        }\n        return strconv.Itoa(change_base(x\
    \ / 10, base) * 4)\n    case 5:\n        if x < 10 {\n            return strconv.Itoa(x\
    \ * 5)\n        }\n        return strconv.Itoa(change_base(x / 10, base) * 5)\n\
    \    case 6:\n        if x < 10 {\n            return strconv.Itoa(x * 6)\n  \
    \      }\n        return strconv.Itoa(change_base(x / 10, base) * 6)\n    case\
    \ 7:\n        if x < 10 {\n            return strconv.Itoa(x * 7)\n        }\n\
    \        return strconv.Itoa(change_base(x / 10, base) * 7)\n    case 8:\n   \
    \     if x < 10 {\n            return strconv.Itoa(x * 8)\n        }\n       \
    \ return strconv.Itoa(change_base(x / 10, base) * 8)\n    case 9:\n        if\
    \ x < 10 {\n            return strconv.Itoa(x * 9)\n        }\n        return\
    \ strconv.Itoa(change_base(x / 10, base) * 9) // base 9 is same as base 10\n \
    \   case 10:\n        if x < 10 {\n            return strconv.Itoa(x * 10)\n \
    \       }\n        return strconv.Itoa(change_base(x / 10, base) * 10)\n    default:\n\
    \        fmt.Printf(\"invalid base: %d\\n\", base)\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw7cm7hvn_test.go:21:20: undefined: strconv

    /tmp/tmpw7cm7hvn_test.go:23:16: undefined: strconv

    /tmp/tmpw7cm7hvn_test.go:26:20: undefined: strconv

    /tmp/tmpw7cm7hvn_test.go:28:16: undefined: strconv

    /tmp/tmpw7cm7hvn_test.go:28:29: invalid operation: change_base(x / 10, base) *
    3 (mismatched types string and untyped int)

    /tmp/tmpw7cm7hvn_test.go:31:20: undefined: strconv

    /tmp/tmpw7cm7hvn_test.go:33:16: undefined: strconv

    /tmp/tmpw7cm7hvn_test.go:33:29: invalid operation: change_base(x / 10, base) *
    4 (mismatched types string and untyped int)

    /tmp/tmpw7cm7hvn_test.go:36:20: undefined: strconv

    /tmp/tmpw7cm7hvn_test.go:38:16: undefined: strconv

    /tmp/tmpw7cm7hvn_test.go:38:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10\")\n    \
    \    return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpc2gi8via_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpc2gi8via_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpc2gi8via_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpc2gi8via_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpc2gi8via_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpc2gi8via_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpc2gi8via_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpc2gi8via_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpc2gi8via_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpc2gi8via_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpc2gi8via_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpc2gi8via_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    switch base {\n    case 2:\n\
    \        if x == 0 {\n            return \"0\"\n        }\n        if x % 2 ==\
    \ 0 {\n            return fmt.Sprintf(\"%d\", x/2)\n        }\n        return\
    \ fmt.Sprintf(\"%d%d\", x/2, x%2)\n    case 3:\n        if x == 0 {\n        \
    \    return \"0\"\n        }\n        if x % 3 == 0 {\n            return fmt.Sprintf(\"\
    %d\", x/3)\n        }\n        return fmt.Sprintf(\"%d%d\", x/3, x%3)\n    case\
    \ 4:\n        if x == 0 {\n            return \"0\"\n        }\n        if x %\
    \ 4 == 0 {\n            return fmt.Sprintf(\"%d\", x/4)\n        }\n        return\
    \ fmt.Sprintf(\"%d%d\", x/4, x%4)\n    case 5:\n        if x == 0 {\n        \
    \    return \"0\"\n        }\n        if x % 5 == 0 {\n            return fmt.Sprintf(\"\
    %d\", x/5)\n        }\n        return fmt.Sprintf(\"%d%d\", x/5, x%5)\n    case\
    \ 6:\n        if x == 0 {\n            return \"0\"\n        }\n        if x %\
    \ 6 == 0 {\n            return fmt.Sprintf(\"%d\", x/6)\n        }\n        return\
    \ fmt.Sprintf(\"%d%d\", x/6, x%6)\n    case 7:\n        if x == 0 {\n        \
    \    return \"0\"\n        }\n        if x % 7 == 0 {\n            return fmt.Sprintf(\"\
    %d\", x/7)\n        }\n        return fmt.Sprintf(\"%d%d\", x/7, x%7)\n    case\
    \ 8:\n        if x == 0 {\n            return \"0\"\n        }\n        if x %\
    \ 8 == 0 {\n            return fmt.Sprintf(\"%d\", x/8)\n        }\n        return\
    \ fmt.Sprintf(\"%d%d\", x/8, x%8)\n    case 9:\n        if x == 0 {\n        \
    \    return \"0\"\n        }\n        if x % 9 == 0 {\n            return fmt.Sprintf(\"\
    %d\", x/9)\n        }\n        return fmt.Sprintf(\"%d%d\", x/9, x%9)\n    case\
    \ 10:\n        if x == 0 {\n            return \"0\"\n        }\n        if x\
    \ % 10 == 0 {\n            return fmt.Sprintf(\"%d\", x/10)\n        }\n     \
    \   return fmt.Sprintf(\"%d%d\", x/10, x%10)\n    default:\n        fmt.Println(\"\
    base must be 2, 3, 4 or 5\")\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__1\
    \ (0.00s)\n        tmpbxen727g_test.go:129: expected '100', got '3'\n    --- FAIL:\
    \ TestChange_Base/test_num__2 (0.00s)\n        tmpbxen727g_test.go:129: expected\
    \ '11101010', got '117'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n \
    \       tmpbxen727g_test.go:129: expected '10000', got '8'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpbxen727g_test.go:129: expected '1000', got '4'\n    ---\
    \ FAIL: TestChange_Base/test_num__5 (0.00s)\n        tmpbxen727g_test.go:129:\
    \ expected '111', got '31'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n\
    \        tmpbxen727g_test.go:129: expected '2', got '02'\n    --- FAIL: TestChange_Base/test_num__7\
    \ (0.00s)\n        tmpbxen727g_test.go:129: expected '3', got '03'\n    --- FAIL:\
    \ TestChange_Base/test_num__8 (0.00s)\n        tmpbxen727g_test.go:129: expected\
    \ '4', got '04'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n        tmpbxen727g_test.go:129:\
    \ expected '5', got '05'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n\
    \        tmpbxen727g_test.go:129: expected '6', got '06'\n    --- FAIL: TestChange_Base/test_num__11\
    \ (0.00s)\n        tmpbxen727g_test.go:129: expected '7', got '07'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz7ukdx_5_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x -= base\n    x /=\
    \ base\n    x += 1\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpw0v4g_md_test.go:49: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpw0v4g_md_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpw0v4g_md_test.go:49:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpw0v4g_md_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpw0v4g_md_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpw0v4g_md_test.go:49: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpw0v4g_md_test.go:49:\
    \ expected '2', got '1'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpw0v4g_md_test.go:49: expected '3', got '1'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpw0v4g_md_test.go:49: expected '4', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpw0v4g_md_test.go:49: expected\
    \ '5', got '1'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpw0v4g_md_test.go:49:\
    \ expected '6', got '1'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpw0v4g_md_test.go:49: expected '7', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Printf(\"Base must be less than 10.\\n\")\n        return \"\"\n   \
    \ }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10.\nBase must be less than 10.\nBase must be less\
    \ than 10.\nBase must be less than 10.\nBase must be less than 10.\nBase must\
    \ be less than 10.\nBase must be less than 10.\nBase must be less than 10.\nBase\
    \ must be less than 10.\nBase must be less than 10.\nBase must be less than 10.\n\
    Base must be less than 10.\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpvtfksfdn_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpvtfksfdn_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpvtfksfdn_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpvtfksfdn_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpvtfksfdn_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpvtfksfdn_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpvtfksfdn_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpvtfksfdn_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpvtfksfdn_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpvtfksfdn_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpvtfksfdn_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpvtfksfdn_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n   \
    \ return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n \
    \ candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp3kwtha___test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp3kwtha___test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp3kwtha___test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp3kwtha___test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp3kwtha___test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp3kwtha___test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpn5b274ye_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n   \
    \ return fmt.Sprintf(\"%d%s\", x, change_base(x % base, base))\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpacgjvzxc_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpacgjvzxc_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpacgjvzxc_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpacgjvzxc_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpacgjvzxc_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpacgjvzxc_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Printf(\"base numbers are less than 10.\\n\")\n        return \"\"\n\
    \    }\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"%d\", x/2)\n\
    \    case 3:\n        return fmt.Sprintf(\"%d\", x/3)\n    case 4:\n        return\
    \ fmt.Sprintf(\"%d\", x/4)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/5)\n\
    \    case 6:\n        return fmt.Sprintf(\"%d\", x/6)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x/7)\n    case 8:\n        return fmt.Sprintf(\"%d\", x/8)\n\
    \    case 9:\n        return fmt.Sprintf(\"%d\", x/9)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%d\", x/10)\n    default:\n        fmt.Printf(\"base numbers are\
    \ less than 10.\\n\")\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base numbers are less than 10.\nbase numbers are less than 10.\nbase numbers\
    \ are less than 10.\nbase numbers are less than 10.\nbase numbers are less than\
    \ 10.\nbase numbers are less than 10.\nbase numbers are less than 10.\nbase numbers\
    \ are less than 10.\nbase numbers are less than 10.\nbase numbers are less than\
    \ 10.\nbase numbers are less than 10.\nbase numbers are less than 10.\n--- FAIL:\
    \ TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0 (0.00s)\n\
    \        tmps9bevszn_test.go:71: expected '22', got ''\n    --- FAIL: TestChange_Base/test_num__1\
    \ (0.00s)\n        tmps9bevszn_test.go:71: expected '100', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__2 (0.00s)\n        tmps9bevszn_test.go:71: expected\
    \ '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n    \
    \    tmps9bevszn_test.go:71: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmps9bevszn_test.go:71: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmps9bevszn_test.go:71: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmps9bevszn_test.go:71:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmps9bevszn_test.go:71: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmps9bevszn_test.go:71: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmps9bevszn_test.go:71: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmps9bevszn_test.go:71:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmps9bevszn_test.go:71: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphm11cr64_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return strconv.Itoa(int(float64(x)/2))\n    case 3:\n        return\
    \ strconv.Itoa(int(float64(x)/3))\n    case 4:\n        return strconv.Itoa(int(float64(x)/4))\n\
    \    case 5:\n        return strconv.Itoa(int(float64(x)/5))\n    case 6:\n  \
    \      return strconv.Itoa(int(float64(x)/6))\n    case 7:\n        return strconv.Itoa(int(float64(x)/7))\n\
    \    case 8:\n        return strconv.Itoa(int(float64(x)/8))\n    case 9:\n  \
    \      return strconv.Itoa(int(float64(x)/9))\n    case 10:\n        return strconv.Itoa(int(float64(x)/10))\n\
    \    default:\n        fmt.Printf(\"Base must be between 2 and 10\\n\")\n    }\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpew7of414_test.go:20:16: undefined: strconv

    /tmp/tmpew7of414_test.go:22:16: undefined: strconv

    /tmp/tmpew7of414_test.go:24:16: undefined: strconv

    /tmp/tmpew7of414_test.go:26:16: undefined: strconv

    /tmp/tmpew7of414_test.go:28:16: undefined: strconv

    /tmp/tmpew7of414_test.go:30:16: undefined: strconv

    /tmp/tmpew7of414_test.go:32:16: undefined: strconv

    /tmp/tmpew7of414_test.go:34:16: undefined: strconv

    /tmp/tmpew7of414_test.go:36:16: undefined: strconv

    /tmp/tmpew7of414_test.go:40:1: missing return

    /tmp/tmpew7of414_test.go:40:1: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp0qqv1v86_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp0qqv1v86_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp0qqv1v86_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp0qqv1v86_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp0qqv1v86_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp0qqv1v86_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp0qqv1v86_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp0qqv1v86_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp0qqv1v86_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp0qqv1v86_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp0qqv1v86_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp0qqv1v86_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10.\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmps2ad098x_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmps2ad098x_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmps2ad098x_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmps2ad098x_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmps2ad098x_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmps2ad098x_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmps2ad098x_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmps2ad098x_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmps2ad098x_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmps2ad098x_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmps2ad098x_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmps2ad098x_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4ys_4imo_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\")\n   \
    \     return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n    if\
    \ x < 0 {\n        fmt.Println(\"Negative number is not allowed.\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= \nfunc TestChange_Base(t *testing.T) {\n  candidate :=\
    \ change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n\
    \     { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9i1x9xx6_test.go:122:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    switch base {\n    case 2:\n\
    \        return fmt.Sprintf(\"%v\", x)\n    case 3:\n        return fmt.Sprintf(\"\
    %v\", x*10)\n    case 4:\n        return fmt.Sprintf(\"%v\", x*100)\n    case\
    \ 5:\n        return fmt.Sprintf(\"%v\", x*1000)\n    case 6:\n        return\
    \ fmt.Sprintf(\"%v\", x*10000)\n    case 7:\n        return fmt.Sprintf(\"%v\"\
    , x*100000)\n    case 8:\n        return fmt.Sprintf(\"%v\", x*1000000)\n    case\
    \ 9:\n        return fmt.Sprintf(\"%v\", x*10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%v\", x*100000000)\n    default:\n        fmt.Println(\"Base must\
    \ be less than or equal to 10\")\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmponsvvkw2_test.go:75: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmponsvvkw2_test.go:75: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmponsvvkw2_test.go:75: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmponsvvkw2_test.go:75: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmponsvvkw2_test.go:75: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmponsvvkw2_test.go:75: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmponsvvkw2_test.go:75: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmponsvvkw2_test.go:75: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmponsvvkw2_test.go:75:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmponsvvkw2_test.go:75: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmponsvvkw2_test.go:75: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmponsvvkw2_test.go:75:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1.\")\n        return \"error\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcrzbogg7_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 2.\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\")\n   \
    \     return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n    if\
    \ x < 0 {\n        fmt.Println(\"Negative number is not allowed.\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= \nfunc TestChange_Base(t *testing.T) {\n  candidate :=\
    \ change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n\
    \     { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp54lm19w3_test.go:122:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"base must be less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaw56prx4_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    switch base {\n    case 2:\n        if x == 0 {\n         \
    \   return \"0\"\n        }\n        if x == 1 {\n            return \"1\"\n \
    \       }\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n        if x ==\
    \ 0 {\n            return \"0\"\n        }\n        if x == 1 {\n            return\
    \ \"11\"\n        }\n        if x == 2 {\n            return \"21\"\n        }\n\
    \        return fmt.Sprintf(\"%d\", x)\n    case 4:\n        if x == 0 {\n   \
    \         return \"0\"\n        }\n        if x == 1 {\n            return \"\
    100\"\n        }\n        if x == 2 {\n            return \"200\"\n        }\n\
    \        if x == 3 {\n            return \"300\"\n        }\n        if x == 4\
    \ {\n            return \"400\"\n        }\n        if x == 5 {\n            return\
    \ \"500\"\n        }\n        if x == 6 {\n            return \"600\"\n      \
    \  }\n        if x == 7 {\n            return \"700\"\n        }\n        if x\
    \ == 8 {\n            return \"800\"\n        }\n        if x == 9 {\n       \
    \     return \"900\"\n        }\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 5:\n        if x == 0 {\n            return \"0\"\n        }\n        if x ==\
    \ 1 {\n            return \"1000\"\n        }\n        if x == 2 {\n         \
    \   return \"2000\"\n        }\n        if x == 3 {\n            return \"3000\"\
    \n        }\n        if x == 4 {\n            return \"4000\"\n        }\n   \
    \     if x == 5 {\n            return \"5000\"\n        }\n        if x == 6 {\n\
    \            return \"6000\"\n        }\n        if x == 7 {\n            return\
    \ \"7000\"\n        }\n        if x == 8 {\n            return \"8000\"\n    \
    \    }\n        if x == 9 {\n            return \"9000\"\n        }\n        if\
    \ x == 10 {\n            return \"10000\"\n        }\n        if x == 11 {\n \
    \           return \"11000\"\n        }\n        if x == 12 {\n            return\
    \ \"12000\"\n        }\n        if x == 13 {\n            return \"13000\"\n \
    \       }\n        if x == 14 {\n            return \"14000\"\n        }\n   \
    \     if x == 15 {\n            return \"15000\"\n        }\n        if x == 16\
    \ {\n            return \"16000\"\n        }\n        if x == 17 {\n         \
    \   return \"17000\"\n        }\n        if x == 18 {\n            return \"18000\"\
    \n        }\n        if x == 19 {\n            return \"19000\"\n        }\n \
    \       if x == 20 {\n            return \"20000\"\n        }\n        if x ==\
    \ 21 {\n            return \"21000\"\n        }\n        if x == 22 {\n      \
    \      return \"22000\"\n        }\n        if x == 23 {\n            return \"\
    23000\"\n        }\n        if x == 24 {\n            return \"24000\"\n     \
    \   }\n        if x == 25 {\n            return \"25000\"\n        }\n       \
    \ if x == 26 {\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphkl_d1dr_test.go:154:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10\")\n    \
    \    return \"\"\n    }\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 3:\n        return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n\
    \        return fmt.Sprintf(\"%d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"\
    %d\", x*1000)\n    case 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case\
    \ 7:\n        return fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%d\", x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\"\
    , x*10000000)\n    case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n\
    \    case 11:\n        return fmt.Sprintf(\"%d\", x*1000000000)\n    case 12:\n\
    \        return fmt.Sprintf(\"%d\", x*10000000000)\n    case 13:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000000)\n    case 14:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000000)\n    case 15:\n        return fmt.Sprintf(\"%d\", x*10000000000000)\n\
    \    case 16:\n        return fmt.Sprintf(\"%d\", x*100000000000000)\n    case\
    \ 17:\n        return fmt.Sprintf(\"%d\", x*1000000000000000)\n    case 18:\n\
    \        return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case 19:\n     \
    \   return fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n        return\
    \ fmt.Sprintf(\"%d\", x*1000000000000000000)\n    case 21:\n        return fmt.Sprintf(\"\
    %d\", x*10000000000000000000)\n    case 22:\n        return fmt.Sprintf(\"%d\"\
    , x*100000000000000000000)\n    case 23:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000)\n\
    \    case 24:\n        return fmt.Sprintf(\"%d\", x*10000000000000000000000)\n\
    \    case 25:\n        return fmt.Sprintf(\"%d\", x*100000000000000000000000)\n\
    \    case 26:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000000)\n\
    \    case 27:\n        return fmt.Sprintf(\"%d\", x*10000000000000000000000000)\n\
    \    case 28:\n        return fmt.Sprintf(\"%d\", x*100000000000000000000000000)\n\
    \    case 29:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000000000)\n\
    \    case 30:\n        return fmt.Sprintf(\"%d\", x*10000000000000000000000000000)\n\
    \    case 31:\n        return fmt.Sprintf(\"%d\", x*100000000000000000000000000000)\n\
    \    case 32:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000000000000)\n\
    \    case 33:\n        return fmt.Sprintf(\"%d\", x*10000000000000000000000000000000)\n\
    \    case 34:\n        return fmt.Sprintf(\"%d\", x*100000000000000000000000000000000)\n\
    \    case 35:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000000000000000)\n\
    \    case 36:\n        return fmt.Sprintf(\"\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuigr7wjy_test.go:96:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    if x < 0 {\n        fmt.Println(\"\
    x must be greater than or equal to 0\")\n        return \"\"\n    }\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr5laq2sq_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be less than 2\")\n        return \"\"\n    }\n \
    \   if base > 10 {\n        fmt.Println(\"Base must be less than 10\")\n     \
    \   return \"\"\n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(int(math.Pow(x,\
    \ 1/float64(base))))\n    case 3:\n        return strconv.Itoa(int(math.Pow(x,\
    \ 1/float64(base))) + x)\n    case 4:\n        return strconv.Itoa(int(math.Pow(x,\
    \ 1/float64(base))) + int(math.Pow(x, 1/float64(base))) + x)\n    case 5:\n  \
    \      return strconv.Itoa(int(math.Pow(x, 1/float64(base))) + int(math.Pow(x,\
    \ 1/float64(base))) + int(math.Pow(x, 1/float64(base))) + x)\n    case 6:\n  \
    \      return strconv.Itoa(int(math.Pow(x, 1/float64(base))) + int(math.Pow(x,\
    \ 1/float64(base))) + int(math.Pow(x, 1/float64(base))) + int(math.Pow(x, 1/float64(base)))\
    \ + x)\n    case 7:\n        return strconv.Itoa(int(math.Pow(x, 1/float64(base)))\
    \ + int(math.Pow(x, 1/float64(base))) + int(math.Pow(x, 1/float64(base))) + int(math.Pow(x,\
    \ 1/float64(base))) + int(math.Pow(x, 1/float64(base))) + x)\n    case 8:\n  \
    \      return strconv.Itoa(int(math.Pow(x, 1/float64(base))) + int(math.Pow(x,\
    \ 1/float64(base))) + int(math.Pow(x, 1/float64(base))) + int(math.Pow(x, 1/float64(base)))\
    \ + int(math.Pow(x, 1/float64(base))) + int(math.Pow(x, 1/float64(base))) + x)\n\
    \    case 9:\n        return strconv.Itoa(int(math.Pow(x, 1/float64(base))) +\
    \ int(math.Pow(x, 1/float64(base))) + int(math.Pow(x, 1/float64(base))) + int(math.Pow(x,\
    \ 1/float64(base))) + int(math.Pow(x, 1/float64(base))) + int(math.Pow(x, 1/float64(base)))\
    \ + int(math.Pow(x, 1/float64(base))) + x)\n    case 10:\n        return strconv.Itoa(int(math.Pow(x,\
    \ 1/float64(base))) + int(math.Pow(x, 1/float64(base))) + int(math.Pow(x, 1/float64(base)))\
    \ + int(math.Pow(x, 1/float64(base))) + int(math.Pow(x, 1/float64(base))) + int(math.Pow(x,\
    \ 1/float64(base))) + int(math.Pow(x, 1/float64(base))) + int(math.Pow(x, 1/float64(base)))\
    \ + x)\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv6bcvgy4_test.go:46:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\n    }\n\
    \    switch base {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 3:\n        return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n    default:\n \
    \       fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\n  \
    \  }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp45zmx3i7_test.go:71: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp45zmx3i7_test.go:71: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp45zmx3i7_test.go:71:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp45zmx3i7_test.go:71: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp45zmx3i7_test.go:71: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp45zmx3i7_test.go:71: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp45zmx3i7_test.go:71:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp45zmx3i7_test.go:71: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp45zmx3i7_test.go:71: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp45zmx3i7_test.go:71: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp45zmx3i7_test.go:71:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp45zmx3i7_test.go:71: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 2.\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\")\n   \
    \     return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %0*d\", base, x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpjgmd3yai_test.go:55: expected '22', got '002'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpjgmd3yai_test.go:55: expected\
    \ '100', got '000'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n      \
    \  tmpjgmd3yai_test.go:55: expected '11101010', got '01'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpjgmd3yai_test.go:55: expected '10000', got '00'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmpjgmd3yai_test.go:55: expected\
    \ '1000', got '00'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n      \
    \  tmpjgmd3yai_test.go:55: expected '111', got '01'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmpjgmd3yai_test.go:55: expected '2', got '000'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmpjgmd3yai_test.go:55: expected\
    \ '3', got '0000'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n       \
    \ tmpjgmd3yai_test.go:55: expected '4', got '00000'\n    --- FAIL: TestChange_Base/test_num__9\
    \ (0.00s)\n        tmpjgmd3yai_test.go:55: expected '5', got '000000'\n    ---\
    \ FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpjgmd3yai_test.go:55:\
    \ expected '6', got '0000000'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpjgmd3yai_test.go:55: expected '7', got '00000000'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"\
    %d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x*100)\n    case\
    \ 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case 6:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return fmt.Sprintf(\"%d\"\
    , x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x*1000000)\n    case\
    \ 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000)\n    default:\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp7wfd8exx_test.go:66: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp7wfd8exx_test.go:66: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmp7wfd8exx_test.go:66: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmp7wfd8exx_test.go:66: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmp7wfd8exx_test.go:66: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmp7wfd8exx_test.go:66: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmp7wfd8exx_test.go:66: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmp7wfd8exx_test.go:66: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmp7wfd8exx_test.go:66:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmp7wfd8exx_test.go:66: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmp7wfd8exx_test.go:66: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmp7wfd8exx_test.go:66:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 2 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        return fmt.Sprintf(\"%0*d\", x, x)\n    case 3:\n        if x < 3 {\n\
    \            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0*d\", x, x*x)\n    case 4:\n        if x < 4 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0*d\", x, x*x*x)\n    case\
    \ 5:\n        if x < 5 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*x*x*x)\n    case 6:\n        if x <\
    \ 6 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0*d\", x, x*x*x*x*x)\n    case 7:\n        if x < 7 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0*d\", x, x*x*x*x*x*x)\n  \
    \  case 8:\n        if x < 8 {\n            return fmt.Sprintf(\"%d\", x)\n  \
    \      }\n        return fmt.Sprintf(\"%0*d\", x, x*x*x*x*x*x*x)\n    case 9:\n\
    \        if x < 9 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n  \
    \      return fmt.Sprintf(\"%0*d\", x, x*x*x*x*x*x*x*x)\n    case 10:\n      \
    \  if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n       \
    \ return fmt.Sprintf(\"%0*d\", x, x*x*x*x*x*x*x*x*x)\n    default:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n \
    \ candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp2aft6vdb_test.go:93: expected '22', got '00000064'\n   \
    \ --- FAIL: TestChange_Base/test_num__1 (0.00s)\n        tmp2aft6vdb_test.go:93:\
    \ expected '100', got '000000081'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n\
    \        tmp2aft6vdb_test.go:93: expected '11101010', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000234'\n\
    \    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n        tmp2aft6vdb_test.go:93:\
    \ expected '10000', got '0000000000000016'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp2aft6vdb_test.go:93: expected '1000', got '00000008'\n \
    \   --- FAIL: TestChange_Base/test_num__5 (0.00s)\n        tmp2aft6vdb_test.go:93:\
    \ expected '111', got '0000007'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo1qk83fp_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    if x == 1 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\
    \    if x == 2 {\n        return fmt.Sprintf(\"%0d\", x)\n    }\n    if x == 3\
    \ {\n        return fmt.Sprintf(\"%0d\", x)\n    }\n    if x == 4 {\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    }\n    if x == 5 {\n        return fmt.Sprintf(\"\
    %0d\", x)\n    }\n    if x == 6 {\n        return fmt.Sprintf(\"%0d\", x)\n  \
    \  }\n    if x == 7 {\n        return fmt.Sprintf(\"%0d\", x)\n    }\n    if x\
    \ == 8 {\n        return fmt.Sprintf(\"%0d\", x)\n    }\n    if x == 9 {\n   \
    \     return fmt.Sprintf(\"%0d\", x)\n    }\n    if x == 10 {\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    }\n    if x == 11 {\n        return fmt.Sprintf(\"\
    %0d\", x)\n    }\n    if x == 12 {\n        return fmt.Sprintf(\"%0d\", x)\n \
    \   }\n    if x == 13 {\n        return fmt.Sprintf(\"%0d\", x)\n    }\n    if\
    \ x == 14 {\n        return fmt.Sprintf(\"%0d\", x)\n    }\n    if x == 15 {\n\
    \        return fmt.Sprintf(\"%0d\", x)\n    }\n    if x == 16 {\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    }\n    if x == 17 {\n        return fmt.Sprintf(\"\
    %0d\", x)\n    }\n    if x == 18 {\n        return fmt.Sprintf(\"%0d\", x)\n \
    \   }\n    if x == 19 {\n        return fmt.Sprintf(\"%0d\", x)\n    }\n    if\
    \ x == 20 {\n        return fmt.Sprintf(\"%0d\", x)\n    }\n    if x == 21 {\n\
    \        return fmt.Sprintf(\"%0d\", x)\n    }\n    if x == 22 {\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    }\n    if x == 23 {\n        return fmt.Sprintf(\"\
    %0d\", x)\n    }\n    if x == 24 {\n        return fmt.Sprintf(\"%0d\", x)\n \
    \   }\n    if x == 25 {\n        return fmt.Sprintf(\"%0d\", x)\n    }\n    if\
    \ x == 26 {\n        return fmt.Sprintf(\"%0d\", x)\n    }\n    if x == 27 {\n\
    \        return fmt.Sprintf(\"%0d\", x)\n    }\n    if x == 28 {\n        return\
    \ fmt.Sprintf(\"%0d\", x)\n    }\n    if x == 29 {\n        return fmt.Sprintf(\"\
    %0d\", x)\n    }\n    if \nfunc TestChange_Base(t *testing.T) {\n  candidate :=\
    \ change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n\
    \     { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpash6x8k1_test.go:117:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x -= base\n    x /=\
    \ base\n    x += 1\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpw0v4g_md_test.go:49: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpw0v4g_md_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpw0v4g_md_test.go:49:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpw0v4g_md_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpw0v4g_md_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpw0v4g_md_test.go:49: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpw0v4g_md_test.go:49:\
    \ expected '2', got '1'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpw0v4g_md_test.go:49: expected '3', got '1'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpw0v4g_md_test.go:49: expected '4', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpw0v4g_md_test.go:49: expected\
    \ '5', got '1'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpw0v4g_md_test.go:49:\
    \ expected '6', got '1'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpw0v4g_md_test.go:49: expected '7', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n    }\n\
    \    switch base {\n    case 2:\n        return strconv.Itoa(base*x)\n    case\
    \ 3:\n        return strconv.Itoa(base*x*x)\n    case 4:\n        return strconv.Itoa(base*x*x*x)\n\
    \    case 5:\n        return strconv.Itoa(base*x*x*x*x)\n    case 6:\n       \
    \ return strconv.Itoa(base*x*x*x*x*x)\n    case 7:\n        return strconv.Itoa(base*x*x*x*x*x*x)\n\
    \    case 8:\n        return strconv.Itoa(base*x*x*x*x*x*x*x)\n    case 9:\n \
    \       return strconv.Itoa(base*x*x*x*x*x*x*x*x)\n    case 10:\n        return\
    \ strconv.Itoa(base*x*x*x*x*x*x*x*x*x)\n    default:\n        fmt.Println(\"Base\
    \ must be less than 10.\")\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpolzk3qhu_test.go:24:16: undefined: strconv

    /tmp/tmpolzk3qhu_test.go:26:16: undefined: strconv

    /tmp/tmpolzk3qhu_test.go:28:16: undefined: strconv

    /tmp/tmpolzk3qhu_test.go:30:16: undefined: strconv

    /tmp/tmpolzk3qhu_test.go:32:16: undefined: strconv

    /tmp/tmpolzk3qhu_test.go:34:16: undefined: strconv

    /tmp/tmpolzk3qhu_test.go:36:16: undefined: strconv

    /tmp/tmpolzk3qhu_test.go:38:16: undefined: strconv

    /tmp/tmpolzk3qhu_test.go:40:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpn5b274ye_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 2.\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\")\n   \
    \     return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_nfyyhb2_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    x %= base\n    x /= base\n    x /= base\n    x /= base\n  \
    \  x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n   \
    \ x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x\
    \ /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /=\
    \ base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n\
    \    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n \
    \   x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n  \
    \  x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n   \
    \ x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x\
    \ /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /=\
    \ base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n\
    \    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n \
    \   x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n  \
    \  x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n   \
    \ x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x\
    \ /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /=\
    \ base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n\
    \    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqvhhnjw7_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 2 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        return fmt.Sprintf(\"%0*d\", base, x)\n    case 3:\n        if x < 3\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0*d\", base, x)\n    case 4:\n        if x < 4 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 5:\n\
    \        if x < 5 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n  \
    \      return fmt.Sprintf(\"%0*d\", base, x)\n    case 6:\n        if x < 6 {\n\
    \            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0*d\", base, x)\n    case 7:\n        if x < 7 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 8:\n\
    \        if x < 8 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n  \
    \      return fmt.Sprintf(\"%0*d\", base, x)\n    case 9:\n        if x < 9 {\n\
    \            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0*d\", base, x)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0*d\", base, x)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpua96x5ch_test.go:93: expected '22', got '008'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpua96x5ch_test.go:93: expected\
    \ '100', got '009'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n      \
    \  tmpua96x5ch_test.go:93: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpua96x5ch_test.go:93: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmpua96x5ch_test.go:93: expected\
    \ '1000', got '08'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n      \
    \  tmpua96x5ch_test.go:93: expected '111', got '07'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp610kjt37_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp610kjt37_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp610kjt37_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp610kjt37_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp610kjt37_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp610kjt37_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp610kjt37_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp610kjt37_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp610kjt37_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp610kjt37_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp610kjt37_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp610kjt37_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10\")\n    \
    \    return \"\"\n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(base*x)\n\
    \    case 3:\n        return strconv.Itoa(base*x*x)\n    case 4:\n        return\
    \ strconv.Itoa(base*x*x*x)\n    case 5:\n        return strconv.Itoa(base*x*x*x*x)\n\
    \    case 6:\n        return strconv.Itoa(base*x*x*x*x*x)\n    case 7:\n     \
    \   return strconv.Itoa(base*x*x*x*x*x*x)\n    case 8:\n        return strconv.Itoa(base*x*x*x*x*x*x*x)\n\
    \    case 9:\n        return strconv.Itoa(base*x*x*x*x*x*x*x*x)\n    case 10:\n\
    \        return strconv.Itoa(base*x*x*x*x*x*x*x*x*x*x)\n    case 11:\n       \
    \ return strconv.Itoa(base*x*x*x*x*x*x*x*x*x*x*x)\n    case 12:\n        return\
    \ strconv.Itoa(base*x*x*x*x*x*x*x*x*x*x*x*x)\n    case 13:\n        return strconv.Itoa(base*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    case 14:\n        return strconv.Itoa(base*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    case 15:\n        return strconv.Itoa(base*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    case 16:\n        return strconv.Itoa(base*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    case 17:\n        return strconv.Itoa(base*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    case 18:\n        return strconv.Itoa(base*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    case 19:\n        return strconv.Itoa(base*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    case 20:\n        return strconv.Itoa(base*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    case 21:\n        return strconv.Itoa(base*x*x*x*x*x*x*\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplfbe011i_test.go:67:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074599
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1\")\n        return \"\"\n    }\n\
    \    if base == 2 {\n        return strconv.Itoa(x)\n    }\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    return strconv.Itoa(x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp33xneiwl_test.go:23:16: undefined: strconv

    /tmp/tmp33xneiwl_test.go:29:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpn5b274ye_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\")\n   \
    \     return \"\"\n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(x)\n\
    \    case 3:\n        return strconv.Itoa(x / 10)\n    case 4:\n        return\
    \ strconv.Itoa(x % 10)\n    case 5:\n        return strconv.Itoa(x % 100 / 10)\n\
    \    case 6:\n        return strconv.Itoa(x % 100 % 10)\n    case 7:\n       \
    \ return strconv.Itoa(x % 100 % 100 / 10)\n    case 8:\n        return strconv.Itoa(x\
    \ % 100 % 100 % 10)\n    case 9:\n        return strconv.Itoa(x % 100 % 100 %\
    \ 100 / 10)\n    case 10:\n        return strconv.Itoa(x % 100 % 100 % 100 % 10)\n\
    \    default:\n        fmt.Println(\"Base must be 2, 3, 4, 5, 6, 7, 8, or 9.\"\
    )\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ugptyqo_test.go:28:16: undefined: strconv

    /tmp/tmp2ugptyqo_test.go:30:16: undefined: strconv

    /tmp/tmp2ugptyqo_test.go:32:16: undefined: strconv

    /tmp/tmp2ugptyqo_test.go:34:16: undefined: strconv

    /tmp/tmp2ugptyqo_test.go:36:16: undefined: strconv

    /tmp/tmp2ugptyqo_test.go:38:16: undefined: strconv

    /tmp/tmp2ugptyqo_test.go:40:16: undefined: strconv

    /tmp/tmp2ugptyqo_test.go:42:16: undefined: strconv

    /tmp/tmp2ugptyqo_test.go:44:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074599
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return strconv.Itoa(x)\n    case 3:\n        return strconv.Itoa(int(float64(x)\
    \ / float64(base)))\n    case 4:\n        return strconv.Itoa(int(float64(x) /\
    \ float64(base)))\n    case 5:\n        return strconv.Itoa(int(float64(x) / float64(base)))\n\
    \    case 6:\n        return strconv.Itoa(int(float64(x) / float64(base)))\n \
    \   case 7:\n        return strconv.Itoa(int(float64(x) / float64(base)))\n  \
    \  case 8:\n        return strconv.Itoa(int(float64(x) / float64(base)))\n   \
    \ case 9:\n        return strconv.Itoa(int(float64(x) / float64(base)))\n    case\
    \ 10:\n        return strconv.Itoa(int(float64(x) / float64(base)))\n    default:\n\
    \        fmt.Printf(\"Base %d is not supported\\n\", base)\n    }\n    return\
    \ \"\"\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_63gs1zt_test.go:20:16: undefined: strconv

    /tmp/tmp_63gs1zt_test.go:22:16: undefined: strconv

    /tmp/tmp_63gs1zt_test.go:24:16: undefined: strconv

    /tmp/tmp_63gs1zt_test.go:26:16: undefined: strconv

    /tmp/tmp_63gs1zt_test.go:28:16: undefined: strconv

    /tmp/tmp_63gs1zt_test.go:30:16: undefined: strconv

    /tmp/tmp_63gs1zt_test.go:32:16: undefined: strconv

    /tmp/tmp_63gs1zt_test.go:34:16: undefined: strconv

    /tmp/tmp_63gs1zt_test.go:36:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n   \
    \ return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n \
    \ candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp3kwtha___test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp3kwtha___test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp3kwtha___test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp3kwtha___test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp3kwtha___test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp3kwtha___test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk3rmurrs_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base must be greater than 1\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"base must be less than 10\")\n    \
    \    return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpmnnavhkh_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpmnnavhkh_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpmnnavhkh_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpmnnavhkh_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpmnnavhkh_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpmnnavhkh_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpmnnavhkh_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpmnnavhkh_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpmnnavhkh_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpmnnavhkh_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpmnnavhkh_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpmnnavhkh_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074600
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Printf(\"base numbers are less than 10.\\n\")\n    }\n    if x == 0\
    \ {\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1u2c5p43_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074599
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x -= (x % base)\n  \
    \  return fmt.Sprintf(\"%0\" + strconv.Itoa(base) + \"d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpum1hxeg9_test.go:19:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074600
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpn5b274ye_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%0\"+strconv.Itoa(base)+\"\
    .\"+strconv.Itoa(int(x))[:len(strconv.Itoa(int(x))) - 1], x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcxtyf1a6_test.go:24:29: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074600
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base must be less than 2\")\n        return \"\"\n    }\n \
    \   if base > 10 {\n        fmt.Println(\"base must be less than 10\")\n     \
    \   return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"x must be greater\
    \ than 0\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2mki4luf_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 2 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n \
    \       if x < 100 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n \
    \       if x < 1000 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        if x < 10000 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        if x < 100000 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        if x < 1000000 {\n            return fmt.Sprintf(\"%d\", x)\n       \
    \ }\n        if x < 10000000 {\n            return fmt.Sprintf(\"%d\", x)\n  \
    \      }\n        if x < 100000000 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        if x < 1000000000 {\n            return fmt.Sprintf(\"%d\"\
    , x)\n        }\n        if x < 10000000000 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        if x < 100000000000 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        if x < 1000000000000 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        if x < 10000000000000 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        if x < 100000000000000 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        if x < 1000000000000000 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        if x < 10000000000000000 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        if x < 100000000000000000 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        if x < 1000000000000000000 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        if x < 10000000000000000000 {\n \
    \           return fmt.Sprintf(\"%d\", x)\n        }\n        if x < 100000000000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        if x < 1000000000000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        if x < 10000000000000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        if x < 100000000000000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        if x < 1000000000000000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        if x < 10000000000000000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        if x < 100000000000000000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        if x < 1000000000000000000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        if x < 10000000000000000000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        if x < 100000000000000000000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        if x < 1000000000000000000000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        if x < 10000000000000000000000000000000\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        if x < 100000000000000000000000000000000\
    \ {\n            return fmt.S\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppxndhvvg_test.go:118:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"\
    fmt\"\n    \"math\"\n)\n\nfunc TestChange_Base(t *testing.T) {\n  candidate :=\
    \ change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n\
    \     { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6bcr5q6d_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz7ukdx_5_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10.\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmps2ad098x_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmps2ad098x_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmps2ad098x_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmps2ad098x_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmps2ad098x_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmps2ad098x_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmps2ad098x_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmps2ad098x_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmps2ad098x_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmps2ad098x_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmps2ad098x_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmps2ad098x_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Printf(\"base numbers are less than 10.\\n\")\n    }\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n    default:\n \
    \       fmt.Printf(\"base number must be less than 10.\\n\")\n    }\n}\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptph156sn_test.go:43:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074600
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n   \
    \ return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n \
    \ candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp3kwtha___test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp3kwtha___test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp3kwtha___test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp3kwtha___test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp3kwtha___test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp3kwtha___test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return strconv.Itoa(base10(x))\n    case 3:\n        return strconv.Itoa(base16(x))\n\
    \    case 4:\n        return strconv.Itoa(base32(x))\n    case 5:\n        return\
    \ strconv.Itoa(base64(x))\n    case 6:\n        return strconv.Itoa(base128(x))\n\
    \    case 7:\n        return strconv.Itoa(base256(x))\n    case 8:\n        return\
    \ strconv.Itoa(base512(x))\n    case 9:\n        return strconv.Itoa(base1024(x))\n\
    \    case 10:\n        return strconv.Itoa(base2048(x))\n    case 11:\n      \
    \  return strconv.Itoa(base4096(x))\n    case 12:\n        return strconv.Itoa(base8192(x))\n\
    \    case 13:\n        return strconv.Itoa(base16384(x))\n    case 14:\n     \
    \   return strconv.Itoa(base32768(x))\n    case 15:\n        return strconv.Itoa(base65536(x))\n\
    \    case 16:\n        return strconv.Itoa(base131072(x))\n    case 17:\n    \
    \    return strconv.Itoa(base262144(x))\n    case 18:\n        return strconv.Itoa(base524288(x))\n\
    \    case 19:\n        return strconv.Itoa(base1048576(x))\n    case 20:\n   \
    \     return strconv.Itoa(base2097152(x))\n    case 21:\n        return strconv.Itoa(base4194304(x))\n\
    \    case 22:\n        return strconv.Itoa(base8388608(x))\n    case 23:\n   \
    \     return strconv.Itoa(base16777216(x))\n    case 24:\n        return strconv.Itoa(base33554432(x))\n\
    \    case 25:\n        return strconv.Itoa(base67108864(x))\n    case 26:\n  \
    \      return strconv.Itoa(base134217728(x))\n    case 27:\n        return strconv.Itoa(base268435456(x))\n\
    \    case 28:\n        return strconv.Itoa(base536870912(x))\n    case 29:\n \
    \       return strconv.Itoa(base1073741824(x))\n    case 30:\n        return strconv.Itoa(base2147483648(x))\n\
    \    case 31:\n        return strconv.Itoa(base4294967296(x))\n    case 32:\n\
    \        return strconv.Itoa(base8589934592(x))\n    case 33:\n        return\
    \ strconv.Itoa(base17179869184(x))\n    case 34:\n        return strconv.Itoa(base34359738368(x))\n\
    \    case 35:\n        return strconv.Itoa(base687\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6um_2bc5_test.go:86:36: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz7ukdx_5_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"\
    %d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x*100)\n    case\
    \ 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case 6:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return fmt.Sprintf(\"%d\"\
    , x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x*1000000)\n    case\
    \ 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000)\n    default:\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp7wfd8exx_test.go:66: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp7wfd8exx_test.go:66: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmp7wfd8exx_test.go:66: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmp7wfd8exx_test.go:66: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmp7wfd8exx_test.go:66: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmp7wfd8exx_test.go:66: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmp7wfd8exx_test.go:66: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmp7wfd8exx_test.go:66: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmp7wfd8exx_test.go:66:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmp7wfd8exx_test.go:66: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmp7wfd8exx_test.go:66: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmp7wfd8exx_test.go:66:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\")\n   \
    \     return \"\"\n    }\n    if x < 0 {\n        fmt.Println(\"x must be greater\
    \ than 0.\")\n        return \"\"\n    }\n    if base == 10 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpjo051lxf_test.go:62: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpjo051lxf_test.go:62: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpjo051lxf_test.go:62:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpjo051lxf_test.go:62: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpjo051lxf_test.go:62: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpjo051lxf_test.go:62: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpjo051lxf_test.go:62:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpjo051lxf_test.go:62: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpjo051lxf_test.go:62: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpjo051lxf_test.go:62: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpjo051lxf_test.go:62:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpjo051lxf_test.go:62: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074600
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpn5b274ye_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(base10(x))\n\
    \    case 3:\n        return strconv.Itoa(base3(x))\n    case 4:\n        return\
    \ strconv.Itoa(base4(x))\n    case 5:\n        return strconv.Itoa(base5(x))\n\
    \    case 6:\n        return strconv.Itoa(base6(x))\n    case 7:\n        return\
    \ strconv.Itoa(base7(x))\n    case 8:\n        return strconv.Itoa(base8(x))\n\
    \    case 9:\n        return strconv.Itoa(base9(x))\n    case 10:\n        return\
    \ strconv.Itoa(base10(x))\n    default:\n        fmt.Println(\"Base must be greater\
    \ than or equal to 10.\")\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp07z1m3gv_test.go:24:16: undefined: strconv

    /tmp/tmp07z1m3gv_test.go:24:29: undefined: base10

    /tmp/tmp07z1m3gv_test.go:26:16: undefined: strconv

    /tmp/tmp07z1m3gv_test.go:26:29: undefined: base3

    /tmp/tmp07z1m3gv_test.go:28:16: undefined: strconv

    /tmp/tmp07z1m3gv_test.go:28:29: undefined: base4

    /tmp/tmp07z1m3gv_test.go:30:16: undefined: strconv

    /tmp/tmp07z1m3gv_test.go:30:29: undefined: base5

    /tmp/tmp07z1m3gv_test.go:32:16: undefined: strconv

    /tmp/tmp07z1m3gv_test.go:32:29: undefined: base6

    /tmp/tmp07z1m3gv_test.go:32:29: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074600
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"\
    %d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x*100)\n    case\
    \ 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case 6:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return fmt.Sprintf(\"%d\"\
    , x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x*1000000)\n    case\
    \ 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000)\n    default:\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp7wfd8exx_test.go:66: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp7wfd8exx_test.go:66: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmp7wfd8exx_test.go:66: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmp7wfd8exx_test.go:66: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmp7wfd8exx_test.go:66: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmp7wfd8exx_test.go:66: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmp7wfd8exx_test.go:66: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmp7wfd8exx_test.go:66: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmp7wfd8exx_test.go:66:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmp7wfd8exx_test.go:66: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmp7wfd8exx_test.go:66: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmp7wfd8exx_test.go:66:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\")\n   \
    \     return \"\"\n    }\n    if x < 0 {\n        fmt.Println(\"Input number must\
    \ be greater than 0.\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpm5dzvsh6_test.go:61: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpm5dzvsh6_test.go:61: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpm5dzvsh6_test.go:61:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpm5dzvsh6_test.go:61: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpm5dzvsh6_test.go:61: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpm5dzvsh6_test.go:61: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpm5dzvsh6_test.go:61:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpm5dzvsh6_test.go:61: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpm5dzvsh6_test.go:61: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpm5dzvsh6_test.go:61: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpm5dzvsh6_test.go:61:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpm5dzvsh6_test.go:61: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 2.\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\")\n   \
    \     return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_nfyyhb2_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    \    switch base {\n    case 2:\n        return fmt.Sprintf(\"%0\" + strconv.Itoa(base)\
    \ + \"d\", x)\n    case 3:\n        return fmt.Sprintf(\"%0\" + strconv.Itoa(base)\
    \ + \"d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"%0\" + strconv.Itoa(base)\
    \ + \"d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"%0\" + strconv.Itoa(base)\
    \ + \"d\", x/1000)\n    case 6:\n        return fmt.Sprintf(\"%0\" + strconv.Itoa(base)\
    \ + \"d\", x/10000)\n    case 7:\n        return fmt.Sprintf(\"%0\" + strconv.Itoa(base)\
    \ + \"d\", x/100000)\n    case 8:\n        return fmt.Sprintf(\"%0\" + strconv.Itoa(base)\
    \ + \"d\", x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%0\" + strconv.Itoa(base)\
    \ + \"d\", x/10000000)\n    case 10:\n        return fmt.Sprintf(\"%0\" + strconv.Itoa(base)\
    \ + \"d\", x/100000000)\n    default:\n        fmt.Println(\"Base must be less\
    \ than 10\")\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0edpqi9e_test.go:24:35: undefined: strconv

    /tmp/tmp0edpqi9e_test.go:26:35: undefined: strconv

    /tmp/tmp0edpqi9e_test.go:28:35: undefined: strconv

    /tmp/tmp0edpqi9e_test.go:30:35: undefined: strconv

    /tmp/tmp0edpqi9e_test.go:32:35: undefined: strconv

    /tmp/tmp0edpqi9e_test.go:34:35: undefined: strconv

    /tmp/tmp0edpqi9e_test.go:36:35: undefined: strconv

    /tmp/tmp0edpqi9e_test.go:38:35: undefined: strconv

    /tmp/tmp0edpqi9e_test.go:40:35: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10.\")\n        return \"\"\n    }\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmplcmh7gcc_test.go:58: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmplcmh7gcc_test.go:58: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmplcmh7gcc_test.go:58:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmplcmh7gcc_test.go:58: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmplcmh7gcc_test.go:58: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmplcmh7gcc_test.go:58: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmplcmh7gcc_test.go:58:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmplcmh7gcc_test.go:58: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmplcmh7gcc_test.go:58: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmplcmh7gcc_test.go:58: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmplcmh7gcc_test.go:58:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmplcmh7gcc_test.go:58: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphm11cr64_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp94msijio_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074600
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp1krjo2kt_test.go:51: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp1krjo2kt_test.go:51: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp1krjo2kt_test.go:51:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp1krjo2kt_test.go:51: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp1krjo2kt_test.go:51: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp1krjo2kt_test.go:51: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp1krjo2kt_test.go:51:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp1krjo2kt_test.go:51: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp1krjo2kt_test.go:51: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp1krjo2kt_test.go:51: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp1krjo2kt_test.go:51:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp1krjo2kt_test.go:51: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"base must be less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpvyrzu23d_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpvyrzu23d_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpvyrzu23d_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpvyrzu23d_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpvyrzu23d_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpvyrzu23d_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpvyrzu23d_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpvyrzu23d_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpvyrzu23d_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpvyrzu23d_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpvyrzu23d_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpvyrzu23d_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpn5b274ye_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x -= '0'\n    base -=\
    \ '0'\n    x /= base\n    x += '0'\n    x /= base\n    x += '0'\n    return fmt.Sprintf(\"\
    %0\"+strconv.Itoa(int(base))+\"d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp91r99bai_test.go:24:29: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpi608p9lw_test.go:58: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpi608p9lw_test.go:58: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpi608p9lw_test.go:58:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpi608p9lw_test.go:58: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpi608p9lw_test.go:58: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpi608p9lw_test.go:58: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpi608p9lw_test.go:58:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpi608p9lw_test.go:58: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpi608p9lw_test.go:58: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpi608p9lw_test.go:58: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpi608p9lw_test.go:58:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpi608p9lw_test.go:58: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpn5b274ye_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 2 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        return fmt.Sprintf(\"%d\", x/2)\n    case 3:\n        if x < 3 {\n  \
    \          return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/3)\n    case 4:\n        if x < 4 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/4)\n    case 5:\n  \
    \      if x < 5 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%d\", x/5)\n    case 6:\n        if x < 6 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/6)\n    case 7:\n        if x < 7 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/7)\n    case 8:\n  \
    \      if x < 8 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%d\", x/8)\n    case 9:\n        if x < 9 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/9)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpbto983c8_test.go:93: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpbto983c8_test.go:93: expected\
    \ '100', got '3'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpbto983c8_test.go:93:\
    \ expected '11101010', got '117'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpbto983c8_test.go:93: expected '10000', got '8'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpbto983c8_test.go:93: expected '1000', got '4'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpbto983c8_test.go:93: expected\
    \ '111', got '3'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"base must be less than 10\")\n        return \"\"\n    }\n\
    \    switch base {\n    case 2:\n        return fmt.Sprintf(\"%0*d\", x, x)\n\
    \    case 3:\n        return fmt.Sprintf(\"%0*d\", x, x*10)\n    case 4:\n   \
    \     return fmt.Sprintf(\"%0*d\", x, x*100)\n    case 5:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*1000)\n    case 6:\n        return fmt.Sprintf(\"%0*d\", x, x*10000)\n\
    \    case 7:\n        return fmt.Sprintf(\"%0*d\", x, x*100000)\n    case 8:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*1000000)\n    case 9:\n        return\
    \ fmt.Sprintf(\"%0*d\", x, x*10000000)\n    case 10:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*100000000)\n    default:\n        fmt.Println(\"base must be less\
    \ than 10\")\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpat9redpv_test.go:71: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpat9redpv_test.go:71: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpat9redpv_test.go:71:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpat9redpv_test.go:71: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpat9redpv_test.go:71: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpat9redpv_test.go:71: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpat9redpv_test.go:71:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpat9redpv_test.go:71: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpat9redpv_test.go:71: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpat9redpv_test.go:71: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpat9redpv_test.go:71:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpat9redpv_test.go:71: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10.\")\n        return \"\"\n    }\n    if x < 0 {\n        fmt.Println(\"\
    Input number must be greater than or equal to 0.\")\n        return \"\"\n   \
    \ }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxyin6f3__test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10\")\n    \
    \    return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprh829yxs_test.go:122:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5s7oyhu5_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n    }\n\
    \    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpj0qficqp_test.go:54: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpj0qficqp_test.go:54: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpj0qficqp_test.go:54:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpj0qficqp_test.go:54: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpj0qficqp_test.go:54: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpj0qficqp_test.go:54: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpj0qficqp_test.go:54:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpj0qficqp_test.go:54: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpj0qficqp_test.go:54: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpj0qficqp_test.go:54: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpj0qficqp_test.go:54:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpj0qficqp_test.go:54: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz7ukdx_5_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk3rmurrs_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n       \
    \ }\n        return fmt.Sprintf(\"%0d\", x)\n    case 3:\n        if x < 10 {\n\
    \            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 4:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 5:\n   \
    \     if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%0d\", x)\n    case 6:\n        if x < 10 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 7:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 8:\n   \
    \     if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%0d\", x)\n    case 9:\n        if x < 10 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    default:\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmppw8zei59_test.go:93: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmppw8zei59_test.go:93: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmppw8zei59_test.go:93:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmppw8zei59_test.go:93: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmppw8zei59_test.go:93: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmppw8zei59_test.go:93: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be less than 2.\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\")\n   \
    \     return \"\"\n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(x)\n\
    \    case 3:\n        return strconv.Itoa(x / 10)\n    case 4:\n        return\
    \ strconv.Itoa(x / 100)\n    case 5:\n        return strconv.Itoa(x / 1000)\n\
    \    case 6:\n        return strconv.Itoa(x / 10000)\n    case 7:\n        return\
    \ strconv.Itoa(x / 100000)\n    case 8:\n        return strconv.Itoa(x / 1000000)\n\
    \    case 9:\n        return strconv.Itoa(x / 10000000)\n    case 10:\n      \
    \  return strconv.Itoa(x / 100000000)\n    case 11:\n        return strconv.Itoa(x\
    \ / 1000000000)\n    case 12:\n        return strconv.Itoa(x / 1000000000000)\n\
    \    case 13:\n        return strconv.Itoa(x / 10000000000000)\n    case 14:\n\
    \        return strconv.Itoa(x / 1000000000000000)\n    case 15:\n        return\
    \ strconv.Itoa(x / 10000000000000000)\n    case 16:\n        return strconv.Itoa(x\
    \ / 100000000000000000)\n    case 17:\n        return strconv.Itoa(x / 1000000000000000000)\n\
    \    case 18:\n        return strconv.Itoa(x / 10000000000000000000)\n    case\
    \ 19:\n        return strconv.Itoa(x / 100000000000000000000)\n    case 20:\n\
    \        return strconv.Itoa(x / 1000000000000000000000)\n    case 21:\n     \
    \   return strconv.Itoa(x / 10000000000000000000000)\n    case 22:\n        return\
    \ strconv.Itoa(x / 100000000000000000000000)\n    case 23:\n        return strconv.Itoa(x\
    \ / 1000000000000000000000000)\n    case 24:\n        return strconv.Itoa(x /\
    \ 10000000000000000000000000)\n    case 25:\n        return strconv.Itoa(x / 100000000000000000000000000)\n\
    \    case 26:\n        return strconv.Itoa(x / 1000000000000000000000000000)\n\
    \    case 27:\n        return strconv.Itoa(x / 10000000000000000000000000000)\n\
    \    case 28:\n        return strconv.Itoa(x / 100000000000000000000000000000)\n\
    \    case 29:\n        return strconv.Itoa(x / 1000000000000000000000000000000)\n\
    \    case 30:\n        return strconv.Itoa(x / 10000000000000000000000000000000)\n\
    \    case 31:\n        return strconv.Itoa(x / 100000000000000000000000000000000)\n\
    \    case 32:\n        return strconv.Itoa(x / 1000000000000000000000000000000000)\n\
    \    case 33:\n        return strconv.Itoa(x / 10000000000000000000000000000000000)\n\
    \    case \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3vgsnua9_test.go:92:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    \    switch base {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 3:\n        return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n    default:\n \
    \       fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpqibrav72_test.go:71: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpqibrav72_test.go:71: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpqibrav72_test.go:71:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpqibrav72_test.go:71: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpqibrav72_test.go:71: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpqibrav72_test.go:71: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpqibrav72_test.go:71:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpqibrav72_test.go:71: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpqibrav72_test.go:71: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpqibrav72_test.go:71: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpqibrav72_test.go:71:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpqibrav72_test.go:71: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return strconv.Itoa(x)\n    case 3:\n        return strconv.Itoa(x\
    \ / 10)\n    case 4:\n        return strconv.Itoa(x / 100)\n    case 5:\n    \
    \    return strconv.Itoa(x / 1000)\n    case 6:\n        return strconv.Itoa(x\
    \ / 10000)\n    case 7:\n        return strconv.Itoa(x / 100000)\n    case 8:\n\
    \        return strconv.Itoa(x / 1000000)\n    case 9:\n        return strconv.Itoa(x\
    \ / 10000000)\n    case 10:\n        return strconv.Itoa(x / 100000000)\n    case\
    \ 11:\n        return strconv.Itoa(x / 1000000000)\n    case 12:\n        return\
    \ strconv.Itoa(x / 10000000000)\n    case 13:\n        return strconv.Itoa(x /\
    \ 100000000000)\n    case 14:\n        return strconv.Itoa(x / 1000000000000)\n\
    \    case 15:\n        return strconv.Itoa(x / 10000000000000)\n    case 16:\n\
    \        return strconv.Itoa(x / 100000000000000)\n    case 17:\n        return\
    \ strconv.Itoa(x / 1000000000000000)\n    case 18:\n        return strconv.Itoa(x\
    \ / 10000000000000000)\n    case 19:\n        return strconv.Itoa(x / 100000000000000000)\n\
    \    case 20:\n        return strconv.Itoa(x / 1000000000000000000)\n    default:\n\
    \        fmt.Printf(\"base %d is not supported\\n\", base)\n    }\n    return\
    \ \"\"\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0nypm_tl_test.go:20:16: undefined: strconv

    /tmp/tmp0nypm_tl_test.go:22:16: undefined: strconv

    /tmp/tmp0nypm_tl_test.go:24:16: undefined: strconv

    /tmp/tmp0nypm_tl_test.go:26:16: undefined: strconv

    /tmp/tmp0nypm_tl_test.go:28:16: undefined: strconv

    /tmp/tmp0nypm_tl_test.go:30:16: undefined: strconv

    /tmp/tmp0nypm_tl_test.go:32:16: undefined: strconv

    /tmp/tmp0nypm_tl_test.go:34:16: undefined: strconv

    /tmp/tmp0nypm_tl_test.go:36:16: undefined: strconv

    /tmp/tmp0nypm_tl_test.go:38:16: undefined: strconv

    /tmp/tmp0nypm_tl_test.go:38:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 2 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        return fmt.Sprintf(\"%d\", x/2)\n    case 3:\n        if x < 3 {\n  \
    \          return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/3)\n    case 4:\n        if x < 4 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/4)\n    case 5:\n  \
    \      if x < 5 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%d\", x/5)\n    case 6:\n        if x < 6 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/6)\n    case 7:\n        if x < 7 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/7)\n    case 8:\n  \
    \      if x < 8 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%d\", x/8)\n    case 9:\n        if x < 9 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/9)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpbto983c8_test.go:93: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpbto983c8_test.go:93: expected\
    \ '100', got '3'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpbto983c8_test.go:93:\
    \ expected '11101010', got '117'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpbto983c8_test.go:93: expected '10000', got '8'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpbto983c8_test.go:93: expected '1000', got '4'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpbto983c8_test.go:93: expected\
    \ '111', got '3'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"\
    Cannot change base of 0\")\n        return \"\"\n    }\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb008lui2_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpad92pryg_test.go:51: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpad92pryg_test.go:51: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpad92pryg_test.go:51:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpad92pryg_test.go:51: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpad92pryg_test.go:51: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpad92pryg_test.go:51: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpad92pryg_test.go:51:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpad92pryg_test.go:51: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpad92pryg_test.go:51: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpad92pryg_test.go:51: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpad92pryg_test.go:51:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpad92pryg_test.go:51: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"\
    %d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x*100)\n    case\
    \ 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case 6:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return fmt.Sprintf(\"%d\"\
    , x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x*1000000)\n    case\
    \ 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000)\n    case 11:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000)\n    case 12:\n        return fmt.Sprintf(\"%d\", x*10000000000)\n\
    \    case 13:\n        return fmt.Sprintf(\"%d\", x*100000000000)\n    case 14:\n\
    \        return fmt.Sprintf(\"%d\", x*1000000000000)\n    case 15:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000000000000)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x*100000000000000)\n    case 17:\n        return fmt.Sprintf(\"%d\", x*1000000000000000)\n\
    \    case 18:\n        return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case\
    \ 19:\n        return fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n\
    \        return fmt.Sprintf(\"%d\", x*1000000000000000000)\n    default:\n   \
    \     return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpfc05zj38_test.go:86: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpfc05zj38_test.go:86: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmpfc05zj38_test.go:86: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpfc05zj38_test.go:86: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmpfc05zj38_test.go:86: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmpfc05zj38_test.go:86: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmpfc05zj38_test.go:86: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmpfc05zj38_test.go:86: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmpfc05zj38_test.go:86:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmpfc05zj38_test.go:86: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmpfc05zj38_test.go:86: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmpfc05zj38_test.go:86:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Printf(\"base numbers are less than 10.\\n\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3tq46mbx_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n    }\n    if base\
    \ > 10 {\n        fmt.Println(\"Base must be less than or equal to 10\")\n   \
    \ }\n    if x == 0 {\n        return \"0\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptewlgiaw_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10\")\n    \
    \    return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpc2gi8via_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpc2gi8via_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpc2gi8via_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpc2gi8via_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpc2gi8via_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpc2gi8via_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpc2gi8via_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpc2gi8via_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpc2gi8via_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpc2gi8via_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpc2gi8via_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpc2gi8via_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10\")\n    \
    \    return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpc2gi8via_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpc2gi8via_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpc2gi8via_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpc2gi8via_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpc2gi8via_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpc2gi8via_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpc2gi8via_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpc2gi8via_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpc2gi8via_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpc2gi8via_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpc2gi8via_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpc2gi8via_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpn5b274ye_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10.\")\n        return \"\"\n    }\n\
    \    switch base {\n    case 2:\n        return fmt.Sprintf(\"%0*d\", x, x)\n\
    \    case 3:\n        return fmt.Sprintf(\"%0*d\", x, x*10)\n    case 4:\n   \
    \     return fmt.Sprintf(\"%0*d\", x, x*100)\n    case 5:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*1000)\n    case 6:\n        return fmt.Sprintf(\"%0*d\", x, x*10000)\n\
    \    case 7:\n        return fmt.Sprintf(\"%0*d\", x, x*100000)\n    case 8:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*1000000)\n    case 9:\n        return\
    \ fmt.Sprintf(\"%0*d\", x, x*10000000)\n    case 10:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*100000000)\n    default:\n        fmt.Println(\"Base must be less\
    \ than 10.\")\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10.\nBase must be less than 10.\nBase must be less\
    \ than 10.\nBase must be less than 10.\nBase must be less than 10.\nBase must\
    \ be less than 10.\nBase must be less than 10.\nBase must be less than 10.\nBase\
    \ must be less than 10.\nBase must be less than 10.\nBase must be less than 10.\n\
    Base must be less than 10.\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpofv7nhgn_test.go:71: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpofv7nhgn_test.go:71: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpofv7nhgn_test.go:71:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpofv7nhgn_test.go:71: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpofv7nhgn_test.go:71: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpofv7nhgn_test.go:71: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpofv7nhgn_test.go:71:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpofv7nhgn_test.go:71: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpofv7nhgn_test.go:71: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpofv7nhgn_test.go:71: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpofv7nhgn_test.go:71:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpofv7nhgn_test.go:71: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074603
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x/100)\n    case\
    \ 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case 6:\n        return\
    \ fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return fmt.Sprintf(\"%d\"\
    , x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x/1000000)\n    case\
    \ 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000000)\n    case 11:\n        return fmt.Sprintf(\"\
    %d\", x/1000000000)\n    default:\n        return fmt.Sprintf(\"%d\", x)\n   \
    \ }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp7ynqeqiz_test.go:68: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp7ynqeqiz_test.go:68: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp7ynqeqiz_test.go:68:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp7ynqeqiz_test.go:68: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp7ynqeqiz_test.go:68: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp7ynqeqiz_test.go:68: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp7ynqeqiz_test.go:68:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp7ynqeqiz_test.go:68: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp7ynqeqiz_test.go:68: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp7ynqeqiz_test.go:68: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp7ynqeqiz_test.go:68:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp7ynqeqiz_test.go:68: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074603
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10\")\n    \
    \    return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2fcpkw1r_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 2 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        return fmt.Sprintf(\"%d\", x/2)\n    case 3:\n        if x < 3 {\n  \
    \          return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/3)\n    case 4:\n        if x < 4 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/4)\n    case 5:\n  \
    \      if x < 5 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%d\", x/5)\n    case 6:\n        if x < 6 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/6)\n    case 7:\n        if x < 7 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/7)\n    case 8:\n  \
    \      if x < 8 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%d\", x/8)\n    case 9:\n        if x < 9 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/9)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpbto983c8_test.go:93: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpbto983c8_test.go:93: expected\
    \ '100', got '3'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpbto983c8_test.go:93:\
    \ expected '11101010', got '117'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpbto983c8_test.go:93: expected '10000', got '8'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpbto983c8_test.go:93: expected '1000', got '4'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpbto983c8_test.go:93: expected\
    \ '111', got '3'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n   \
    \ return fmt.Sprintf(\"%d%s\", x, change_base(base,\n        int(base/x)))\n}\n\
    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmplxl18ss7_test.go:51: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmplxl18ss7_test.go:51: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmplxl18ss7_test.go:51:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmplxl18ss7_test.go:51: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmplxl18ss7_test.go:51: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmplxl18ss7_test.go:51: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074603
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return strconv.Itoa(base10(x))\n    case 3:\n        return strconv.Itoa(base16(x))\n\
    \    case 4:\n        return strconv.Itoa(base32(x))\n    case 5:\n        return\
    \ strconv.Itoa(base64(x))\n    case 6:\n        return strconv.Itoa(base128(x))\n\
    \    case 7:\n        return strconv.Itoa(base256(x))\n    case 8:\n        return\
    \ strconv.Itoa(base512(x))\n    case 9:\n        return strconv.Itoa(base1024(x))\n\
    \    case 10:\n        return strconv.Itoa(base2048(x))\n    case 11:\n      \
    \  return strconv.Itoa(base4096(x))\n    case 12:\n        return strconv.Itoa(base8192(x))\n\
    \    case 13:\n        return strconv.Itoa(base16384(x))\n    case 14:\n     \
    \   return strconv.Itoa(base32768(x))\n    case 15:\n        return strconv.Itoa(base65536(x))\n\
    \    case 16:\n        return strconv.Itoa(base131072(x))\n    case 17:\n    \
    \    return strconv.Itoa(base262144(x))\n    case 18:\n        return strconv.Itoa(base524288(x))\n\
    \    case 19:\n        return strconv.Itoa(base1048576(x))\n    case 20:\n   \
    \     return strconv.Itoa(base2097152(x))\n    case 21:\n        return strconv.Itoa(base4194304(x))\n\
    \    case 22:\n        return strconv.Itoa(base8388608(x))\n    case 23:\n   \
    \     return strconv.Itoa(base16777216(x))\n    case 24:\n        return strconv.Itoa(base33554432(x))\n\
    \    case 25:\n        return strconv.Itoa(base67108864(x))\n    case 26:\n  \
    \      return strconv.Itoa(base134217728(x))\n    case 27:\n        return strconv.Itoa(base268435456(x))\n\
    \    case 28:\n        return strconv.Itoa(base536870912(x))\n    case 29:\n \
    \       return strconv.Itoa(base1073741824(x))\n    case 30:\n        return strconv.Itoa(base2147483648(x))\n\
    \    case 31:\n        return strconv.Itoa(base4294967296(x))\n    case 32:\n\
    \        return strconv.Itoa(base8589934592(x))\n    case 33:\n        return\
    \ strconv.Itoa(base17179869184(x))\n    case 34:\n        return strconv.Itoa(base34359738368(x))\n\
    \    case 35:\n        return strconv.Itoa(base687\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6um_2bc5_test.go:86:36: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    \    switch base {\n    case 2:\n        if x == 0 {\n            return \"0\"\
    \n        }\n        return fmt.Sprintf(\"%d\", x/2)\n    case 3:\n        if\
    \ x == 0 {\n            return \"0\"\n        }\n        return fmt.Sprintf(\"\
    %d\", x/3)\n    case 4:\n        if x == 0 {\n            return \"0\"\n     \
    \   }\n        return fmt.Sprintf(\"%d\", x/4)\n    case 5:\n        if x == 0\
    \ {\n            return \"0\"\n        }\n        return fmt.Sprintf(\"%d\", x/5)\n\
    \    case 6:\n        if x == 0 {\n            return \"0\"\n        }\n     \
    \   return fmt.Sprintf(\"%d\", x/6)\n    case 7:\n        if x == 0 {\n      \
    \      return \"0\"\n        }\n        return fmt.Sprintf(\"%d\", x/7)\n    case\
    \ 8:\n        if x == 0 {\n            return \"0\"\n        }\n        return\
    \ fmt.Sprintf(\"%d\", x/8)\n    case 9:\n        if x == 0 {\n            return\
    \ \"0\"\n        }\n        return fmt.Sprintf(\"%d\", x/9)\n    case 10:\n  \
    \      if x == 0 {\n            return \"0\"\n        }\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    default:\n        fmt.Println(\"Base must be less than 10\")\n\
    \        return \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp4ib0cubf_test.go:98: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp4ib0cubf_test.go:98: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp4ib0cubf_test.go:98:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp4ib0cubf_test.go:98: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp4ib0cubf_test.go:98: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp4ib0cubf_test.go:98: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp4ib0cubf_test.go:98:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp4ib0cubf_test.go:98: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp4ib0cubf_test.go:98: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp4ib0cubf_test.go:98: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp4ib0cubf_test.go:98:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp4ib0cubf_test.go:98: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074603
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return strconv.Itoa(int(base*x))\n    case 3:\n        return strconv.Itoa(int(base*x)+x)\n\
    \    case 4:\n        return strconv.Itoa(int(base*x)+int(base*x)+x)\n    case\
    \ 5:\n        return strconv.Itoa(int(base*x)+int(base*x)+int(base*x)+x)\n   \
    \ case 6:\n        return strconv.Itoa(int(base*x)+int(base*x)+int(base*x)+int(base*x)+x)\n\
    \    case 7:\n        return strconv.Itoa(int(base*x)+int(base*x)+int(base*x)+int(base*x)+int(base*x)+x)\n\
    \    case 8:\n        return strconv.Itoa(int(base*x)+int(base*x)+int(base*x)+int(base*x)+int(base*x)+int(base*x)+x)\n\
    \    case 9:\n        return strconv.Itoa(int(base*x)+int(base*x)+int(base*x)+int(base*x)+int(base*x)+int(base*x)+int(base*x)+x)\n\
    \    case 10:\n        return strconv.Itoa(int(base*x)+int(base*x)+int(base*x)+int(base*x)+int(base*x)+int(base*x)+int(base*x)+int(base*x)+x)\n\
    \    default:\n        fmt.Println(\"base number should be less than 10\")\n \
    \   }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpum7tys_0_test.go:20:16: undefined: strconv

    /tmp/tmpum7tys_0_test.go:22:16: undefined: strconv

    /tmp/tmpum7tys_0_test.go:24:16: undefined: strconv

    /tmp/tmpum7tys_0_test.go:26:16: undefined: strconv

    /tmp/tmpum7tys_0_test.go:28:16: undefined: strconv

    /tmp/tmpum7tys_0_test.go:30:16: undefined: strconv

    /tmp/tmpum7tys_0_test.go:32:16: undefined: strconv

    /tmp/tmpum7tys_0_test.go:34:16: undefined: strconv

    /tmp/tmpum7tys_0_test.go:36:16: undefined: strconv

    /tmp/tmpum7tys_0_test.go:40:1: missing return

    /tmp/tmpum7tys_0_test.go:40:1: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074603
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Printf(\"base must be less than 10.\\n\")\n        return \"\"\n   \
    \ }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdp2je_xn_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x -= base\n    x /=\
    \ base\n    x += 1\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpw0v4g_md_test.go:49: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpw0v4g_md_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpw0v4g_md_test.go:49:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpw0v4g_md_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpw0v4g_md_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpw0v4g_md_test.go:49: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpw0v4g_md_test.go:49:\
    \ expected '2', got '1'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpw0v4g_md_test.go:49: expected '3', got '1'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpw0v4g_md_test.go:49: expected '4', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpw0v4g_md_test.go:49: expected\
    \ '5', got '1'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpw0v4g_md_test.go:49:\
    \ expected '6', got '1'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpw0v4g_md_test.go:49: expected '7', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n    }\n    if base\
    \ > 10 {\n        fmt.Println(\"Base must be less than or equal to 10\")\n   \
    \ }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpj3hu7nxc_test.go:53: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpj3hu7nxc_test.go:53: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpj3hu7nxc_test.go:53:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpj3hu7nxc_test.go:53: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpj3hu7nxc_test.go:53: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpj3hu7nxc_test.go:53: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpj3hu7nxc_test.go:53:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpj3hu7nxc_test.go:53: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpj3hu7nxc_test.go:53: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpj3hu7nxc_test.go:53: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpj3hu7nxc_test.go:53:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpj3hu7nxc_test.go:53: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074603
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x/100)\n    case\
    \ 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case 6:\n        return\
    \ fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return fmt.Sprintf(\"%d\"\
    , x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x/1000000)\n    case\
    \ 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000000)\n    case 11:\n        return fmt.Sprintf(\"\
    %d\", x/1000000000)\n    default:\n        return fmt.Sprintf(\"%d\", x)\n   \
    \ }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp7ynqeqiz_test.go:68: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp7ynqeqiz_test.go:68: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp7ynqeqiz_test.go:68:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp7ynqeqiz_test.go:68: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp7ynqeqiz_test.go:68: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp7ynqeqiz_test.go:68: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp7ynqeqiz_test.go:68:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp7ynqeqiz_test.go:68: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp7ynqeqiz_test.go:68: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp7ynqeqiz_test.go:68: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp7ynqeqiz_test.go:68:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp7ynqeqiz_test.go:68: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074603
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x -= '0'\n    base -=\
    \ '0'\n    x /= base\n    x += '0'\n    x /= base\n    x += '0'\n    return fmt.Sprintf(\"\
    %0\"+strconv.Itoa(int(base))+\"d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp91r99bai_test.go:24:29: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphm11cr64_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\")\n   \
    \     return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n    x /=\
    \ base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpqwniwyno_test.go:58: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpqwniwyno_test.go:58: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpqwniwyno_test.go:58:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpqwniwyno_test.go:58: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpqwniwyno_test.go:58: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpqwniwyno_test.go:58: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpqwniwyno_test.go:58:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpqwniwyno_test.go:58: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpqwniwyno_test.go:58: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpqwniwyno_test.go:58: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpqwniwyno_test.go:58:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpqwniwyno_test.go:58: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074604
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp610kjt37_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp610kjt37_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp610kjt37_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp610kjt37_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp610kjt37_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp610kjt37_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp610kjt37_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp610kjt37_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp610kjt37_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp610kjt37_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp610kjt37_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp610kjt37_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n   \
    \ return fmt.Sprintf(\"%d%s\", x, change_base(x , base))\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpsitkhgf5_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpsitkhgf5_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpsitkhgf5_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpsitkhgf5_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpsitkhgf5_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpsitkhgf5_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074604
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Printf(\"base numbers are less than 10.\\n\")\n    }\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n    case 11:\n \
    \       return fmt.Sprintf(\"%d\", x*1000000000)\n    case 12:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000000000)\n    case 13:\n        return fmt.Sprintf(\"\
    %d\", x*100000000000)\n    case 14:\n        return fmt.Sprintf(\"%d\", x*1000000000000)\n\
    \    case 15:\n        return fmt.Sprintf(\"%d\", x*10000000000000)\n    case\
    \ 16:\n        return fmt.Sprintf(\"%d\", x*100000000000000)\n    case 17:\n \
    \       return fmt.Sprintf(\"%d\", x*1000000000000000)\n    case 18:\n       \
    \ return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case 19:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000000000000)\n    default:\n        fmt.Printf(\"Base number %d\
    \ is not supported.\\n\", base)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdcm_01uc_test.go:63:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074604
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp1krjo2kt_test.go:51: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp1krjo2kt_test.go:51: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp1krjo2kt_test.go:51:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp1krjo2kt_test.go:51: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp1krjo2kt_test.go:51: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp1krjo2kt_test.go:51: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp1krjo2kt_test.go:51:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp1krjo2kt_test.go:51: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp1krjo2kt_test.go:51: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp1krjo2kt_test.go:51: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp1krjo2kt_test.go:51:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp1krjo2kt_test.go:51: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 3:\n        return\
    \ fmt.Sprintf(\"%0*d\", base, x)\n    case 4:\n        return fmt.Sprintf(\"%0*d\"\
    , base, x)\n    case 5:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%0*d\", base, x)\n    case 8:\n        return fmt.Sprintf(\"%0*d\"\
    , base, x)\n    case 9:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case\
    \ 10:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    default:\n        return\
    \ fmt.Sprintf(\"%0*d\", base, x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpb8yymexd_test.go:66: expected '22', got '008'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpb8yymexd_test.go:66: expected\
    \ '100', got '009'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n      \
    \  tmpb8yymexd_test.go:66: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpb8yymexd_test.go:66: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmpb8yymexd_test.go:66: expected\
    \ '1000', got '08'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n      \
    \  tmpb8yymexd_test.go:66: expected '111', got '07'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmpb8yymexd_test.go:66: expected '2', got '002'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmpb8yymexd_test.go:66: expected\
    \ '3', got '0003'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n       \
    \ tmpb8yymexd_test.go:66: expected '4', got '00004'\n    --- FAIL: TestChange_Base/test_num__9\
    \ (0.00s)\n        tmpb8yymexd_test.go:66: expected '5', got '000005'\n    ---\
    \ FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpb8yymexd_test.go:66:\
    \ expected '6', got '0000006'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpb8yymexd_test.go:66: expected '7', got '00000007'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074604
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpn5b274ye_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpn5b274ye_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base must be less than 2\")\n        return \"\"\n    }\n \
    \   if base > 10 {\n        fmt.Println(\"base must be less than 10\")\n     \
    \   return \"\"\n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(x)\n\
    \    case 3:\n        return strconv.Itoa(x / 10) + strconv.Itoa(x % 10)\n   \
    \ case 4:\n        return strconv.Itoa(x / 100) + strconv.Itoa(x % 100) + strconv.Itoa(x\
    \ % 10)\n    case 5:\n        return strconv.Itoa(x / 1000) + strconv.Itoa(x %\
    \ 1000) + strconv.Itoa(x % 100) + strconv.Itoa(x % 10)\n    case 6:\n        return\
    \ strconv.Itoa(x / 10000) + strconv.Itoa(x % 10000) + strconv.Itoa(x % 1000) +\
    \ strconv.Itoa(x % 100) + strconv.Itoa(x % 10)\n    case 7:\n        return strconv.Itoa(x\
    \ / 100000) + strconv.Itoa(x % 100000) + strconv.Itoa(x % 1000) + strconv.Itoa(x\
    \ % 100) + strconv.Itoa(x % 10) + strconv.Itoa(x % 1)\n    case 8:\n        return\
    \ strconv.Itoa(x / 1000000) + strconv.Itoa(x % 1000000) + strconv.Itoa(x % 1000)\
    \ + strconv.Itoa(x % 100) + strconv.Itoa(x % 10) + strconv.Itoa(x % 1) + strconv.Itoa(x\
    \ % 10)\n    case 9:\n        return strconv.Itoa(x / 10000000) + strconv.Itoa(x\
    \ % 10000000) + strconv.Itoa(x % 1000) + strconv.Itoa(x % 100) + strconv.Itoa(x\
    \ % 10) + strconv.Itoa(x % 1) + strconv.Itoa(x % 10) + strconv.Itoa(x % 1)\n \
    \   case 10:\n        return strconv.Itoa(x / 100000000) + strconv.Itoa(x % 100000000)\
    \ + strconv.Itoa(x % 1000) + strconv.Itoa(x % 100) + strconv.Itoa(x % 10) + strconv.Itoa(x\
    \ % 1) + strconv.Itoa(x % 10) + strconv.Itoa(x % 1) + strconv.Itoa(x % 10)\n \
    \   case 11:\n        return strconv.Itoa(x / 1000000000) + strconv.Itoa(x % 1000000000)\
    \ + strconv.Itoa(x % 1000) + strconv.Ito\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg2cm65xc_test.go:47:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074603
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n    }\n    if base\
    \ > 10 {\n        fmt.Println(\"Base must be less than or equal to 10\")\n   \
    \ }\n    if x == 0 {\n        fmt.Println(\"Cannot change base of 0\")\n    }\n\
    \    if x == 1 {\n        fmt.Println(\"Cannot change base of 1\")\n    }\n  \
    \  if x == 2 {\n        fmt.Println(\"Cannot change base of 2\")\n    }\n    if\
    \ x == 3 {\n        fmt.Println(\"Cannot change base of 3\")\n    }\n    if x\
    \ == 4 {\n        fmt.Println(\"Cannot change base of 4\")\n    }\n    if x ==\
    \ 5 {\n        fmt.Println(\"Cannot change base of 5\")\n    }\n    if x == 6\
    \ {\n        fmt.Println(\"Cannot change base of 6\")\n    }\n    if x == 7 {\n\
    \        fmt.Println(\"Cannot change base of 7\")\n    }\n    if x == 8 {\n  \
    \      fmt.Println(\"Cannot change base of 8\")\n    }\n    if x == 9 {\n    \
    \    fmt.Println(\"Cannot change base of 9\")\n    }\n    if x == 10 {\n     \
    \   fmt.Println(\"Cannot change base of 10\")\n    }\n    if x == 11 {\n     \
    \   fmt.Println(\"Cannot change base of 11\")\n    }\n    if x == 12 {\n     \
    \   fmt.Println(\"Cannot change base of 12\")\n    }\n    if x == 13 {\n     \
    \   fmt.Println(\"Cannot change base of 13\")\n    }\n    if x == 14 {\n     \
    \   fmt.Println(\"Cannot change base of 14\")\n    }\n    if x == 15 {\n     \
    \   fmt.Println(\"Cannot change base of 15\")\n    }\n    if x == 16 {\n     \
    \   fmt.Println(\"Cannot change base of 16\")\n    }\n    if x == 17 {\n     \
    \   fmt.Println(\"Cannot change base of 17\")\n    }\n    if x == 18 {\n     \
    \   fmt.Println(\"Cannot change base of 18\")\n    }\n    if x == 19 {\n     \
    \   fmt.Println(\"Cannot change base of 19\")\n    }\n    if x == 20 {\n     \
    \   fmt.Println(\"Cannot change base of 20\")\n    }\n    if x == 21 {\n     \
    \   fmt.Println(\"Cannot change base of 21\")\n    }\n    if x == 22 {\n     \
    \   fmt.Println(\"Cannot change base of 22\")\n    }\n    if x == 23 {\n     \
    \   fmt.Println(\"Cannot change base of 23\")\n    }\n    if x == 24 {\n     \
    \   fmt.Println(\"Cannot change base of 24\")\n    }\n    if x == 25 {\n     \
    \   fmt.Println(\"Cannot change base of 25\")\n    }\n    if x == 26 {\n     \
    \   fmt.Println(\"Cannot change base of 26\")\n    }\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprqsabvc_test.go:105:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074603
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base must be less than 2\")\n        return \"\"\n    }\n \
    \   if base > 10 {\n        fmt.Println(\"base must be less than 10\")\n     \
    \   return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"x must be greater\
    \ than 0\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2mki4luf_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074599
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo1qk83fp_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return strconv.Itoa(x)\n    case 3:\n        return strconv.Itoa(int(float64(x)\
    \ / float64(base)))\n    case 4:\n        return strconv.Itoa(int(float64(x) /\
    \ float64(base)))\n    case 5:\n        return strconv.Itoa(int(float64(x) / float64(base)))\n\
    \    case 6:\n        return strconv.Itoa(int(float64(x) / float64(base)))\n \
    \   case 7:\n        return strconv.Itoa(int(float64(x) / float64(base)))\n  \
    \  case 8:\n        return strconv.Itoa(int(float64(x) / float64(base)))\n   \
    \ case 9:\n        return strconv.Itoa(int(float64(x) / float64(base)))\n    case\
    \ 10:\n        return strconv.Itoa(int(float64(x) / float64(base)))\n    default:\n\
    \        return \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2g1g05sy_test.go:20:16: undefined: strconv

    /tmp/tmp2g1g05sy_test.go:22:16: undefined: strconv

    /tmp/tmp2g1g05sy_test.go:24:16: undefined: strconv

    /tmp/tmp2g1g05sy_test.go:26:16: undefined: strconv

    /tmp/tmp2g1g05sy_test.go:28:16: undefined: strconv

    /tmp/tmp2g1g05sy_test.go:30:16: undefined: strconv

    /tmp/tmp2g1g05sy_test.go:32:16: undefined: strconv

    /tmp/tmp2g1g05sy_test.go:34:16: undefined: strconv

    /tmp/tmp2g1g05sy_test.go:36:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074604
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1\")\n        return \"\"\n    }\n\
    \    switch base {\n    case 2:\n        return strconv.Itoa(x)\n    case 3:\n\
    \        return strconv.Itoa(x / 10)\n    case 4:\n        return strconv.Itoa(x\
    \ / 100)\n    case 5:\n        return strconv.Itoa(x / 1000)\n    case 6:\n  \
    \      return strconv.Itoa(x / 10000)\n    case 7:\n        return strconv.Itoa(x\
    \ / 100000)\n    case 8:\n        return strconv.Itoa(x / 1000000)\n    case 9:\n\
    \        return strconv.Itoa(x / 10000000)\n    case 10:\n        return strconv.Itoa(x\
    \ / 100000000)\n    case 11:\n        return strconv.Itoa(x / 1000000000)\n  \
    \  default:\n        fmt.Println(\"Base must be less than 11\")\n        return\
    \ \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy9qo923w_test.go:24:16: undefined: strconv

    /tmp/tmpy9qo923w_test.go:26:16: undefined: strconv

    /tmp/tmpy9qo923w_test.go:28:16: undefined: strconv

    /tmp/tmpy9qo923w_test.go:30:16: undefined: strconv

    /tmp/tmpy9qo923w_test.go:32:16: undefined: strconv

    /tmp/tmpy9qo923w_test.go:34:16: undefined: strconv

    /tmp/tmpy9qo923w_test.go:36:16: undefined: strconv

    /tmp/tmpy9qo923w_test.go:38:16: undefined: strconv

    /tmp/tmpy9qo923w_test.go:40:16: undefined: strconv

    /tmp/tmpy9qo923w_test.go:42:16: undefined: strconv

    /tmp/tmpy9qo923w_test.go:42:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074604
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp3wcz4xk_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074603
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 10 {\n            return strconv.Itoa(x)\n        }\n   \
    \     return strconv.Itoa(change_base(x, base))\n    case 3:\n        if x < 10\
    \ {\n            return strconv.Itoa(x)\n        }\n        return strconv.Itoa(change_base(x,\
    \ base))\n    case 4:\n        if x < 10 {\n            return strconv.Itoa(x)\n\
    \        }\n        return strconv.Itoa(change_base(x, base))\n    case 5:\n \
    \       if x < 10 {\n            return strconv.Itoa(x)\n        }\n        return\
    \ strconv.Itoa(change_base(x, base))\n    case 6:\n        if x < 10 {\n     \
    \       return strconv.Itoa(x)\n        }\n        return strconv.Itoa(change_base(x,\
    \ base))\n    case 7:\n        if x < 10 {\n            return strconv.Itoa(x)\n\
    \        }\n        return strconv.Itoa(change_base(x, base))\n    case 8:\n \
    \       if x < 10 {\n            return strconv.Itoa(x)\n        }\n        return\
    \ strconv.Itoa(change_base(x, base))\n    case 9:\n        if x < 10 {\n     \
    \       return strconv.Itoa(x)\n        }\n        return strconv.Itoa(change_base(x,\
    \ base))\n    case 10:\n        if x < 10 {\n            return strconv.Itoa(x)\n\
    \        }\n        return strconv.Itoa(change_base(x, base))\n    }\n}\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxcb87s4_test.go:21:20: undefined: strconv

    /tmp/tmpbxcb87s4_test.go:23:16: undefined: strconv

    /tmp/tmpbxcb87s4_test.go:26:20: undefined: strconv

    /tmp/tmpbxcb87s4_test.go:28:16: undefined: strconv

    /tmp/tmpbxcb87s4_test.go:31:20: undefined: strconv

    /tmp/tmpbxcb87s4_test.go:33:16: undefined: strconv

    /tmp/tmpbxcb87s4_test.go:36:20: undefined: strconv

    /tmp/tmpbxcb87s4_test.go:38:16: undefined: strconv

    /tmp/tmpbxcb87s4_test.go:41:20: undefined: strconv

    /tmp/tmpbxcb87s4_test.go:43:16: undefined: strconv

    /tmp/tmpbxcb87s4_test.go:43:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074604
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return strconv.Itoa(x)\n    case 3:\n        return strconv.Itoa(x\
    \ / 10)\n    case 4:\n        return strconv.Itoa(x / 100)\n    case 5:\n    \
    \    return strconv.Itoa(x / 1000)\n    case 6:\n        return strconv.Itoa(x\
    \ / 10000)\n    case 7:\n        return strconv.Itoa(x / 100000)\n    case 8:\n\
    \        return strconv.Itoa(x / 1000000)\n    case 9:\n        return strconv.Itoa(x\
    \ / 10000000)\n    case 10:\n        return strconv.Itoa(x / 100000000)\n    case\
    \ 11:\n        return strconv.Itoa(x / 1000000000)\n    case 12:\n        return\
    \ strconv.Itoa(x / 10000000000)\n    case 13:\n        return strconv.Itoa(x /\
    \ 100000000000)\n    case 14:\n        return strconv.Itoa(x / 1000000000000)\n\
    \    case 15:\n        return strconv.Itoa(x / 10000000000000)\n    case 16:\n\
    \        return strconv.Itoa(x / 100000000000000)\n    case 17:\n        return\
    \ strconv.Itoa(x / 1000000000000000)\n    case 18:\n        return strconv.Itoa(x\
    \ / 10000000000000000)\n    case 19:\n        return strconv.Itoa(x / 100000000000000000)\n\
    \    case 20:\n        return strconv.Itoa(x / 1000000000000000000)\n    default:\n\
    \        fmt.Println(\"Base out of range\")\n    }\n    return \"\"\n}\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd718r7mq_test.go:20:16: undefined: strconv

    /tmp/tmpd718r7mq_test.go:22:16: undefined: strconv

    /tmp/tmpd718r7mq_test.go:24:16: undefined: strconv

    /tmp/tmpd718r7mq_test.go:26:16: undefined: strconv

    /tmp/tmpd718r7mq_test.go:28:16: undefined: strconv

    /tmp/tmpd718r7mq_test.go:30:16: undefined: strconv

    /tmp/tmpd718r7mq_test.go:32:16: undefined: strconv

    /tmp/tmpd718r7mq_test.go:34:16: undefined: strconv

    /tmp/tmpd718r7mq_test.go:36:16: undefined: strconv

    /tmp/tmpd718r7mq_test.go:38:16: undefined: strconv

    /tmp/tmpd718r7mq_test.go:38:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074604
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"base must be less than 10\")\n        return \"\"\n    }\n\
    \    switch base {\n    case 2:\n        return strconv.Itoa(x)\n    case 3:\n\
    \        return strconv.Itoa(x / 10)\n    case 4:\n        return strconv.Itoa(x\
    \ / 100)\n    case 5:\n        return strconv.Itoa(x / 1000)\n    case 6:\n  \
    \      return strconv.Itoa(x / 10000)\n    case 7:\n        return strconv.Itoa(x\
    \ / 100000)\n    case 8:\n        return strconv.Itoa(x / 1000000)\n    case 9:\n\
    \        return strconv.Itoa(x / 10000000)\n    case 10:\n        return strconv.Itoa(x\
    \ / 100000000)\n    case 11:\n        return strconv.Itoa(x / 1000000000)\n  \
    \  case 12:\n        return strconv.Itoa(x / 1000000000000)\n    case 13:\n  \
    \      return strconv.Itoa(x / 10000000000000)\n    case 14:\n        return strconv.Itoa(x\
    \ / 1000000000000000)\n    case 15:\n        return strconv.Itoa(x / 10000000000000000)\n\
    \    case 16:\n        return strconv.Itoa(x / 100000000000000000)\n    case 17:\n\
    \        return strconv.Itoa(x / 1000000000000000000)\n    case 18:\n        return\
    \ strconv.Itoa(x / 10000000000000000000)\n    case 19:\n        return strconv.Itoa(x\
    \ / 100000000000000000000)\n    case 20:\n        return strconv.Itoa(x / 1000000000000000000000)\n\
    \    case 21:\n        return strconv.Itoa(x / 10000000000000000000000)\n    case\
    \ 22:\n        return strconv.Itoa(x / 100000000000000000000000)\n    case 23:\n\
    \        return strconv.Itoa(x / 1000000000000000000000000)\n    case 24:\n  \
    \      return strconv.Itoa(x / 10000000000000000000000000)\n    case 25:\n   \
    \     return strconv.Itoa(x / 100000000000000000000000000)\n    case 26:\n   \
    \     return strconv.Itoa(x / 1000000000000000000000000000)\n    case 27:\n  \
    \      return strconv.Itoa(x / 10000000000000000000000000000)\n    case 28:\n\
    \        return strconv.Itoa(x / 100000000000000000000000000000)\n    case 29:\n\
    \        return strconv.Itoa(x / 1000000000000000000000000000000)\n    case 30:\n\
    \        return strconv.Itoa(x / 10000000000000000000000000000000)\n    case 31:\n\
    \        return strconv.Itoa(x / 100000000000000000000000000000000)\n    case\
    \ 32:\n        return strconv.Itoa(x / 1000000000000000000000000000000000)\n \
    \   case 33:\n        return strconv.Itoa(x / 10000000000000000000000000000000000)\n\
    \    case 34:\n        return strconv.Itoa(x / 100000000000000000000000000000000000)\n\
    \    case 35:\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbfb1o95r_test.go:91:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074603
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base is less than 2\")\n        return \"\"\n    }\n    if\
    \ base > 10 {\n        fmt.Println(\"base is greater than 10\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T) {\n \
    \ candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuw_947ml_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074603
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n       \
    \ }\n        return fmt.Sprintf(\"%0d\", x)\n    case 3:\n        if x < 10 {\n\
    \            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 4:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 5:\n   \
    \     if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%0d\", x)\n    case 6:\n        if x < 10 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 7:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 8:\n   \
    \     if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%0d\", x)\n    case 9:\n        if x < 10 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    default:\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmppw8zei59_test.go:93: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmppw8zei59_test.go:93: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmppw8zei59_test.go:93:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmppw8zei59_test.go:93: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmppw8zei59_test.go:93: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmppw8zei59_test.go:93: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n       \
    \ }\n        return fmt.Sprintf(\"%0d\", x)\n    case 3:\n        if x < 10 {\n\
    \            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 4:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 5:\n   \
    \     if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%0d\", x)\n    case 6:\n        if x < 10 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 7:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 8:\n   \
    \     if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%0d\", x)\n    case 9:\n        if x < 10 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    default:\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmppw8zei59_test.go:93: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmppw8zei59_test.go:93: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmppw8zei59_test.go:93:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmppw8zei59_test.go:93: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmppw8zei59_test.go:93: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmppw8zei59_test.go:93: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Printf(\"Base number must be less than 10\\n\")\n        return \"\"\
    \n    }\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"%d\", x/2)\n\
    \    case 3:\n        return fmt.Sprintf(\"%d\", (x/3)*3)\n    case 4:\n     \
    \   return fmt.Sprintf(\"%d\", (x/4)*4)\n    case 5:\n        return fmt.Sprintf(\"\
    %d\", (x/5)*5)\n    case 6:\n        return fmt.Sprintf(\"%d\", (x/6)*6)\n   \
    \ case 7:\n        return fmt.Sprintf(\"%d\", (x/7)*7)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%d\", (x/8)*8)\n    case 9:\n        return fmt.Sprintf(\"%d\"\
    , (x/9)*9)\n    case 10:\n        return fmt.Sprintf(\"%d\", (x/10)*10)\n    default:\n\
    \        fmt.Printf(\"Base number must be less than 10\\n\")\n        return \"\
    \"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base number must be less than 10\nBase number must be less than 10\nBase\
    \ number must be less than 10\nBase number must be less than 10\nBase number must\
    \ be less than 10\nBase number must be less than 10\nBase number must be less\
    \ than 10\nBase number must be less than 10\nBase number must be less than 10\n\
    Base number must be less than 10\nBase number must be less than 10\nBase number\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpyul1qclw_test.go:71: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpyul1qclw_test.go:71: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpyul1qclw_test.go:71:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpyul1qclw_test.go:71: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpyul1qclw_test.go:71: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpyul1qclw_test.go:71: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpyul1qclw_test.go:71:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpyul1qclw_test.go:71: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpyul1qclw_test.go:71: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpyul1qclw_test.go:71: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpyul1qclw_test.go:71:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpyul1qclw_test.go:71: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074604
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n   \
    \ x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x\
    \ /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /=\
    \ base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n\
    \    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n \
    \   x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n  \
    \  x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n   \
    \ x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x\
    \ /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /=\
    \ base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n\
    \    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n \
    \   x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n  \
    \  x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n   \
    \ x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x\
    \ /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /=\
    \ base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n\
    \    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppam46wjv_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074604
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpgq3fv1ui_test.go:51: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpgq3fv1ui_test.go:51: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpgq3fv1ui_test.go:51:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpgq3fv1ui_test.go:51: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpgq3fv1ui_test.go:51: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpgq3fv1ui_test.go:51: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpgq3fv1ui_test.go:51:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpgq3fv1ui_test.go:51: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpgq3fv1ui_test.go:51: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpgq3fv1ui_test.go:51: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpgq3fv1ui_test.go:51:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpgq3fv1ui_test.go:51: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10.\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmps2ad098x_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmps2ad098x_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmps2ad098x_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmps2ad098x_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmps2ad098x_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmps2ad098x_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmps2ad098x_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmps2ad098x_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmps2ad098x_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmps2ad098x_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmps2ad098x_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmps2ad098x_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\")\n   \
    \     return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n    x /=\
    \ base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpqwniwyno_test.go:58: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpqwniwyno_test.go:58: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpqwniwyno_test.go:58:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpqwniwyno_test.go:58: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpqwniwyno_test.go:58: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpqwniwyno_test.go:58: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpqwniwyno_test.go:58:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpqwniwyno_test.go:58: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpqwniwyno_test.go:58: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpqwniwyno_test.go:58: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpqwniwyno_test.go:58:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpqwniwyno_test.go:58: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074604
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10\")\n    \
    \    return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprh829yxs_test.go:122:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpn5b274ye_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"\
    %d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x*100)\n    case\
    \ 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case 6:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return fmt.Sprintf(\"%d\"\
    , x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x*1000000)\n    case\
    \ 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000)\n    default:\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp7wfd8exx_test.go:66: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp7wfd8exx_test.go:66: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmp7wfd8exx_test.go:66: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmp7wfd8exx_test.go:66: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmp7wfd8exx_test.go:66: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmp7wfd8exx_test.go:66: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmp7wfd8exx_test.go:66: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmp7wfd8exx_test.go:66: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmp7wfd8exx_test.go:66:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmp7wfd8exx_test.go:66: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmp7wfd8exx_test.go:66: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmp7wfd8exx_test.go:66:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074599
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n    }\n\
    \    switch base {\n    case 2:\n        return strconv.Itoa(base10(x))\n    case\
    \ 3:\n        return strconv.Itoa(base3(x))\n    case 4:\n        return strconv.Itoa(base4(x))\n\
    \    case 5:\n        return strconv.Itoa(base5(x))\n    case 6:\n        return\
    \ strconv.Itoa(base6(x))\n    case 7:\n        return strconv.Itoa(base7(x))\n\
    \    case 8:\n        return strconv.Itoa(base8(x))\n    case 9:\n        return\
    \ strconv.Itoa(base9(x))\n    case 10:\n        return strconv.Itoa(base10(x))\n\
    \    default:\n        fmt.Println(\"Base must be less than 10.\")\n        return\
    \ \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcij2wxnw_test.go:24:16: undefined: strconv

    /tmp/tmpcij2wxnw_test.go:24:29: undefined: base10

    /tmp/tmpcij2wxnw_test.go:26:16: undefined: strconv

    /tmp/tmpcij2wxnw_test.go:26:29: undefined: base3

    /tmp/tmpcij2wxnw_test.go:28:16: undefined: strconv

    /tmp/tmpcij2wxnw_test.go:28:29: undefined: base4

    /tmp/tmpcij2wxnw_test.go:30:16: undefined: strconv

    /tmp/tmpcij2wxnw_test.go:30:29: undefined: base5

    /tmp/tmpcij2wxnw_test.go:32:16: undefined: strconv

    /tmp/tmpcij2wxnw_test.go:32:29: undefined: base6

    /tmp/tmpcij2wxnw_test.go:32:29: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 2.\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\")\n   \
    \     return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp06p4ifu7_test.go:57: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp06p4ifu7_test.go:57: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp06p4ifu7_test.go:57:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp06p4ifu7_test.go:57: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp06p4ifu7_test.go:57: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp06p4ifu7_test.go:57: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp06p4ifu7_test.go:57:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp06p4ifu7_test.go:57: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp06p4ifu7_test.go:57: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp06p4ifu7_test.go:57: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp06p4ifu7_test.go:57:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp06p4ifu7_test.go:57: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\")\n   \
    \     return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"Cannot change\
    \ base to 0.\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprpdryvef_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074604
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return strconv.Itoa(x)\n    case 3:\n        return strconv.Itoa(x\
    \ / 10)\n    case 4:\n        return strconv.Itoa(x / 100)\n    case 5:\n    \
    \    return strconv.Itoa(x / 1000)\n    case 6:\n        return strconv.Itoa(x\
    \ / 10000)\n    case 7:\n        return strconv.Itoa(x / 100000)\n    case 8:\n\
    \        return strconv.Itoa(x / 1000000)\n    case 9:\n        return strconv.Itoa(x\
    \ / 10000000)\n    case 10:\n        return strconv.Itoa(x / 100000000)\n    case\
    \ 11:\n        return strconv.Itoa(x / 1000000000)\n    default:\n        fmt.Println(\"\
    Invalid base\")\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfv3dlxkg_test.go:20:16: undefined: strconv

    /tmp/tmpfv3dlxkg_test.go:22:16: undefined: strconv

    /tmp/tmpfv3dlxkg_test.go:24:16: undefined: strconv

    /tmp/tmpfv3dlxkg_test.go:26:16: undefined: strconv

    /tmp/tmpfv3dlxkg_test.go:28:16: undefined: strconv

    /tmp/tmpfv3dlxkg_test.go:30:16: undefined: strconv

    /tmp/tmpfv3dlxkg_test.go:32:16: undefined: strconv

    /tmp/tmpfv3dlxkg_test.go:34:16: undefined: strconv

    /tmp/tmpfv3dlxkg_test.go:36:16: undefined: strconv

    /tmp/tmpfv3dlxkg_test.go:38:16: undefined: strconv

    /tmp/tmpfv3dlxkg_test.go:38:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp0qqv1v86_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp0qqv1v86_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp0qqv1v86_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp0qqv1v86_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp0qqv1v86_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp0qqv1v86_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp0qqv1v86_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp0qqv1v86_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp0qqv1v86_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp0qqv1v86_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp0qqv1v86_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp0qqv1v86_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(x)\n\
    \    case 3:\n        return strconv.Itoa(x / 10)\n    case 4:\n        return\
    \ strconv.Itoa(x / 100)\n    case 5:\n        return strconv.Itoa(x / 1000)\n\
    \    case 6:\n        return strconv.Itoa(x / 10000)\n    case 7:\n        return\
    \ strconv.Itoa(x / 100000)\n    case 8:\n        return strconv.Itoa(x / 1000000)\n\
    \    case 9:\n        return strconv.Itoa(x / 10000000)\n    case 10:\n      \
    \  return strconv.Itoa(x / 100000000)\n    case 11:\n        return strconv.Itoa(x\
    \ / 1000000000)\n    case 12:\n        return strconv.Itoa(x / 1000000000000)\n\
    \    case 13:\n        return strconv.Itoa(x / 10000000000000)\n    case 14:\n\
    \        return strconv.Itoa(x / 1000000000000000)\n    case 15:\n        return\
    \ strconv.Itoa(x / 10000000000000000)\n    case 16:\n        return strconv.Itoa(x\
    \ / 100000000000000000)\n    case 17:\n        return strconv.Itoa(x / 1000000000000000000)\n\
    \    case 18:\n        return strconv.Itoa(x / 10000000000000000000)\n    case\
    \ 19:\n        return strconv.Itoa(x / 100000000000000000000)\n    case 20:\n\
    \        return strconv.Itoa(x / 1000000000000000000000)\n    case 21:\n     \
    \   return strconv.Itoa(x / 10000000000000000000000)\n    case 22:\n        return\
    \ strconv.Itoa(x / 100000000000000000000000)\n    case 23:\n        return strconv.Itoa(x\
    \ / 1000000000000000000000000)\n    case 24:\n        return strconv.Itoa(x /\
    \ 10000000000000000000000000)\n    case 25:\n        return strconv.Itoa(x / 100000000000000000000000000)\n\
    \    case 26:\n        return strconv.Itoa(x / 1000000000000000000000000000)\n\
    \    case 27:\n        return strconv.Itoa(x / 10000000000000000000000000000)\n\
    \    case 28:\n        return strconv.Itoa(x / 100000000000000000000000000000)\n\
    \    case 29:\n        return strconv.Itoa(x / 1000000000000000000000000000000)\n\
    \    case 30:\n        return strconv.Itoa(x / 10000000000000000000000000000000)\n\
    \    case 31:\n        return strconv.Itoa(x / 100000000000000000000000000000000)\n\
    \    case 32:\n        return strconv.Itoa(x / 1000000000000000000000000000000000)\n\
    \    case 33:\n        return strconv.Itoa(x / 10000000000000000000000000000000000)\n\
    \    case 34:\n        return strconv.Itoa(x / 100000000000000000000000000000000000)\n\
    \    case 35:\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxltx5y4r_test.go:90:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpn5b274ye_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpn5b274ye_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpn5b274ye_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpn5b274ye_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpn5b274ye_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\n    }\n\
    \    switch base {\n    case 2:\n        return strconv.Itoa(x)\n    case 3:\n\
    \        return strconv.Itoa(x / 10)\n    case 4:\n        return strconv.Itoa(x\
    \ / 100)\n    case 5:\n        return strconv.Itoa(x / 1000)\n    case 6:\n  \
    \      return strconv.Itoa(x / 10000)\n    case 7:\n        return strconv.Itoa(x\
    \ / 100000)\n    case 8:\n        return strconv.Itoa(x / 1000000)\n    case 9:\n\
    \        return strconv.Itoa(x / 10000000)\n    case 10:\n        return strconv.Itoa(x\
    \ / 100000000)\n    case 11:\n        return strconv.Itoa(x / 1000000000)\n  \
    \  case 12:\n        return strconv.Itoa(x / 1000000000000)\n    case 13:\n  \
    \      return strconv.Itoa(x / 10000000000000)\n    case 14:\n        return strconv.Itoa(x\
    \ / 1000000000000000)\n    case 15:\n        return strconv.Itoa(x / 10000000000000000)\n\
    \    case 16:\n        return strconv.Itoa(x / 100000000000000000)\n    case 17:\n\
    \        return strconv.Itoa(x / 1000000000000000000)\n    case 18:\n        return\
    \ strconv.Itoa(x / 10000000000000000000)\n    case 19:\n        return strconv.Itoa(x\
    \ / 100000000000000000000)\n    case 20:\n        return strconv.Itoa(x / 1000000000000000000000)\n\
    \    case 21:\n        return strconv.Itoa(x / 10000000000000000000000)\n    case\
    \ 22:\n        return strconv.Itoa(x / 100000000000000000000000)\n    case 23:\n\
    \        return strconv.Itoa(x / 1000000000000000000000000)\n    case 24:\n  \
    \      return strconv.Itoa(x / 10000000000000000000000000)\n    case 25:\n   \
    \     return strconv.Itoa(x / 100000000000000000000000000)\n    case 26:\n   \
    \     return strconv.Itoa(x / 1000000000000000000000000000)\n    case 27:\n  \
    \      return strconv.Itoa(x / 10000000000000000000000000000)\n    case 28:\n\
    \        return strconv.Itoa(x / 100000000000000000000000000000)\n    case 29:\n\
    \        return strconv.Itoa(x / 1000000000000000000000000000000)\n    case 30:\n\
    \        return strconv.Itoa(x / 10000000000000000000000000000000)\n    case 31:\n\
    \        return strconv.Itoa(x / 100000000000000000000000000000000)\n    case\
    \ 32:\n        return strconv.Itoa(x / 1000000000000000000000000000000000)\n \
    \   case 33:\n        return strconv.Itoa(x / 10000000000000000000000000000000000)\n\
    \    case 34:\n        return strconv.Itoa(x / 100000000000000000000000000000000000)\n\
    \    case 35:\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphzxmlw2z_test.go:91:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"base must be less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpvyrzu23d_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpvyrzu23d_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpvyrzu23d_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpvyrzu23d_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpvyrzu23d_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpvyrzu23d_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpvyrzu23d_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpvyrzu23d_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpvyrzu23d_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpvyrzu23d_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpvyrzu23d_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpvyrzu23d_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphm11cr64_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n   \
    \ return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n \
    \ candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp3kwtha___test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp3kwtha___test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp3kwtha___test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp3kwtha___test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp3kwtha___test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp3kwtha___test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base must be greater than 1\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"base must be less than 10\")\n    \
    \    return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n    x /=\
    \ base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpx2yzvrwr_test.go:58: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpx2yzvrwr_test.go:58: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpx2yzvrwr_test.go:58:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpx2yzvrwr_test.go:58: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpx2yzvrwr_test.go:58: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpx2yzvrwr_test.go:58: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpx2yzvrwr_test.go:58:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpx2yzvrwr_test.go:58: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpx2yzvrwr_test.go:58: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpx2yzvrwr_test.go:58: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpx2yzvrwr_test.go:58:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpx2yzvrwr_test.go:58: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"\
    %d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x*100)\n    case\
    \ 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case 6:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return fmt.Sprintf(\"%d\"\
    , x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x*1000000)\n    case\
    \ 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000)\n    case 11:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000)\n    case 12:\n        return fmt.Sprintf(\"%d\", x*10000000000)\n\
    \    case 13:\n        return fmt.Sprintf(\"%d\", x*100000000000)\n    case 14:\n\
    \        return fmt.Sprintf(\"%d\", x*1000000000000)\n    case 15:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000000000000)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x*100000000000000)\n    case 17:\n        return fmt.Sprintf(\"%d\", x*1000000000000000)\n\
    \    case 18:\n        return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case\
    \ 19:\n        return fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n\
    \        return fmt.Sprintf(\"%d\", x*1000000000000000000)\n    case 21:\n   \
    \     return fmt.Sprintf(\"%d\", x*10000000000000000000)\n    case 22:\n     \
    \   return fmt.Sprintf(\"%d\", x*100000000000000000000)\n    case 23:\n      \
    \  return fmt.Sprintf(\"%d\", x*1000000000000000000000)\n    case 24:\n      \
    \  return fmt.Sprintf(\"%d\", x*10000000000000000000000)\n    case 25:\n     \
    \   return fmt.Sprintf(\"%d\", x*100000000000000000000000)\n    case 26:\n   \
    \     return fmt.Sprintf(\"%d\", x*1000000000000000000000000)\n    case 27:\n\
    \        return fmt.Sprintf(\"%d\", x*10000000000000000000000000)\n    case 28:\n\
    \        return fmt.Sprintf(\"%d\", x*100000000000000000000000000)\n    case 29:\n\
    \        return fmt.Sprintf(\"%d\", x*1000000000000000000000000000)\n    case\
    \ 30:\n        return fmt.Sprintf(\"%d\", x*10000000000000000000000000000)\n \
    \   case 31:\n        return fmt.Sprintf(\"%d\", x*100000000000000000000000000000)\n\
    \    case 32:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000000000000)\n\
    \    case 33:\n        return fmt.Sprintf(\"%d\", x*10000000000000000000000000000000)\n\
    \    case 34:\n        return fmt.Sprintf(\"%d\", x*100000000000000000000000000000000)\n\
    \    case 35:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000000000000000)\n\
    \    case 36:\n        return fmt.Sprintf(\"%d\", x*10000000000000000000000000000000000)\n\
    \    case 37:\n        return fmt.Sprintf(\"%d\", x*100000000000000000000000000000000000)\n\
    \    case 38:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000000000000000000)\n\
    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph8u3jzqh_test.go:94:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvm_3k2p3_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n       \
    \ }\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 3:\n        if x\
    \ < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%0*d\", base, x)\n    case 4:\n        if x < 10 {\n         \
    \   return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0*d\"\
    , base, x)\n    case 5:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 6:\n\
    \        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n \
    \       return fmt.Sprintf(\"%0*d\", base, x)\n    case 7:\n        if x < 10\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0*d\", base, x)\n    case 8:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 9:\n\
    \        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n \
    \       return fmt.Sprintf(\"%0*d\", base, x)\n    case 10:\n        if x < 10\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0*d\", base, x)\n    default:\n        return fmt.Sprintf(\"%d\", x)\n    }\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpnl6aklqe_test.go:93: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpnl6aklqe_test.go:93: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpnl6aklqe_test.go:93:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpnl6aklqe_test.go:93: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpnl6aklqe_test.go:93: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpnl6aklqe_test.go:93: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074606
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 2 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        return fmt.Sprintf(\"%d\", x/2)\n    case 3:\n        if x < 3 {\n  \
    \          return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/3)\n    case 4:\n        if x < 4 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/4)\n    case 5:\n  \
    \      if x < 5 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%d\", x/5)\n    case 6:\n        if x < 6 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/6)\n    case 7:\n        if x < 7 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/7)\n    case 8:\n  \
    \      if x < 8 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%d\", x/8)\n    case 9:\n        if x < 9 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x/9)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpbto983c8_test.go:93: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpbto983c8_test.go:93: expected\
    \ '100', got '3'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpbto983c8_test.go:93:\
    \ expected '11101010', got '117'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpbto983c8_test.go:93: expected '10000', got '8'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpbto983c8_test.go:93: expected '1000', got '4'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpbto983c8_test.go:93: expected\
    \ '111', got '3'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base must be greater than 1\")\n        return \"\"\n    }\n\
    \    if base == 2 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if base\
    \ == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if base == 16 {\n\
    \        return fmt.Sprintf(\"%x\", x)\n    }\n    if base == 8 {\n        return\
    \ fmt.Sprintf(\"%o\", x)\n    }\n    if base == 16 {\n        return fmt.Sprintf(\"\
    %x\", x)\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    if base == 8 {\n        return fmt.Sprintf(\"%o\", x)\n    }\n   \
    \ if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n    if base ==\
    \ 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if base == 8 {\n   \
    \     return fmt.Sprintf(\"%o\", x)\n    }\n    if base == 16 {\n        return\
    \ fmt.Sprintf(\"%x\", x)\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    if base == 8 {\n        return fmt.Sprintf(\"%o\", x)\n \
    \   }\n    if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n   \
    \ if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if base ==\
    \ 8 {\n        return fmt.Sprintf(\"%o\", x)\n    }\n    if base == 16 {\n   \
    \     return fmt.Sprintf(\"%x\", x)\n    }\n    if base == 10 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    if base == 8 {\n        return fmt.Sprintf(\"\
    %o\", x)\n    }\n    if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n\
    \    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n  \
    \  if base == 8 {\n        return fmt.Sprintf(\"%o\", x)\n    }\n    if base ==\
    \ 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n    if base == 10 {\n  \
    \      return fmt.Sprintf(\"%d\", x)\n    }\n    if base == 8 {\n        return\
    \ fmt.Sprintf(\"%o\", x)\n    }\n    if base == 16 {\n        return fmt.Sprintf(\"\
    %x\", x)\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    if base == 8 {\n        return fmt.Sprintf(\"%o\", x)\n    }\n   \
    \ if base == 16 {\n        return fmt.Sprintf(\"%x\", x)\n    }\n    if base ==\
    \ 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if base == 8 {\n   \
    \     return fmt.Sprintf(\"%o\", x)\n    }\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9ukv7oae_test.go:115:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(int(x))\n\
    \    case 3:\n        return strconv.Itoa(int(x)*10)\n    case 4:\n        return\
    \ strconv.Itoa(int(x)*100)\n    case 5:\n        return strconv.Itoa(int(x)*1000)\n\
    \    case 6:\n        return strconv.Itoa(int(x)*10000)\n    case 7:\n       \
    \ return strconv.Itoa(int(x)*100000)\n    case 8:\n        return strconv.Itoa(int(x)*1000000)\n\
    \    case 9:\n        return strconv.Itoa(int(x)*10000000)\n    case 10:\n   \
    \     return strconv.Itoa(int(x)*100000000)\n    default:\n        fmt.Println(\"\
    Base must be less than 10.\")\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpefka4q2m_test.go:24:16: undefined: strconv

    /tmp/tmpefka4q2m_test.go:26:16: undefined: strconv

    /tmp/tmpefka4q2m_test.go:28:16: undefined: strconv

    /tmp/tmpefka4q2m_test.go:30:16: undefined: strconv

    /tmp/tmpefka4q2m_test.go:32:16: undefined: strconv

    /tmp/tmpefka4q2m_test.go:34:16: undefined: strconv

    /tmp/tmpefka4q2m_test.go:36:16: undefined: strconv

    /tmp/tmpefka4q2m_test.go:38:16: undefined: strconv

    /tmp/tmpefka4q2m_test.go:40:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10.\")\n        return \"\"\n    }\n    if x < 0 {\n        fmt.Println(\"\
    Input number must be greater than 0.\")\n        return \"\"\n    }\n    x /=\
    \ base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpt6_8zprf_test.go:59: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpt6_8zprf_test.go:59: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpt6_8zprf_test.go:59:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpt6_8zprf_test.go:59: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpt6_8zprf_test.go:59: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpt6_8zprf_test.go:59: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpt6_8zprf_test.go:59:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpt6_8zprf_test.go:59: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpt6_8zprf_test.go:59: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpt6_8zprf_test.go:59: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpt6_8zprf_test.go:59:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpt6_8zprf_test.go:59: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074606
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x == 0 {\n            return \"0\"\n        }\n        if x <\
    \ 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 3:\n        if x == 0 {\n            return \"0\"\n      \
    \  }\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n       \
    \ }\n        return fmt.Sprintf(\"%0d\", x)\n    case 4:\n        if x == 0 {\n\
    \            return \"0\"\n        }\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    case 5:\n        if x == 0 {\n            return \"0\"\n        }\n     \
    \   if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n      \
    \  return fmt.Sprintf(\"%0d\", x)\n    case 6:\n        if x == 0 {\n        \
    \    return \"0\"\n        }\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 7:\n   \
    \     if x == 0 {\n            return \"0\"\n        }\n        if x < 10 {\n\
    \            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 8:\n        if x == 0 {\n            return \"0\"\n      \
    \  }\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n       \
    \ }\n        return fmt.Sprintf(\"%0d\", x)\n    case 9:\n        if x == 0 {\n\
    \            return \"0\"\n        }\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n\
    \    case 10:\n        if x == 0 {\n            return \"0\"\n        }\n    \
    \    if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n     \
    \   return fmt.Sprintf(\"%0d\", x)\n    default:\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpfrj0343a_test.go:120: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpfrj0343a_test.go:120: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpfrj0343a_test.go:120:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpfrj0343a_test.go:120: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpfrj0343a_test.go:120: expected '1000', got '8'\n    ---\
    \ FAIL: TestChange_Base/test_num__5 (0.00s)\n        tmpfrj0343a_test.go:120:\
    \ expected '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074606
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp0qqv1v86_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp0qqv1v86_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp0qqv1v86_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp0qqv1v86_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp0qqv1v86_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp0qqv1v86_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp0qqv1v86_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp0qqv1v86_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp0qqv1v86_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp0qqv1v86_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp0qqv1v86_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp0qqv1v86_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x -= base\n    x /=\
    \ base\n    x += 1\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpw0v4g_md_test.go:49: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpw0v4g_md_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpw0v4g_md_test.go:49:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpw0v4g_md_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpw0v4g_md_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpw0v4g_md_test.go:49: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpw0v4g_md_test.go:49:\
    \ expected '2', got '1'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpw0v4g_md_test.go:49: expected '3', got '1'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpw0v4g_md_test.go:49: expected '4', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpw0v4g_md_test.go:49: expected\
    \ '5', got '1'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpw0v4g_md_test.go:49:\
    \ expected '6', got '1'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpw0v4g_md_test.go:49: expected '7', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphm11cr64_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 3:\n        return\
    \ fmt.Sprintf(\"%0*d\", base, x)\n    case 4:\n        return fmt.Sprintf(\"%0*d\"\
    , base, x)\n    case 5:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%0*d\", base, x)\n    case 8:\n        return fmt.Sprintf(\"%0*d\"\
    , base, x)\n    case 9:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case\
    \ 10:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 11:\n        return\
    \ fmt.Sprintf(\"%0*d\", base, x)\n    case 12:\n        return fmt.Sprintf(\"\
    %0*d\", base, x)\n    case 13:\n        return fmt.Sprintf(\"%0*d\", base, x)\n\
    \    case 14:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 15:\n \
    \       return fmt.Sprintf(\"%0*d\", base, x)\n    case 16:\n        return fmt.Sprintf(\"\
    %0*d\", base, x)\n    case 17:\n        return fmt.Sprintf(\"%0*d\", base, x)\n\
    \    case 18:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 19:\n \
    \       return fmt.Sprintf(\"%0*d\", base, x)\n    case 20:\n        return fmt.Sprintf(\"\
    %0*d\", base, x)\n    case 21:\n        return fmt.Sprintf(\"%0*d\", base, x)\n\
    \    case 22:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 23:\n \
    \       return fmt.Sprintf(\"%0*d\", base, x)\n    case 24:\n        return fmt.Sprintf(\"\
    %0*d\", base, x)\n    case 25:\n        return fmt.Sprintf(\"%0*d\", base, x)\n\
    \    case 26:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 27:\n \
    \       return fmt.Sprintf(\"%0*d\", base, x)\n    case 28:\n        return fmt.Sprintf(\"\
    %0*d\", base, x)\n    case 29:\n        return fmt.Sprintf(\"%0*d\", base, x)\n\
    \    case 30:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 31:\n \
    \       return fmt.Sprintf(\"%0*d\", base, x)\n    case 32:\n        return fmt.Sprintf(\"\
    %0*d\", base, x)\n    case 33:\n        return fmt.Sprintf(\"%0*d\", base, x)\n\
    \    case 34:\n        return fmt.Sprintf(\"%0*d\", base, x)\n    case 35:\n \
    \       return fmt.Sprintf(\"%0*d\", base, x)\n    case 36:\n        return fmt.Sprintf(\"\
    %0*d\", base, x)\n    case 37:\n        return fmt.\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkqce7j8i_test.go:91:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"\
    %d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x*100)\n    case\
    \ 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case 6:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return fmt.Sprintf(\"%d\"\
    , x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x*1000000)\n    case\
    \ 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000)\n    case 11:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000)\n    case 12:\n        return fmt.Sprintf(\"%d\", x*10000000000)\n\
    \    case 13:\n        return fmt.Sprintf(\"%d\", x*100000000000)\n    case 14:\n\
    \        return fmt.Sprintf(\"%d\", x*1000000000000)\n    case 15:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000000000000)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x*100000000000000)\n    case 17:\n        return fmt.Sprintf(\"%d\", x*1000000000000000)\n\
    \    case 18:\n        return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case\
    \ 19:\n        return fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n\
    \        return fmt.Sprintf(\"%d\", x*1000000000000000000)\n    case 21:\n   \
    \     return fmt.Sprintf(\"%d\", x*10000000000000000000)\n    case 22:\n     \
    \   return fmt.Sprintf(\"%d\", x*100000000000000000000)\n    case 23:\n      \
    \  return fmt.Sprintf(\"%d\", x*1000000000000000000000)\n    case 24:\n      \
    \  return fmt.Sprintf(\"%d\", x*10000000000000000000000)\n    case 25:\n     \
    \   return fmt.Sprintf(\"%d\", x*100000000000000000000000)\n    case 26:\n   \
    \     return fmt.Sprintf(\"%d\", x*1000000000000000000000000)\n    case 27:\n\
    \        return fmt.Sprintf(\"%d\", x*10000000000000000000000000)\n    case 28:\n\
    \        return fmt.Sprintf(\"%d\", x*100000000000000000000000000)\n    case 29:\n\
    \        return fmt.Sprintf(\"%d\", x*1000000000000000000000000000)\n    case\
    \ 30:\n        return fmt.Sprintf(\"%d\", x*10000000000000000000000000000)\n \
    \   case 31:\n        return fmt.Sprintf(\"%d\", x*100000000000000000000000000000)\n\
    \    case 32:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000000000000)\n\
    \    case 33:\n        return fmt.Sprintf(\"%d\", x*10000000000000000000000000000000)\n\
    \    case 34:\n        return fmt.Sprintf(\"%d\", x*100000000000000000000000000000000)\n\
    \    case 35:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000000000000000)\n\
    \    case 36:\n        return fmt.Sprintf(\"%d\", x*10000000000000000000000000000000000)\n\
    \    case 37:\n        return fmt.Sprintf(\"%d\", x*100000000000000000000000000000000000)\n\
    \    case 38:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000000000000000000)\n\
    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph8u3jzqh_test.go:94:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp0qqv1v86_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp0qqv1v86_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp0qqv1v86_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp0qqv1v86_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp0qqv1v86_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp0qqv1v86_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp0qqv1v86_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp0qqv1v86_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp0qqv1v86_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp0qqv1v86_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp0qqv1v86_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp0qqv1v86_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x -= (x % base)\n  \
    \  x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /=\
    \ base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo5w48jrt_test.go:104:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10.\")\n        return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"\
    Cannot change base of 0.\")\n        return \"\"\n    }\n    if x < 0 {\n    \
    \    fmt.Println(\"Cannot change base of negative number.\")\n        return \"\
    \"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwa6_hkz5_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphm11cr64_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%0*d\", x, x)\n    case 3:\n        return\
    \ fmt.Sprintf(\"%0*d\", x, x*10)\n    case 4:\n        return fmt.Sprintf(\"%0*d\"\
    , x, x*100)\n    case 5:\n        return fmt.Sprintf(\"%0*d\", x, x*1000)\n  \
    \  case 6:\n        return fmt.Sprintf(\"%0*d\", x, x*10000)\n    case 7:\n  \
    \      return fmt.Sprintf(\"%0*d\", x, x*100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%0*d\", x, x*1000000)\n    case 9:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*10000000)\n    case 10:\n        return fmt.Sprintf(\"%0*d\", x,\
    \ x*100000000)\n    case 11:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000000)\n\
    \    case 12:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000000000)\n    case\
    \ 13:\n        return fmt.Sprintf(\"%0*d\", x, x*10000000000000)\n    case 14:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*1000000000000000)\n    case 15:\n \
    \       return fmt.Sprintf(\"%0*d\", x, x*10000000000000000)\n    case 16:\n \
    \       return fmt.Sprintf(\"%0*d\", x, x*1000000000000000000)\n    default:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*1000000000000000000)\n    }\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp_va67bsn_test.go:78: expected '22', got '00000080'\n   \
    \ --- FAIL: TestChange_Base/test_num__1 (0.00s)\n        tmp_va67bsn_test.go:78:\
    \ expected '100', got '000000090'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n\
    \        tmp_va67bsn_test.go:78: expected '11101010', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000234'\n\
    \    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n        tmp_va67bsn_test.go:78:\
    \ expected '10000', got '0000000000000016'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp_va67bsn_test.go:78: expected '1000', got '00000008'\n \
    \   --- FAIL: TestChange_Base/test_num__5 (0.00s)\n        tmp_va67bsn_test.go:78:\
    \ expected '111', got '0000007'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n\
    \        tmp_va67bsn_test.go:78: expected '2', got '20'\n    --- FAIL: TestChange_Base/test_num__7\
    \ (0.00s)\n        tmp_va67bsn_test.go:78: expected '3', got '300'\n    --- FAIL:\
    \ TestChange_Base/test_num__8 (0.00s)\n        tmp_va67bsn_test.go:78: expected\
    \ '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n       \
    \ tmp_va67bsn_test.go:78: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmp_va67bsn_test.go:78: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmp_va67bsn_test.go:78:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074606
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2.\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10.\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmps2ad098x_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmps2ad098x_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmps2ad098x_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmps2ad098x_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmps2ad098x_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmps2ad098x_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmps2ad098x_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmps2ad098x_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmps2ad098x_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmps2ad098x_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmps2ad098x_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmps2ad098x_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 2 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n\
    \        return fmt.Sprintf(\"%d\", x / 2)\n    case 3:\n        if x < 3 {\n\
    \            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x / 3)\n    case 4:\n        if x < 4 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x / 4)\n    case 5:\n\
    \        if x < 5 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n  \
    \      return fmt.Sprintf(\"%d\", x / 5)\n    case 6:\n        if x < 6 {\n  \
    \          return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x / 6)\n    case 7:\n        if x < 7 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x / 7)\n    case 8:\n\
    \        if x < 8 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n  \
    \      return fmt.Sprintf(\"%d\", x / 8)\n    case 9:\n        if x < 9 {\n  \
    \          return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x / 9)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x / 10)\n    default:\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpcn2xh15e_test.go:93: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpcn2xh15e_test.go:93: expected\
    \ '100', got '3'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpcn2xh15e_test.go:93:\
    \ expected '11101010', got '117'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpcn2xh15e_test.go:93: expected '10000', got '8'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpcn2xh15e_test.go:93: expected '1000', got '4'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpcn2xh15e_test.go:93: expected\
    \ '111', got '3'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074606
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n    }\n\
    \    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\")\n   \
    \     return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzm17_m76_test.go:122:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    switch base {\n    case 2:\n\
    \        return strconv.Itoa(x)\n    case 3:\n        return strconv.Itoa(x /\
    \ 10)\n    case 4:\n        return strconv.Itoa(x / 100)\n    case 5:\n      \
    \  return strconv.Itoa(x / 1000)\n    case 6:\n        return strconv.Itoa(x /\
    \ 10000)\n    case 7:\n        return strconv.Itoa(x / 100000)\n    case 8:\n\
    \        return strconv.Itoa(x / 1000000)\n    case 9:\n        return strconv.Itoa(x\
    \ / 10000000)\n    case 10:\n        return strconv.Itoa(x / 100000000)\n    case\
    \ 11:\n        return strconv.Itoa(x / 1000000000)\n    case 12:\n        return\
    \ strconv.Itoa(x / 1000000000000)\n    case 13:\n        return strconv.Itoa(x\
    \ / 10000000000000)\n    case 14:\n        return strconv.Itoa(x / 1000000000000000)\n\
    \    case 15:\n        return strconv.Itoa(x / 10000000000000000)\n    case 16:\n\
    \        return strconv.Itoa(x / 100000000000000000)\n    case 17:\n        return\
    \ strconv.Itoa(x / 1000000000000000000)\n    case 18:\n        return strconv.Itoa(x\
    \ / 10000000000000000000)\n    case 19:\n        return strconv.Itoa(x / 100000000000000000000)\n\
    \    case 20:\n        return strconv.Itoa(x / 1000000000000000000000)\n    case\
    \ 21:\n        return strconv.Itoa(x / 10000000000000000000000)\n    case 22:\n\
    \        return strconv.Itoa(x / 100000000000000000000000)\n    case 23:\n   \
    \     return strconv.Itoa(x / 1000000000000000000000000)\n    case 24:\n     \
    \   return strconv.Itoa(x / 10000000000000000000000000)\n    case 25:\n      \
    \  return strconv.Itoa(x / 100000000000000000000000000)\n    case 26:\n      \
    \  return strconv.Itoa(x / 1000000000000000000000000000)\n    case 27:\n     \
    \   return strconv.Itoa(x / 10000000000000000000000000000)\n    case 28:\n   \
    \     return strconv.Itoa(x / 100000000000000000000000000000)\n    case 29:\n\
    \        return strconv.Itoa(x / 10000000000000000000000000000000)\n    case 30:\n\
    \        return strconv.Itoa(x / 100000000000000000000000000000000)\n    case\
    \ 31:\n        return strconv.Itoa(x / 1000000000000000000000000000000000)\n \
    \   case 32:\n        return strconv.Itoa(x / 10000000000000000000000000000000000)\n\
    \    case 33:\n        return strconv.Itoa(x / 100000000000000000000000000\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzybq_eoy_test.go:90:60: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"\
    %d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"%d\", x*100)\n    case\
    \ 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case 6:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return fmt.Sprintf(\"%d\"\
    , x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\", x*1000000)\n    case\
    \ 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000)\n    case 11:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000)\n    case 12:\n        return fmt.Sprintf(\"%d\", x*10000000000)\n\
    \    case 13:\n        return fmt.Sprintf(\"%d\", x*100000000000)\n    case 14:\n\
    \        return fmt.Sprintf(\"%d\", x*1000000000000)\n    case 15:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000000000000)\n    case 16:\n        return fmt.Sprintf(\"\
    %d\", x*100000000000000)\n    case 17:\n        return fmt.Sprintf(\"%d\", x*1000000000000000)\n\
    \    case 18:\n        return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case\
    \ 19:\n        return fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n\
    \        return fmt.Sprintf(\"%d\", x*1000000000000000000)\n    default:\n   \
    \     return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpfc05zj38_test.go:86: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpfc05zj38_test.go:86: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmpfc05zj38_test.go:86: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpfc05zj38_test.go:86: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmpfc05zj38_test.go:86: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmpfc05zj38_test.go:86: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmpfc05zj38_test.go:86: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmpfc05zj38_test.go:86: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmpfc05zj38_test.go:86:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmpfc05zj38_test.go:86: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmpfc05zj38_test.go:86: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmpfc05zj38_test.go:86:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074602
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    switch base {\n    case\
    \ 2:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n       \
    \ }\n        return fmt.Sprintf(\"%0d\", x)\n    case 3:\n        if x < 10 {\n\
    \            return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 4:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 5:\n   \
    \     if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%0d\", x)\n    case 6:\n        if x < 10 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 7:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    case 8:\n   \
    \     if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n    \
    \    return fmt.Sprintf(\"%0d\", x)\n    case 9:\n        if x < 10 {\n      \
    \      return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %0d\", x)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%0d\", x)\n    default:\n  \
    \      return \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpoh98ls6h_test.go:93: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpoh98ls6h_test.go:93: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpoh98ls6h_test.go:93:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpoh98ls6h_test.go:93: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpoh98ls6h_test.go:93: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpoh98ls6h_test.go:93: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074606
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 10 {\n   \
    \     fmt.Println(\"Base must be less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz7ukdx_5_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9nuw3v6s_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    x %= base\n    x /= base\n    x /= base\n    x /= base\n  \
    \  x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n   \
    \ x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x\
    \ /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /=\
    \ base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n\
    \    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n \
    \   x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n  \
    \  x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n   \
    \ x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x\
    \ /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /=\
    \ base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n\
    \    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n \
    \   x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n  \
    \  x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n   \
    \ x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x\
    \ /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /=\
    \ base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n\
    \    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphjcv80ji_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074605
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be less than 2\")\n        return \"\"\n    }\n \
    \   if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d%s\", x, change_base(base,\n      \
    \  int(base/x)))\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 2\n--- FAIL: TestChange_Base (0.00s)\npanic: runtime\
    \ error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide\
    \ by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5038a0, 0x5f29a0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5038a0,\
    \ 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.change_base(0x4b3193?, 0x0?)\n\t/tmp/tmp45r56y_9_test.go:28\
    \ +0x18c\ncommand-line-arguments_test.TestChange_Base(0x0?)\n\t/tmp/tmp45r56y_9_test.go:39\
    \ +0x75\ntesting.tRunner(0xc0000da340, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074606
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphm11cr64_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5s7oyhu5_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074601
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphm11cr64_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunc change_base(x int, base int) string {\n    if base < 2 {\n    \
    \    fmt.Println(\"Base must be greater than or equal to 2\")\n        return\
    \ \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ or equal to 10\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpbkcv20k1_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpbkcv20k1_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpbkcv20k1_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpbkcv20k1_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpbkcv20k1_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpbkcv20k1_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpbkcv20k1_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpbkcv20k1_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpbkcv20k1_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpbkcv20k1_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpbkcv20k1_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpbkcv20k1_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074606
