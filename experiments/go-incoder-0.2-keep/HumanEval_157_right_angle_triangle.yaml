name: HumanEval_157_right_angle_triangle
language: go_test.go
prompt: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// right_angle_triangle(3, 4, 5) == True\n// right_angle_triangle(1,\
  \ 2, 3) == False\nfunc right_angle_triangle(a int, b int, c int) bool {\n"
tests: "func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n   \
  \  { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
  \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false },\n\
  \     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
  \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
  \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
  \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
  \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    // Write your code here\n    if a > b {\n        if b > c {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    } else {\n        if c > b {\n            return true\n        } else {\n\
    \            return false\n        }\n    }\n}\n", "    switch {\n    case a >\
    \ 0 && b > 0 && c > 0:\n        return true\n    case a > 0 && b > 0 && c < 0:\n\
    \        return false\n    case a > 0 && b < 0 && c > 0:\n        return false\n\
    \    case a > 0 && b < 0 && c < 0:\n        return true\n    case a < 0 && b >\
    \ 0 && c > 0:\n        return false\n    case a < 0 && b > 0 && c < 0:\n     \
    \   return true\n    case a < 0 && b < 0 && c > 0:\n        return false\n   \
    \ case a < 0 && b < 0 && c < 0:\n        return true\n    default:\n        return\
    \ false\n    }\n}\n", "    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, c\n    }\n\
    \    \n    // If all sides are equal, triangle is right angled.\n    if a == b\
    \ {\n        return true\n    }\n    \n    // If all sides are equal, triangle\
    \ is right angled.\n    if a == c {\n        return true\n    }\n    \n    //\
    \ If all sides are equal, triangle is right angled.\n    if b == c {\n       \
    \ return true\n    }\n    \n    // If all sides are equal, triangle is right angled.\n\
    \    if a == b {\n        return true\n    }\n    \n    // If all sides are equal,\
    \ triangle is right angled.\n    if a == c {\n        return true\n    }\n   \
    \ \n    // If all sides are equal, triangle is right angled.\n    if b == c {\n\
    \        return true\n    }\n    \n    // If all sides are equal, triangle is\
    \ right angled.\n    if a == b {\n        return true\n    }\n    \n    // If\
    \ all sides are equal, triangle is right angled.\n    if a == c {\n        return\
    \ true\n    }\n    \n    // If all sides are equal, triangle is right angled.\n\
    \    if b == c {\n        return true\n    }\n    \n    // If all sides are equal,\
    \ triangle is right angled.\n    if a == b {\n        return true\n    }\n   \
    \ \n    // If all sides are equal, triangle is right angled.\n    if a == c {\n\
    \        return true\n    }\n    \n    // If all sides are equal, triangle is\
    \ right angled.\n    if b == c {\n        return true\n    }\n    \n    // If\
    \ all sides are equal, triangle is right angled.\n    if a == b {\n        return\
    \ true\n    }\n    \n    // If all sides are equal, triangle is right angled.\n\
    \    if a == c {\n        return true\n    }\n    \n    // If all sides are equal,\
    \ triangle is right angled.\n    if b == c {\n        return true\n    }\n   \
    \ \n    // If all sides are equal, triangle is right angled.\n    if a == b {\n\
    \        return true\n    }\n    \n    // If all sides are equal, triangle is\
    \ right angled.\n    if a == c {\n        return true\n    }\n    \n    // If\
    \ all sides are equal, triangle is right angled.\n    if b == c {\n        return\
    \ true", "    // Write your code here\n    if a > b {\n        if b > c {\n  \
    \          return true\n        } else {\n            return false\n        }\n\
    \    } else {\n        if c > b {\n            return false\n        } else {\n\
    \            return true\n        }\n    }\n}\n", "    if a > b {\n        a,\
    \ b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if c > a {\n\
    \        c, a = a, b\n    }\n    if a == 0 || b == 0 || c == 0 {\n        return\
    \ false\n    }\n    \n    ab := b - a\n    cb := c - b\n    ac := a - c\n    \n\
    \    if ab == cb {\n        return ab == ac\n    }\n    \n    if ab == 0 {\n \
    \       return cb == ac\n    }\n    \n    if cb == 0 {\n        return ab == ac\n\
    \    }\n    \n    if ab == cb {\n        return ab == ac\n    }\n    \n    if\
    \ ab == 0 {\n        return cb == ac\n    }\n    \n    if cb == 0 {\n        return\
    \ ab == ac\n    }\n    \n    if ab == cb {\n        return ab == ac\n    }\n \
    \   \n    if ab == 0 {\n        return cb == ac\n    }\n    \n    if cb == 0 {\n\
    \        return ab == ac\n    }\n    \n    if ab == cb {\n        return ab ==\
    \ ac\n    }\n    \n    if ab == 0 {\n        return cb == ac\n    }\n    \n  \
    \  if cb == 0 {\n        return ab == ac\n    }\n    \n    if ab == cb {\n   \
    \     return ab == ac\n    }\n    \n    if ab == 0 {\n        return cb == ac\n\
    \    }\n    \n    if cb == 0 {\n        return ab == ac\n    }\n    \n    if ab\
    \ == cb {\n        return ab == ac\n    }\n    \n    if ab == 0 {\n        return\
    \ cb == ac\n    }\n    \n    if cb == 0 {\n        return ab == ac\n    }\n  \
    \  \n    if ab == cb {\n        return ab == ac\n    }\n    \n    if ab == 0 {\n\
    \        return cb == ac\n    }\n    \n    if cb == 0 {\n        return ab ==\
    \ ac\n    }\n    \n    if ab == cb {\n        return ab == ac\n    }\n    \n \
    \   if ab == 0 {\n        return cb == ac\n    }\n    \n    if cb == 0 {\n   \
    \     return ab == ac\n    }\n    \n    if ab == cb {\n        return ab == ac\n\
    \    }\n    \n    if ab == 0 {\n        return cb == ac\n    }\n    \n    if cb\
    \ == 0 {\n        return ab == ac\n    }\n    \n    if ab == cb {\n        return\
    \ ab == ac\n    }\n    \n    if ab == 0 {\n        return cb == ac\n    }\n  \
    \  \n    if cb == 0 {\n        return ab == ac\n    }\n    \n    if ab == cb",
  "    if a > b {\n        return false\n    }\n    if b > c {\n        return false\n\
    \    }\n    if a > c {\n        return false\n    }\n    if a == b {\n       \
    \ return true\n    }\n    if a == c {\n        return true\n    }\n    if b ==\
    \ c {\n        return true\n    }\n    if a > b {\n        return false\n    }\n\
    \    if b > c {\n        return false\n    }\n    if a > c {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\n    }\n    if a >\
    \ b {\n        return false\n    }\n    if b > c {\n        return false\n   \
    \ }\n    if a > c {\n        return false\n    }\n    if a == b {\n        return\
    \ true\n    }\n    if a == c {\n        return true\n    }\n    if b == c {\n\
    \        return true\n    }\n    if a > b {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    if a > c {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\n    }\n    return\
    \ false\n}\n", "    if a == 0 || b == 0 || c == 0 {\n        return false\n  \
    \  }\n    if a == b {\n        return c == a\n    }\n    if a == c {\n       \
    \ return b == c\n    }\n    if b == c {\n        return a == b\n    }\n    return\
    \ false\n}\n", "    switch {\n    case a > 0 && b > 0 && c > 0:\n        return\
    \ true\n    case a > 0 && b > 0 && c < 0:\n        return false\n    case a >\
    \ 0 && b < 0 && c > 0:\n        return false\n    case a > 0 && b < 0 && c < 0:\n\
    \        return true\n    case a < 0 && b > 0 && c > 0:\n        return false\n\
    \    case a < 0 && b > 0 && c < 0:\n        return true\n    case a < 0 && b <\
    \ 0 && c > 0:\n        return false\n    case a < 0 && b < 0 && c < 0:\n     \
    \   return true\n    default:\n        return false\n    }\n}\n", "    // Write\
    \ your code here\n    \n    return false\n}\n", "    if a == 0 || b == 0 || c\
    \ == 0 {\n        return false\n    }\n    \n    switch {\n    case a > c && b\
    \ > c:\n        return false\n    case a > c && b < c:\n        return true\n\
    \    case a < c && b > c:\n        return true\n    case a < c && b < c:\n   \
    \     return false\n    }\n}\n", "    if a > b {\n        return right_angle_triangle(b,\
    \ a, c)\n    }\n    if b > c {\n        return right_angle_triangle(a, c, b)\n\
    \    }\n    if a == b {\n        return right_angle_triangle(a, a, a)\n    }\n\
    \    if a == c {\n        return right_angle_triangle(a, a, b)\n    }\n    if\
    \ b == c {\n        return right_angle_triangle(a, b, a)\n    }\n    return false\n\
    }\n", "    // Write your code here.\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a > b\
    \ {\n        a, b = b, a\n    }\n    if a > c {\n        a, c = c, a\n    }\n\
    \    if b > c {\n        b, c = c, b\n    }\n    if a + b > c {\n        return\
    \ false\n    }\n    if a + c > b {\n        return false\n    }\n    if b + c\
    \ > a {\n        return false\n    }\n    return true\n}\n", "    if a == 0 ||\
    \ b == 0 || c == 0 {\n        return false\n    }\n    \n    // if one side is\
    \ 90 degree, return true\n    if a == b {\n        return a == c\n    }\n    \n\
    \    // if one side is right angle, return true\n    if a == c {\n        return\
    \ b == c\n    }\n    \n    // if two sides are 90 degree, return false\n    if\
    \ b == c {\n        return false\n    }\n    \n    // if two sides are right angle,\
    \ return false\n    if a == b {\n        return false\n    }\n    \n    // if\
    \ two sides are equal, return false\n    if a == c {\n        return false\n \
    \   }\n    \n    // if two sides are equal, return false\n    if b == c {\n  \
    \      return false\n    }\n    \n    // if two sides are equal, return false\n\
    \    if a == b {\n        return false\n    }\n    \n    // if two sides are equal,\
    \ return false\n    if a == c {\n        return false\n    }\n    \n    // if\
    \ two sides are equal, return false\n    if b == c {\n        return false\n \
    \   }\n    \n    // if two sides are equal, return false\n    if a == b {\n  \
    \      return false\n    }\n    \n    // if two sides are equal, return false\n\
    \    if a == c {\n        return false\n    }\n    \n    // if two sides are equal,\
    \ return false\n    if b == c {\n        return false\n    }\n    \n    // if\
    \ two sides are equal, return false\n    if a == b {\n        return false\n \
    \   }\n    \n    // if two sides are equal, return false\n    if a == c {\n  \
    \      return false\n    }\n    \n    // if two sides are equal, return false\n\
    \    if b == c {\n        return false\n    }\n    \n    // if two sides are equal,\
    \ return false\n    if a == b {\n        return false\n    }\n    \n    // if\
    \ two sides are equal, return false\n    if a == c {\n        return false\n \
    \   }\n    \n    // if two sides are equal, return false\n    if b == c {\n  \
    \      return false\n    }\n    \n    // if two sides are equal, return false\n\
    \    if a == b {\n        return false\n    }\n    \n    // if two sides are equal,\
    \ return false\n    if a == c {\n        return false\n    }\n    \n    // if\
    \ two sides are equal, return false\n    if b == c {\n        return false\n \
    \   }\n    \n    // if two sides are equal, return false\n    if a == b {\n  \
    \      return false\n    }\n    \n", "    if a > b {\n        if b > c {\n   \
    \         return true\n        }\n        return false\n    }\n    if b > c {\n\
    \        return false\n    }\n    return true\n}\n", "    if a > b {\n       \
    \ a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if c > a\
    \ {\n        c, a = a, b\n    }\n    if a + b > c {\n        return false\n  \
    \  }\n    if a + c > b {\n        return false\n    }\n    if b + c > a {\n  \
    \      return false\n    }\n    return true\n}\n", "    if a > b {\n        return\
    \ false\n    }\n    if b > c {\n        return false\n    }\n    if a == b {\n\
    \        return true\n    }\n    if a == c {\n        return true\n    }\n   \
    \ if b == c {\n        return true\n    }\n    if a > c {\n        return false\n\
    \    }\n    if b > a {\n        return false\n    }\n    if c > a {\n        return\
    \ false\n    }\n    if a > b {\n        return false\n    }\n    if b > c {\n\
    \        return false\n    }\n    if c > b {\n        return false\n    }\n  \
    \  if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    if a > b {\n        return\
    \ false\n    }\n    if b > c {\n        return false\n    }\n    if c > b {\n\
    \        return false\n    }\n    if a > c {\n        return false\n    }\n  \
    \  if b > a {\n        return false\n    }\n    if c > a {\n        return false\n\
    \    }\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if c > b {\n        return false\n    }\n    if a > c {\n\
    \        return false\n    }\n    if b > a {\n        return false\n    }\n  \
    \  if c > a {\n        return false\n    }\n    if a > b {\n        return false\n\
    \    }\n    if b > c {\n        return false\n    }\n    if c > b {\n        return\
    \ false\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n\
    \        return false\n    }\n    if c > a {\n        return false\n    }\n  \
    \  if a > b {\n        return false\n    }\n    if b > c {\n        return false\n\
    \    }\n    if c > b {\n        return false\n    }\n    if a > c {\n        return\
    \ false\n    }\n    if b > a {\n        return false\n    }\n    if c > a {\n\
    \        return false\n    }\n    if a > b {\n        return false\n    }\n  \
    \  if b > c {\n        return false\n    }\n    if c > b {\n        return false\n\
    \    }\n    if a > c {\n        return false\n    }\n    if b > a {\n        return\
    \ false\n    }\n    if c > a {\n        return false\n    }\n    if a > b {\n\
    \        return false\n    }\n    if b > c {\n        return false\n    }\n  \
    \  if c > b {\n        return false\n    }\n    if a > c {\n        return false\n\
    \    }\n", "    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \    \n    if a > b {\n        if a > c {\n            return true\n        }\n\
    \        return false\n    }\n    \n    if b > c {\n        return true\n    }\n\
    \    return false\n}\n", "    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n", "    if a > b {\n        if b > c {\n \
    \           return false\n        } else {\n            return true\n        }\n\
    \    } else {\n        if c > b {\n            return false\n        } else {\n\
    \            return true\n        }\n    }\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
