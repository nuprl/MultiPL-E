language: go_test.go
name: HumanEval_48_is_palindrome
results:
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   if length <= 1 {\n        return text == text[0:length]\n    }\n    start\
    \ := 0\n    end := length-1\n    for start < end {\n        if text[start] !=\
    \ text[end] {\n            return false\n        }\n        start++\n        end--\n\
    \    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := (start + end) / 2\n    for start\
    \ < end {\n        if text[start] != text[end] {\n            return false\n \
    \       }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw78oed6k_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    first := text[0]\n \
    \   last := text[len(text)-1]\n    return first == last\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmphmiukc48_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := length/2\n    for start < middle\
    \ {\n        if text[start] != text[end] {\n            return false\n       \
    \ }\n        start += 1\n        end -= 1\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := length/2\n    for start < middle\
    \ {\n        if text[start] != text[end] {\n            return false\n       \
    \ }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    start := 0\n\
    \    end := length-1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpok8n1x4e_test.go:18:10: no new variables on left side of :=

    /tmp/tmpok8n1x4e_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) < 2 {\n        return true\n    }\n    first := text[0]\n  \
    \  last := text[len(text)-1]\n    return first == last\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp2e_ne0ac_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) < 2 {\n        return true\n    }\n    left := 0\n    right\
    \ := len(text) - 1\n    middle := (left + right) / 2\n    for i := middle; i >=\
    \ 0; i-- {\n        if text[i] != text[right] {\n            return false\n  \
    \      }\n        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpwscjy8se_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpwscjy8se_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   if length == 1 {\n        return text == text[:len(text)/2]\n    }\n    middle\
    \ := length / 2\n    return is_palindrome(text[:middle]) && is_palindrome(text[middle:])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmp83bpdsq7_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__2 (0.00s)\n        tmp83bpdsq7_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Palindrome/test_num__4\
    \ (0.00s)\n        tmp83bpdsq7_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    start := 0\n    end := length-1\n    middle\
    \ := (start + end) / 2\n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj_yrri9k_test.go:18:10: no new variables on left side of :=

    /tmp/tmpj_yrri9k_test.go:18:13: undefined: strings

    /tmp/tmpj_yrri9k_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text)-1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    left := 0\n    right\
    \ := len(text) - 1\n    middle := (left + right) / 2\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm9zobmhv_test.go:23:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := length/2\n    \n    for start\
    \ < middle && end > middle {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start += 1\n        end -= 1\n    }\n  \
    \  return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := length/2\n    for start < middle\
    \ {\n        if text[start] != text[end] {\n            return false\n       \
    \ }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := (start + end) / 2\n    for start\
    \ < end {\n        if text[start] != text[end] {\n            return false\n \
    \       }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw78oed6k_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) < 2 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n\
    \    \n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpil244_bh_test.go:18:10: no new variables on left side of :=

    /tmp/tmpil244_bh_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    left := 0\n    right\
    \ := len(text) - 1\n    middle := (left + right) / 2\n    for i := 0; i < middle;\
    \ i++ {\n        if text[i] != text[right] {\n            return false\n     \
    \   }\n        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmph7sx9ys7_test.go:24\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmph7sx9ys7_test.go:24 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmph7sx9ys7_test.go:35 +0x62\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    first := text[0]\n \
    \   last := text[len(text)-1]\n    if first != last {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpk5pksl5t_test.go:26\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpk5pksl5t_test.go:26 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpk5pksl5t_test.go:37 +0x62\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n\n\
    \    start := 0\n    end := length-1\n    middle := length/2\n\n    for start\
    \ < middle && end >= middle {\n        if text[start] != text[end] {\n       \
    \     return false\n        }\n        start++\n        end--\n    }\n\n    return\
    \ start == end\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmph7sx9ys7_test.go:24\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmph7sx9ys7_test.go:24 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmph7sx9ys7_test.go:35 +0x62\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text)-1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := (length-1)/2\n    for start\
    \ < end {\n        if text[start] != text[end] {\n            return false\n \
    \       }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkzxo_vvb_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    first := text[0]\n \
    \   last := text[len(text)-1]\n    return first == last\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmpfgz1yg7t_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    if length == 1 {\n        return text ==\
    \ text[:len(text)/2]\n    }\n    if length == 2 {\n        return text == text[:len(text)/2]\
    \ + text[len(text)/2:]\n    }\n    if length == 3 {\n        return text == text[:len(text)/2]\
    \ + text[len(text)/2:] + text[:len(text)/2]\n    }\n    if length == 4 {\n   \
    \     return text == text[:len(text)/2] + text[len(text)/2:] + text[:len(text)/2]\
    \ + text[len(text)/2:]\n    }\n    if length == 5 {\n        return text == text[:len(text)/2]\
    \ + text[len(text)/2:] + text[:len(text)/2] + text[len(text)/2:] + text[len(text)/2:]\n\
    \    }\n    if length == 6 {\n        return text == text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2] + text[len(text)/2:] + text[len(text)/2:] + text[len(text)/2:]\n\
    \    }\n    if length == 7 {\n        return text == text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2] + text[len(text)/2:] + text[len(text)/2:] + text[len(text)/2:]\
    \ + text[len(text)/2:]\n    }\n    if length == 8 {\n        return text == text[:len(text)/2]\
    \ + text[len(text)/2:] + text[:len(text)/2] + text[len(text)/2:] + text[len(text)/2:]\
    \ + text[len(text)/2:] + text[len(text)/2:] + text[len(text)/2:]\n    }\n    if\
    \ length == 9 {\n        return text == text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2] + text[len(text)/2:] + text[len(text)/2:] + text[len(text)/2:]\
    \ + text[len(text)/2:] + text[len(text)/2:] + text[len(text)/2:]\n    }\n    if\
    \ length == 10 {\n        return text == text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2] + text[len(text)/2:] + text[len(text)/2:] + text[len(text)/2:]\
    \ + text[len(text)/2:] + text[len(text)/2:] + text[len(text)/2:] + text[len(text)/2:]\n\
    \    }\n    if length == 11 {\n        return text == text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2] + text[len(text\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpom2he3ch_test.go:54:100: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073895
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    start := 0\n    end := length-1\n    middle\
    \ := (start + end) / 2\n    for start < end {\n        if text[middle] != text[middle+1]\
    \ {\n            return false\n        }\n        middle++\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa70ajctf_test.go:18:10: no new variables on left side of :=

    /tmp/tmpa70ajctf_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  left := 0\n    right := length - 1\n    middle := (left + right) / 2\n    for\
    \ left < right {\n        if text[left] != text[middle] {\n            return\
    \ false\n        }\n        left++\n        middle--\n    }\n    return true\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome(...)\n\t/tmp/tmpo6l54_5s_test.go:26\n\
    command-line-arguments_test.TestIs_Palindrome(0x0?)\n\t/tmp/tmpo6l54_5s_test.go:44\
    \ +0x45f\ntesting.tRunner(0xc0000da340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073896
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := (start + end) / 2\n    char\
    \ := text[middle]\n    for start < end {\n        if text[start] != char {\n \
    \           return false\n        }\n        start++\n        end--\n    }\n \
    \   return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmphkdusw8n_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmphkdusw8n_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073896
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) < 2 {\n        return true\n    }\n    i := 0\n    j := len(text)\
    \ - 1\n    for i < j {\n        if text[i] != text[j] {\n            return false\n\
    \        }\n        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073896
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    start := 0\n    end := length-1\n    for\
    \ start < end {\n        if text[start] != text[end] {\n            return false\n\
    \        }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ne9bdbo_test.go:18:10: no new variables on left side of :=

    /tmp/tmp9ne9bdbo_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2; i++ {\n \
    \       if text[i] != text[len(text)-1-i] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1l47oe9w_test.go:18:10: no new variables on left side of :=

    /tmp/tmp1l47oe9w_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n\
    \    \n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpil244_bh_test.go:18:10: no new variables on left side of :=

    /tmp/tmpil244_bh_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) < 2 {\n        return true\n    }\n    left := 0\n    right\
    \ := len(text) - 1\n    middle := (left + right) / 2\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxxf_tjho_test.go:23:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length - 1\n    middle := (start + end) / 2\n    for\
    \ start < end {\n        if text[start] != text[end] {\n            return false\n\
    \        }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4pk2ale_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := length/2\n    for start < middle\
    \ {\n        if text[start] != text[end] {\n            return false\n       \
    \ }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  left := 0\n    right := length-1\n    middle := (length-1)/2\n    for left\
    \ < right {\n        if text[left] != text[right] {\n            return false\n\
    \        }\n        left++\n        right--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3f2mhysf_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := (start + end) / 2\n    for start\
    \ < end {\n        if text[middle] != text[start] {\n            return false\n\
    \        }\n        middle++\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmp439xs_6q_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmp439xs_6q_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073897
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := (start + end) / 2\n    for start\
    \ < end {\n        if text[start] != text[end] {\n            return false\n \
    \       }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw78oed6k_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   if length == 1 {\n        return text == text[:len(text)/2]\n    }\n    if\
    \ length == 2 {\n        return text == text[:len(text)/2] + text[len(text)/2:]\n\
    \    }\n    if length == 3 {\n        return text == text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2]\n    }\n    if length == 4 {\n        return text == text[:len(text)/2]\
    \ + text[len(text)/2:] + text[:len(text)/2] + text[len(text)/2:]\n    }\n    if\
    \ length == 5 {\n        return text == text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2] + text[len(text)/2:] + text[:len(text)/2]\n    }\n    if\
    \ length == 6 {\n        return text == text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2] + text[len(text)/2:] + text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2]\n    }\n    if length == 7 {\n        return text == text[:len(text)/2]\
    \ + text[len(text)/2:] + text[:len(text)/2] + text[len(text)/2:] + text[:len(text)/2]\
    \ + text[len(text)/2:] + text[:len(text)/2] + text[len(text)/2:] + text[:len(text)/2]\n\
    \    }\n    if length == 8 {\n        return text == text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2] + text[len(text)/2:] + text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2] + text[len(text)/2:] + text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2] + text[len(text)/2:]\n    }\n    if length == 9 {\n   \
    \     return text == text[:len(text)/2] + text[len(text)/2:] + text[:len(text)/2]\
    \ + text[len(text)/2:] + text[:len(text)/2] + text[len(text)/2:] + text[:len(text)/2]\
    \ + text[len(text)/2:] + text[:len(text)/2] + text[len(text)/2:] + text[:len(text)/2]\
    \ + text[len(text)/2:] + text[:len(text)/2] + text[len(text)/2:]\n    }\n    if\
    \ length == 10 {\n        return text == text[:len(text)/2] + text[len(text)/2:]\
    \ + text[:len(text)/2] + text\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdphdb36o_test.go:51:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    start := 0\n    end\
    \ := len(text) - 1\n    middle := (start + end) / 2\n    for start < end {\n \
    \       if text[start] != text[end] {\n            return false\n        }\n \
    \       start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphb4k4afe_test.go:23:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    left := 0\n    right\
    \ := len(text) - 1\n    for left < right {\n        if text[left] != text[right]\
    \ {\n            return false\n        }\n        left++\n        right--\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073897
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    first := text[0]\n \
    \   last := text[len(text)-1]\n    if first != last {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpk5pksl5t_test.go:26\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpk5pksl5t_test.go:26 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpk5pksl5t_test.go:37 +0x62\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    start := 0\n\
    \    end := length-1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpok8n1x4e_test.go:18:10: no new variables on left side of :=

    /tmp/tmpok8n1x4e_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    start := 0\n    end := length-1\n    middle\
    \ := (length-1)/2\n    for start < middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6orlnzbz_test.go:18:10: no new variables on left side of :=

    /tmp/tmp6orlnzbz_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    left := 0\n    right\
    \ := len(text) - 1\n    middle := (left + right) / 2\n    switch {\n    case left\
    \ < right:\n        return text[middle] == text[middle+1]\n    case left > right:\n\
    \        return text[middle] == text[middle-1]\n    default:\n        return false\n\
    \    }\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmp2wgj1dgo_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmp2wgj1dgo_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073897
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := length/2\n    \n    for start\
    \ < middle && end > middle {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ start == end\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073897
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := (length / 2)\n    for start\
    \ < middle && end > middle {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073897
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length ==\
    \ 0 {\n        return true\n    }\n    if length == 1 {\n        return text ==\
    \ text[:len(text)/2]\n    }\n    if length%2 == 0 {\n        return text == text[:len(text)/2]\
    \ + text[len(text)/2:]\n    }\n    return text == text[:len(text)/2] + text[len(text)/2:]\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjb84y1em_test.go:18:10: no new variables on left side of :=

    /tmp/tmpjb84y1em_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    left := 0\n    right\
    \ := len(text) - 1\n    middle := (left + right) / 2\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm9zobmhv_test.go:23:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := (start + end) / 2\n    for start\
    \ < end {\n        if text[start] != text[end] {\n            return false\n \
    \       }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw78oed6k_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    start := 0\n\
    \    end := length-1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpok8n1x4e_test.go:18:10: no new variables on left side of :=

    /tmp/tmpok8n1x4e_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    start := 0\n    end := length-1\n    middle\
    \ := (start + end) / 2\n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj_yrri9k_test.go:18:10: no new variables on left side of :=

    /tmp/tmpj_yrri9k_test.go:18:13: undefined: strings

    /tmp/tmpj_yrri9k_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  if length == 1 {\n        return text == text[:len(text)/2]\n    }\n    start\
    \ := 0\n    end := length-1\n    for start < end {\n        if text[start] !=\
    \ text[end] {\n            return false\n        }\n        start++\n        end--\n\
    \    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073897
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    left, right := 0, len(text)\
    \ - 1\n    for left < right {\n        if text[left] != text[right] {\n      \
    \      return false\n        }\n        left++\n        right--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073897
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    start := 0\n\
    \    end := length-1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpok8n1x4e_test.go:18:10: no new variables on left side of :=

    /tmp/tmpok8n1x4e_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n\
    \    \n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpil244_bh_test.go:18:10: no new variables on left side of :=

    /tmp/tmpil244_bh_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    first := text[0]\n \
    \   last := text[len(text)-1]\n    if first != last {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpk5pksl5t_test.go:26\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpk5pksl5t_test.go:26 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpk5pksl5t_test.go:37 +0x62\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length ==\
    \ 0 {\n        return true\n    }\n    if length == 1 {\n        return text ==\
    \ text[0:length]\n    }\n    if length == 2 {\n        return text == text[0:length/2]\
    \ + text[length/2:]\n    }\n    if length%2 == 0 {\n        return text == text[0:length/2]\
    \ + text[length/2:length/2] + text[length/2:]\n    }\n    return false\n}\n\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpph4t9gph_test.go:18:10: no new variables on left side of :=

    /tmp/tmpph4t9gph_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) < 2 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   if length <= 1 {\n        return false\n    }\n    start := 0\n    end :=\
    \ length-1\n    middle := (start + end) / 2\n    for i := start; i <= end; i++\
    \ {\n        if text[i] != text[middle] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpn5ijqe_o_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpn5ijqe_o_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073897
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n\n\
    \    if length == 1 {\n        return text == text[:len(text)/2]\n    }\n\n  \
    \  if text[0] != text[length-1] {\n        return false\n    }\n\n    return is_palindrome(text[1:length-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmp202sio35_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__2 (0.00s)\n        tmp202sio35_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Palindrome/test_num__4\
    \ (0.00s)\n        tmp202sio35_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073897
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    start := 0\n    end := length-1\n    middle\
    \ := length/2\n    for start < middle && end >= middle {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6c48119__test.go:18:10: no new variables on left side of :=

    /tmp/tmp6c48119__test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := length/2\n    for start < middle\
    \ {\n        if text[start] != text[end] {\n            return false\n       \
    \ }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    i := 0\n    j := length-1\n    for i < j\
    \ {\n        if text[i] != text[j] {\n            return false\n        }\n  \
    \      i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp5uljl0y_test.go:18:10: no new variables on left side of :=

    /tmp/tmpp5uljl0y_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) < 2 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    first := text[0]\n \
    \   last := text[len(text)-1]\n    return first == last\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmpfgz1yg7t_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    left := 0\n    right\
    \ := len(text) - 1\n    middle := (left + right) / 2\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm9zobmhv_test.go:23:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    i := 0\n    j := len(text)\
    \ - 1\n    for i < j {\n        if text[i] != text[j] {\n            return false\n\
    \        }\n        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073898
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := (start + end) / 2\n    for start\
    \ < end {\n        if text[start] != text[end] {\n            return false\n \
    \       }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw78oed6k_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  left := 0\n    right := length - 1\n    middle := (left + right) / 2\n    for\
    \ left < right {\n        if text[left] != text[middle] {\n            return\
    \ false\n        }\n        left++\n        middle--\n    }\n    return true\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome(...)\n\t/tmp/tmpo6l54_5s_test.go:26\n\
    command-line-arguments_test.TestIs_Palindrome(0x0?)\n\t/tmp/tmpo6l54_5s_test.go:44\
    \ +0x45f\ntesting.tRunner(0xc0000da340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073896
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   start := 0\n    end := length-1\n    middle := length/2\n    for start < middle\
    \ {\n        if text[start] != text[end] {\n            return false\n       \
    \ }\n        start += 1\n        end -= 1\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073899
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    i := 0\n    j := len(text)\
    \ - 1\n    k := 0\n    for i < j {\n        if text[i] != text[j] {\n        \
    \    return false\n        }\n        i++\n        j--\n        k++\n    }\n \
    \   return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073899
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    i := 0\n    j := length - 1\n    for i <\
    \ j {\n        if text[i] != text[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qlcpr3e_test.go:18:10: no new variables on left side of :=

    /tmp/tmp9qlcpr3e_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    left := 0\n    right\
    \ := len(text) - 1\n    middle := (left + right) / 2\n    for i := middle; i >=\
    \ 0; i-- {\n        if text[i] != text[right] {\n            return false\n  \
    \      }\n        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpz9e7ogst_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpz9e7ogst_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073899
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    if length == 1 {\n        return text ==\
    \ text[:len(text)/2]\n    }\n    if length == 2 {\n        return text == text[:len(text)/2]\
    \ + text[len(text)/2:]\n    }\n    i := 0\n    j := length-1\n    for i < j {\n\
    \        if text[i] != text[j] {\n            return false\n        }\n      \
    \  i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxk_kbaa_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvxk_kbaa_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    start := 0\n\
    \    end := length-1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start += 1\n        end -= 1\n\
    \    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n \
    \ candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgm1_gcnu_test.go:18:10: no new variables on left side of :=

    /tmp/tmpgm1_gcnu_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n\
    \    \n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpil244_bh_test.go:18:10: no new variables on left side of :=

    /tmp/tmpil244_bh_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    first := text[0]\n \
    \   last := text[len(text)-1]\n    return first == last\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmpfgz1yg7t_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n\
    \    for start < end {\n        if text[start] != text[end] {\n            return\
    \ false\n        }\n        start++\n        end--\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeownii5j_test.go:18:10: no new variables on left side of :=

    /tmp/tmpeownii5j_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := (start + end) / 2\n    for start\
    \ < end {\n        if text[start] != text[end] {\n            return false\n \
    \       }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw78oed6k_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) < 2 {\n        return true\n    }\n    first := text[0]\n  \
    \  last := text[len(text)-1]\n    return first == last\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp2e_ne0ac_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) < 2 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) < 2 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    start := 0\n    end := length-1\n    middle\
    \ := (start + end) / 2\n    middle := middle + 1\n    for start < middle && end\
    \ > middle {\n        if text[start] != text[end] {\n            return false\n\
    \        }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxsyia_s1_test.go:18:10: no new variables on left side of :=

    /tmp/tmpxsyia_s1_test.go:18:13: undefined: strings

    /tmp/tmpxsyia_s1_test.go:26:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n\
    \    \n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpil244_bh_test.go:18:10: no new variables on left side of :=

    /tmp/tmpil244_bh_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    start := 0\n\
    \    end := length-1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        \n        start++\n        end--\n\
    \    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n \
    \ candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfql99rb3_test.go:18:10: no new variables on left side of :=

    /tmp/tmpfql99rb3_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    left := 0\n    right\
    \ := len(text) - 1\n    middle := (left + right) / 2\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm9zobmhv_test.go:23:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2; i++ {\n \
    \       if text[i] != text[len(text)-1-i] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1l47oe9w_test.go:18:10: no new variables on left side of :=

    /tmp/tmp1l47oe9w_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    start := 0\n\
    \    end := length-1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        \n        start++\n        end--\n\
    \    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n \
    \ candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfql99rb3_test.go:18:10: no new variables on left side of :=

    /tmp/tmpfql99rb3_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length ==\
    \ 0 {\n        return true\n    }\n    if length == 1 {\n        return text ==\
    \ text[:len(text)/2]\n    }\n    i := 0\n    j := length-1\n    for i < j {\n\
    \        if text[i] != text[j] {\n            return false\n        }\n      \
    \  i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4rngefh1_test.go:18:10: no new variables on left side of :=

    /tmp/tmp4rngefh1_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    if length == 1 {\n        return text ==\
    \ text[:len(text)/2]\n    }\n    if length == 2 {\n        return text == text[:len(text)/2]\
    \ + text[len(text)/2:]\n    }\n    i := 0\n    j := length-1\n    for i < j {\n\
    \        if text[i] != text[j] {\n            return false\n        }\n      \
    \  i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxk_kbaa_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvxk_kbaa_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length - 1\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073899
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    text := strings.Trim(text, \" \")\n  \
    \  text := strings.Replace(text, \" \", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \",\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \"?\", \"\", -1)\n    text\
    \ := strings.Replace(text, \";\", \"\", -1)\n    text := strings.Replace(text,\
    \ \":\", \"\", -1)\n    text := strings.Replace(text, \"'\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"(\", \"\", -1)\n    text := strings.Replace(text,\
    \ \")\", \"\", -1)\n    text := strings.Replace(text, \"[\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"]\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"{\", \"\", -1)\n    text := strings.Replace(text, \"}\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"+\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"%\", \"\", -1)\n    text := strings.Replace(text, \"^\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"~\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"=\", \"\", -1)\n    text := strings.Replace(text, \"<\", \"\", -1)\n    text\
    \ := strings.Replace(text, \">\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"&\", \"\", -1)\n    text := strings.Replace(text, \"|\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"~\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"`\", \"\", -1)\n    text := strings.Replace(text, \"\xB4\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"\xA8\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\xB1\", \"\", -1)\n    text := strings.Replace(text, \"\xA7\", \"\", -1)\n\
    \    text := strings.Replace(text, \"\xB6\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\xAB\", \"\", -1)\n    text := strings.Replace(text, \"\xBB\", \"\", -1)\n\
    \    text := strings.Replace(text, \"\xA3\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\xA4\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmy64rorh_test.go:57:35: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   if length == 1 {\n        return text == text[0:length]\n    }\n    i := 0\n\
    \    j := length-1\n    for i < j {\n        if text[i] != text[j] {\n       \
    \     return false\n        }\n        i++\n        j--\n    }\n    return true\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073899
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2; i++ {\n \
    \       if text[i] != text[len(text)-1-i] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1l47oe9w_test.go:18:10: no new variables on left side of :=

    /tmp/tmp1l47oe9w_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    left := 0\n    right\
    \ := len(text) - 1\n    for left < right {\n        if text[left] != text[right]\
    \ {\n            return false\n        }\n        left++\n        right--\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073897
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2; i++ {\n \
    \       if text[i] != text[len(text)-i-1] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4carxv8m_test.go:18:10: no new variables on left side of :=

    /tmp/tmp4carxv8m_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    start := 0\n    end := length-1\n    middle\
    \ := (length-1)/2\n    for start < middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6orlnzbz_test.go:18:10: no new variables on left side of :=

    /tmp/tmp6orlnzbz_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := (start + end) / 2\n    for start\
    \ < end {\n        if text[start] != text[end] {\n            return false\n \
    \       }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw78oed6k_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    if length == 1 {\n        return text ==\
    \ text[0:1]\n    }\n    if length == 2 {\n        return text == text[0:2]\n \
    \   }\n    if length == 3 {\n        return text == text[0:3]\n    }\n    if length\
    \ == 4 {\n        return text == text[0:4]\n    }\n    if length == 5 {\n    \
    \    return text == text[0:5]\n    }\n    if length == 6 {\n        return text\
    \ == text[0:6]\n    }\n    if length == 7 {\n        return text == text[0:7]\n\
    \    }\n    if length == 8 {\n        return text == text[0:8]\n    }\n    if\
    \ length == 9 {\n        return text == text[0:9]\n    }\n    if length == 10\
    \ {\n        return text == text[0:10]\n    }\n    if length == 11 {\n       \
    \ return text == text[0:11]\n    }\n    if length == 12 {\n        return text\
    \ == text[0:12]\n    }\n    if length == 13 {\n        return text == text[0:13]\n\
    \    }\n    if length == 14 {\n        return text == text[0:14]\n    }\n    if\
    \ length == 15 {\n        return text == text[0:15]\n    }\n    if length == 16\
    \ {\n        return text == text[0:16]\n    }\n    if length == 17 {\n       \
    \ return text == text[0:17]\n    }\n    if length == 18 {\n        return text\
    \ == text[0:18]\n    }\n    if length == 19 {\n        return text == text[0:19]\n\
    \    }\n    if length == 20 {\n        return text == text[0:20]\n    }\n    if\
    \ length == 21 {\n        return text == text[0:21]\n    }\n    if length == 22\
    \ {\n        return text == text[0:22]\n    }\n    if length == 23 {\n       \
    \ return text == text[0:23]\n    }\n    if length == 24 {\n        return text\
    \ == text[0:24]\n    }\n    if length == 25 {\n        return text == text[0:25]\n\
    \    }\n    if length == 26 {\n        return text == text[0:26]\n    }\n    if\
    \ length == 27 {\n        return text == text[0:27]\n    }\n    if length == 28\
    \ {\n        return text == text[0:28]\n    }\n    if length == 29 {\n       \
    \ return text == text[0:29]\n    }\n    if length == 30 {\n        return text\
    \ == text[0:30]\n    }\n    if length == 31 {\n        return text == text[0:31]\n\
    \    }\n    if length == 32 {\n        return text == text[0:32]\n    }\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3c_ritfx_test.go:120:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    left := 0\n    right\
    \ := len(text) - 1\n    for left < right {\n        if text[left] != text[right]\
    \ {\n            return false\n        }\n        left++\n        right--\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073899
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := length/2\n    for start < middle\
    \ {\n        if text[start] != text[end] {\n            return false\n       \
    \ }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length ==\
    \ 0 {\n        return true\n    }\n    if length == 1 {\n        return text ==\
    \ text[:1]\n    }\n    if length == 2 {\n        return text == text[:1] && text\
    \ == text[1:]\n    }\n    i := 0\n    j := length - 1\n    for i < j {\n     \
    \   if text[i] != text[j] {\n            return false\n        }\n        i++\n\
    \        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdi6vorop_test.go:18:10: no new variables on left side of :=

    /tmp/tmpdi6vorop_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    start := 0\n    end := length - 1\n    middle\
    \ := (start + end) / 2\n    for start < middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrqs4gik_test.go:18:10: no new variables on left side of :=

    /tmp/tmpsrqs4gik_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  if length == 2 {\n        return text == text[0:1]\n    }\n    start := 0\n\
    \    end := length - 1\n    middle := (start + end) / 2\n    for middle < length\
    \ {\n        if text[middle] != text[middle+1] {\n            return false\n \
    \       }\n        middle++\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome(...)\n\t/tmp/tmp3nxitsm8_test.go:29\n\
    command-line-arguments_test.TestIs_Palindrome(0x0?)\n\t/tmp/tmp3nxitsm8_test.go:46\
    \ +0x47f\ntesting.tRunner(0xc0000da340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073899
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  i := 0\n    j := length-1\n    for i < j {\n        if text[i] != text[j] {\n\
    \            return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmph7sx9ys7_test.go:24\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmph7sx9ys7_test.go:24 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmph7sx9ys7_test.go:35 +0x62\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2; i++ {\n \
    \       if text[i] != text[len(text)-1-i] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1l47oe9w_test.go:18:10: no new variables on left side of :=

    /tmp/tmp1l47oe9w_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    start := 0\n\
    \    end := length-1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        \n        start++\n        end--\n\
    \    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n \
    \ candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfql99rb3_test.go:18:10: no new variables on left side of :=

    /tmp/tmpfql99rb3_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n\
    \    for start < end {\n        if text[start] != text[end] {\n            return\
    \ false\n        }\n        start++\n        end--\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeownii5j_test.go:18:10: no new variables on left side of :=

    /tmp/tmpeownii5j_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := (start + end) / 2\n    for start\
    \ < end {\n        if text[middle] != text[start] {\n            return false\n\
    \        }\n        start++\n        end--\n        middle = (start + end) / 2\n\
    \    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpslp7313l_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpslp7313l_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   if length == 1 {\n        return text == text[0:length]\n    }\n    start\
    \ := 0\n    end := length-1\n    for start < end {\n        if text[start] !=\
    \ text[end] {\n            return false\n        }\n        start++\n        end--\n\
    \    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073900
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   if length == 1 {\n        return text == text[0:length]\n    }\n    start\
    \ := 0\n    end := length-1\n    middle := (start + end) / 2\n    for start <\
    \ end {\n        if text[middle] != text[middle+1] {\n            return false\n\
    \        }\n        middle++\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome(...)\n\t/tmp/tmpd3apo35b_test.go:29\n\
    command-line-arguments_test.TestIs_Palindrome(0x0?)\n\t/tmp/tmpd3apo35b_test.go:46\
    \ +0x465\ntesting.tRunner(0xc0000cc4e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    start := 0\n    end := length-1\n    for\
    \ start < end {\n        if text[start] != text[end] {\n            return false\n\
    \        }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ne9bdbo_test.go:18:10: no new variables on left side of :=

    /tmp/tmp9ne9bdbo_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   if length <= 1 {\n        return text == text[0:length]\n    }\n    start\
    \ := 0\n    end := length-1\n    for start < end {\n        if text[start] !=\
    \ text[end] {\n            return false\n        }\n        start++\n        end--\n\
    \    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    start := 0\n\
    \    end := length-1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        \n        start++\n        end--\n\
    \    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n \
    \ candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfql99rb3_test.go:18:10: no new variables on left side of :=

    /tmp/tmpfql99rb3_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n\
    \    \n    // Check if text is empty\n    if text == \"\" {\n        return true\n\
    \    }\n    \n    // Check if text is palindrome\n    if text[0] != text[end]\
    \ {\n        return false\n    }\n    \n    // Check if text is palindrome with\
    \ one character\n    if end == start {\n        return true\n    }\n    \n   \
    \ // Check if text is palindrome with two characters\n    if text[start] != text[end]\
    \ {\n        return false\n    }\n    \n    // Check if text is palindrome with\
    \ three characters\n    if text[start] == text[end] {\n        return is_palindrome(text[start+1\
    \ : end-1])\n    }\n    \n    // Check if text is palindrome with four characters\n\
    \    if text[start] == text[end] {\n        return is_palindrome(text[start+1\
    \ : end-1])\n    }\n    \n    // Check if text is palindrome with five characters\n\
    \    if text[start] == text[end] {\n        return is_palindrome(text[start+1\
    \ : end-1])\n    }\n    \n    // Check if text is palindrome with six characters\n\
    \    if text[start] == text[end] {\n        return is_palindrome(text[start+1\
    \ : end-1])\n    }\n    \n    // Check if text is palindrome with seven characters\n\
    \    if text[start] == text[end] {\n        return is_palindrome(text[start+1\
    \ : end-1])\n    }\n    \n    // Check if text is palindrome with eight characters\n\
    \    if text[start] == text[end] {\n        return is_palindrome(text[start+1\
    \ : end-1])\n    }\n    \n    // Check if text is palindrome with nine characters\n\
    \    if text[start] == text[end] {\n        return is_palindrome(text[start+1\
    \ : end-1])\n    }\n    \n    // Check if text is palindrome with ten characters\n\
    \    if text[start] == text[end] {\n        return is_palindrome(text[start+1\
    \ : end-1])\n    }\n    \n    // Check if text is palindrome with eleven characters\n\
    \    if text[start] == text[end] {\n        return is_palindrome(text[start+1\
    \ : end-1])\n    }\n    \n    // Check if text is palindrome with twelve characters\n\
    \    if text[start] == text[end] {\n        return is_palindrome(text[start+1\
    \ : end-1])\n    }\n    \n    // Check if text is palin\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwpgp7znh_test.go:93:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2; i++ {\n \
    \       if text[i] != text[len(text)-i-1] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4carxv8m_test.go:18:10: no new variables on left side of :=

    /tmp/tmp4carxv8m_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    start := 0\n\
    \    end := length-1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start += 1\n        end -= 1\n\
    \    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1hqbnmsv_test.go:18:10: no new variables on left side of :=

    /tmp/tmp1hqbnmsv_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  if length == 1 {\n        return text == text[0:length]\n    }\n    i := 0\n\
    \    j := length - 1\n    for i < j {\n        if text[i] != text[j] {\n     \
    \       return false\n        }\n        i++\n        j--\n    }\n    return true\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  if length == 1 {\n        return text == text[:len(text)/2]\n    }\n    left\
    \ := 0\n    right := length - 1\n    middle := length / 2\n    for left < middle\
    \ && right >= middle {\n        if text[left] != text[right] {\n            return\
    \ false\n        }\n        left++\n        right--\n    }\n    return left <\
    \ middle\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpp4cz582p_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__2 (0.00s)\n        tmpp4cz582p_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Palindrome/test_num__4\
    \ (0.00s)\n        tmpp4cz582p_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    start := 0\n    end := length-1\n    for\
    \ start < end {\n        if text[start] != text[end] {\n            return false\n\
    \        }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ne9bdbo_test.go:18:10: no new variables on left side of :=

    /tmp/tmp9ne9bdbo_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2; i++ {\n \
    \       if text[i] != text[len(text)-1-i] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1l47oe9w_test.go:18:10: no new variables on left side of :=

    /tmp/tmp1l47oe9w_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) < 2 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   if length == 1 {\n        return text == text[0:length]\n    }\n    start\
    \ := 0\n    end := length-1\n    middle := length / 2\n    for start < middle\
    \ {\n        if text[start] != text[end] {\n            return false\n       \
    \ }\n        start += 1\n        end -= 1\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073901
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) < 2 {\n        return true\n    }\n    first := text[0]\n  \
    \  last := text[len(text)-1]\n    return first == last\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp2e_ne0ac_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    i := 0\n    j := length - 1\n    for i <\
    \ j {\n        if text[i] != text[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qlcpr3e_test.go:18:10: no new variables on left side of :=

    /tmp/tmp9qlcpr3e_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    left := 0\n    right\
    \ := len(text) - 1\n    middle := (left + right) / 2\n    \n    if text[middle]\
    \ != text[middle+1] {\n        return false\n    }\n    \n    for left < right\
    \ {\n        if text[left] != text[right] {\n            return false\n      \
    \  }\n        left++\n        right--\n    }\n    \n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmp24x8kkgm_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmp24x8kkgm_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length ==\
    \ 0 {\n        return true\n    }\n    if length == 1 {\n        return text ==\
    \ text[0]\n    }\n    if length == 2 {\n        return text == text[0] + text[1]\n\
    \    }\n    if length == 3 {\n        return text == text[0] + text[1] + text[2]\n\
    \    }\n    if length == 4 {\n        return text == text[0] + text[1] + text[2]\
    \ + text[3]\n    }\n    if length == 5 {\n        return text == text[0] + text[1]\
    \ + text[2] + text[3] + text[4]\n    }\n    if length == 6 {\n        return text\
    \ == text[0] + text[1] + text[2] + text[3] + text[4] + text[5]\n    }\n    if\
    \ length == 7 {\n        return text == text[0] + text[1] + text[2] + text[3]\
    \ + text[4] + text[5] + text[6]\n    }\n    if length == 8 {\n        return text\
    \ == text[0] + text[1] + text[2] + text[3] + text[4] + text[5] + text[6] + text[7]\n\
    \    }\n    if length == 9 {\n        return text == text[0] + text[1] + text[2]\
    \ + text[3] + text[4] + text[5] + text[6] + text[7] + text[8]\n    }\n    if length\
    \ == 10 {\n        return text == text[0] + text[1] + text[2] + text[3] + text[4]\
    \ + text[5] + text[6] + text[7] + text[8] + text[9]\n    }\n    if length == 11\
    \ {\n        return text == text[0] + text[1] + text[2] + text[3] + text[4] +\
    \ text[5] + text[6] + text[7] + text[8] + text[9] + text[10]\n    }\n    if length\
    \ == 12 {\n        return text == text[0] + text[1] + text[2] + text[3] + text[4]\
    \ + text[5] + text[6] + text[7] + text[8] + text[9] + text[10] + text[11]\n  \
    \  }\n    if length == 13 {\n        return text == text[0] + text[1] + text[2]\
    \ + text[3] + text[4] + text[5] + text[6] + text[7] + text[8] + text[9] + text[10]\
    \ + text[11] + text[12]\n    }\n    if length == 14 {\n        return text ==\
    \ text[0] + text[1] + text[2] + text[3] + text[4] + text[5] + text[6] + text[7]\
    \ + text[8] + text[9] + text[10] + text[11] + text[12] + text[13]\n    }\n   \
    \ if length == 15 {\n        return text == text[0] + text[1] + text[2] + text[3]\
    \ + text[4] + text[5] + text[6] + text[7] + text[8] + text[9] + text[10] + text[11]\
    \ + text[12] + text[13] + text[\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsoy2nzwm_test.go:67:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   if length == 1 {\n        return text == text[0:length]\n    }\n    start\
    \ := 0\n    end := length-1\n    middle := (start + end) / 2\n    for start <\
    \ end {\n        if text[start] != text[middle] {\n            return false\n\
    \        }\n        start++\n        middle++\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome(...)\n\t/tmp/tmp6gd9oeam_test.go:29\n\
    command-line-arguments_test.TestIs_Palindrome(0x0?)\n\t/tmp/tmp6gd9oeam_test.go:47\
    \ +0x45f\ntesting.tRunner(0xc000103380, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n\
    \    for start < end {\n        if text[start] != text[end] {\n            return\
    \ false\n        }\n        start++\n        end--\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeownii5j_test.go:18:10: no new variables on left side of :=

    /tmp/tmpeownii5j_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2; i++ {\n \
    \       if text[i] != text[len(text)-i-1] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4carxv8m_test.go:18:10: no new variables on left side of :=

    /tmp/tmp4carxv8m_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    if length == 1 {\n        return text ==\
    \ text[:len(text)/2]\n    }\n    start := 0\n    end := length-1\n    middle :=\
    \ length/2\n    middle := middle + 1\n    for start < middle {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfxyt65hs_test.go:18:10: no new variables on left side of :=

    /tmp/tmpfxyt65hs_test.go:18:13: undefined: strings

    /tmp/tmpfxyt65hs_test.go:29:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n\
    \    \n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    \n  \
    \  return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg1z0die0_test.go:18:10: no new variables on left side of :=

    /tmp/tmpg1z0die0_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   start := 0\n    end := length-1\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    start := 0\n\
    \    end := length-1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpok8n1x4e_test.go:18:10: no new variables on left side of :=

    /tmp/tmpok8n1x4e_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    start := 0\n    end := length-1\n    middle\
    \ := (start + end) / 2\n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj_yrri9k_test.go:18:10: no new variables on left side of :=

    /tmp/tmpj_yrri9k_test.go:18:13: undefined: strings

    /tmp/tmpj_yrri9k_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := (start + end) / 2\n    for start\
    \ < end {\n        if text[start] != text[end] {\n            return false\n \
    \       }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw78oed6k_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   if length == 1 {\n        return text == text[:len(text)/2]\n    }\n    if\
    \ length%2 == 0 {\n        return is_palindrome(text[:length/2]) && is_palindrome(text[length/2:])\n\
    \    }\n    return is_palindrome(text[:length/2]) && is_palindrome(text[length/2:])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpcwpmrf7x_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__2 (0.00s)\n        tmpcwpmrf7x_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Palindrome/test_num__4\
    \ (0.00s)\n        tmpcwpmrf7x_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   if length == 1 {\n        return text == text[:len(text)/2]\n    }\n    if\
    \ length%2 == 0 {\n        return is_palindrome(text[:length/2]) && is_palindrome(text[length/2:])\n\
    \    }\n    return is_palindrome(text[:length/2]) && is_palindrome(text[length/2:])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpcwpmrf7x_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__2 (0.00s)\n        tmpcwpmrf7x_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Palindrome/test_num__4\
    \ (0.00s)\n        tmpcwpmrf7x_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   if length == 1 {\n        return text == text[:1]\n    }\n    if length%2\
    \ == 0 {\n        return is_palindrome(text[:length/2]) && is_palindrome(text[length/2:])\n\
    \    }\n    return is_palindrome(text[:length/2]) && is_palindrome(text[length/2:])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__3\
    \ (0.00s)\n        tmpitbh4sgd_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__5 (0.00s)\n        tmpitbh4sgd_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmpitbh4sgd_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    start := 0\n    end\
    \ := len(text) - 1\n    middle := (start + end) / 2\n    \n    if text[middle]\
    \ != text[middle+1] {\n        return false\n    }\n    \n    return is_palindrome(text[start:end])\
    \ && is_palindrome(text[middle+1:end])\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmp95i44yax_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmp95i44yax_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073901
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := (start + end) / 2\n    for start\
    \ < end {\n        if text[start] != text[end] {\n            return false\n \
    \       }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw78oed6k_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    first := text[0]\n \
    \   last := text[len(text)-1]\n    return first == last\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmphmiukc48_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := length / 2\n    for start <\
    \ middle {\n        if text[start] != text[end] {\n            return false\n\
    \        }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    start := 0\n    end := length-1\n    middle\
    \ := (length / 2)\n    for start < middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph92msf8b_test.go:18:10: no new variables on left side of :=

    /tmp/tmph92msf8b_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    left := 0\n    right\
    \ := len(text) - 1\n    middle := (left + right) / 2\n    switch {\n    case left\
    \ > right:\n        return false\n    case left == right:\n        return text\
    \ == text[middle]\n    case middle < right:\n        return is_palindrome(text[middle+1\
    \ : right])\n    case middle > left:\n        return is_palindrome(text[left :\
    \ middle])\n    }\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate :=\
    \ is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2upl8z1k_test.go:28:24: invalid operation: text == text[middle] (mismatched
    types string and byte)

    /tmp/tmp2upl8z1k_test.go:34:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    start := 0\n\
    \    end := length-1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start += 1\n        end -= 1\n\
    \    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n \
    \ candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgm1_gcnu_test.go:18:10: no new variables on left side of :=

    /tmp/tmpgm1_gcnu_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length ==\
    \ 0 {\n        return true\n    }\n    if length == 1 {\n        return text ==\
    \ text[:len(text)/2]\n    }\n    start := 0\n    end := length-1\n    middle :=\
    \ length/2\n    middle := middle + 1\n    for start < middle && end > middle {\n\
    \        if text[start] != text[end] {\n            return false\n        }\n\
    \        start++\n        end--\n    }\n    return start == end\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvysjaiy4_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvysjaiy4_test.go:18:13: undefined: strings

    /tmp/tmpvysjaiy4_test.go:29:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    left := 0\n    right\
    \ := len(text) - 1\n    middle := (left + right) / 2\n    switch {\n    case left\
    \ < right:\n        return text[middle] == text[middle+1]\n    case left > right:\n\
    \        return text[middle] == text[middle-1]\n    default:\n        return false\n\
    \    }\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmp3ksnbtm3_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmp3ksnbtm3_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   if length == 1 {\n        return text == text[:len(text)/2]\n    }\n    middle\
    \ := length / 2\n    return is_palindrome(text[:middle]) && is_palindrome(text[middle:])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmp83bpdsq7_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__2 (0.00s)\n        tmp83bpdsq7_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Palindrome/test_num__4\
    \ (0.00s)\n        tmp83bpdsq7_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2; i++ {\n \
    \       if text[i] != text[len(text)-i-1] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4carxv8m_test.go:18:10: no new variables on left side of :=

    /tmp/tmp4carxv8m_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n\
    \    \n    // Checking for empty string\n    if text == \"\" {\n        return\
    \ true\n    }\n    \n    // Checking for single character\n    if text[0] == text[end]\
    \ {\n        return is_palindrome(text[start+1:end])\n    }\n    \n    // Checking\
    \ for palindrome with odd length\n    if end - start % 2 == 1 {\n        return\
    \ is_palindrome(text[start+1:end])\n    }\n    \n    // Checking for palindrome\
    \ with even length\n    if end - start % 2 == 0 {\n        return is_palindrome(text[start+1:end])\n\
    \    }\n    \n    // Checking for palindrome with even length\n    if end - start\
    \ % 2 == 1 {\n        return is_palindrome(text[start+1:end])\n    }\n    \n \
    \   // Checking for palindrome with odd length\n    if end - start % 2 == 0 {\n\
    \        return is_palindrome(text[start+1:end])\n    }\n    \n    // Checking\
    \ for palindrome with even length\n    if end - start % 2 == 1 {\n        return\
    \ is_palindrome(text[start+1:end])\n    }\n    \n    // Checking for palindrome\
    \ with odd length\n    if end - start % 2 == 0 {\n        return is_palindrome(text[start+1:end])\n\
    \    }\n    \n    // Checking for palindrome with even length\n    if end - start\
    \ % 2 == 1 {\n        return is_palindrome(text[start+1:end])\n    }\n    \n \
    \   // Checking for palindrome with odd length\n    if end - start % 2 == 0 {\n\
    \        return is_palindrome(text[start+1:end])\n    }\n    \n    // Checking\
    \ for palindrome with even length\n    if end - start % 2 == 1 {\n        return\
    \ is_palindrome(text[start+1:end])\n    }\n    \n    // Checking for palindrome\
    \ with odd length\n    if end - start % 2 == 0 {\n        return is_palindrome(text[start+1:end])\n\
    \    }\n    \n    // Checking for palindrome with even length\n    if end - start\
    \ % 2 == 1 {\n        return is_palindrome(text[start+1:end])\n    }\n    \n \
    \   // Checking for palindrome with odd length\n    if end - start % 2 == 0 {\n\
    \        return is_palindrome(text[start+1:end])\n    }\n    \n    // Checking\
    \ for palindrome \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyab__vuc_test.go:93:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2; i++ {\n \
    \       if text[i] != text[len(text)-1-i] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1l47oe9w_test.go:18:10: no new variables on left side of :=

    /tmp/tmp1l47oe9w_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) < 2 {\n        return true\n    }\n    first := text[0]\n  \
    \  last := text[len(text)-1]\n    if first != last {\n        return false\n \
    \   }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073901
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) < 2 {\n        return true\n    }\n    i := 0\n    j := len(text)\
    \ - 1\n    for i < j {\n        if text[i] != text[j] {\n            return false\n\
    \        }\n        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073896
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := (start + end) / 2\n    char\
    \ := text[middle]\n    for start < end {\n        if text[start] != char {\n \
    \           return false\n        }\n        start++\n        end--\n    }\n \
    \   return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmphkdusw8n_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmphkdusw8n_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073896
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n\n\
    \    start := 0\n    end := length-1\n    middle := length/2\n\n    for start\
    \ < middle && end > middle {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n\n    return\
    \ start == end\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073902
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    start := 0\n    end := length-1\n    middle\
    \ := length/2\n    for start < middle {\n        if text[start] != text[end] {\n\
    \            return false\n        }\n        start++\n        end--\n    }\n\
    \    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate :=\
    \ is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp40d9w1ay_test.go:18:10: no new variables on left side of :=

    /tmp/tmp40d9w1ay_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    if length == 2 {\n        return text ==\
    \ text[0:1]\n    }\n    if length == 1 {\n        return text == text[0:0]\n \
    \   }\n    start := 0\n    end := length-1\n    middle := length/2\n    for start\
    \ < middle {\n        if text[start] != text[end] {\n            return false\n\
    \        }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo56805s5_test.go:18:10: no new variables on left side of :=

    /tmp/tmpo56805s5_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmph7sx9ys7_test.go:24\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmph7sx9ys7_test.go:24 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmph7sx9ys7_test.go:35 +0x62\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073894
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  if length == 1 {\n        return text == text[:1]\n    }\n    if text[0] !=\
    \ text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073902
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) < 2 {\n        return true\n    }\n    i := 0\n    j := len(text)\
    \ - 1\n    for i < j {\n        if text[i] != text[j] {\n            return false\n\
    \        }\n        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073896
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    start := 0\n    end := length-1\n    middle\
    \ := (length-1)/2\n    for start < middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6orlnzbz_test.go:18:10: no new variables on left side of :=

    /tmp/tmp6orlnzbz_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    left, right := 0, len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n\
    \    \n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpil244_bh_test.go:18:10: no new variables on left side of :=

    /tmp/tmpil244_bh_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073894
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2; i++ {\n \
    \       if text[i] != text[len(text)-1-i] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1l47oe9w_test.go:18:10: no new variables on left side of :=

    /tmp/tmp1l47oe9w_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    if length < 2\
    \ {\n        return true\n    }\n    i := 0\n    j := length-1\n    for i < j\
    \ {\n        if text[i] != text[j] {\n            return false\n        }\n  \
    \      i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp5uljl0y_test.go:18:10: no new variables on left side of :=

    /tmp/tmpp5uljl0y_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := (start + end) / 2\n    for start\
    \ < middle {\n        if text[start] != text[end] {\n            return false\n\
    \        }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073902
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   if length == 1 {\n        return text == text[:len(text)/2]\n    }\n    middle\
    \ := length / 2\n    left := text[:middle]\n    right := text[middle:]\n    return\
    \ is_palindrome(left) && is_palindrome(right)\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpc6iqsvnx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__2 (0.00s)\n        tmpc6iqsvnx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Palindrome/test_num__4\
    \ (0.00s)\n        tmpc6iqsvnx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073902
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2; i++ {\n \
    \       if text[i] != text[len(text)-1-i] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1l47oe9w_test.go:18:10: no new variables on left side of :=

    /tmp/tmp1l47oe9w_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073896
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    length := len(text)\n    start := 0\n\
    \    end := length-1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        \n        start++\n        end--\n\
    \    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n \
    \ candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfql99rb3_test.go:18:10: no new variables on left side of :=

    /tmp/tmpfql99rb3_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n\
    \    for start < end {\n        if text[start] != text[end] {\n            return\
    \ false\n        }\n        start++\n        end--\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeownii5j_test.go:18:10: no new variables on left side of :=

    /tmp/tmpeownii5j_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073898
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length-1\n    middle := length/2\n    \n    for start\
    \ < middle && end > middle {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start += 1\n        end -= 1\n    }\n  \
    \  return start == end\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073902
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2; i++ {\n \
    \       if text[i] != text[len(text)-i-1] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4carxv8m_test.go:18:10: no new variables on left side of :=

    /tmp/tmp4carxv8m_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073899
