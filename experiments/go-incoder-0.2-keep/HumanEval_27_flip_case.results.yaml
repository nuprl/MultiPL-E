language: go_test.go
name: HumanEval_27_flip_case
results:
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]byte{char - 'a',\
    \ char + 0x20})\n        } else {\n            result += string([]byte{char})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwesb63gx_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpwesb63gx_test.go:15:49: cannot use char + 0x20 (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpwesb63gx_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76wf1i1u_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp76wf1i1u_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp76wf1i1u_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result = result + string(char\
    \ - 'a' + 'A')\n        } else {\n            result = result + string(char)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmp4pyujlug_test.go:38: expected 'hELLO!', got 'HELLO!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmp4pyujlug_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'THESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsl_hbbmx_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpsl_hbbmx_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 'a' +\
    \ 'A')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4xxf6pfl_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == 'a' {\n            result += 'A'\n        } else if letter ==\
    \ 'b' {\n            result += 'B'\n        } else if letter == 'c' {\n      \
    \      result += 'C'\n        } else if letter == 'd' {\n            result +=\
    \ 'D'\n        } else if letter == 'e' {\n            result += 'E'\n        }\
    \ else if letter == 'f' {\n            result += 'F'\n        } else if letter\
    \ == 'g' {\n            result += 'G'\n        } else if letter == 'h' {\n   \
    \         result += 'H'\n        } else if letter == 'i' {\n            result\
    \ += 'I'\n        } else if letter == 'j' {\n            result += 'J'\n     \
    \   } else if letter == 'k' {\n            result += 'K'\n        } else if letter\
    \ == 'l' {\n            result += 'L'\n        } else if letter == 'm' {\n   \
    \         result += 'M'\n        } else if letter == 'n' {\n            result\
    \ += 'N'\n        } else if letter == 'o' {\n            result += 'O'\n     \
    \   } else if letter == 'p' {\n            result += 'P'\n        } else if letter\
    \ == 'q' {\n            result += 'Q'\n        } else if letter == 'r' {\n   \
    \         result += 'R'\n        } else if letter == 's' {\n            result\
    \ += 'S'\n        } else if letter == 't' {\n            result += 'T'\n     \
    \   } else if letter == 'u' {\n            result += 'U'\n        } else if letter\
    \ == 'v' {\n            result += 'V'\n        } else if letter == 'w' {\n   \
    \         result += 'W'\n        } else if letter == 'x' {\n            result\
    \ += 'X'\n        } else if letter == 'y' {\n            result += 'Y'\n     \
    \   } else if letter == 'z' {\n            result += 'Z'\n        } else {\n \
    \           result += letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpitlpq9dc_test.go:15:13: invalid operation: result += ''A'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:17:13: invalid operation: result += ''B'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:19:13: invalid operation: result += ''C'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:21:13: invalid operation: result += ''D'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:23:13: invalid operation: result += ''E'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:25:13: invalid operation: result += ''F'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:27:13: invalid operation: result += ''G'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:29:13: invalid operation: result += ''H'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:31:13: invalid operation: result += ''I'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:33:13: invalid operation: result += ''J'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:33:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsl_hbbmx_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpsl_hbbmx_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 'a' +\
    \ 'A')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4xxf6pfl_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result = result + string(char\
    \ - 'a') + string(char - 'A')\n        } else {\n            result = result +\
    \ string(char)\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpu71fjur2_test.go:38: expected 'hELLO!', got 'H\x04$\v+\v\
    +\x0E.!'\n    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpu71fjur2_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'T\a'\x04$\x122\x04\
    $ \x155\b(\x0E.\v+\x04$\n-\x133 \x03#\x04$\v+\b(\x06&\a'\x133\x122 \a'\0 \x15\
    5\x04$ \x155\b(\x0E.\v+\x04$\n-\x133 \x04$\n-\x03#\x122'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == 'a' {\n            result += 'A'\n        } else if letter ==\
    \ 'b' {\n            result += 'B'\n        } else if letter == 'c' {\n      \
    \      result += 'C'\n        } else if letter == 'd' {\n            result +=\
    \ 'D'\n        } else if letter == 'e' {\n            result += 'E'\n        }\
    \ else if letter == 'f' {\n            result += 'F'\n        } else if letter\
    \ == 'g' {\n            result += 'G'\n        } else if letter == 'h' {\n   \
    \         result += 'H'\n        } else if letter == 'i' {\n            result\
    \ += 'I'\n        } else if letter == 'j' {\n            result += 'J'\n     \
    \   } else if letter == 'k' {\n            result += 'K'\n        } else if letter\
    \ == 'l' {\n            result += 'L'\n        } else if letter == 'm' {\n   \
    \         result += 'M'\n        } else if letter == 'n' {\n            result\
    \ += 'N'\n        } else if letter == 'o' {\n            result += 'O'\n     \
    \   } else if letter == 'p' {\n            result += 'P'\n        } else if letter\
    \ == 'q' {\n            result += 'Q'\n        } else if letter == 'r' {\n   \
    \         result += 'R'\n        } else if letter == 's' {\n            result\
    \ += 'S'\n        } else if letter == 't' {\n            result += 'T'\n     \
    \   } else if letter == 'u' {\n            result += 'U'\n        } else if letter\
    \ == 'v' {\n            result += 'V'\n        } else if letter == 'w' {\n   \
    \         result += 'W'\n        } else if letter == 'x' {\n            result\
    \ += 'X'\n        } else if letter == 'y' {\n            result += 'Y'\n     \
    \   } else if letter == 'z' {\n            result += 'Z'\n        } else {\n \
    \           result += letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpitlpq9dc_test.go:15:13: invalid operation: result += ''A'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:17:13: invalid operation: result += ''B'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:19:13: invalid operation: result += ''C'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:21:13: invalid operation: result += ''D'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:23:13: invalid operation: result += ''E'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:25:13: invalid operation: result += ''F'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:27:13: invalid operation: result += ''G'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:29:13: invalid operation: result += ''H'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:31:13: invalid operation: result += ''I'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:33:13: invalid operation: result += ''J'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:33:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]byte{byte(char)})\n\
    \        } else {\n            result += string([]byte{byte(char + 32)})\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n \
    \ candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpipyz__tj_test.go:38: expected 'hELLO!', got 'helloA'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpipyz__tj_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'these@violent@delights@have@violent@ends'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   switch char {\n        case 'a':\n            result = 'A'\n        case 'b':\n\
    \            result = 'B'\n        case 'c':\n            result = 'C'\n     \
    \   case 'd':\n            result = 'D'\n        case 'e':\n            result\
    \ = 'E'\n        case 'f':\n            result = 'F'\n        case 'g':\n    \
    \        result = 'G'\n        case 'h':\n            result = 'H'\n        case\
    \ 'i':\n            result = 'I'\n        case 'j':\n            result = 'J'\n\
    \        case 'k':\n            result = 'K'\n        case 'l':\n            result\
    \ = 'L'\n        case 'm':\n            result = 'M'\n        case 'n':\n    \
    \        result = 'N'\n        case 'o':\n            result = 'O'\n        case\
    \ 'p':\n            result = 'P'\n        case 'q':\n            result = 'Q'\n\
    \        case 'r':\n            result = 'R'\n        case 's':\n            result\
    \ = 'S'\n        case 't':\n            result = 'T'\n        case 'u':\n    \
    \        result = 'U'\n        case 'v':\n            result = 'V'\n        case\
    \ 'w':\n            result = 'W'\n        case 'x':\n            result = 'X'\n\
    \        case 'y':\n            result = 'Y'\n        case 'z':\n            result\
    \ = 'Z'\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7gnav004_test.go:16:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmp7gnav004_test.go:18:22: cannot use ''B'' (untyped rune constant 66) as
    string value in assignment

    /tmp/tmp7gnav004_test.go:20:22: cannot use ''C'' (untyped rune constant 67) as
    string value in assignment

    /tmp/tmp7gnav004_test.go:22:22: cannot use ''D'' (untyped rune constant 68) as
    string value in assignment

    /tmp/tmp7gnav004_test.go:24:22: cannot use ''E'' (untyped rune constant 69) as
    string value in assignment

    /tmp/tmp7gnav004_test.go:26:22: cannot use ''F'' (untyped rune constant 70) as
    string value in assignment

    /tmp/tmp7gnav004_test.go:28:22: cannot use ''G'' (untyped rune constant 71) as
    string value in assignment

    /tmp/tmp7gnav004_test.go:30:22: cannot use ''H'' (untyped rune constant 72) as
    string value in assignment

    /tmp/tmp7gnav004_test.go:32:22: cannot use ''I'' (untyped rune constant 73) as
    string value in assignment

    /tmp/tmp7gnav004_test.go:34:22: cannot use ''J'' (untyped rune constant 74) as
    string value in assignment

    /tmp/tmp7gnav004_test.go:34:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == 'a' {\n            result += 'A'\n        } else if letter ==\
    \ 'b' {\n            result += 'B'\n        } else if letter == 'c' {\n      \
    \      result += 'C'\n        } else if letter == 'd' {\n            result +=\
    \ 'D'\n        } else if letter == 'e' {\n            result += 'E'\n        }\
    \ else if letter == 'f' {\n            result += 'F'\n        } else if letter\
    \ == 'g' {\n            result += 'G'\n        } else if letter == 'h' {\n   \
    \         result += 'H'\n        } else if letter == 'i' {\n            result\
    \ += 'I'\n        } else if letter == 'j' {\n            result += 'J'\n     \
    \   } else if letter == 'k' {\n            result += 'K'\n        } else if letter\
    \ == 'l' {\n            result += 'L'\n        } else if letter == 'm' {\n   \
    \         result += 'M'\n        } else if letter == 'n' {\n            result\
    \ += 'N'\n        } else if letter == 'o' {\n            result += 'O'\n     \
    \   } else if letter == 'p' {\n            result += 'P'\n        } else if letter\
    \ == 'q' {\n            result += 'Q'\n        } else if letter == 'r' {\n   \
    \         result += 'R'\n        } else if letter == 's' {\n            result\
    \ += 'S'\n        } else if letter == 't' {\n            result += 'T'\n     \
    \   } else if letter == 'u' {\n            result += 'U'\n        } else if letter\
    \ == 'v' {\n            result += 'V'\n        } else if letter == 'w' {\n   \
    \         result += 'W'\n        } else if letter == 'x' {\n            result\
    \ += 'X'\n        } else if letter == 'y' {\n            result += 'Y'\n     \
    \   } else if letter == 'z' {\n            result += 'Z'\n        } else {\n \
    \           result += letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpitlpq9dc_test.go:15:13: invalid operation: result += ''A'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:17:13: invalid operation: result += ''B'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:19:13: invalid operation: result += ''C'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:21:13: invalid operation: result += ''D'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:23:13: invalid operation: result += ''E'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:25:13: invalid operation: result += ''F'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:27:13: invalid operation: result += ''G'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:29:13: invalid operation: result += ''H'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:31:13: invalid operation: result += ''I'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:33:13: invalid operation: result += ''J'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:33:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 'a')\
    \ + string(char - 'A')\n        } else {\n            result += char\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3e331lmu_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter.toUpper()\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuuomtgj5_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpuuomtgj5_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpuuomtgj5_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]rune(char)) - 'a'\n\
    \        } else {\n            result += string([]rune(char)) + ('a' - 'A')\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5lciyw4m_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmp5lciyw4m_test.go:17:37: cannot convert char (variable of type rune) to
    type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char - 'a' + 'A'\n     \
    \   } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkf5v3ss2_test.go:15:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmpkf5v3ss2_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, letter := range myString {\n   \
    \     if letter == 'a' {\n            result = 'A'\n        } else if letter ==\
    \ 'A' {\n            result = 'a'\n        } else {\n            result = letter\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_l012rtr_test.go:15:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmp_l012rtr_test.go:17:22: cannot use ''a'' (untyped rune constant 97) as
    string value in assignment

    /tmp/tmp_l012rtr_test.go:19:22: cannot use letter (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 'a')\
    \ + string(char - 'A')\n        } else {\n            result += char\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3e331lmu_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]byte{char - 'a',\
    \ char + 0x20})\n        } else {\n            result += char\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpleg023_d_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpleg023_d_test.go:15:49: cannot use char + 0x20 (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpleg023_d_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, letter := range myString {\n   \
    \     if letter == 'a' {\n            result = 'A'\n        } else if letter ==\
    \ 'b' {\n            result = 'B'\n        } else if letter == 'c' {\n       \
    \     result = 'C'\n        } else if letter == 'd' {\n            result = 'D'\n\
    \        } else if letter == 'e' {\n            result = 'E'\n        } else if\
    \ letter == 'f' {\n            result = 'F'\n        } else if letter == 'g' {\n\
    \            result = 'G'\n        } else if letter == 'h' {\n            result\
    \ = 'H'\n        } else if letter == 'i' {\n            result = 'I'\n       \
    \ } else if letter == 'j' {\n            result = 'J'\n        } else if letter\
    \ == 'k' {\n            result = 'K'\n        } else if letter == 'l' {\n    \
    \        result = 'L'\n        } else if letter == 'm' {\n            result =\
    \ 'M'\n        } else if letter == 'n' {\n            result = 'N'\n        }\
    \ else if letter == 'o' {\n            result = 'O'\n        } else if letter\
    \ == 'p' {\n            result = 'P'\n        } else if letter == 'q' {\n    \
    \        result = 'Q'\n        } else if letter == 'r' {\n            result =\
    \ 'R'\n        } else if letter == 's' {\n            result = 'S'\n        }\
    \ else if letter == 't' {\n            result = 'T'\n        } else if letter\
    \ == 'u' {\n            result = 'U'\n        } else if letter == 'v' {\n    \
    \        result = 'V'\n        } else if letter == 'w' {\n            result =\
    \ 'W'\n        } else if letter == 'x' {\n            result = 'X'\n        }\
    \ else if letter == 'y' {\n            result = 'Y'\n        } else if letter\
    \ == 'z' {\n            result = 'Z'\n        } else {\n            result = letter\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzuuj85k2_test.go:15:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:17:22: cannot use ''B'' (untyped rune constant 66) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:19:22: cannot use ''C'' (untyped rune constant 67) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:21:22: cannot use ''D'' (untyped rune constant 68) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:23:22: cannot use ''E'' (untyped rune constant 69) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:25:22: cannot use ''F'' (untyped rune constant 70) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:27:22: cannot use ''G'' (untyped rune constant 71) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:29:22: cannot use ''H'' (untyped rune constant 72) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:31:22: cannot use ''I'' (untyped rune constant 73) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:33:22: cannot use ''J'' (untyped rune constant 74) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:33:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, letter := range myString {\n   \
    \     if letter == 'a' {\n            result = 'A'\n        } else if letter ==\
    \ 'A' {\n            result = 'a'\n        } else {\n            result = letter\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_l012rtr_test.go:15:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmp_l012rtr_test.go:17:22: cannot use ''a'' (untyped rune constant 97) as
    string value in assignment

    /tmp/tmp_l012rtr_test.go:19:22: cannot use letter (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == 'a' {\n            result += 'A'\n        } else if letter ==\
    \ 'A' {\n            result += 'a'\n        } else {\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgo7taoay_test.go:15:13: invalid operation: result += ''A'' (mismatched
    types string and untyped rune)

    /tmp/tmpgo7taoay_test.go:17:13: invalid operation: result += ''a'' (mismatched
    types string and untyped rune)

    /tmp/tmpgo7taoay_test.go:19:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]rune(char)) - 'a'\
    \ + 'A'\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppb5d9xgm_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmppb5d9xgm_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsl_hbbmx_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpsl_hbbmx_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == strings.ToLower(letter) {\n            result += strings.ToUpper(letter)\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxlpjdu3s_test.go:14:22: undefined: strings

    /tmp/tmpxlpjdu3s_test.go:15:23: undefined: strings

    /tmp/tmpxlpjdu3s_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]rune(char)) - 'a'\
    \ + 'A'\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppb5d9xgm_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmppb5d9xgm_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76wf1i1u_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp76wf1i1u_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp76wf1i1u_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, letter := range myString {\n   \
    \     if letter == 'a' {\n            result = 'A'\n        } else if letter ==\
    \ 'b' {\n            result = 'B'\n        } else if letter == 'c' {\n       \
    \     result = 'C'\n        } else if letter == 'd' {\n            result = 'D'\n\
    \        } else if letter == 'e' {\n            result = 'E'\n        } else if\
    \ letter == 'f' {\n            result = 'F'\n        } else if letter == 'g' {\n\
    \            result = 'G'\n        } else if letter == 'h' {\n            result\
    \ = 'H'\n        } else if letter == 'i' {\n            result = 'I'\n       \
    \ } else if letter == 'j' {\n            result = 'J'\n        } else if letter\
    \ == 'k' {\n            result = 'K'\n        } else if letter == 'l' {\n    \
    \        result = 'L'\n        } else if letter == 'm' {\n            result =\
    \ 'M'\n        } else if letter == 'n' {\n            result = 'N'\n        }\
    \ else if letter == 'o' {\n            result = 'O'\n        } else if letter\
    \ == 'p' {\n            result = 'P'\n        } else if letter == 'q' {\n    \
    \        result = 'Q'\n        } else if letter == 'r' {\n            result =\
    \ 'R'\n        } else if letter == 's' {\n            result = 'S'\n        }\
    \ else if letter == 't' {\n            result = 'T'\n        } else if letter\
    \ == 'u' {\n            result = 'U'\n        } else if letter == 'v' {\n    \
    \        result = 'V'\n        } else if letter == 'w' {\n            result =\
    \ 'W'\n        } else if letter == 'x' {\n            result = 'X'\n        }\
    \ else if letter == 'y' {\n            result = 'Y'\n        } else if letter\
    \ == 'z' {\n            result = 'Z'\n        }\n    }\n    return result\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvqga1xg4_test.go:15:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:17:22: cannot use ''B'' (untyped rune constant 66) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:19:22: cannot use ''C'' (untyped rune constant 67) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:21:22: cannot use ''D'' (untyped rune constant 68) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:23:22: cannot use ''E'' (untyped rune constant 69) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:25:22: cannot use ''F'' (untyped rune constant 70) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:27:22: cannot use ''G'' (untyped rune constant 71) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:29:22: cannot use ''H'' (untyped rune constant 72) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:31:22: cannot use ''I'' (untyped rune constant 73) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:33:22: cannot use ''J'' (untyped rune constant 74) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:33:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]byte{char - 'a',\
    \ char})\n        } else {\n            result += string([]byte{char})\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpttxk7dwa_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpttxk7dwa_test.go:15:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpttxk7dwa_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]rune(char)) - 'a'\
    \ + 'A'\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppb5d9xgm_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmppb5d9xgm_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76wf1i1u_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp76wf1i1u_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp76wf1i1u_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 'a')\
    \ + string(char - 'A')\n        } else {\n            result += char\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3e331lmu_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]rune(char)) - 'a'\
    \ + 'A'\n        } else {\n            result += string([]rune(char)) - 'A' +\
    \ 'a'\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp962uso12_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmp962uso12_test.go:17:37: cannot convert char (variable of type rune) to
    type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76wf1i1u_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp76wf1i1u_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp76wf1i1u_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == 'a' {\n            result += \"A\"\n        } else if letter ==\
    \ 'b' {\n            result += \"B\"\n        } else if letter == 'c' {\n    \
    \        result += \"C\"\n        } else if letter == 'd' {\n            result\
    \ += \"D\"\n        } else if letter == 'e' {\n            result += \"E\"\n \
    \       } else if letter == 'f' {\n            result += \"F\"\n        } else\
    \ if letter == 'g' {\n            result += \"G\"\n        } else if letter ==\
    \ 'h' {\n            result += \"H\"\n        } else if letter == 'i' {\n    \
    \        result += \"I\"\n        } else if letter == 'j' {\n            result\
    \ += \"J\"\n        } else if letter == 'k' {\n            result += \"K\"\n \
    \       } else if letter == 'l' {\n            result += \"L\"\n        } else\
    \ if letter == 'm' {\n            result += \"M\"\n        } else if letter ==\
    \ 'n' {\n            result += \"N\"\n        } else if letter == 'o' {\n    \
    \        result += \"O\"\n        } else if letter == 'p' {\n            result\
    \ += \"P\"\n        } else if letter == 'q' {\n            result += \"Q\"\n \
    \       } else if letter == 'r' {\n            result += \"R\"\n        } else\
    \ if letter == 's' {\n            result += \"S\"\n        } else if letter ==\
    \ 't' {\n            result += \"T\"\n        } else if letter == 'u' {\n    \
    \        result += \"U\"\n        } else if letter == 'v' {\n            result\
    \ += \"V\"\n        } else if letter == 'w' {\n            result += \"W\"\n \
    \       } else if letter == 'x' {\n            result += \"X\"\n        } else\
    \ if letter == 'y' {\n            result += \"Y\"\n        } else if letter ==\
    \ 'z' {\n            result += \"Z\"\n        } else {\n            result +=\
    \ letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb0rs_d1n_test.go:67:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76wf1i1u_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp76wf1i1u_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp76wf1i1u_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]rune{char - 'a',\
    \ char + 0x20})\n        } else {\n            result += string([]rune{char})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpof66tuxc_test.go:38: expected 'hELLO!', got 'H\x04\N\v\x8C\
    \v\x8C\x0E\x8F!'\n    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpof66tuxc_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'T\a\x88\x04\N\x12\x93\
    \x04\N \x15\x96\b\x89\x0E\x8F\v\x8C\x04\N\n\x8E\x13\x94 \x03\x84\x04\N\v\x8C\b\
    \x89\x06\x87\a\x88\x13\x94\x12\x93 \a\x88\0\x81\x15\x96\x04\N \x15\x96\b\x89\x0E\
    \x8F\v\x8C\x04\N\n\x8E\x13\x94 \x04\N\n\x8E\x03\x84\x12\x93'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073320
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76wf1i1u_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp76wf1i1u_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp76wf1i1u_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76wf1i1u_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp76wf1i1u_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp76wf1i1u_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 'a' +\
    \ 'A')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4xxf6pfl_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == 'a' {\n            result += 'A'\n        } else if letter ==\
    \ 'A' {\n            result += 'a'\n        } else {\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgo7taoay_test.go:15:13: invalid operation: result += ''A'' (mismatched
    types string and untyped rune)

    /tmp/tmpgo7taoay_test.go:17:13: invalid operation: result += ''a'' (mismatched
    types string and untyped rune)

    /tmp/tmpgo7taoay_test.go:19:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 'a' +\
    \ 'A')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4xxf6pfl_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 'a' +\
    \ 'A')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4xxf6pfl_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76wf1i1u_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp76wf1i1u_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp76wf1i1u_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmplpa51l84_test.go:38: expected 'hELLO!', got 'HELLO!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmplpa51l84_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'THESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073320
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 'a' +\
    \ 'A')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4xxf6pfl_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]rune(char)) - 'a'\
    \ + 'A'\n        } else {\n            result += string([]rune(char)) - 'A' +\
    \ 'a'\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp962uso12_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmp962uso12_test.go:17:37: cannot convert char (variable of type rune) to
    type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]rune(char)) - 'a'\
    \ + 'A'\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppb5d9xgm_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmppb5d9xgm_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 'a' +\
    \ 'A')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4xxf6pfl_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]rune(char)) - 'a'\
    \ + 'A'\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppb5d9xgm_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmppb5d9xgm_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 'a')\
    \ + string(char - 'A')\n        } else {\n            result += char\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3e331lmu_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76wf1i1u_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp76wf1i1u_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp76wf1i1u_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char - 'a' + 'A'\n     \
    \   } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkf5v3ss2_test.go:15:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmpkf5v3ss2_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76wf1i1u_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp76wf1i1u_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp76wf1i1u_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]rune(char)) - 'a'\
    \ + 'A'\n        } else {\n            result += string([]rune(char)) - 'A' +\
    \ 'a'\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp962uso12_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmp962uso12_test.go:17:37: cannot convert char (variable of type rune) to
    type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ + 'A' - 'a')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wdf9u5y_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]byte{char - 'a',\
    \ char})\n        } else {\n            result += string([]byte{char})\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpttxk7dwa_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpttxk7dwa_test.go:15:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpttxk7dwa_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 'a')\
    \ + string(char - 'A')\n        } else {\n            result += char\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3e331lmu_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == 'a' {\n            result += 'A'\n        } else if letter ==\
    \ 'b' {\n            result += 'B'\n        } else if letter == 'c' {\n      \
    \      result += 'C'\n        } else if letter == 'd' {\n            result +=\
    \ 'D'\n        } else if letter == 'e' {\n            result += 'E'\n        }\
    \ else if letter == 'f' {\n            result += 'F'\n        } else if letter\
    \ == 'g' {\n            result += 'G'\n        } else if letter == 'h' {\n   \
    \         result += 'H'\n        } else if letter == 'i' {\n            result\
    \ += 'I'\n        } else if letter == 'j' {\n            result += 'J'\n     \
    \   } else if letter == 'k' {\n            result += 'K'\n        } else if letter\
    \ == 'l' {\n            result += 'L'\n        } else if letter == 'm' {\n   \
    \         result += 'M'\n        } else if letter == 'n' {\n            result\
    \ += 'N'\n        } else if letter == 'o' {\n            result += 'O'\n     \
    \   } else if letter == 'p' {\n            result += 'P'\n        } else if letter\
    \ == 'q' {\n            result += 'Q'\n        } else if letter == 'r' {\n   \
    \         result += 'R'\n        } else if letter == 's' {\n            result\
    \ += 'S'\n        } else if letter == 't' {\n            result += 'T'\n     \
    \   } else if letter == 'u' {\n            result += 'U'\n        } else if letter\
    \ == 'v' {\n            result += 'V'\n        } else if letter == 'w' {\n   \
    \         result += 'W'\n        } else if letter == 'x' {\n            result\
    \ += 'X'\n        } else if letter == 'y' {\n            result += 'Y'\n     \
    \   } else if letter == 'z' {\n            result += 'Z'\n        } else {\n \
    \           result += letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpitlpq9dc_test.go:15:13: invalid operation: result += ''A'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:17:13: invalid operation: result += ''B'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:19:13: invalid operation: result += ''C'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:21:13: invalid operation: result += ''D'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:23:13: invalid operation: result += ''E'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:25:13: invalid operation: result += ''F'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:27:13: invalid operation: result += ''G'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:29:13: invalid operation: result += ''H'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:31:13: invalid operation: result += ''I'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:33:13: invalid operation: result += ''J'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:33:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]rune(char)) - 'a'\
    \ + 'A'\n        } else {\n            result += string([]rune(char)) - 'A' +\
    \ 'a'\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp962uso12_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmp962uso12_test.go:17:37: cannot convert char (variable of type rune) to
    type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 'a')\
    \ + string(char - 'A')\n        } else {\n            result += char\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3e331lmu_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]byte{char - 'a',\
    \ char})\n        } else {\n            result += string([]byte{char})\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpttxk7dwa_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpttxk7dwa_test.go:15:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpttxk7dwa_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]byte{byte(char)})\n\
    \        } else {\n            result += string([]byte{byte(char + 32)})\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n \
    \ candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpipyz__tj_test.go:38: expected 'hELLO!', got 'helloA'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpipyz__tj_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'these@violent@delights@have@violent@ends'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 'a')\
    \ + string(char + 'A' - 'a')\n        } else {\n            result += char\n \
    \       }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb4h7epld_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, letter := range myString {\n   \
    \     if letter == 'a' {\n            result = 'A'\n        } else if letter ==\
    \ 'b' {\n            result = 'B'\n        } else if letter == 'c' {\n       \
    \     result = 'C'\n        } else if letter == 'd' {\n            result = 'D'\n\
    \        } else if letter == 'e' {\n            result = 'E'\n        } else if\
    \ letter == 'f' {\n            result = 'F'\n        } else if letter == 'g' {\n\
    \            result = 'G'\n        } else if letter == 'h' {\n            result\
    \ = 'H'\n        } else if letter == 'i' {\n            result = 'I'\n       \
    \ } else if letter == 'j' {\n            result = 'J'\n        } else if letter\
    \ == 'k' {\n            result = 'K'\n        } else if letter == 'l' {\n    \
    \        result = 'L'\n        } else if letter == 'm' {\n            result =\
    \ 'M'\n        } else if letter == 'n' {\n            result = 'N'\n        }\
    \ else if letter == 'o' {\n            result = 'O'\n        } else if letter\
    \ == 'p' {\n            result = 'P'\n        } else if letter == 'q' {\n    \
    \        result = 'Q'\n        } else if letter == 'r' {\n            result =\
    \ 'R'\n        } else if letter == 's' {\n            result = 'S'\n        }\
    \ else if letter == 't' {\n            result = 'T'\n        } else if letter\
    \ == 'u' {\n            result = 'U'\n        } else if letter == 'v' {\n    \
    \        result = 'V'\n        } else if letter == 'w' {\n            result =\
    \ 'W'\n        } else if letter == 'x' {\n            result = 'X'\n        }\
    \ else if letter == 'y' {\n            result = 'Y'\n        } else if letter\
    \ == 'z' {\n            result = 'Z'\n        }\n    }\n    return result\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvqga1xg4_test.go:15:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:17:22: cannot use ''B'' (untyped rune constant 66) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:19:22: cannot use ''C'' (untyped rune constant 67) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:21:22: cannot use ''D'' (untyped rune constant 68) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:23:22: cannot use ''E'' (untyped rune constant 69) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:25:22: cannot use ''F'' (untyped rune constant 70) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:27:22: cannot use ''G'' (untyped rune constant 71) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:29:22: cannot use ''H'' (untyped rune constant 72) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:31:22: cannot use ''I'' (untyped rune constant 73) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:33:22: cannot use ''J'' (untyped rune constant 74) as
    string value in assignment

    /tmp/tmpvqga1xg4_test.go:33:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == 'a' {\n            result += \"A\"\n        } else if letter ==\
    \ 'b' {\n            result += \"B\"\n        } else if letter == 'c' {\n    \
    \        result += \"C\"\n        } else if letter == 'd' {\n            result\
    \ += \"D\"\n        } else if letter == 'e' {\n            result += \"E\"\n \
    \       } else if letter == 'f' {\n            result += \"F\"\n        } else\
    \ if letter == 'g' {\n            result += \"G\"\n        } else if letter ==\
    \ 'h' {\n            result += \"H\"\n        } else if letter == 'i' {\n    \
    \        result += \"I\"\n        } else if letter == 'j' {\n            result\
    \ += \"J\"\n        } else if letter == 'k' {\n            result += \"K\"\n \
    \       } else if letter == 'l' {\n            result += \"L\"\n        } else\
    \ if letter == 'm' {\n            result += \"M\"\n        } else if letter ==\
    \ 'n' {\n            result += \"N\"\n        } else if letter == 'o' {\n    \
    \        result += \"O\"\n        } else if letter == 'p' {\n            result\
    \ += \"P\"\n        } else if letter == 'q' {\n            result += \"Q\"\n \
    \       } else if letter == 'r' {\n            result += \"R\"\n        } else\
    \ if letter == 's' {\n            result += \"S\"\n        } else if letter ==\
    \ 't' {\n            result += \"T\"\n        } else if letter == 'u' {\n    \
    \        result += \"U\"\n        } else if letter == 'v' {\n            result\
    \ += \"V\"\n        } else if letter == 'w' {\n            result += \"W\"\n \
    \       } else if letter == 'x' {\n            result += \"X\"\n        } else\
    \ if letter == 'y' {\n            result += \"Y\"\n        } else if letter ==\
    \ 'z' {\n            result += \"Z\"\n        } else {\n            result +=\
    \ letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb0rs_d1n_test.go:67:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == 'a' {\n            result += 'A'\n        } else {\n         \
    \   result += letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp78v6ofsv_test.go:15:13: invalid operation: result += ''A'' (mismatched
    types string and untyped rune)

    /tmp/tmp78v6ofsv_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76wf1i1u_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp76wf1i1u_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp76wf1i1u_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]rune(char)) - 'a'\
    \ + 'A'\n        } else {\n            result += string([]rune(char)) - 'A' +\
    \ 'a'\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp962uso12_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmp962uso12_test.go:17:37: cannot convert char (variable of type rune) to
    type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76wf1i1u_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp76wf1i1u_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp76wf1i1u_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, letter := range myString {\n\
    \        if letter == 'a' {\n            newString += 'A'\n        } else if letter\
    \ == 'b' {\n            newString += 'B'\n        } else if letter == 'c' {\n\
    \            newString += 'C'\n        } else if letter == 'd' {\n           \
    \ newString += 'D'\n        } else if letter == 'e' {\n            newString +=\
    \ 'E'\n        } else if letter == 'f' {\n            newString += 'F'\n     \
    \   } else if letter == 'g' {\n            newString += 'G'\n        } else if\
    \ letter == 'h' {\n            newString += 'H'\n        } else if letter == 'i'\
    \ {\n            newString += 'I'\n        } else if letter == 'j' {\n       \
    \     newString += 'J'\n        } else if letter == 'k' {\n            newString\
    \ += 'K'\n        } else if letter == 'l' {\n            newString += 'L'\n  \
    \      } else if letter == 'm' {\n            newString += 'M'\n        } else\
    \ if letter == 'n' {\n            newString += 'N'\n        } else if letter ==\
    \ 'o' {\n            newString += 'O'\n        } else if letter == 'p' {\n   \
    \         newString += 'P'\n        } else if letter == 'q' {\n            newString\
    \ += 'Q'\n        } else if letter == 'r' {\n            newString += 'R'\n  \
    \      } else if letter == 's' {\n            newString += 'S'\n        } else\
    \ if letter == 't' {\n            newString += 'T'\n        } else if letter ==\
    \ 'u' {\n            newString += 'U'\n        } else if letter == 'v' {\n   \
    \         newString += 'V'\n        } else if letter == 'w' {\n            newString\
    \ += 'W'\n        } else if letter == 'x' {\n            newString += 'X'\n  \
    \      } else if letter == 'y' {\n            newString += 'Y'\n        } else\
    \ if letter == 'z' {\n            newString += 'Z'\n        } else {\n       \
    \     newString += letter\n        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprd_4ejam_test.go:15:13: invalid operation: newString += ''A'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:17:13: invalid operation: newString += ''B'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:19:13: invalid operation: newString += ''C'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:21:13: invalid operation: newString += ''D'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:23:13: invalid operation: newString += ''E'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:25:13: invalid operation: newString += ''F'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:27:13: invalid operation: newString += ''G'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:29:13: invalid operation: newString += ''H'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:31:13: invalid operation: newString += ''I'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:33:13: invalid operation: newString += ''J'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:33:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]rune(char)-[]rune('a'))\n\
    \        } else {\n            result += string([]rune(char)-[]rune('A'))\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7vnfaf_3_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmp7vnfaf_3_test.go:15:50: cannot convert ''a'' (untyped rune constant 97)
    to type []rune

    /tmp/tmp7vnfaf_3_test.go:17:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmp7vnfaf_3_test.go:17:50: cannot convert ''A'' (untyped rune constant 65)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter.toUpper()\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuuomtgj5_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpuuomtgj5_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpuuomtgj5_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, letter := range myString {\n   \
    \     if letter == 'a' {\n            result = 'A'\n        } else if letter ==\
    \ 'b' {\n            result = 'B'\n        } else if letter == 'c' {\n       \
    \     result = 'C'\n        } else if letter == 'd' {\n            result = 'D'\n\
    \        } else if letter == 'e' {\n            result = 'E'\n        } else if\
    \ letter == 'f' {\n            result = 'F'\n        } else if letter == 'g' {\n\
    \            result = 'G'\n        } else if letter == 'h' {\n            result\
    \ = 'H'\n        } else if letter == 'i' {\n            result = 'I'\n       \
    \ } else if letter == 'j' {\n            result = 'J'\n        } else if letter\
    \ == 'k' {\n            result = 'K'\n        } else if letter == 'l' {\n    \
    \        result = 'L'\n        } else if letter == 'm' {\n            result =\
    \ 'M'\n        } else if letter == 'n' {\n            result = 'N'\n        }\
    \ else if letter == 'o' {\n            result = 'O'\n        } else if letter\
    \ == 'p' {\n            result = 'P'\n        } else if letter == 'q' {\n    \
    \        result = 'Q'\n        } else if letter == 'r' {\n            result =\
    \ 'R'\n        } else if letter == 's' {\n            result = 'S'\n        }\
    \ else if letter == 't' {\n            result = 'T'\n        } else if letter\
    \ == 'u' {\n            result = 'U'\n        } else if letter == 'v' {\n    \
    \        result = 'V'\n        } else if letter == 'w' {\n            result =\
    \ 'W'\n        } else if letter == 'x' {\n            result = 'X'\n        }\
    \ else if letter == 'y' {\n            result = 'Y'\n        } else if letter\
    \ == 'z' {\n            result = 'Z'\n        } else {\n            result = letter\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzuuj85k2_test.go:15:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:17:22: cannot use ''B'' (untyped rune constant 66) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:19:22: cannot use ''C'' (untyped rune constant 67) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:21:22: cannot use ''D'' (untyped rune constant 68) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:23:22: cannot use ''E'' (untyped rune constant 69) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:25:22: cannot use ''F'' (untyped rune constant 70) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:27:22: cannot use ''G'' (untyped rune constant 71) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:29:22: cannot use ''H'' (untyped rune constant 72) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:31:22: cannot use ''I'' (untyped rune constant 73) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:33:22: cannot use ''J'' (untyped rune constant 74) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:33:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, letter := range myString {\n\
    \        if letter == 'a' {\n            newString += 'A'\n        } else if letter\
    \ == 'b' {\n            newString += 'B'\n        } else if letter == 'c' {\n\
    \            newString += 'C'\n        } else if letter == 'd' {\n           \
    \ newString += 'D'\n        } else if letter == 'e' {\n            newString +=\
    \ 'E'\n        } else if letter == 'f' {\n            newString += 'F'\n     \
    \   } else if letter == 'g' {\n            newString += 'G'\n        } else if\
    \ letter == 'h' {\n            newString += 'H'\n        } else if letter == 'i'\
    \ {\n            newString += 'I'\n        } else if letter == 'j' {\n       \
    \     newString += 'J'\n        } else if letter == 'k' {\n            newString\
    \ += 'K'\n        } else if letter == 'l' {\n            newString += 'L'\n  \
    \      } else if letter == 'm' {\n            newString += 'M'\n        } else\
    \ if letter == 'n' {\n            newString += 'N'\n        } else if letter ==\
    \ 'o' {\n            newString += 'O'\n        } else if letter == 'p' {\n   \
    \         newString += 'P'\n        } else if letter == 'q' {\n            newString\
    \ += 'Q'\n        } else if letter == 'r' {\n            newString += 'R'\n  \
    \      } else if letter == 's' {\n            newString += 'S'\n        } else\
    \ if letter == 't' {\n            newString += 'T'\n        } else if letter ==\
    \ 'u' {\n            newString += 'U'\n        } else if letter == 'v' {\n   \
    \         newString += 'V'\n        } else if letter == 'w' {\n            newString\
    \ += 'W'\n        } else if letter == 'x' {\n            newString += 'X'\n  \
    \      } else if letter == 'y' {\n            newString += 'Y'\n        } else\
    \ if letter == 'z' {\n            newString += 'Z'\n        } else {\n       \
    \     newString += letter\n        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprd_4ejam_test.go:15:13: invalid operation: newString += ''A'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:17:13: invalid operation: newString += ''B'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:19:13: invalid operation: newString += ''C'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:21:13: invalid operation: newString += ''D'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:23:13: invalid operation: newString += ''E'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:25:13: invalid operation: newString += ''F'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:27:13: invalid operation: newString += ''G'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:29:13: invalid operation: newString += ''H'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:31:13: invalid operation: newString += ''I'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:33:13: invalid operation: newString += ''J'' (mismatched
    types string and untyped rune)

    /tmp/tmprd_4ejam_test.go:33:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, letter := range myString {\n   \
    \     if letter == 'a' {\n            result = 'A'\n        } else {\n       \
    \     result = letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_l4sp1p9_test.go:15:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmp_l4sp1p9_test.go:17:22: cannot use letter (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ + 'A' - 'a')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wdf9u5y_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]byte{char - 'a',\
    \ char})\n        } else {\n            result += string([]byte{char})\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpttxk7dwa_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpttxk7dwa_test.go:15:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpttxk7dwa_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]byte{char - 32,\
    \ char + 32})\n        } else {\n            result += string([]byte{char})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwa0rt1am_test.go:15:37: cannot use char - 32 (value of type rune) as type
    byte in array or slice literal

    /tmp/tmpwa0rt1am_test.go:15:48: cannot use char + 32 (value of type rune) as type
    byte in array or slice literal

    /tmp/tmpwa0rt1am_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var myStringLower string\n    var myStringUpper string\n\n   \
    \ for i := 0; i < len(myString); i++ {\n        if myString[i] >= 'a' && myString[i]\
    \ <= 'z' {\n            myStringLower += myString[i] - 'a'\n        } else {\n\
    \            myStringLower += myString[i]\n        }\n    }\n\n    for i := 0;\
    \ i < len(myStringLower); i++ {\n        if myStringLower[i] >= 'A' && myStringLower[i]\
    \ <= 'Z' {\n            myStringUpper += myStringLower[i] - 'A'\n        } else\
    \ {\n            myStringUpper += myStringLower[i]\n        }\n    }\n\n    return\
    \ myStringUpper\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp74eprx7q_test.go:17:13: invalid operation: myStringLower += myString[i]
    - ''a'' (mismatched types string and byte)

    /tmp/tmp74eprx7q_test.go:19:13: invalid operation: myStringLower += myString[i]
    (mismatched types string and byte)

    /tmp/tmp74eprx7q_test.go:25:13: invalid operation: myStringUpper += myStringLower[i]
    - ''A'' (mismatched types string and byte)

    /tmp/tmp74eprx7q_test.go:27:13: invalid operation: myStringUpper += myStringLower[i]
    (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char - 32\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk2rg32qf_test.go:15:13: invalid operation: result += char - 32 (mismatched
    types string and rune)

    /tmp/tmpk2rg32qf_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 'a' +\
    \ 'A')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4xxf6pfl_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76wf1i1u_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp76wf1i1u_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp76wf1i1u_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, letter := range myString {\n   \
    \     if letter == 'a' {\n            result = 'A'\n        } else {\n       \
    \     result = letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_l4sp1p9_test.go:15:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmp_l4sp1p9_test.go:17:22: cannot use letter (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]rune(char)) - 'a'\n\
    \        } else {\n            result += string([]rune(char)) + ('a' - 'A')\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5lciyw4m_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmp5lciyw4m_test.go:17:37: cannot convert char (variable of type rune) to
    type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string([]byte{char - 'a',\
    \ char})\n        } else {\n            result += string([]byte{char})\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpttxk7dwa_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpttxk7dwa_test.go:15:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpttxk7dwa_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76wf1i1u_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp76wf1i1u_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp76wf1i1u_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += char + ('A' - 'a')\n   \
    \     } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkw47pt9_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpgkw47pt9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == letter.toUpper() {\n            result += letter.toLower()\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76wf1i1u_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp76wf1i1u_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp76wf1i1u_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a' + 'A')\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0yatxwd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result += string(char - 'a') + string(char\
    \ - 'A')\n        } else {\n            result += char\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1s8682b_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, letter := range myString {\n   \
    \     if letter == 'a' {\n            result = 'A'\n        } else if letter ==\
    \ 'b' {\n            result = 'B'\n        } else if letter == 'c' {\n       \
    \     result = 'C'\n        } else if letter == 'd' {\n            result = 'D'\n\
    \        } else if letter == 'e' {\n            result = 'E'\n        } else if\
    \ letter == 'f' {\n            result = 'F'\n        } else if letter == 'g' {\n\
    \            result = 'G'\n        } else if letter == 'h' {\n            result\
    \ = 'H'\n        } else if letter == 'i' {\n            result = 'I'\n       \
    \ } else if letter == 'j' {\n            result = 'J'\n        } else if letter\
    \ == 'k' {\n            result = 'K'\n        } else if letter == 'l' {\n    \
    \        result = 'L'\n        } else if letter == 'm' {\n            result =\
    \ 'M'\n        } else if letter == 'n' {\n            result = 'N'\n        }\
    \ else if letter == 'o' {\n            result = 'O'\n        } else if letter\
    \ == 'p' {\n            result = 'P'\n        } else if letter == 'q' {\n    \
    \        result = 'Q'\n        } else if letter == 'r' {\n            result =\
    \ 'R'\n        } else if letter == 's' {\n            result = 'S'\n        }\
    \ else if letter == 't' {\n            result = 'T'\n        } else if letter\
    \ == 'u' {\n            result = 'U'\n        } else if letter == 'v' {\n    \
    \        result = 'V'\n        } else if letter == 'w' {\n            result =\
    \ 'W'\n        } else if letter == 'x' {\n            result = 'X'\n        }\
    \ else if letter == 'y' {\n            result = 'Y'\n        } else if letter\
    \ == 'z' {\n            result = 'Z'\n        } else {\n            result = letter\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzuuj85k2_test.go:15:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:17:22: cannot use ''B'' (untyped rune constant 66) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:19:22: cannot use ''C'' (untyped rune constant 67) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:21:22: cannot use ''D'' (untyped rune constant 68) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:23:22: cannot use ''E'' (untyped rune constant 69) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:25:22: cannot use ''F'' (untyped rune constant 70) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:27:22: cannot use ''G'' (untyped rune constant 71) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:29:22: cannot use ''H'' (untyped rune constant 72) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:31:22: cannot use ''I'' (untyped rune constant 73) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:33:22: cannot use ''J'' (untyped rune constant 74) as
    string value in assignment

    /tmp/tmpzuuj85k2_test.go:33:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    result := \"\"\n    for _, letter := range myString {\n      \
    \  if letter == 'a' {\n            result += 'A'\n        } else if letter ==\
    \ 'b' {\n            result += 'B'\n        } else if letter == 'c' {\n      \
    \      result += 'C'\n        } else if letter == 'd' {\n            result +=\
    \ 'D'\n        } else if letter == 'e' {\n            result += 'E'\n        }\
    \ else if letter == 'f' {\n            result += 'F'\n        } else if letter\
    \ == 'g' {\n            result += 'G'\n        } else if letter == 'h' {\n   \
    \         result += 'H'\n        } else if letter == 'i' {\n            result\
    \ += 'I'\n        } else if letter == 'j' {\n            result += 'J'\n     \
    \   } else if letter == 'k' {\n            result += 'K'\n        } else if letter\
    \ == 'l' {\n            result += 'L'\n        } else if letter == 'm' {\n   \
    \         result += 'M'\n        } else if letter == 'n' {\n            result\
    \ += 'N'\n        } else if letter == 'o' {\n            result += 'O'\n     \
    \   } else if letter == 'p' {\n            result += 'P'\n        } else if letter\
    \ == 'q' {\n            result += 'Q'\n        } else if letter == 'r' {\n   \
    \         result += 'R'\n        } else if letter == 's' {\n            result\
    \ += 'S'\n        } else if letter == 't' {\n            result += 'T'\n     \
    \   } else if letter == 'u' {\n            result += 'U'\n        } else if letter\
    \ == 'v' {\n            result += 'V'\n        } else if letter == 'w' {\n   \
    \         result += 'W'\n        } else if letter == 'x' {\n            result\
    \ += 'X'\n        } else if letter == 'y' {\n            result += 'Y'\n     \
    \   } else if letter == 'z' {\n            result += 'Z'\n        } else {\n \
    \           result += letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpitlpq9dc_test.go:15:13: invalid operation: result += ''A'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:17:13: invalid operation: result += ''B'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:19:13: invalid operation: result += ''C'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:21:13: invalid operation: result += ''D'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:23:13: invalid operation: result += ''E'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:25:13: invalid operation: result += ''F'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:27:13: invalid operation: result += ''G'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:29:13: invalid operation: result += ''H'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:31:13: invalid operation: result += ''I'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:33:13: invalid operation: result += ''J'' (mismatched
    types string and untyped rune)

    /tmp/tmpitlpq9dc_test.go:33:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
