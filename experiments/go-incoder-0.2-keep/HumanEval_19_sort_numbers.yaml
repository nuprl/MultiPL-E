name: HumanEval_19_sort_numbers
language: go_test.go
prompt: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid\
  \ choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'\
  \ and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n\
  // >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers\
  \ string) string {\n"
tests: "func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
  \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
  \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five\
  \ zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n\
  \     { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
  \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = int(numbers[i])\n\
    \    }\n    sort.Ints(numbers)\n    numbers := strings.Join(numbers, \" \")\n\
    \    return numbers\n}\n", "    numbers := strings.Split(numbers, \" \")\n   \
    \ sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n", "    numbers\
    \ = strings.TrimSpace(numbers)\n    numbers := strings.Split(numbers, \" \")\n\
    \    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n", "    numbers := strings.Split(numbers, \" \")\n    numbers :=\
    \ make([]string, len(numbers))\n    for i, number := range numbers {\n       \
    \ numbers[i] = number\n    }\n    sort.Strings(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n", "    numbers := strings.Split(numbers, \" \")\n    numbers :=\
    \ make([]string, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n    \
    \    numbers[i] = fmt.Sprintf(\"%v\", i)\n    }\n    sort.Strings(numbers)\n \
    \   return strings.Join(numbers, \" \")\n}\n", "    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n", "    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \",\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    ", "    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n", "    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n", "    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n", "    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n", "    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \"\\r\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    ", "    numbers = strings.TrimSpace(numbers)\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n", "    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n", "    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n", "    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n", "    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n   \
    \ return strings.Join(numbers, \" \")\n}\n", "    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n", "    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n", "    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \",\")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \"\\r\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
