name: HumanEval_111_histogram
language: go_test.go
prompt: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Given a string representing a space separated lowercase letters, return a dictionary\n\
  // of the letter with the most repetition and containing the corresponding count.\n\
  // If several letters have the same occurrence, return all of them.\n// Example:\n\
  // histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a':\
  \ 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b\
  \ b a') == {'b': 4}\n// histogram('') == {}\nfunc histogram(test string) map[string]int\
  \ {\n"
tests: "func TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\"\
  : 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
  a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
  a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
  r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
  \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
  \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n\
  \     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual: candidate(\"\
  a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    letters := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        if _, ok := letters[letter]; !ok {\n            letters[letter] =\
    \ 1\n        } else {\n            letters[letter]++\n        }\n    }\n    return\
    \ letters\n}\n", "    letters := strings.Split(test, \" \")\n    letterMap :=\
    \ make(map[string]int)\n    for _, letter := range letters {\n        if letterMap[letter]\
    \ == nil {\n            letterMap[letter] = 1\n        } else {\n            letterMap[letter]++\n\
    \        }\n    }\n    return letterMap\n}\n", "    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n", "    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := strings.Split(test, \" \")\n\
    \    histogram := make(map[string]int)\n    for _, letter := range letters {\n\
    \        histogram[letter]++\n    }\n    return histogram\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := strings.Split(test, \" \")\n    histogram := make(map[string]int)\n    for\
    \ _, letter := range letters {\n        histogram[letter]++\n    }\n    return\
    \ histogram\n}\n", "    letters := make(map[string]int)\n    for _, letter :=\
    \ range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n    return\
    \ letters\n}\n", "    letters := strings.Split(test, \" \")\n    histogram :=\
    \ make(map[string]int)\n    for _, letter := range letters {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n", "    letters := strings.Split(test, \" \"\
    )\n    histogram := make(map[string]int)\n    for _, letter := range letters {\n\
    \        histogram[letter]++\n    }\n    return histogram\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        if _, ok := letters[letter]; !ok {\n            letters[letter] =\
    \ 1\n        } else {\n            letters[letter]++\n        }\n    }\n    return\
    \ letters\n}\n", "    letters := make(map[string]int)\n    for _, letter := range\
    \ strings.Split(test, \" \") {\n        if _, ok := letters[letter]; !ok {\n \
    \           letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n", "    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        if _, ok := letters[letter]; !ok {\n            letters[letter] =\
    \ 1\n        } else {\n            letters[letter]++\n        }\n    }\n    return\
    \ letters\n}\n", "    letters := make(map[string]int)\n    for _, letter := range\
    \ strings.Split(test, \" \") {\n        letters[letter]++\n    }\n    return letters\n\
    }\n", "    letters := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        if letters[letter] == 0 {\n            letters[letter] = 1\n    \
    \    } else {\n            letters[letter]++\n        }\n    }\n    return letters\n\
    }\n", "    letters := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := strings.Split(test, \" \")\n    histogram := make(map[string]int)\n    for\
    \ _, letter := range letters {\n        histogram[letter]++\n    }\n    return\
    \ histogram\n}\n", "    letters := make(map[string]int)\n    for _, letter :=\
    \ range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n    return\
    \ letters\n}\n", "    letters := strings.Split(test, \" \")\n    histogram :=\
    \ make(map[string]int)\n    for _, letter := range letters {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n", "    letters := make(map[string]int)\n   \
    \ for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        if _, ok := letters[letter];\
    \ !ok {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n", "    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := strings.Split(test, \" \")\n\
    \    histogram := make(map[string]int)\n    for _, letter := range letters {\n\
    \        histogram[letter]++\n    }\n    return histogram\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        if _, ok := letters[letter]; !ok {\n            letters[letter] =\
    \ 1\n        } else {\n            letters[letter]++\n        }\n    }\n    return\
    \ letters\n}\n", "    letters := make(map[string]int)\n    for _, letter := range\
    \ strings.Split(test, \" \") {\n        letters[letter]++\n    }\n    return letters\n\
    }\n", "    letters := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := strings.Split(test, \" \")\n    histogram := make(map[string]int)\n    for\
    \ _, letter := range letters {\n        histogram[letter]++\n    }\n    return\
    \ histogram\n}\n", "    letters := make(map[string]int)\n    for _, letter :=\
    \ range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n    return\
    \ letters\n}\n", "    letters := make(map[string]int)\n    for _, letter := range\
    \ strings.Split(test, \" \") {\n        if _, ok := letters[letter]; !ok {\n \
    \           letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n", "    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        if _, ok := letters[letter];\
    \ !ok {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n", "    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := strings.Split(test, \" \")\n\
    \    histogram := make(map[string]int)\n    for _, letter := range letters {\n\
    \        histogram[letter]++\n    }\n    return histogram\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        if _, ok := letters[letter]; ok {\n            letters[letter]++\n\
    \        } else {\n            letters[letter] = 1\n        }\n    }\n    return\
    \ letters\n}\n", "    letters := make(map[string]int)\n    for _, letter := range\
    \ strings.Split(test, \" \") {\n        letters[letter]++\n    }\n    return letters\n\
    }\n", "    letters := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        if letters[letter] == 0 {\n            letters[letter] = 1\n    \
    \    } else {\n            letters[letter]++\n        }\n    }\n    return letters\n\
    }\n", "    letters := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        if letters[letter] == 0 {\n            letters[letter] = 1\n    \
    \    } else {\n            letters[letter]++\n        }\n    }\n    return letters\n\
    }\n", "    letters := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        if _, ok := letters[letter]; !ok {\n            letters[letter]\
    \ = 1\n        } else {\n            letters[letter]++\n        }\n    }\n   \
    \ return letters\n}\n", "    letters := make(map[string]int)\n    for _, letter\
    \ := range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n  \
    \  return letters\n}\n", "    letters := make(map[string]int)\n    for _, letter\
    \ := range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n  \
    \  return letters\n}\n", "    letters := make(map[string]int)\n    for _, letter\
    \ := range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n  \
    \  return letters\n}\n", "    letters := make(map[string]int)\n    for _, letter\
    \ := range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n  \
    \  return letters\n}\n", "    letters := make(map[string]int)\n    for _, letter\
    \ := range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n  \
    \  return letters\n}\n", "    letters := make(map[string]int)\n    for _, letter\
    \ := range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n  \
    \  return letters\n}\n", "    letters := make(map[string]int)\n    for _, letter\
    \ := range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n  \
    \  return letters\n}\n", "    letters := make(map[string]int)\n    for _, letter\
    \ := range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n  \
    \  return letters\n}\n", "    letters := strings.Split(test, \" \")\n    histogram\
    \ := make(map[string]int)\n    for _, letter := range letters {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n", "    letters := make(map[string]int)\n   \
    \ for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        if _, ok := letters[letter];\
    \ !ok {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n", "    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        if _, ok := letters[letter];\
    \ !ok {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n", "    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := strings.Split(test, \" \")\n\
    \    histogram := make(map[string]int)\n    for _, letter := range letters {\n\
    \        histogram[letter]++\n    }\n    return histogram\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        if _, ok := letters[letter]; !ok {\n            letters[letter] =\
    \ 1\n        } else {\n            letters[letter]++\n        }\n    }\n    return\
    \ letters\n}\n", "    letters := make(map[string]int)\n    for _, letter := range\
    \ strings.Split(test, \" \") {\n        letters[letter]++\n    }\n    return letters\n\
    }\n", "    letters := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        if letters[letter] == 0 {\n            letters[letter] = 1\n    \
    \    } else {\n            letters[letter]++\n        }\n    }\n    return letters\n\
    }\n", "    letters := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        if _, ok := letters[letter]; !ok {\n            letters[letter] =\
    \ 1\n        } else {\n            letters[letter]++\n        }\n    }\n    return\
    \ letters\n}\n", "    letters := make(map[string]int)\n    for _, letter := range\
    \ strings.Split(test, \" \") {\n        if _, ok := letters[letter]; !ok {\n \
    \           letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n", "    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := strings.Split(test, \" \")\n\
    \    histogram := make(map[string]int)\n    for _, letter := range letters {\n\
    \        histogram[letter]++\n    }\n    return histogram\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := strings.Split(test, \" \")\n    letterCount := make(map[string]int)\n   \
    \ for _, letter := range letters {\n        letterCount[letter]++\n    }\n   \
    \ return letterCount\n}\n", "    letters := make(map[string]int)\n    for _, letter\
    \ := range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n  \
    \  return letters\n}\n", "    letters := make(map[string]int)\n    for _, letter\
    \ := range strings.Split(test, \" \") {\n        if _, ok := letters[letter];\
    \ !ok {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n", "    letters := strings.Split(test,\
    \ \" \")\n    histogram := make(map[string]int)\n    for _, letter := range letters\
    \ {\n        histogram[letter]++\n    }\n    return histogram\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        if _, ok := letters[letter]; !ok {\n            letters[letter] =\
    \ 1\n        } else {\n            letters[letter]++\n        }\n    }\n    return\
    \ letters\n}\n", "    letters := make(map[string]int)\n    for _, letter := range\
    \ strings.Split(test, \" \") {\n        letters[letter]++\n    }\n    return letters\n\
    }\n", "    letters := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        if _, ok := letters[letter]; !ok {\n            letters[letter] =\
    \ 1\n        } else {\n            letters[letter]++\n        }\n    }\n    return\
    \ letters\n}\n", "    letters := make(map[string]int)\n    for _, letter := range\
    \ strings.Split(test, \" \") {\n        if letters[letter] == 0 {\n          \
    \  letters[letter] = 1\n        } else {\n            letters[letter]++\n    \
    \    }\n    }\n    return letters\n}\n", "    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := strings.Split(test, \" \")\n\
    \    histogram := make(map[string]int)\n    for _, letter := range letters {\n\
    \        histogram[letter]++\n    }\n    return histogram\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        if letters[letter] == 0 {\n            letters[letter] = 1\n    \
    \    } else {\n            letters[letter]++\n        }\n    }\n    return letters\n\
    }\n", "    letters := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        if _, ok := letters[letter]; !ok {\n            letters[letter]\
    \ = 1\n        } else {\n            letters[letter]++\n        }\n    }\n   \
    \ return letters\n}\n", "    letters := make(map[string]int)\n    for _, letter\
    \ := range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n  \
    \  return letters\n}\n", "    letters := make(map[string]int)\n    for _, letter\
    \ := range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n  \
    \  return letters\n}\n", "    letters := make(map[string]int)\n    for _, letter\
    \ := range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n  \
    \  return letters\n}\n", "    letters := make(map[string]int)\n    for _, letter\
    \ := range strings.Split(test, \" \") {\n        if letters[letter] == 0 {\n \
    \           letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n", "    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := strings.Split(test, \" \")\n\
    \    histogram := make(map[string]int)\n    for _, letter := range letters {\n\
    \        histogram[letter]++\n    }\n    return histogram\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := strings.Split(test, \" \")\n    histogram := make(map[string]int)\n    for\
    \ _, letter := range letters {\n        histogram[letter]++\n    }\n    return\
    \ histogram\n}\n", "    letters := make(map[string]int)\n    for _, letter :=\
    \ range strings.Split(test, \" \") {\n        if _, ok := letters[letter]; !ok\
    \ {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n", "    letters := strings.Split(test,\
    \ \" \")\n    histogram := map[string]int{}\n    for _, letter := range letters\
    \ {\n        if _, ok := histogram[letter]; !ok {\n            histogram[letter]\
    \ = 1\n        } else {\n            histogram[letter]++\n        }\n    }\n \
    \   return histogram\n}\n", "    letters := make(map[string]int)\n    for _, letter\
    \ := range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n  \
    \  return letters\n}\n", "    letters := strings.Split(test, \" \")\n    histogram\
    \ := make(map[string]int)\n    for _, letter := range letters {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n", "    letters := make(map[string]int)\n   \
    \ for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := make(map[string]int)\n    for\
    \ _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n", "    letters := strings.Split(test, \" \")\n\
    \    histogram := make(map[string]int)\n    for _, letter := range letters {\n\
    \        histogram[letter]++\n    }\n    return histogram\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := make(map[string]int)\n    for _, letter := range strings.Split(test, \" \"\
    ) {\n        if _, ok := letters[letter]; !ok {\n            letters[letter] =\
    \ 1\n        } else {\n            letters[letter]++\n        }\n    }\n    return\
    \ letters\n}\n", "    letters := make(map[string]int)\n    for _, letter := range\
    \ strings.Split(test, \" \") {\n        letters[letter]++\n    }\n    return letters\n\
    }\n", "    letters := make(map[string]int)\n    for _, letter := range strings.Split(test,\
    \ \" \") {\n        letters[letter]++\n    }\n    return letters\n}\n", "    letters\
    \ := strings.Split(test, \" \")\n    letterMap := make(map[string]int)\n    for\
    \ _, letter := range letters {\n        letterMap[letter]++\n    }\n    return\
    \ letterMap\n}\n", "    letters := make(map[string]int)\n    for _, letter :=\
    \ range strings.Split(test, \" \") {\n        letters[letter]++\n    }\n    return\
    \ letters\n}\n", "    letters := make(map[string]int)\n    for _, letter := range\
    \ strings.Split(test, \" \") {\n        letters[letter]++\n    }\n    return letters\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
